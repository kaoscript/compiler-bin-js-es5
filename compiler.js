// Generated by kaoscript 0.9.1
var __ks__ = require("@kaoscript/runtime");
var Dictionary = __ks__.Dictionary, KSHelper = __ks__.Helper, KSOperator = __ks__.Operator, KSType = __ks__.Type;
module.exports = function() {
	var metadata = require("../package.json");
	var fs = require("../src/fs.js");
	var path = require("path");
	var AssignmentOperatorKind = KSHelper.enum(Number, {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Quotient: 14,
		Subtraction: 15
	});
	var BinaryOperatorKind = KSHelper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Imply: 13,
		Inequality: 14,
		LessThan: 15,
		LessThanOrEqual: 16,
		Modulo: 17,
		Multiplication: 18,
		NullCoalescing: 19,
		Or: 20,
		Quotient: 21,
		Subtraction: 22,
		TypeCasting: 23,
		TypeEquality: 24,
		TypeInequality: 25,
		Xor: 26
	});
	var MacroElementKind = KSHelper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = KSHelper.enum(Number, {
		Abstract: 1,
		Array: 2,
		Async: 3,
		AutoEvaluate: 4,
		Autofill: 5,
		AutoTyping: 6,
		Computed: 7,
		Declarative: 8,
		Descending: 9,
		Disabled: 10,
		Final: 11,
		Immutable: 12,
		Internal: 13,
		Named: 14,
		Nullable: 15,
		Object: 16,
		Override: 17,
		Overwrite: 18,
		Private: 19,
		Protected: 20,
		Public: 21,
		Required: 22,
		Rest: 23,
		Sealed: 24,
		SetterAlias: 25,
		Static: 26,
		ThisAlias: 27
	});
	var NodeKind = KSHelper.enum(Number, {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		AttributeDeclaration: 6,
		AttributeExpression: 7,
		AttributeOperation: 8,
		AwaitExpression: 9,
		BinaryExpression: 10,
		BindingElement: 11,
		Block: 12,
		BreakStatement: 13,
		CallExpression: 14,
		CallMacroExpression: 15,
		CatchClause: 16,
		ClassDeclaration: 17,
		ClassName: 18,
		CommentBlock: 19,
		CommentLine: 20,
		ComparisonExpression: 21,
		ComputedPropertyName: 22,
		ConditionalExpression: 23,
		ContinueStatement: 24,
		CreateExpression: 25,
		CurryExpression: 26,
		DestroyStatement: 27,
		DiscloseDeclaration: 28,
		DoUntilStatement: 29,
		DoWhileStatement: 30,
		EnumDeclaration: 31,
		EnumExpression: 32,
		EnumMember: 33,
		ExclusionType: 34,
		ExportDeclaration: 35,
		ExportDeclarationSpecifier: 36,
		ExportExclusionSpecifier: 37,
		ExportNamedSpecifier: 38,
		ExportPropertiesSpecifier: 39,
		ExportWildcardSpecifier: 40,
		ExternDeclaration: 41,
		ExternOrRequireDeclaration: 42,
		FallthroughStatement: 43,
		FieldDeclaration: 44,
		ForFromStatement: 45,
		ForInStatement: 46,
		ForOfStatement: 47,
		ForRangeStatement: 48,
		FunctionDeclaration: 49,
		FunctionExpression: 50,
		FusionType: 51,
		Identifier: 52,
		IfExpression: 53,
		IfStatement: 54,
		ImplementDeclaration: 55,
		ImportArgument: 56,
		ImportDeclaration: 57,
		ImportDeclarator: 58,
		ImportExclusionSpecifier: 59,
		ImportNamespaceSpecifier: 60,
		ImportReference: 61,
		ImportSpecifier: 62,
		IncludeAgainDeclaration: 63,
		IncludeDeclaration: 64,
		LambdaExpression: 65,
		Literal: 66,
		MacroDeclaration: 67,
		MacroExpression: 68,
		MemberExpression: 69,
		MethodDeclaration: 70,
		MixinDeclaration: 71,
		Module: 72,
		MutatorDeclaration: 73,
		NamedArgument: 74,
		NamespaceDeclaration: 75,
		NumericExpression: 76,
		ObjectBinding: 77,
		ObjectExpression: 78,
		ObjectMember: 79,
		OmittedExpression: 80,
		Parameter: 81,
		PolyadicExpression: 82,
		PropertyDeclaration: 83,
		RegularExpression: 84,
		RequireDeclaration: 85,
		RequireOrExternDeclaration: 86,
		RequireOrImportDeclaration: 87,
		ReturnStatement: 88,
		SequenceExpression: 89,
		ShorthandProperty: 90,
		StructDeclaration: 91,
		StructField: 92,
		SurrogateDeclaration: 93,
		SwitchClause: 94,
		SwitchConditionArray: 95,
		SwitchConditionEnum: 96,
		SwitchConditionObject: 97,
		SwitchConditionRange: 98,
		SwitchConditionType: 99,
		SwitchExpression: 100,
		SwitchStatement: 101,
		SwitchTypeCasting: 102,
		TaggedTemplateExpression: 103,
		TemplateExpression: 104,
		ThisExpression: 105,
		ThrowStatement: 106,
		TraitDeclaration: 107,
		TryExpression: 108,
		TryStatement: 109,
		TypeAliasDeclaration: 110,
		TypeReference: 111,
		UnaryExpression: 112,
		UnlessExpression: 113,
		UnlessStatement: 114,
		UntilStatement: 115,
		UnionType: 116,
		VariableDeclaration: 117,
		VariableDeclarator: 118,
		WhileStatement: 119
	});
	var ReificationKind = KSHelper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var ScopeKind = KSHelper.enum(Number, {
		Argument: 1,
		Null: 2,
		This: 3
	});
	var UnaryOperatorKind = KSHelper.enum(Number, {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		ForcedTypeCasting: 5,
		IncrementPostfix: 6,
		IncrementPrefix: 7,
		Negation: 8,
		Negative: 9,
		NullableTypeCasting: 10,
		Spread: 11
	});
	var Parser = KSHelper.namespace(function() {
		var __ks_RegExp = {};
		var __ks_String = {};
		var __ks_SyntaxError = {};
		var AST = KSHelper.namespace(function() {
			var $comparison = (function() {
				var d = new Dictionary();
				d[BinaryOperatorKind.Addition] = false;
				d[BinaryOperatorKind.And] = false;
				d[BinaryOperatorKind.Assignment] = false;
				d[BinaryOperatorKind.BitwiseAnd] = false;
				d[BinaryOperatorKind.BitwiseLeftShift] = false;
				d[BinaryOperatorKind.BitwiseOr] = false;
				d[BinaryOperatorKind.BitwiseRightShift] = false;
				d[BinaryOperatorKind.BitwiseXor] = false;
				d[BinaryOperatorKind.Division] = false;
				d[BinaryOperatorKind.Equality] = true;
				d[BinaryOperatorKind.GreaterThan] = true;
				d[BinaryOperatorKind.GreaterThanOrEqual] = true;
				d[BinaryOperatorKind.Imply] = false;
				d[BinaryOperatorKind.Inequality] = true;
				d[BinaryOperatorKind.LessThan] = true;
				d[BinaryOperatorKind.LessThanOrEqual] = true;
				d[BinaryOperatorKind.Modulo] = false;
				d[BinaryOperatorKind.Multiplication] = false;
				d[BinaryOperatorKind.NullCoalescing] = false;
				d[BinaryOperatorKind.Or] = false;
				d[BinaryOperatorKind.Quotient] = false;
				d[BinaryOperatorKind.Subtraction] = false;
				d[BinaryOperatorKind.TypeCasting] = false;
				d[BinaryOperatorKind.TypeEquality] = false;
				d[BinaryOperatorKind.TypeInequality] = false;
				d[BinaryOperatorKind.Xor] = false;
				return d;
			})();
			var $polyadic = (function() {
				var d = new Dictionary();
				d[BinaryOperatorKind.Addition] = true;
				d[BinaryOperatorKind.And] = true;
				d[BinaryOperatorKind.Assignment] = false;
				d[BinaryOperatorKind.BitwiseAnd] = true;
				d[BinaryOperatorKind.BitwiseLeftShift] = true;
				d[BinaryOperatorKind.BitwiseOr] = true;
				d[BinaryOperatorKind.BitwiseRightShift] = true;
				d[BinaryOperatorKind.BitwiseXor] = true;
				d[BinaryOperatorKind.Division] = true;
				d[BinaryOperatorKind.Imply] = true;
				d[BinaryOperatorKind.Modulo] = true;
				d[BinaryOperatorKind.Multiplication] = true;
				d[BinaryOperatorKind.NullCoalescing] = true;
				d[BinaryOperatorKind.Or] = true;
				d[BinaryOperatorKind.Quotient] = true;
				d[BinaryOperatorKind.Subtraction] = true;
				d[BinaryOperatorKind.TypeCasting] = false;
				d[BinaryOperatorKind.TypeEquality] = false;
				d[BinaryOperatorKind.TypeInequality] = false;
				d[BinaryOperatorKind.Xor] = true;
				return d;
			})();
			var $precedence = (function() {
				var d = new Dictionary();
				d[BinaryOperatorKind.Addition] = 13;
				d[BinaryOperatorKind.And] = 6;
				d[BinaryOperatorKind.Assignment] = 3;
				d[BinaryOperatorKind.BitwiseAnd] = 11;
				d[BinaryOperatorKind.BitwiseLeftShift] = 12;
				d[BinaryOperatorKind.BitwiseOr] = 9;
				d[BinaryOperatorKind.BitwiseRightShift] = 12;
				d[BinaryOperatorKind.BitwiseXor] = 10;
				d[BinaryOperatorKind.Division] = 14;
				d[BinaryOperatorKind.Equality] = 8;
				d[BinaryOperatorKind.GreaterThan] = 8;
				d[BinaryOperatorKind.GreaterThanOrEqual] = 8;
				d[BinaryOperatorKind.Imply] = 5;
				d[BinaryOperatorKind.Inequality] = 8;
				d[BinaryOperatorKind.LessThan] = 8;
				d[BinaryOperatorKind.LessThanOrEqual] = 8;
				d[BinaryOperatorKind.Modulo] = 14;
				d[BinaryOperatorKind.Multiplication] = 14;
				d[BinaryOperatorKind.NullCoalescing] = 15;
				d[BinaryOperatorKind.Or] = 5;
				d[BinaryOperatorKind.Quotient] = 14;
				d[BinaryOperatorKind.Subtraction] = 13;
				d[BinaryOperatorKind.TypeCasting] = 8;
				d[BinaryOperatorKind.TypeEquality] = 8;
				d[BinaryOperatorKind.TypeInequality] = 8;
				d[BinaryOperatorKind.Xor] = 5;
				return d;
			})();
			var CONDITIONAL_PRECEDENCE = 4;
			function location(descriptor, firstToken, lastToken) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(descriptor === void 0 || descriptor === null) {
					throw new TypeError("'descriptor' is not nullable");
				}
				if(firstToken === void 0 || firstToken === null) {
					throw new TypeError("'firstToken' is not nullable");
				}
				if(lastToken === void 0) {
					lastToken = null;
				}
				if(lastToken === null) {
					if(!KSType.isValue(descriptor.start)) {
						descriptor.start = firstToken.start;
					}
					descriptor.end = firstToken.end;
				}
				else {
					descriptor.start = firstToken.start;
					descriptor.end = lastToken.end;
				}
				return descriptor;
			}
			function reorderExpression(operations) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(operations === void 0 || operations === null) {
					throw new TypeError("'operations' is not nullable");
				}
				var precedences = new Dictionary();
				var precedenceList = [];
				var precedence;
				for(var i = 1, __ks_0 = operations.length; i < __ks_0; i += 2) {
					if(KSHelper.valueOf(operations[i].kind) === NodeKind.ConditionalExpression.value) {
						if(KSType.isValue(precedences[CONDITIONAL_PRECEDENCE])) {
							++precedences[CONDITIONAL_PRECEDENCE];
						}
						else {
							precedences[CONDITIONAL_PRECEDENCE] = 1;
						}
						precedenceList.push(CONDITIONAL_PRECEDENCE);
						i++;
					}
					else {
						precedence = $precedence[operations[i].operator.kind];
						if(KSType.isValue(precedences[precedence])) {
							++precedences[precedence];
						}
						else {
							precedences[precedence] = 1;
						}
						precedenceList.push(precedence);
					}
				}
				precedenceList = precedenceList.sort(function(a, b) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(a === void 0 || a === null) {
						throw new TypeError("'a' is not nullable");
					}
					if(b === void 0 || b === null) {
						throw new TypeError("'b' is not nullable");
					}
					return KSOperator.subtraction(b, a);
				});
				var count, k, operator, left;
				for(var __ks_0 = 0, __ks_1 = precedenceList.length; __ks_0 < __ks_1; ++__ks_0) {
					precedence = precedenceList[__ks_0];
					count = precedences[precedence];
					var __ks_2;
					for(k = 1, __ks_2 = operations.length; k < __ks_2 && KSOperator.gt(count, 0); k += 2) {
						if(KSHelper.valueOf(operations[k].kind) === NodeKind.ConditionalExpression.value) {
							if(precedence === CONDITIONAL_PRECEDENCE) {
								--count;
								operator = operations[k];
								operator.condition = operations[k - 1];
								operator.whenTrue = operations[k + 1];
								operator.whenFalse = operations[k + 2];
								operator.start = operator.condition.start;
								operator.end = operator.whenFalse.end;
								operations.splice(k - 1, 4, operator);
								k -= 3;
							}
							else {
								k++;
							}
						}
						else if($precedence[operations[k].operator.kind] === precedence) {
							--count;
							operator = operations[k];
							if(KSHelper.valueOf(operator.kind) === NodeKind.BinaryExpression.value) {
								left = operations[k - 1];
								if((KSHelper.valueOf(left.kind) === NodeKind.BinaryExpression.value) && (operator.operator.kind === left.operator.kind) && ($polyadic[operator.operator.kind] === true)) {
									operator.kind = NodeKind.PolyadicExpression;
									operator.start = left.start;
									operator.end = operations[k + 1].end;
									operator.operands = [left.left, left.right, operations[k + 1]];
								}
								else if((KSHelper.valueOf(left.kind) === NodeKind.PolyadicExpression.value) && (operator.operator.kind === left.operator.kind)) {
									left.operands.push(operations[k + 1]);
									left.end = operations[k + 1].end;
									operator = left;
								}
								else if($comparison[operator.operator.kind] === true) {
									if(KSHelper.valueOf(left.kind) === NodeKind.ComparisonExpression.value) {
										left.values.push(operator.operator, operations[k + 1]);
										left.end = operations[k + 1].end;
										operator = left;
									}
									else {
										operator = ComparisonExpression([left, operator.operator, operations[k + 1]]);
									}
								}
								else if((KSHelper.valueOf(left.kind) === NodeKind.BinaryExpression.value) && (KSHelper.valueOf(operator.operator.kind) === BinaryOperatorKind.Assignment.value) && (KSHelper.valueOf(left.operator.kind) === BinaryOperatorKind.Assignment.value) && (operator.operator.assignment === left.operator.assignment)) {
									operator.left = left.right;
									operator.right = operations[k + 1];
									operator.start = operator.left.start;
									operator.end = operator.right.end;
									left.right = operator;
									left.end = left.right.end;
									operator = left;
								}
								else {
									operator.left = left;
									operator.right = operations[k + 1];
									operator.start = operator.left.start;
									operator.end = operator.right.end;
								}
							}
							else {
								operator.left = operations[k - 1];
								operator.right = operations[k + 1];
								operator.start = operator.left.start;
								operator.end = operator.right.end;
							}
							operations.splice(k - 1, 3, operator);
							k -= 2;
						}
					}
				}
				return operations[0];
			}
			function AccessorDeclaration() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.AccessorDeclaration;
						return d;
					})(), first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var body = arguments[++__ks_i];
					if(body === void 0 || body === null) {
						throw new TypeError("'body' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.AccessorDeclaration;
						d.body = body.value;
						return d;
					})(), first, last);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function ArrayBinding(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayBinding;
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			}
			function ArrayBindingElement(modifiers, name, type, defaultValue, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0) {
					name = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.BindingElement;
					d.modifiers = modifiers;
					return d;
				})(), first, last);
				if(KSType.isValue(name)) {
					node.name = name.value;
				}
				if(KSType.isValue(type)) {
					node.type = type.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			}
			function ArrayComprehension(expression, loop, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(loop === void 0 || loop === null) {
					throw new TypeError("'loop' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayComprehension;
					d.body = expression.value;
					d.loop = loop.value;
					return d;
				})(), first, last);
			}
			function ArrayExpression(values, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(values === void 0 || values === null) {
					throw new TypeError("'values' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayExpression;
					d.values = KSHelper.mapArray(values, function(value) {
						return value.value;
					});
					return d;
				})(), first, last);
			}
			function ArrayRangeFI(from, til, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(til === void 0 || til === null) {
					throw new TypeError("'til' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.from = from.value;
					d.til = til.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayRangeFO(from, to, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.from = from.value;
					d.to = to.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayRangeTI(then, til, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(then === void 0 || then === null) {
					throw new TypeError("'then' is not nullable");
				}
				if(til === void 0 || til === null) {
					throw new TypeError("'til' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.then = then.value;
					d.til = til.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayRangeTO(then, to, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(then === void 0 || then === null) {
					throw new TypeError("'then' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ArrayRange;
					d.then = then.value;
					d.to = to.value;
					return d;
				})(), first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayReference(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					d.typeName = (function() {
						var d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = "array";
						return d;
					})();
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			}
			function AssignmentOperator(operator, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				else if(!KSType.isEnumMember(operator, AssignmentOperatorKind)) {
					throw new TypeError("'operator' is not of type 'AssignmentOperatorKind'");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = BinaryOperatorKind.Assignment;
					d.assignment = operator;
					return d;
				})(), first);
			}
			function AttributeDeclaration(declaration, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.AttributeDeclaration;
					d.declaration = declaration.value;
					return d;
				})(), first, last);
			}
			function AttributeExpression(name, __ks_arguments_1, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.AttributeExpression;
					d.name = name.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			}
			function AttributeOperation(name, value, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.AttributeOperation;
					d.name = name.value;
					d.value = value.value;
					return d;
				})(), first, last);
			}
			function AwaitExpression(modifiers, variables, operand, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(variables === void 0) {
					variables = null;
				}
				if(operand === void 0 || operand === null) {
					throw new TypeError("'operand' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.AwaitExpression;
					d.modifiers = modifiers;
					d.operation = operand.value;
					return d;
				})(), first, last);
				if(variables !== null) {
					node.variables = KSHelper.mapArray(variables, function(variable) {
						return variable.value;
					});
				}
				return node;
			}
			function BinaryExpression() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var operator = arguments[++__ks_i];
					if(operator === void 0 || operator === null) {
						throw new TypeError("'operator' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.BinaryExpression;
						d.operator = operator.value;
						return d;
					})(), operator);
				}
				else if(arguments.length >= 3 && arguments.length <= 5) {
					var __ks_i = -1;
					var left = arguments[++__ks_i];
					if(left === void 0 || left === null) {
						throw new TypeError("'left' is not nullable");
					}
					var operator = arguments[++__ks_i];
					if(operator === void 0 || operator === null) {
						throw new TypeError("'operator' is not nullable");
					}
					var right = arguments[++__ks_i];
					if(right === void 0 || right === null) {
						throw new TypeError("'right' is not nullable");
					}
					var __ks__;
					var first = arguments.length > 3 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : left;
					var last = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : right;
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.BinaryExpression;
						d.operator = operator.value;
						d.left = left.value;
						d.right = right.value;
						return d;
					})(), first, last);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function BinaryOperator(operator, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				else if(!KSType.isEnumMember(operator, BinaryOperatorKind)) {
					throw new TypeError("'operator' is not of type 'BinaryOperatorKind'");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = operator;
					return d;
				})(), first);
			}
			function Block(attributes, statements, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(statements === void 0 || statements === null) {
					throw new TypeError("'statements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.Block;
					d.attributes = attributes;
					d.statements = KSHelper.mapArray(statements, function(statement) {
						return statement.value;
					});
					return d;
				})(), first, last);
			}
			function BreakStatement(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.BreakStatement;
					d.attributes = [];
					return d;
				})(), first);
			}
			function CallExpression(modifiers) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				var __ks_i = 0;
				var __ks__;
				var scope = arguments.length > 5 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : (function() {
					var d = new Dictionary();
					d.kind = ScopeKind.This;
					return d;
				})();
				var callee = arguments[++__ks_i];
				if(callee === void 0 || callee === null) {
					throw new TypeError("'callee' is not nullable");
				}
				var __ks_arguments_1 = arguments[++__ks_i];
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var last = arguments[++__ks_i];
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.CallExpression;
					d.modifiers = modifiers;
					d.scope = scope;
					d.callee = callee.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			}
			function CallMacroExpression(callee, __ks_arguments_1, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(callee === void 0 || callee === null) {
					throw new TypeError("'callee' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.CallMacroExpression;
					d.callee = callee.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			}
			function CatchClause(binding, type, body, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(binding === void 0) {
					binding = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.CatchClause;
					d.body = body.value;
					return d;
				})(), first, last);
				if(binding !== null) {
					node.binding = binding.value;
				}
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			}
			function ClassDeclaration(attributes, name, version, __ks_extends_1, modifiers, members, first, last) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(version === void 0) {
					version = null;
				}
				if(__ks_extends_1 === void 0) {
					__ks_extends_1 = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ClassDeclaration;
					d.attributes = attributes;
					d.name = name.value;
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.members = KSHelper.mapArray(members, function(member) {
						return member.value;
					});
					return d;
				})(), first, last);
				if(version !== null) {
					node.version = version.value;
				}
				if(__ks_extends_1 !== null) {
					node.extends = __ks_extends_1.value;
				}
				return node;
			}
			function ComparisonExpression(values) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(values === void 0 || values === null) {
					throw new TypeError("'values' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ComparisonExpression;
					d.values = values;
					return d;
				})(), values[0], values[KSOperator.subtraction(values.length, 1)]);
			}
			function ComputedPropertyName(expression, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ComputedPropertyName;
					d.expression = expression.value;
					return d;
				})(), first, last);
			}
			function ConditionalExpression() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ConditionalExpression;
						return d;
					})(), first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var condition = arguments[++__ks_i];
					if(condition === void 0 || condition === null) {
						throw new TypeError("'condition' is not nullable");
					}
					var whenTrue = arguments[++__ks_i];
					if(whenTrue === void 0 || whenTrue === null) {
						throw new TypeError("'whenTrue' is not nullable");
					}
					var whenFalse = arguments[++__ks_i];
					if(whenFalse === void 0 || whenFalse === null) {
						throw new TypeError("'whenFalse' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ConditionalExpression;
						d.condition = condition.value;
						d.whenTrue = whenTrue.value;
						d.whenFalse = whenFalse.value;
						return d;
					})(), condition, whenFalse);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function ContinueStatement(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ContinueStatement;
					d.attributes = [];
					return d;
				})(), first);
			}
			function CreateExpression(__ks_class_1, __ks_arguments_1, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.CreateExpression;
					d.class = __ks_class_1.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			}
			function CurryExpression(scope, callee, __ks_arguments_1, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				if(callee === void 0 || callee === null) {
					throw new TypeError("'callee' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.CurryExpression;
					d.modifiers = [];
					d.scope = scope;
					d.callee = callee.value;
					d.arguments = KSHelper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					});
					return d;
				})(), first, last);
			}
			function DestroyStatement(variable, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.DestroyStatement;
					d.attributes = [];
					d.variable = variable.value;
					return d;
				})(), first, last);
			}
			function DiscloseDeclaration(name, members, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.DiscloseDeclaration;
					d.attributes = [];
					d.name = name.value;
					d.members = KSHelper.mapArray(members, function(member) {
						return member.value;
					});
					return d;
				})(), first, last);
			}
			function DoUntilStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.DoUntilStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			}
			function DoWhileStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.DoWhileStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			}
			function EnumExpression(__ks_enum_1, member) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(__ks_enum_1 === void 0 || __ks_enum_1 === null) {
					throw new TypeError("'enum' is not nullable");
				}
				if(member === void 0 || member === null) {
					throw new TypeError("'member' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.EnumExpression;
					d.enum = __ks_enum_1.value;
					d.member = member.value;
					return d;
				})(), __ks_enum_1, member);
			}
			function EnumDeclaration(name, type, members, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.EnumDeclaration;
					d.attributes = [];
					d.name = name.value;
					d.members = members;
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			}
			function EnumMember() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.EnumMember;
						d.name = name.value;
						return d;
					})(), name);
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.EnumMember;
						d.name = name.value;
						d.value = value.value;
						return d;
					})(), name, value);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function ExclusionType(types, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(types === void 0 || types === null) {
					throw new TypeError("'types' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExclusionType;
					d.types = KSHelper.mapArray(types, function(type) {
						return type.value;
					});
					return d;
				})(), first, last);
			}
			function ExportDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExportDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			}
			function ExportDeclarationSpecifier(declaration) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExportDeclarationSpecifier;
					d.declaration = declaration.value;
					return d;
				})(), declaration);
			}
			function ExportExclusionSpecifier(exclusions, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(exclusions === void 0 || exclusions === null) {
					throw new TypeError("'exclusions' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExportExclusionSpecifier;
					d.exclusions = KSHelper.mapArray(exclusions, function(exclusion) {
						return exclusion.value;
					});
					return d;
				})(), first, last);
			}
			function ExportNamedSpecifier(local, exported) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(exported === void 0 || exported === null) {
					throw new TypeError("'exported' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExportNamedSpecifier;
					d.local = local.value;
					d.exported = exported.value;
					return d;
				})(), local, exported);
			}
			function ExportPropertiesSpecifier(object, properties, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(object === void 0 || object === null) {
					throw new TypeError("'object' is not nullable");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExportPropertiesSpecifier;
					d.object = object.value;
					d.properties = properties;
					return d;
				})(), object, last);
			}
			function ExportWildcardSpecifier(local, end) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(end === void 0 || end === null) {
					throw new TypeError("'end' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExportWildcardSpecifier;
					d.local = local.value;
					return d;
				})(), local, end);
			}
			function ExpressionStatement(expression) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				expression.value.attributes = [];
				return expression.value;
			}
			function ExternDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExternDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			}
			function ExternOrRequireDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ExternOrRequireDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			}
			function FallthroughStatement(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.FallthroughStatement;
					d.attributes = [];
					return d;
				})(), first);
			}
			function FieldDeclaration(attributes, modifiers, name, type, defaultValue, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.FieldDeclaration;
					d.attributes = attributes;
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			}
			function ForFromStatement(modifiers, variable, from, til, to, by, until, __ks_while_1, when, first, last) {
				if(arguments.length < 11) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 11)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ForFromStatement;
					d.modifiers = modifiers;
					d.attributes = [];
					d.variable = variable.value;
					d.from = from.value;
					return d;
				})(), first, last);
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function ForInStatement(modifiers, value, type, index, expression, from, til, to, by, until, __ks_while_1, when, first, last) {
				if(arguments.length < 14) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 14)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(from === void 0) {
					from = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ForInStatement;
					d.attributes = [];
					d.modifiers = modifiers;
					d.expression = expression.value;
					return d;
				})(), first, last);
				if(value.ok === true) {
					node.value = value.value;
				}
				if(type.ok === true) {
					node.type = type.value;
				}
				if(index.ok === true) {
					node.index = index.value;
				}
				if(from !== null) {
					node.from = from.value;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function ForRangeStatement(modifiers, value, index, from, then, til, to, by, until, __ks_while_1, when, first, last) {
				if(arguments.length < 13) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 13)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(from === void 0) {
					from = null;
				}
				if(then === void 0) {
					then = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ForRangeStatement;
					d.attributes = [];
					d.modifiers = modifiers;
					d.value = value.value;
					return d;
				})(), first, last);
				if(index.ok === true) {
					node.index = index.value;
				}
				if(from !== null) {
					node.from = from.value;
				}
				else if(then !== null) {
					node.then = then.value;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function ForOfStatement(modifiers, value, type, key, expression, until, __ks_while_1, when, first, last) {
				if(arguments.length < 10) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 10)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(key === void 0 || key === null) {
					throw new TypeError("'key' is not nullable");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ForOfStatement;
					d.attributes = [];
					d.modifiers = modifiers;
					d.expression = expression.value;
					return d;
				})(), first, last);
				if(value.ok === true) {
					node.value = value.value;
				}
				if(type.ok === true) {
					node.type = type.value;
				}
				if(key.ok === true) {
					node.key = key.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function FunctionDeclaration(name, parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0) {
					parameters = null;
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.FunctionDeclaration;
					d.attributes = [];
					d.name = name.value;
					return d;
				})(), first, last);
				if(parameters !== null) {
					node.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
				}
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			}
			function FunctionExpression(parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.FunctionExpression;
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					return d;
				})(), first, last);
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			}
			function FusionType(types, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(types === void 0 || types === null) {
					throw new TypeError("'types' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.FusionType;
					d.types = KSHelper.mapArray(types, function(type) {
						return type.value;
					});
					return d;
				})(), first, last);
			}
			function IfExpression(condition, whenTrue, whenFalse, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenTrue === void 0 || whenTrue === null) {
					throw new TypeError("'whenTrue' is not nullable");
				}
				if(whenFalse === void 0) {
					whenFalse = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.IfExpression;
					d.condition = condition.value;
					d.whenTrue = whenTrue.value;
					return d;
				})(), first, last);
				if(whenFalse !== null) {
					node.whenFalse = whenFalse.value;
				}
				return node;
			}
			function IfStatement(condition, whenTrue, whenFalse, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenTrue === void 0 || whenTrue === null) {
					throw new TypeError("'whenTrue' is not nullable");
				}
				if(whenFalse === void 0) {
					whenFalse = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.IfStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.whenTrue = whenTrue.value;
					return d;
				})(), first, last);
				if(whenFalse !== null) {
					node.whenFalse = whenFalse.value;
				}
				return node;
			}
			function ImplementDeclaration(attributes, variable, properties, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ImplementDeclaration;
					d.attributes = attributes;
					d.variable = variable.value;
					d.properties = KSHelper.mapArray(properties, function(property) {
						return property.value;
					});
					return d;
				})(), first, last);
			}
			function ImportArgument(modifiers, name, value, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0) {
					name = null;
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				if(name === null) {
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ImportArgument;
						d.modifiers = modifiers;
						d.value = value.value;
						return d;
					})(), first, last);
				}
				else {
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ImportArgument;
						d.modifiers = modifiers;
						d.name = name.value;
						d.value = value.value;
						return d;
					})(), first, last);
				}
			}
			function ImportDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ImportDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			}
			function ImportDeclarator(attributes, modifiers, source, specifiers, __ks_arguments_1, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(source === void 0 || source === null) {
					throw new TypeError("'source' is not nullable");
				}
				if(specifiers === void 0 || specifiers === null) {
					throw new TypeError("'specifiers' is not nullable");
				}
				if(__ks_arguments_1 === void 0) {
					__ks_arguments_1 = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ImportDeclarator;
					d.attributes = attributes;
					d.modifiers = modifiers;
					d.source = source.value;
					d.specifiers = KSHelper.mapArray(specifiers, function(specifier) {
						return specifier.value;
					});
					return d;
				})(), first, last);
				if(__ks_arguments_1 !== null) {
					node.arguments = __ks_arguments_1;
				}
				return node;
			}
			function ImportExclusionSpecifier(exclusions, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(exclusions === void 0 || exclusions === null) {
					throw new TypeError("'exclusions' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ImportExclusionSpecifier;
					d.attributes = [];
					d.exclusions = KSHelper.mapArray(exclusions, function(exclusion) {
						return exclusion.value;
					});
					return d;
				})(), first, last);
			}
			function ImportNamespaceSpecifier(local, specifiers, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(specifiers === void 0) {
					specifiers = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ImportNamespaceSpecifier;
					d.attributes = [];
					d.local = local.value;
					return d;
				})(), first, last);
				if(specifiers !== null) {
					node.specifiers = KSHelper.mapArray(specifiers, function(specifier) {
						return specifier.value;
					});
				}
				return node;
			}
			function ImportSpecifier(imported, local, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(imported === void 0 || imported === null) {
					throw new TypeError("'imported' is not nullable");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ImportSpecifier;
					d.attributes = [];
					d.imported = imported.value;
					d.local = local.value;
					return d;
				})(), first, last);
			}
			function Identifier(name, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.Identifier;
					d.name = name;
					return d;
				})(), first);
			}
			function IncludeAgainDeclaration(files, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(files === void 0 || files === null) {
					throw new TypeError("'files' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.IncludeAgainDeclaration;
					d.attributes = [];
					d.files = files;
					return d;
				})(), first, last);
			}
			function IncludeDeclaration(files, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(files === void 0 || files === null) {
					throw new TypeError("'files' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.IncludeDeclaration;
					d.attributes = [];
					d.files = files;
					return d;
				})(), first, last);
			}
			function LambdaExpression(parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.LambdaExpression;
					d.modifiers = [];
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					d.body = body.value;
					return d;
				})(), first, last);
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				return node;
			}
			function Literal(value, first, last) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0) {
					last = null;
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.Literal;
					d.value = value;
					return d;
				})(), first, last);
			}
			function MacroDeclaration(attributes, name, parameters, body, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.MacroDeclaration;
					d.attributes = attributes;
					d.name = name.value;
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					d.body = body.value;
					return d;
				})(), first, last);
			}
			function MacroExpression(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.MacroExpression;
					d.attributes = [];
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			}
			function MacroElementExpression(expression, reification, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(reification === void 0) {
					reification = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = MacroElementKind.Expression;
					d.expression = expression.value;
					return d;
				})(), first, last);
				if(reification === null) {
					node.reification = (function() {
						var d = new Dictionary();
						d.kind = ReificationKind.Expression;
						return d;
					})();
				}
				else {
					node.reification = reification;
				}
				return node;
			}
			function MacroElementLiteral(value, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = MacroElementKind.Literal;
					d.value = value;
					return d;
				})(), first, last);
			}
			function MacroElementNewLine(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = MacroElementKind.NewLine;
					return d;
				})(), first);
			}
			function MacroReification(value, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(value === "a") {
					return location((function() {
						var d = new Dictionary();
						d.kind = ReificationKind.Argument;
						return d;
					})(), first);
				}
				else if(value === "e") {
					return location((function() {
						var d = new Dictionary();
						d.kind = ReificationKind.Expression;
						return d;
					})(), first);
				}
				else if(value === "j") {
					return location((function() {
						var d = new Dictionary();
						d.kind = ReificationKind.Join;
						return d;
					})(), first);
				}
				else if(value === "s") {
					return location((function() {
						var d = new Dictionary();
						d.kind = ReificationKind.Statement;
						return d;
					})(), first);
				}
				else if(value === "w") {
					return location((function() {
						var d = new Dictionary();
						d.kind = ReificationKind.Write;
						return d;
					})(), first);
				}
			}
			function MemberExpression(modifiers, object, property, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(object === void 0 || object === null) {
					throw new TypeError("'object' is not nullable");
				}
				if(property === void 0 || property === null) {
					throw new TypeError("'property' is not nullable");
				}
				if(first === void 0 || first === null) {
					first = object;
				}
				if(last === void 0 || last === null) {
					last = property;
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.MemberExpression;
					d.modifiers = modifiers;
					d.object = object.value;
					d.property = property.value;
					return d;
				})(), first, last);
			}
			function MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 9) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 9)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.MethodDeclaration;
					d.attributes = attributes;
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					d.parameters = KSHelper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = KSHelper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			}
			function Modifier(kind, first, last) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(kind === void 0 || kind === null) {
					throw new TypeError("'kind' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0) {
					last = null;
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = kind;
					return d;
				})(), first, last);
			}
			function Module(attributes, body, parser) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(parser === void 0 || parser === null) {
					throw new TypeError("'parser' is not nullable");
				}
				else if(!KSType.isInstance(parser, Parser)) {
					throw new TypeError("'parser' is not of type 'Parser'");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.Module;
					d.attributes = attributes;
					d.body = body;
					d.start = (function() {
						var d = new Dictionary();
						d.line = 1;
						d.column = 1;
						return d;
					})();
					return d;
				})(), parser.position());
			}
			function MutatorDeclaration() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.MutatorDeclaration;
						return d;
					})(), first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var body = arguments[++__ks_i];
					if(body === void 0 || body === null) {
						throw new TypeError("'body' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.MutatorDeclaration;
						d.body = body.value;
						return d;
					})(), first, last);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function Nullable(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [Modifier(ModifierKind.Nullable, first)];
					d.typeName = (function() {
						var d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = "any";
						return d;
					})();
					return d;
				})(), first);
			}
			function NamedArgument(name, value) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.NamedArgument;
					d.modifiers = [];
					d.name = name.value;
					d.value = value.value;
					return d;
				})(), name, value);
			}
			function NamespaceDeclaration(attributes, modifiers, name, statements, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(statements === void 0 || statements === null) {
					throw new TypeError("'statements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.NamespaceDeclaration;
					d.attributes = attributes;
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					d.statements = KSHelper.mapArray(statements, function(statement) {
						return statement.value;
					});
					return d;
				})(), first, last);
			}
			function NumericExpression(value, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.NumericExpression;
					d.value = value;
					return d;
				})(), first);
			}
			function ObjectBinding(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ObjectBinding;
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			}
			function ObjectBindingElement(modifiers, name, alias, defaultValue, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(alias === void 0) {
					alias = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.BindingElement;
					d.name = name.value;
					d.modifiers = modifiers;
					return d;
				})(), first, last);
				if(KSType.isValue(alias)) {
					node.alias = alias.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			}
			function ObjectExpression(attributes, properties, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ObjectExpression;
					d.attributes = attributes;
					d.properties = KSHelper.mapArray(properties, function(property) {
						return property.value;
					});
					return d;
				})(), first, last);
			}
			function ObjectMember() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ObjectMember;
						d.name = name.value;
						return d;
					})(), name, name);
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ObjectMember;
						d.name = name.value;
						d.value = value.value;
						return d;
					})(), name, value);
				}
				else if(arguments.length === 5) {
					var __ks_i = -1;
					var attributes = arguments[++__ks_i];
					if(attributes === void 0 || attributes === null) {
						throw new TypeError("'attributes' is not nullable");
					}
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ObjectMember;
						d.attributes = attributes;
						d.name = name.value;
						d.value = value.value;
						return d;
					})(), first, last);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function ObjectReference(properties, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					d.typeName = (function() {
						var d = new Dictionary();
						d.kind = NodeKind.Identifier;
						d.name = "object";
						return d;
					})();
					d.properties = KSHelper.mapArray(properties, function(property) {
						return property.value;
					});
					return d;
				})(), first, last);
			}
			function ObjectMemberReference(name, type) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				var node;
				return node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.name = name.value;
					d.type = type.value;
					return d;
				})(), name, type);
			}
			function OmittedExpression(modifiers, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.OmittedExpression;
					d.modifiers = modifiers;
					return d;
				})(), first, first);
				return node;
			}
			function OmittedReference(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TypeReference;
					d.modifiers = [];
					return d;
				})(), first, first);
			}
			function PropertyDeclaration(attributes, modifiers, name, type, defaultValue, accessor, mutator, first, last) {
				if(arguments.length < 9) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 9)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(accessor === void 0) {
					accessor = null;
				}
				if(mutator === void 0) {
					mutator = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.PropertyDeclaration;
					d.attributes = attributes;
					d.modifiers = KSHelper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
					d.name = name.value;
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				if(accessor !== null) {
					node.accessor = accessor.value;
				}
				if(mutator !== null) {
					node.mutator = mutator.value;
				}
				return node;
			}
			function Parameter() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.Parameter;
						d.modifiers = [];
						d.name = name.value;
						return d;
					})(), name, name);
				}
				else if(arguments.length === 6) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0) {
						name = null;
					}
					var type = arguments[++__ks_i];
					if(type === void 0) {
						type = null;
					}
					var modifiers = arguments[++__ks_i];
					if(modifiers === void 0 || modifiers === null) {
						throw new TypeError("'modifiers' is not nullable");
					}
					var defaultValue = arguments[++__ks_i];
					if(defaultValue === void 0) {
						defaultValue = null;
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node = location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.Parameter;
						d.modifiers = modifiers;
						return d;
					})(), first, last);
					if(name !== null) {
						node.name = name.value;
					}
					if(type !== null) {
						node.type = type.value;
					}
					if(defaultValue !== null) {
						node.defaultValue = defaultValue.value;
					}
					return node;
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function RegularExpression(value, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.RegularExpression;
					d.value = value;
					return d;
				})(), first);
			}
			function RequireDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.RequireDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			}
			function RequireOrExternDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.RequireOrExternDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declarator) {
						return declarator.value;
					});
					return d;
				})(), first, last);
			}
			function RequireOrImportDeclaration(attributes, declarations, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.RequireOrImportDeclaration;
					d.attributes = attributes;
					d.declarations = KSHelper.mapArray(declarations, function(declaration) {
						return declaration.value;
					});
					return d;
				})(), first, last);
			}
			function RestModifier(min, max, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(min === void 0 || min === null) {
					throw new TypeError("'min' is not nullable");
				}
				if(max === void 0 || max === null) {
					throw new TypeError("'max' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = ModifierKind.Rest;
					d.arity = (function() {
						var d = new Dictionary();
						d.min = min;
						d.max = max;
						return d;
					})();
					return d;
				})(), first, last);
			}
			function ReturnStatement() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ReturnStatement;
						d.attributes = [];
						return d;
					})(), first, first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ReturnStatement;
						d.attributes = [];
						d.value = value.value;
						return d;
					})(), first, last);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function Scope() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var scope = arguments[++__ks_i];
					if(scope === void 0 || scope === null) {
						throw new TypeError("'scope' is not nullable");
					}
					else if(!KSType.isEnumMember(scope, ScopeKind)) {
						throw new TypeError("'scope' is not of type 'ScopeKind'");
					}
					return (function() {
						var d = new Dictionary();
						d.kind = scope;
						return d;
					})();
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var scope = arguments[++__ks_i];
					if(scope === void 0 || scope === null) {
						throw new TypeError("'scope' is not nullable");
					}
					else if(!KSType.isEnumMember(scope, ScopeKind)) {
						throw new TypeError("'scope' is not of type 'ScopeKind'");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return (function() {
						var d = new Dictionary();
						d.kind = scope;
						d.value = value.value;
						return d;
					})();
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function SequenceExpression(expressions, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expressions === void 0 || expressions === null) {
					throw new TypeError("'expressions' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SequenceExpression;
					d.expressions = KSHelper.mapArray(expressions, function(expression) {
						return expression.value;
					});
					return d;
				})(), first, last);
			}
			function ShorthandProperty(attributes, name, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ShorthandProperty;
					d.attributes = attributes;
					d.name = name.value;
					return d;
				})(), first, last);
			}
			function StructDeclaration(attributes, modifiers, name, fields, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(fields === void 0 || fields === null) {
					throw new TypeError("'fields' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node;
				return node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.StructDeclaration;
					d.attributes = attributes;
					d.modifiers = modifiers;
					d.name = name.value;
					d.fields = fields;
					return d;
				})(), first, last);
			}
			function StructField(name, type, defaultValue, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(name === void 0) {
					name = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.StructField;
					return d;
				})(), first, last);
				if(KSType.isValue(name)) {
					node.name = name.value;
				}
				if(KSType.isValue(type)) {
					node.type = type.value;
				}
				if(KSType.isValue(defaultValue)) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			}
			function SwitchClause(conditions, bindings, filter, body, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(conditions === void 0) {
					conditions = null;
				}
				if(bindings === void 0) {
					bindings = null;
				}
				if(filter === void 0) {
					filter = null;
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchClause;
					d.body = body.value;
					return d;
				})(), first, last);
				if(conditions === null) {
					node.conditions = [];
				}
				else {
					node.conditions = KSHelper.mapArray(conditions, function(condition) {
						return condition.value;
					});
				}
				if(bindings === null) {
					node.bindings = [];
				}
				else {
					node.bindings = KSHelper.mapArray(bindings.value, function(binding) {
						return binding.value;
					});
				}
				if(filter !== null) {
					node.filter = filter.value;
				}
				return node;
			}
			function SwitchConditionArray(values, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(values === void 0 || values === null) {
					throw new TypeError("'values' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionArray;
					d.values = KSHelper.mapArray(values, function(value) {
						return value.value;
					});
					return d;
				})(), first, last);
			}
			function SwitchConditionObject(members, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionObject;
					d.members = KSHelper.mapArray(members, function(member) {
						return member.value;
					});
					return d;
				})(), first, last);
			}
			function SwitchConditionRangeFI(from, til) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(til === void 0 || til === null) {
					throw new TypeError("'til' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.from = from.value;
					d.til = til.value;
					return d;
				})(), from, til);
			}
			function SwitchConditionRangeFO(from, to) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.from = from.value;
					d.to = to.value;
					return d;
				})(), from, to);
			}
			function SwitchConditionRangeTI(then, til) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(then === void 0 || then === null) {
					throw new TypeError("'then' is not nullable");
				}
				if(til === void 0 || til === null) {
					throw new TypeError("'til' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.then = then.value;
					d.til = til.value;
					return d;
				})(), then, til);
			}
			function SwitchConditionRangeTO(then, to) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(then === void 0 || then === null) {
					throw new TypeError("'then' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionRange;
					d.then = then.value;
					d.to = to.value;
					return d;
				})(), then, to);
			}
			function SwitchConditionType(type, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchConditionType;
					d.type = type.value;
					return d;
				})(), first, last);
			}
			function SwitchExpression(expression, clauses, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(clauses === void 0 || clauses === null) {
					throw new TypeError("'clauses' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchExpression;
					d.attributes = [];
					d.expression = expression.value;
					d.clauses = KSHelper.mapArray(clauses.value, function(clause) {
						return clause;
					});
					return d;
				})(), first, last);
			}
			function SwitchStatement(expression, clauses, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(clauses === void 0 || clauses === null) {
					throw new TypeError("'clauses' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchStatement;
					d.attributes = [];
					d.expression = expression.value;
					d.clauses = KSHelper.mapArray(clauses.value, function(clause) {
						return clause;
					});
					return d;
				})(), first, last);
			}
			function SwitchTypeCasting(name, type) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.SwitchTypeCasting;
					d.name = name.value;
					d.type = type.value;
					return d;
				})(), name, type);
			}
			function TaggedTemplateExpression(tag, template, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(tag === void 0 || tag === null) {
					throw new TypeError("'tag' is not nullable");
				}
				if(template === void 0 || template === null) {
					throw new TypeError("'template' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TaggedTemplateExpression;
					d.tag = tag.value;
					d.template = template.value;
					return d;
				})(), first, last);
			}
			function TemplateExpression(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TemplateExpression;
					d.elements = KSHelper.mapArray(elements, function(element) {
						return element.value;
					});
					return d;
				})(), first, last);
			}
			function ThisExpression(name, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.ThisExpression;
					d.name = name.value;
					return d;
				})(), first, last);
			}
			function ThrowStatement() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ThrowStatement;
						d.attributes = [];
						return d;
					})(), first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.ThrowStatement;
						d.attributes = [];
						d.value = value.value;
						return d;
					})(), first, last);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function TryExpression(modifiers, operand, defaultValue, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(operand === void 0 || operand === null) {
					throw new TypeError("'operand' is not nullable");
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TryExpression;
					d.modifiers = modifiers;
					d.argument = operand.value;
					return d;
				})(), first, last);
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			}
			function TryStatement(body, catchClauses, catchClause, finalizer, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(catchClauses === void 0 || catchClauses === null) {
					throw new TypeError("'catchClauses' is not nullable");
				}
				if(catchClause === void 0) {
					catchClause = null;
				}
				if(finalizer === void 0) {
					finalizer = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TryStatement;
					d.attributes = [];
					d.body = body.value;
					d.catchClauses = KSHelper.mapArray(catchClauses, function(clause) {
						return clause.value;
					});
					return d;
				})(), first, last);
				if(catchClause !== null) {
					node.catchClause = catchClause.value;
				}
				if(finalizer !== null) {
					node.finalizer = finalizer.value;
				}
				return node;
			}
			function TypeReference() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.TypeReference;
						d.modifiers = [];
						d.typeName = name.value;
						return d;
					})(), name);
				}
				else if(arguments.length === 5) {
					var __ks_i = -1;
					var modifiers = arguments[++__ks_i];
					if(modifiers === void 0 || modifiers === null) {
						throw new TypeError("'modifiers' is not nullable");
					}
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var parameters = arguments[++__ks_i];
					if(parameters === void 0) {
						parameters = null;
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node = location((function() {
						var d = new Dictionary();
						d.kind = NodeKind.TypeReference;
						d.modifiers = modifiers;
						d.typeName = name.value;
						return d;
					})(), first, last);
					if(parameters !== null) {
						node.typeParameters = KSHelper.mapArray(parameters.value, function(parameter) {
							return parameter.value;
						});
					}
					return node;
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			};
			function TypeAliasDeclaration(name, type, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.TypeAliasDeclaration;
					d.attributes = [];
					d.name = name.value;
					d.type = type.value;
					return d;
				})(), first, last);
			}
			function UnaryExpression(operator, operand, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				if(operand === void 0 || operand === null) {
					throw new TypeError("'operand' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.UnaryExpression;
					d.operator = operator.value;
					d.argument = operand.value;
					return d;
				})(), first, last);
			}
			function UnaryOperator(operator, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				else if(!KSType.isEnumMember(operator, UnaryOperatorKind)) {
					throw new TypeError("'operator' is not of type 'UnaryOperatorKind'");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = operator;
					return d;
				})(), first);
			}
			function UnionType(types, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(types === void 0 || types === null) {
					throw new TypeError("'types' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.UnionType;
					d.types = KSHelper.mapArray(types, function(type) {
						return type.value;
					});
					return d;
				})(), first, last);
			}
			function UnlessExpression(condition, whenFalse, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenFalse === void 0 || whenFalse === null) {
					throw new TypeError("'whenFalse' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.UnlessExpression;
					d.condition = condition.value;
					d.whenFalse = whenFalse.value;
					return d;
				})(), first, last);
			}
			function UnlessStatement(condition, whenFalse, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenFalse === void 0 || whenFalse === null) {
					throw new TypeError("'whenFalse' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.UnlessStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.whenFalse = whenFalse.value;
					return d;
				})(), first, last);
			}
			function UntilStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.UntilStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			}
			function VariableDeclaration(modifiers, variables, expression, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(variables === void 0 || variables === null) {
					throw new TypeError("'variables' is not nullable");
				}
				if(expression === void 0) {
					expression = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.VariableDeclaration;
					d.modifiers = modifiers;
					d.attributes = [];
					d.variables = KSHelper.mapArray(variables, function(variable) {
						return variable.value;
					});
					return d;
				})(), first, last);
				if(expression !== null) {
					node.init = expression.value;
				}
				return node;
			}
			function VariableDeclarator(modifiers, name, type, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.VariableDeclarator;
					d.modifiers = modifiers;
					d.name = name.value;
					return d;
				})(), first, last);
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			}
			function WhileStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location((function() {
					var d = new Dictionary();
					d.kind = NodeKind.WhileStatement;
					d.attributes = [];
					d.condition = condition.value;
					d.body = body.value;
					return d;
				})(), first, last);
			}
			return {
				reorderExpression: reorderExpression,
				AccessorDeclaration: AccessorDeclaration,
				ArrayBinding: ArrayBinding,
				ArrayBindingElement: ArrayBindingElement,
				ArrayComprehension: ArrayComprehension,
				ArrayExpression: ArrayExpression,
				ArrayRangeFI: ArrayRangeFI,
				ArrayRangeFO: ArrayRangeFO,
				ArrayRangeTI: ArrayRangeTI,
				ArrayRangeTO: ArrayRangeTO,
				ArrayReference: ArrayReference,
				AssignmentOperator: AssignmentOperator,
				AttributeDeclaration: AttributeDeclaration,
				AttributeExpression: AttributeExpression,
				AttributeOperation: AttributeOperation,
				AwaitExpression: AwaitExpression,
				BinaryExpression: BinaryExpression,
				BinaryOperator: BinaryOperator,
				Block: Block,
				BreakStatement: BreakStatement,
				CallExpression: CallExpression,
				CallMacroExpression: CallMacroExpression,
				CatchClause: CatchClause,
				ClassDeclaration: ClassDeclaration,
				ComparisonExpression: ComparisonExpression,
				ComputedPropertyName: ComputedPropertyName,
				ConditionalExpression: ConditionalExpression,
				ContinueStatement: ContinueStatement,
				CreateExpression: CreateExpression,
				CurryExpression: CurryExpression,
				DestroyStatement: DestroyStatement,
				DiscloseDeclaration: DiscloseDeclaration,
				DoUntilStatement: DoUntilStatement,
				DoWhileStatement: DoWhileStatement,
				EnumExpression: EnumExpression,
				EnumDeclaration: EnumDeclaration,
				EnumMember: EnumMember,
				ExclusionType: ExclusionType,
				ExportDeclaration: ExportDeclaration,
				ExportDeclarationSpecifier: ExportDeclarationSpecifier,
				ExportExclusionSpecifier: ExportExclusionSpecifier,
				ExportNamedSpecifier: ExportNamedSpecifier,
				ExportPropertiesSpecifier: ExportPropertiesSpecifier,
				ExportWildcardSpecifier: ExportWildcardSpecifier,
				ExpressionStatement: ExpressionStatement,
				ExternDeclaration: ExternDeclaration,
				ExternOrRequireDeclaration: ExternOrRequireDeclaration,
				FallthroughStatement: FallthroughStatement,
				FieldDeclaration: FieldDeclaration,
				ForFromStatement: ForFromStatement,
				ForInStatement: ForInStatement,
				ForRangeStatement: ForRangeStatement,
				ForOfStatement: ForOfStatement,
				FunctionDeclaration: FunctionDeclaration,
				FunctionExpression: FunctionExpression,
				FusionType: FusionType,
				IfExpression: IfExpression,
				IfStatement: IfStatement,
				ImplementDeclaration: ImplementDeclaration,
				ImportArgument: ImportArgument,
				ImportDeclaration: ImportDeclaration,
				ImportDeclarator: ImportDeclarator,
				ImportExclusionSpecifier: ImportExclusionSpecifier,
				ImportNamespaceSpecifier: ImportNamespaceSpecifier,
				ImportSpecifier: ImportSpecifier,
				Identifier: Identifier,
				IncludeAgainDeclaration: IncludeAgainDeclaration,
				IncludeDeclaration: IncludeDeclaration,
				LambdaExpression: LambdaExpression,
				Literal: Literal,
				MacroDeclaration: MacroDeclaration,
				MacroExpression: MacroExpression,
				MacroElementExpression: MacroElementExpression,
				MacroElementLiteral: MacroElementLiteral,
				MacroElementNewLine: MacroElementNewLine,
				MacroReification: MacroReification,
				MemberExpression: MemberExpression,
				MethodDeclaration: MethodDeclaration,
				Modifier: Modifier,
				Module: Module,
				MutatorDeclaration: MutatorDeclaration,
				Nullable: Nullable,
				NamedArgument: NamedArgument,
				NamespaceDeclaration: NamespaceDeclaration,
				NumericExpression: NumericExpression,
				ObjectBinding: ObjectBinding,
				ObjectBindingElement: ObjectBindingElement,
				ObjectExpression: ObjectExpression,
				ObjectMember: ObjectMember,
				ObjectReference: ObjectReference,
				ObjectMemberReference: ObjectMemberReference,
				OmittedExpression: OmittedExpression,
				OmittedReference: OmittedReference,
				PropertyDeclaration: PropertyDeclaration,
				Parameter: Parameter,
				RegularExpression: RegularExpression,
				RequireDeclaration: RequireDeclaration,
				RequireOrExternDeclaration: RequireOrExternDeclaration,
				RequireOrImportDeclaration: RequireOrImportDeclaration,
				RestModifier: RestModifier,
				ReturnStatement: ReturnStatement,
				Scope: Scope,
				SequenceExpression: SequenceExpression,
				ShorthandProperty: ShorthandProperty,
				StructDeclaration: StructDeclaration,
				StructField: StructField,
				SwitchClause: SwitchClause,
				SwitchConditionArray: SwitchConditionArray,
				SwitchConditionObject: SwitchConditionObject,
				SwitchConditionRangeFI: SwitchConditionRangeFI,
				SwitchConditionRangeFO: SwitchConditionRangeFO,
				SwitchConditionRangeTI: SwitchConditionRangeTI,
				SwitchConditionRangeTO: SwitchConditionRangeTO,
				SwitchConditionType: SwitchConditionType,
				SwitchExpression: SwitchExpression,
				SwitchStatement: SwitchStatement,
				SwitchTypeCasting: SwitchTypeCasting,
				TaggedTemplateExpression: TaggedTemplateExpression,
				TemplateExpression: TemplateExpression,
				ThisExpression: ThisExpression,
				ThrowStatement: ThrowStatement,
				TryExpression: TryExpression,
				TryStatement: TryStatement,
				TypeReference: TypeReference,
				TypeAliasDeclaration: TypeAliasDeclaration,
				UnaryExpression: UnaryExpression,
				UnaryOperator: UnaryOperator,
				UnionType: UnionType,
				UnlessExpression: UnlessExpression,
				UnlessStatement: UnlessStatement,
				UntilStatement: UntilStatement,
				VariableDeclaration: VariableDeclaration,
				VariableDeclarator: VariableDeclarator,
				WhileStatement: WhileStatement
			};
		});
		var Token = KSHelper.enum(Number, {
			INVALID: 0,
			ABSTRACT: 1,
			AMPERSAND: 2,
			AMPERSAND_AMPERSAND: 3,
			AMPERSAND_EQUALS: 4,
			AS: 5,
			ASTERISK: 6,
			ASTERISK_ASTERISK_LEFT_ROUND: 7,
			ASTERISK_DOLLAR_LEFT_ROUND: 8,
			ASTERISK_EQUALS: 9,
			ASYNC: 10,
			AT: 11,
			ATTRIBUTE_IDENTIFIER: 12,
			AWAIT: 13,
			BINARY_NUMBER: 14,
			BREAK: 15,
			BUT: 16,
			BY: 17,
			CARET: 18,
			CARET_AT_LEFT_ROUND: 19,
			CARET_CARET: 20,
			CARET_CARET_LEFT_ROUND: 21,
			CARET_DOLLAR_LEFT_ROUND: 22,
			CARET_EQUALS: 23,
			CATCH: 24,
			CLASS: 25,
			CLASS_VERSION: 26,
			COLON: 27,
			COLON_COLON: 28,
			COLON_EQUALS: 29,
			COMMA: 30,
			CONST: 31,
			CONTINUE: 32,
			DECIMAL_NUMBER: 33,
			DELETE: 34,
			DESC: 35,
			DISCLOSE: 36,
			DO: 37,
			DOT: 38,
			DOT_DOT: 39,
			DOT_DOT_DOT: 40,
			ELSE: 41,
			ELSE_IF: 42,
			ENUM: 43,
			EOF: 44,
			EQUALS: 45,
			EQUALS_EQUALS: 46,
			EQUALS_RIGHT_ANGLE: 47,
			EXCLAMATION: 48,
			EXCLAMATION_EQUALS: 49,
			EXCLAMATION_EXCLAMATION: 50,
			EXCLAMATION_LEFT_ROUND: 51,
			EXCLAMATION_QUESTION: 52,
			EXCLAMATION_QUESTION_EQUALS: 53,
			EXPORT: 54,
			EXTENDS: 55,
			EXTERN: 56,
			EXTERN_REQUIRE: 57,
			FALLTHROUGH: 58,
			FINAL: 59,
			FINALLY: 60,
			FOR: 61,
			FROM: 62,
			FUNC: 63,
			GET: 64,
			HASH: 65,
			HASH_EXCLAMATION_LEFT_SQUARE: 66,
			HASH_LEFT_SQUARE: 67,
			HEX_NUMBER: 68,
			IDENTIFIER: 69,
			IF: 70,
			IMPL: 71,
			IMPORT: 72,
			IMPORT_LITERAL: 73,
			IN: 74,
			INCLUDE: 75,
			INCLUDE_AGAIN: 76,
			INTERNAL: 77,
			IS: 78,
			IS_NOT: 79,
			LEFT_ANGLE: 80,
			LEFT_ANGLE_EQUALS: 81,
			LEFT_ANGLE_LEFT_ANGLE: 82,
			LEFT_ANGLE_LEFT_ANGLE_EQUALS: 83,
			LEFT_CURLY: 84,
			LEFT_ROUND: 85,
			LEFT_SQUARE: 86,
			LET: 87,
			MACRO: 88,
			MINUS: 89,
			MINUS_EQUALS: 90,
			MINUS_MINUS: 91,
			MINUS_RIGHT_ANGLE: 92,
			NAMESPACE: 93,
			NEW: 94,
			NEWLINE: 95,
			NUMERAL: 96,
			OCTAL_NUMBER: 97,
			OF: 98,
			ON: 99,
			OVERRIDE: 100,
			OVERWRITE: 101,
			PERCENT: 102,
			PERCENT_EQUALS: 103,
			PIPE: 104,
			PIPE_EQUALS: 105,
			PIPE_PIPE: 106,
			PLUS: 107,
			PLUS_EQUALS: 108,
			PLUS_PLUS: 109,
			PRIVATE: 110,
			PROTECTED: 111,
			PUBLIC: 112,
			QUESTION: 113,
			QUESTION_EQUALS: 114,
			QUESTION_DOT: 115,
			QUESTION_LEFT_ROUND: 116,
			QUESTION_LEFT_SQUARE: 117,
			QUESTION_QUESTION: 118,
			QUESTION_QUESTION_EQUALS: 119,
			RADIX_NUMBER: 120,
			REGEXP: 121,
			REQUIRE: 122,
			REQUIRE_EXTERN: 123,
			REQUIRE_IMPORT: 124,
			RETURN: 125,
			RIGHT_ANGLE: 126,
			RIGHT_ANGLE_EQUALS: 127,
			RIGHT_ANGLE_RIGHT_ANGLE: 128,
			RIGHT_ANGLE_RIGHT_ANGLE_EQUALS: 129,
			RIGHT_CURLY: 130,
			RIGHT_ROUND: 131,
			RIGHT_SQUARE: 132,
			SEALED: 133,
			SET: 134,
			SLASH: 135,
			SLASH_DOT: 136,
			SLASH_DOT_EQUALS: 137,
			SLASH_EQUALS: 138,
			STATIC: 139,
			STRING: 140,
			STRUCT: 141,
			SWITCH: 142,
			TEMPLATE_BEGIN: 143,
			TEMPLATE_ELEMENT: 144,
			TEMPLATE_END: 145,
			TEMPLATE_VALUE: 146,
			THROW: 147,
			TIL: 148,
			TILDE: 149,
			TILDE_TILDE: 150,
			TO: 151,
			TRY: 152,
			TYPE: 153,
			UNDERSCORE: 154,
			UNLESS: 155,
			UNTIL: 156,
			WHEN: 157,
			WHERE: 158,
			WHILE: 159,
			WITH: 160
		});
		var overhauls = (function() {
			var d = new Dictionary();
			d[Token.CLASS_VERSION] = function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return data.split(".");
			};
			d[Token.STRING] = function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return data.slice(1, -1).replace(/(^|[^\\])\\('|")/g, "$1$2");
			};
			return d;
		})();
		var regex = (function() {
			var d = new Dictionary();
			d.binary_number = /^0b[_0-1]+[a-zA-Z]*/;
			d.class_version = /^\d+(\.\d+(\.\d+)?)?/;
			d.decimal_number = /^[0-9][_0-9]*(?:\.[_0-9]+)?(?:[eE][-+]?[_0-9]+)?(?:[a-zA-Z]*)/;
			d.dot_number = /^\.[_0-9]+(?:[eE][-+]?[_0-9]+|[a-zA-Z]*)/;
			d.double_quote = /^([^\\"]|\\.)*\"/;
			d.hex_number = /^0x[_0-9a-fA-F]+(?:\.[_0-9a-fA-F]+[pP][-+]?[_0-9]+)?[a-zA-Z]*/;
			d.macro_value = /^[^#\r\n]+/;
			d.octal_number = /^0o[_0-7]+(?:\.[_0-7]+[pP][-+]?[_0-9]+)?[a-zA-Z]*/;
			d.radix_number = /^(?:[0-9]|[1-2][0-9]|3[0-6])r[_0-9a-zA-Z]+(?:\.[_0-9a-zA-Z]+)?/;
			d.regex = /^=?(?:[^\n\r\*\\\/\[]|\\[^\n\r]|\[(?:[^\n\r\]\\]|\\[^\n\r])*\])(?:[^\n\r\\\/\[]|\\[^\n\r]|\[(?:[^\n\r\]\\]|\\[^\n\r])*\])*\/[gmi]*/;
			d.resource = /(^\s*\r?\n\s*)|(^\})|(^\s*\/\/[^\r\n]*\r?\n\s*)|(^\s*\/\*)|(^\S+)/;
			d.single_quote = /^([^\\']|\\.)*\'/;
			d.template = /^(?:[^`\\]|\\\\|\\(?!\())+/;
			return d;
		})();
		var M = KSHelper.namespace(function() {
			function ASSIGNEMENT_OPERATOR(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 37) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.PERCENT_EQUALS;
					}
				}
				else if(c === 38) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.AMPERSAND_EQUALS;
					}
				}
				else if(c === 42) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.ASTERISK_EQUALS;
					}
				}
				else if(c === 43) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.PLUS_EQUALS;
					}
				}
				else if(c === 45) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.MINUS_EQUALS;
					}
				}
				else if(c === 47) {
					c = that.charAt(1);
					if(c === 46) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.SLASH_DOT_EQUALS;
						}
					}
					else if(c === 61) {
						that.next(2);
						return Token.SLASH_EQUALS;
					}
				}
				else if(c === 60) {
					if(that.charAt(1) === 60) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS;
						}
					}
				}
				else if(c === 61) {
					c = that.charAt(1);
					if((c !== 61) && (c !== 62)) {
						that.next(1);
						return Token.EQUALS;
					}
				}
				else if(c === 62) {
					if(that.charAt(1) === 62) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS;
						}
					}
				}
				else if(c === 63) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.QUESTION_EQUALS;
					}
					else if(c === 63) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.QUESTION_QUESTION_EQUALS;
						}
					}
				}
				return Token.INVALID;
			}
			function BINARY_OPERATOR(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 33) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.EXCLAMATION_EQUALS;
					}
					else if((c === 63) && (that.charAt(2) === 61)) {
						that.next(3);
						return Token.EXCLAMATION_QUESTION_EQUALS;
					}
				}
				else if(c === 37) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.PERCENT_EQUALS;
					}
					else {
						that.next(1);
						return Token.PERCENT;
					}
				}
				else if(c === 38) {
					c = that.charAt(1);
					if(c === 38) {
						that.next(2);
						return Token.AMPERSAND_AMPERSAND;
					}
					else if(c === 61) {
						that.next(2);
						return Token.AMPERSAND_EQUALS;
					}
					else {
						that.next(1);
						return Token.AMPERSAND;
					}
				}
				else if(c === 42) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.ASTERISK_EQUALS;
					}
					else {
						that.next(1);
						return Token.ASTERISK;
					}
				}
				else if(c === 43) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.PLUS_EQUALS;
					}
					else if(c !== 43) {
						that.next(1);
						return Token.PLUS;
					}
				}
				else if(c === 45) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.MINUS_EQUALS;
					}
					else if(c === 62) {
						that.next(2);
						return Token.MINUS_RIGHT_ANGLE;
					}
					else if(c !== 45) {
						that.next(1);
						return Token.MINUS;
					}
				}
				else if(c === 47) {
					c = that.charAt(1);
					if(c === 46) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.SLASH_DOT_EQUALS;
						}
						else {
							that.next(2);
							return Token.SLASH_DOT;
						}
					}
					else if(c === 61) {
						that.next(2);
						return Token.SLASH_EQUALS;
					}
					else {
						that.next(1);
						return Token.SLASH;
					}
				}
				else if(c === 60) {
					c = that.charAt(1);
					if(c === 60) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS;
						}
						else {
							that.next(2);
							return Token.LEFT_ANGLE_LEFT_ANGLE;
						}
					}
					else if(c === 61) {
						that.next(2);
						return Token.LEFT_ANGLE_EQUALS;
					}
					else {
						that.next(1);
						return Token.LEFT_ANGLE;
					}
				}
				else if(c === 61) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.EQUALS_EQUALS;
					}
					else if(c !== 62) {
						that.next(1);
						return Token.EQUALS;
					}
				}
				else if(c === 62) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.RIGHT_ANGLE_EQUALS;
					}
					else if(c === 62) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS;
						}
						else {
							that.next(2);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE;
						}
					}
					else {
						that.next(1);
						return Token.RIGHT_ANGLE;
					}
				}
				else if(c === 63) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.QUESTION_EQUALS;
					}
					else if(c === 63) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.QUESTION_QUESTION_EQUALS;
						}
						else {
							that.next(2);
							return Token.QUESTION_QUESTION;
						}
					}
				}
				else if(c === 94) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.CARET_EQUALS;
					}
					else if(c === 94) {
						that.next(2);
						return Token.CARET_CARET;
					}
					else {
						that.next(1);
						return Token.CARET;
					}
				}
				else if(c === 124) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.PIPE_EQUALS;
					}
					else if(c === 124) {
						that.next(2);
						return Token.PIPE_PIPE;
					}
					else {
						that.next(1);
						return Token.PIPE;
					}
				}
				return Token.INVALID;
			}
			function EXPORT_STATEMENT(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if((c === 95) && !(that.isBoundary(1) === true)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 97) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "bstract") {
						return Token.ABSTRACT;
					}
					else if(identifier === "sync") {
						return Token.ASYNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 99) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "lass") {
						return Token.CLASS;
					}
					else if(identifier === "onst") {
						return Token.CONST;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 101) {
					if(that.scanIdentifier(true) === "num") {
						return Token.ENUM;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "inal") {
						return Token.FINAL;
					}
					else if(identifier === "unc") {
						return Token.FUNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 108) {
					if(that.scanIdentifier(true) === "et") {
						return Token.LET;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 109) {
					if(that.scanIdentifier(true) === "acro") {
						return Token.MACRO;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.scanIdentifier(true) === "amespace") {
						return Token.NAMESPACE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "ealed") {
						return Token.SEALED;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 116) {
					if(that.scanIdentifier(true) === "ype") {
						return Token.TYPE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || (KSOperator.gte(c, 65) && KSOperator.lte(c, 90)) || (KSOperator.gte(c, 97) && KSOperator.lte(c, 122))) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			}
			function EXTERN_STATEMENT(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if((c === 95) && !(that.isBoundary(1) === true)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 97) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "bstract") {
						return Token.ABSTRACT;
					}
					else if(identifier === "sync") {
						return Token.ASYNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 99) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "lass") {
						return Token.CLASS;
					}
					else if(identifier === "onst") {
						return Token.CONST;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 101) {
					if(that.scanIdentifier(true) === "num") {
						return Token.ENUM;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					if(that.scanIdentifier(true) === "unc") {
						return Token.FUNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 108) {
					if(that.scanIdentifier(true) === "et") {
						return Token.LET;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.scanIdentifier(true) === "amespace") {
						return Token.NAMESPACE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					if(that.scanIdentifier(true) === "ealed") {
						return Token.SEALED;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || (KSOperator.gte(c, 65) && KSOperator.lte(c, 90)) || (KSOperator.gte(c, 97) && KSOperator.lte(c, 122))) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			}
			function MACRO(that, index) {
				var c = that._data.charCodeAt(++index);
				if((c === 13) && (that.charAt(1) === 10)) {
					that.nextLine(2);
					return Token.NEWLINE;
				}
				else if((c === 10) || (c === 13)) {
					that.nextLine(1);
					return Token.NEWLINE;
				}
				else if(c === 35) {
					that.next(1);
					return Token.HASH;
				}
				else if(c === 40) {
					that.next(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 41) {
					that.next(1);
					return Token.RIGHT_ROUND;
				}
				else if(c === 123) {
					that.next(1);
					return Token.LEFT_CURLY;
				}
				else if(c === 125) {
					that.next(1);
					return Token.RIGHT_CURLY;
				}
				var from = index;
				while(++index < that._length) {
					c = that._data.charCodeAt(index);
					if((c === 10) || (c === 13) || (c === 35) || (c === 40) || (c === 41) || (c === 123) || (c === 125)) {
						that.next(index - from);
						return Token.INVALID;
					}
				}
				if(index === (from + 1)) {
					return Token.EOF;
				}
				else {
					that.next(index - from);
					return Token.INVALID;
				}
			}
			function MODULE_STATEMENT(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 100) {
					if((that.charAt(1) === 105) && (that.charAt(2) === 115) && (that.charAt(3) === 99) && (that.charAt(4) === 108) && (that.charAt(5) === 111) && (that.charAt(6) === 115) && (that.charAt(7) === 101) && (that.isBoundary(8) === true)) {
						that.next(8);
						return Token.DISCLOSE;
					}
				}
				else if(c === 101) {
					if((that.charAt(1) === 120) && (that.charAt(2) === 112) && (that.charAt(3) === 111) && (that.charAt(4) === 114) && (that.charAt(5) === 116) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.EXPORT;
					}
					else if((that.charAt(1) === 120) && (that.charAt(2) === 116) && (that.charAt(3) === 101) && (that.charAt(4) === 114) && (that.charAt(5) === 110)) {
						if(that.charAt(6) === 124) {
							if((that.charAt(7) === 114) && (that.charAt(8) === 101) && (that.charAt(9) === 113) && (that.charAt(10) === 117) && (that.charAt(11) === 105) && (that.charAt(12) === 114) && (that.charAt(13) === 101) && (that.isBoundary(14) === true)) {
								that.next(14);
								return Token.EXTERN_REQUIRE;
							}
						}
						else if(that.isBoundary(6) === true) {
							that.next(6);
							return Token.EXTERN;
						}
					}
				}
				else if(c === 105) {
					if((that.charAt(1) === 110) && (that.charAt(2) === 99) && (that.charAt(3) === 108) && (that.charAt(4) === 117) && (that.charAt(5) === 100) && (that.charAt(6) === 101)) {
						if((that.charAt(7) === 32) && (that.charAt(8) === 97) && (that.charAt(9) === 103) && (that.charAt(10) === 97) && (that.charAt(11) === 105) && (that.charAt(12) === 110) && (that.isBoundary(13) === true)) {
							that.next(13);
							return Token.INCLUDE_AGAIN;
						}
						else if(that.isBoundary(7) === true) {
							that.next(7);
							return Token.INCLUDE;
						}
					}
				}
				else if(c === 114) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 113) && (that.charAt(3) === 117) && (that.charAt(4) === 105) && (that.charAt(5) === 114) && (that.charAt(6) === 101)) {
						if(that.charAt(7) === 124) {
							if((that.charAt(8) === 101) && (that.charAt(9) === 120) && (that.charAt(10) === 116) && (that.charAt(11) === 101) && (that.charAt(12) === 114) && (that.charAt(13) === 110) && (that.isBoundary(14) === true)) {
								that.next(14);
								return Token.REQUIRE_EXTERN;
							}
							else if((that.charAt(8) === 105) && (that.charAt(9) === 109) && (that.charAt(10) === 112) && (that.charAt(11) === 111) && (that.charAt(12) === 114) && (that.charAt(13) === 116) && (that.isBoundary(14) === true)) {
								that.next(14);
								return Token.REQUIRE_IMPORT;
							}
						}
						else if(that.isBoundary(7) === true) {
							that.next(7);
							return Token.REQUIRE;
						}
					}
				}
				return Token.INVALID;
			}
			function NUMBER(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 46) {
					var substr = that._data.substr(that._index);
					var match, __ks_0;
					if(KSType.isValue(__ks_0 = regex.dot_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.next(match[0].length);
						return Token.DECIMAL_NUMBER;
					}
				}
				else if(KSOperator.gte(c, 48) && KSOperator.lte(c, 57)) {
					var substr = that._data.substr(that._index);
					var match, __ks_0;
					if(KSType.isValue(__ks_0 = regex.binary_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.next(match[0].length);
						return Token.BINARY_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.octal_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.next(match[0].length);
						return Token.OCTAL_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.hex_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.next(match[0].length);
						return Token.HEX_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.radix_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.next(match[0].length);
						return Token.RADIX_NUMBER;
					}
					else if(KSType.isValue(__ks_0 = regex.decimal_number.exec(substr)) ? (match = __ks_0, true) : false) {
						that.next(match[0].length);
						return Token.DECIMAL_NUMBER;
					}
				}
				return Token.INVALID;
			}
			function OPERAND(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 34) {
					var match = regex.double_quote.exec(that.substringAt(1));
					if(KSType.isValue(match)) {
						that.next(match[0].length + 1);
						return Token.STRING;
					}
				}
				else if(c === 36) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 39) {
					var match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.single_quote.exec(that.substringAt(1))) ? (match = __ks_0, true) : false) {
						that.next(match[0].length + 1);
						return Token.STRING;
					}
				}
				else if(c === 40) {
					that.next(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 47) {
					var match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.regex.exec(that.substringAt(1))) ? (match = __ks_0, true) : false) {
						that.next(match[0].length + 1);
						return Token.REGEXP;
					}
				}
				else if(c === 64) {
					that.next(1);
					return Token.AT;
				}
				else if(KSOperator.gte(c, 65) && KSOperator.lte(c, 90)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 91) {
					that.next(1);
					return Token.LEFT_SQUARE;
				}
				else if((c === 95) && !(that.isBoundary(1) === true)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 96) {
					that.next(1);
					return Token.TEMPLATE_BEGIN;
				}
				else if(c === 110) {
					if(that.scanIdentifier(true) === "ew") {
						return Token.NEW;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(KSOperator.gte(c, 97) && KSOperator.lte(c, 122)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 123) {
					that.next(1);
					return Token.LEFT_CURLY;
				}
				return Token.INVALID;
			}
			function OPERAND_JUNCTION(that, index) {
				var c = that._data.charCodeAt(index + 1);
				var p = that._data.charCodeAt(index);
				if((p === 9) || (p === 32)) {
					return Token.INVALID;
				}
				else if((c === 13) && (that.charAt(1) === 10)) {
					that.nextLine(2);
					return Token.NEWLINE;
				}
				else if((c === 10) || (c === 13)) {
					that.nextLine(1);
					return Token.NEWLINE;
				}
				else if(c === 33) {
					if(that.charAt(1) === 40) {
						that.next(2);
						return Token.EXCLAMATION_LEFT_ROUND;
					}
				}
				else if(c === 40) {
					that.next(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 42) {
					if(that.charAt(2) === 40) {
						c = that.charAt(1);
						if(c === 36) {
							that.next(3);
							return Token.ASTERISK_DOLLAR_LEFT_ROUND;
						}
						else if(c === 42) {
							that.next(3);
							return Token.ASTERISK_ASTERISK_LEFT_ROUND;
						}
					}
				}
				else if(c === 46) {
					if(((c = that.charAt(1)) !== 46) && (c !== 9) && (c !== 32)) {
						that.next(1);
						return Token.DOT;
					}
				}
				else if(c === 58) {
					c = that.charAt(1);
					if((c === 58) && !(((c = that.charAt(2)) === 9) || (c === 32))) {
						that.next(2);
						return Token.COLON_COLON;
					}
					else if((c !== 61) && (c !== 9) && (c !== 32)) {
						that.next(1);
						return Token.COLON;
					}
				}
				else if(c === 63) {
					c = that.charAt(1);
					if(c === 40) {
						that.next(2);
						return Token.QUESTION_LEFT_ROUND;
					}
					else if((c === 46) && !(((c = that.charAt(2)) === 9) || (c === 32))) {
						that.next(2);
						return Token.QUESTION_DOT;
					}
					else if(c === 91) {
						that.next(2);
						return Token.QUESTION_LEFT_SQUARE;
					}
				}
				else if(c === 91) {
					that.next(1);
					return Token.LEFT_SQUARE;
				}
				else if(c === 94) {
					if(that.charAt(2) === 40) {
						c = that.charAt(1);
						if(c === 36) {
							that.next(3);
							return Token.CARET_DOLLAR_LEFT_ROUND;
						}
						else if(c === 64) {
							that.next(3);
							return Token.CARET_AT_LEFT_ROUND;
						}
						else if(c === 94) {
							that.next(3);
							return Token.CARET_CARET_LEFT_ROUND;
						}
					}
				}
				else if(c === 96) {
					that.next(1);
					return Token.TEMPLATE_BEGIN;
				}
				return Token.INVALID;
			}
			function POSTFIX_OPERATOR(that, index) {
				var p = that._data.charCodeAt(index);
				var c = that._data.charCodeAt(index + 1);
				if((p === 9) || (p === 32)) {
					return Token.INVALID;
				}
				else if(c === 33) {
					if((c = that.charAt(1)) === 33) {
						that.next(2);
						return Token.EXCLAMATION_EXCLAMATION;
					}
					else if(c === 63) {
						that.next(2);
						return Token.EXCLAMATION_QUESTION;
					}
				}
				else if(c === 43) {
					if(that.charAt(1) === 43) {
						that.next(2);
						return Token.PLUS_PLUS;
					}
				}
				else if(c === 45) {
					if(that.charAt(1) === 45) {
						that.next(2);
						return Token.MINUS_MINUS;
					}
				}
				else if(c === 63) {
					if(!(((c = that.charAt(1)) === 40) || (c === 46) || (c === 61) || (c === 63) || (c === 91))) {
						that.next(1);
						return Token.QUESTION;
					}
				}
				return Token.INVALID;
			}
			function PREFIX_OPERATOR(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 33) {
					if(!(((c = that.charAt(1)) === 61) || ((c === 63) && (that.charAt(2) === 61)) || (c === 9) || (c === 32))) {
						that.next(1);
						return Token.EXCLAMATION;
					}
				}
				else if(c === 43) {
					if((that.charAt(1) === 43) && !(((c = that.charAt(2)) === 9) || (c === 32))) {
						that.next(2);
						return Token.PLUS_PLUS;
					}
				}
				else if(c === 45) {
					c = that.charAt(1);
					if(c === 45) {
						if(!(((c = that.charAt(2)) === 9) || (c === 32))) {
							that.next(2);
							return Token.MINUS_MINUS;
						}
					}
					else if(((c !== 61) && (c !== 9)) || (c !== 32)) {
						that.next(1);
						return Token.MINUS;
					}
				}
				else if(c === 46) {
					if((that.charAt(1) === 46) && (that.charAt(2) === 46) && !(((c = that.charAt(3)) === 9) || (c === 32))) {
						that.next(3);
						return Token.DOT_DOT_DOT;
					}
				}
				else if(c === 63) {
					if(!(((c = that.charAt(1)) === 9) || (c === 32))) {
						that.next(1);
						return Token.QUESTION;
					}
				}
				else if(c === 126) {
					if(!(((c = that.charAt(1)) === 9) || (c === 32))) {
						that.next(1);
						return Token.TILDE;
					}
				}
				return Token.INVALID;
			}
			function STATEMENT(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 97) {
					if((that.charAt(1) === 98) && (that.charAt(2) === 115) && (that.charAt(3) === 116) && (that.charAt(4) === 114) && (that.charAt(5) === 97) && (that.charAt(6) === 99) && (that.charAt(7) === 116) && (that.isBoundary(8) === true)) {
						that.next(8);
						return Token.ABSTRACT;
					}
					else if((that.charAt(1) === 115) && (that.charAt(2) === 121) && (that.charAt(3) === 110) && (that.charAt(4) === 99) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.ASYNC;
					}
				}
				else if(c === 98) {
					if((that.charAt(1) === 114) && (that.charAt(2) === 101) && (that.charAt(3) === 97) && (that.charAt(4) === 107) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.BREAK;
					}
				}
				else if(c === 99) {
					if((that.charAt(1) === 108) && (that.charAt(2) === 97) && (that.charAt(3) === 115) && (that.charAt(4) === 115) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.CLASS;
					}
					else if((that.charAt(1) === 111) && (that.charAt(2) === 110) && (that.charAt(3) === 115) && (that.charAt(4) === 116) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.CONST;
					}
					else if((that.charAt(1) === 111) && (that.charAt(2) === 110) && (that.charAt(3) === 116) && (that.charAt(4) === 105) && (that.charAt(5) === 110) && (that.charAt(6) === 117) && (that.charAt(7) === 101) && (that.isBoundary(8) === true)) {
						that.next(8);
						return Token.CONTINUE;
					}
				}
				else if(c === 100) {
					if((that.charAt(1) === 111) && (that.isBoundary(2) === true)) {
						that.next(2);
						return Token.DO;
					}
					else if((that.charAt(1) === 101) && (that.charAt(2) === 108) && (that.charAt(3) === 101) && (that.charAt(4) === 116) && (that.charAt(5) === 101) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.DELETE;
					}
				}
				else if(c === 101) {
					if((that.charAt(1) === 110) && (that.charAt(2) === 117) && (that.charAt(3) === 109) && (that.isBoundary(4) === true)) {
						that.next(4);
						return Token.ENUM;
					}
				}
				else if(c === 102) {
					if((that.charAt(1) === 105) && (that.charAt(2) === 110) && (that.charAt(3) === 97) && (that.charAt(4) === 108) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.FINAL;
					}
					else if((that.charAt(1) === 111) && (that.charAt(2) === 114) && (that.isBoundary(3) === true)) {
						that.next(3);
						return Token.FOR;
					}
					else if((that.charAt(1) === 117) && (that.charAt(2) === 110) && (that.charAt(3) === 99) && (that.isBoundary(4) === true)) {
						that.next(4);
						return Token.FUNC;
					}
					else if((that.charAt(1) === 97) && (that.charAt(2) === 108) && (that.charAt(3) === 108) && (that.charAt(4) === 116) && (that.charAt(5) === 104) && (that.charAt(6) === 114) && (that.charAt(7) === 111) && (that.charAt(8) === 117) && (that.charAt(9) === 103) && (that.charAt(10) === 104) && (that.isBoundary(11) === true)) {
						that.next(11);
						return Token.FALLTHROUGH;
					}
				}
				else if(c === 105) {
					if((that.charAt(1) === 102) && (that.isBoundary(2) === true)) {
						that.next(2);
						return Token.IF;
					}
					else if((that.charAt(1) === 109) && (that.charAt(2) === 112) && (that.charAt(3) === 108) && (that.isBoundary(4) === true)) {
						that.next(4);
						return Token.IMPL;
					}
					else if((that.charAt(1) === 109) && (that.charAt(2) === 112) && (that.charAt(3) === 111) && (that.charAt(4) === 114) && (that.charAt(5) === 116) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.IMPORT;
					}
				}
				else if(c === 108) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.isBoundary(3) === true)) {
						that.next(3);
						return Token.LET;
					}
				}
				else if(c === 109) {
					if((that.charAt(1) === 97) && (that.charAt(2) === 99) && (that.charAt(3) === 114) && (that.charAt(4) === 111) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.MACRO;
					}
				}
				else if(c === 110) {
					if((that.charAt(1) === 97) && (that.charAt(2) === 109) && (that.charAt(3) === 101) && (that.charAt(4) === 115) && (that.charAt(5) === 112) && (that.charAt(6) === 97) && (that.charAt(7) === 99) && (that.charAt(8) === 101) && (that.isBoundary(9) === true)) {
						that.next(9);
						return Token.NAMESPACE;
					}
				}
				else if(c === 114) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.charAt(3) === 117) && (that.charAt(4) === 114) && (that.charAt(5) === 110) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.RETURN;
					}
				}
				else if(c === 115) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 97) && (that.charAt(3) === 108) && (that.charAt(4) === 101) && (that.charAt(5) === 100) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.SEALED;
					}
					else if((that.charAt(1) === 116) && (that.charAt(2) === 114) && (that.charAt(3) === 117) && (that.charAt(4) === 99) && (that.charAt(5) === 116) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.STRUCT;
					}
					else if((that.charAt(1) === 119) && (that.charAt(2) === 105) && (that.charAt(3) === 116) && (that.charAt(4) === 99) && (that.charAt(5) === 104) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.SWITCH;
					}
				}
				else if(c === 116) {
					if((that.charAt(1) === 104) && (that.charAt(2) === 114) && (that.charAt(3) === 111) && (that.charAt(4) === 119) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.THROW;
					}
					else if((that.charAt(1) === 114) && (that.charAt(2) === 121) && (that.isBoundary(3) === true)) {
						that.next(3);
						return Token.TRY;
					}
					else if((that.charAt(1) === 121) && (that.charAt(2) === 112) && (that.charAt(3) === 101) && (that.isBoundary(4) === true)) {
						that.next(4);
						return Token.TYPE;
					}
				}
				else if(c === 117) {
					if((that.charAt(1) === 110) && (that.charAt(2) === 108) && (that.charAt(3) === 101) && (that.charAt(4) === 115) && (that.charAt(5) === 115) && (that.isBoundary(6) === true)) {
						that.next(6);
						return Token.UNLESS;
					}
					else if((that.charAt(1) === 110) && (that.charAt(2) === 116) && (that.charAt(3) === 105) && (that.charAt(4) === 108) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.UNTIL;
					}
				}
				else if(c === 119) {
					if((that.charAt(1) === 104) && (that.charAt(2) === 105) && (that.charAt(3) === 108) && (that.charAt(4) === 101) && (that.isBoundary(5) === true)) {
						that.next(5);
						return Token.WHILE;
					}
				}
				return Token.INVALID;
			}
			function TEMPLATE(that, index) {
				var c = that._data.charCodeAt(++index);
				var match, __ks_0, __ks_1;
				if((c === 92) && (that._data.charCodeAt(index + 1) === 40)) {
					that.next(2);
					return Token.TEMPLATE_ELEMENT;
				}
				else if(c === 96) {
					return Token.TEMPLATE_END;
				}
				else if(KSType.isValue(__ks_0 = regex.template.exec(that._data.substr(index))) ? (match = __ks_0, true) : false) {
					that.next(match[0].length);
					return Token.TEMPLATE_VALUE;
				}
				return Token.INVALID;
			}
			function TYPE_OPERATOR(that, index) {
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(index === that._index) {
					return Token.INVALID;
				}
				else if(c === 97) {
					if((that.charAt(1) === 115) && (that.isBoundary(2) === true)) {
						that.next(2);
						return Token.AS;
					}
				}
				else if(c === 105) {
					if(that.charAt(1) === 115) {
						if(((c = that.charAt(2)) === 9) || (c === 32)) {
							if((that.charAt(3) === 110) && (that.charAt(4) === 111) && (that.charAt(5) === 116) && (that.isBoundary(6) === true)) {
								that.next(6);
								return Token.IS_NOT;
							}
							that.next(2);
							return Token.IS;
						}
						else if(that.isBoundary(2) === true) {
							that.next(2);
							return Token.IS;
						}
					}
				}
				return Token.INVALID;
			}
			return {
				ASSIGNEMENT_OPERATOR: ASSIGNEMENT_OPERATOR,
				BINARY_OPERATOR: BINARY_OPERATOR,
				EXPORT_STATEMENT: EXPORT_STATEMENT,
				EXTERN_STATEMENT: EXTERN_STATEMENT,
				MACRO: MACRO,
				MODULE_STATEMENT: MODULE_STATEMENT,
				NUMBER: NUMBER,
				OPERAND: OPERAND,
				OPERAND_JUNCTION: OPERAND_JUNCTION,
				POSTFIX_OPERATOR: POSTFIX_OPERATOR,
				PREFIX_OPERATOR: PREFIX_OPERATOR,
				STATEMENT: STATEMENT,
				TEMPLATE: TEMPLATE,
				TYPE_OPERATOR: TYPE_OPERATOR
			};
		});
		var recognize = (function() {
			var d = new Dictionary();
			d[Token.ABSTRACT] = function(that, c) {
				if((c === 97) && (that.charAt(1) === 98) && (that.charAt(2) === 115) && (that.charAt(3) === 116) && (that.charAt(4) === 114) && (that.charAt(5) === 97) && (that.charAt(6) === 99) && (that.charAt(7) === 116) && (that.isBoundary(8) === true)) {
					return that.next(8);
				}
				else {
					return false;
				}
			};
			d[Token.AMPERSAND] = function(that, c) {
				if((c === 38) && (that.charAt(1) !== 61)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.AMPERSAND_AMPERSAND] = function(that, c) {
				if((c === 38) && (that.charAt(1) === 38)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.ASTERISK] = function(that, c) {
				if((c === 42) && ((c = that.charAt(1)) !== 42) && (c !== 36) && (c !== 61)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.AS] = function(that, c) {
				if((c === 97) && (that.charAt(1) === 115) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.ASYNC] = function(that, c) {
				if((c === 97) && (that.charAt(1) === 115) && (that.charAt(2) === 121) && (that.charAt(3) === 110) && (that.charAt(4) === 99) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.AT] = function(that, c) {
				if(c === 64) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.ATTRIBUTE_IDENTIFIER] = function(that, c) {
				if(((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					var index = that._index - 1;
					var __ks_c_1;
					while((++index < that._length) && (((__ks_c_1 = that._data.charCodeAt(index)) === 45) || (__ks_c_1 === 46) || ((__ks_c_1 >= 48) && (__ks_c_1 <= 57)) || ((__ks_c_1 >= 65) && (__ks_c_1 <= 90)) || (__ks_c_1 === 95) || ((__ks_c_1 >= 97) && (__ks_c_1 <= 122)))) {
					}
					that.next(index - that._index);
					return true;
				}
				else {
					return false;
				}
			};
			d[Token.AWAIT] = function(that, c) {
				if((c === 97) && (that.charAt(1) === 119) && (that.charAt(2) === 97) && (that.charAt(3) === 105) && (that.charAt(4) === 116) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.BUT] = function(that, c) {
				if((c === 98) && (that.charAt(1) === 117) && (that.charAt(2) === 116) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.BY] = function(that, c) {
				if((c === 98) && (that.charAt(1) === 121) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.CARET] = function(that, c) {
				if((c === 94) && (that.charAt(1) !== 61)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.CARET_CARET] = function(that, c) {
				if((c === 94) && (that.charAt(1) === 94)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.CATCH] = function(that, c) {
				if((c === 99) && (that.charAt(1) === 97) && (that.charAt(2) === 116) && (that.charAt(3) === 99) && (that.charAt(4) === 104) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.COLON] = function(that, c) {
				if(c === 58) {
					c = that.charAt(1);
					return ((c === 58) || (c === 61)) ? false : that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.COLON_EQUALS] = function(that, c) {
				if((c === 58) && (that.charAt(1) === 61)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.COMMA] = function(that, c) {
				if(c === 44) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.CONST] = function(that, c) {
				if((c === 99) && (that.charAt(1) === 111) && (that.charAt(2) === 110) && (that.charAt(3) === 115) && (that.charAt(4) === 116) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.CLASS] = function(that, c) {
				if((c === 99) && (that.charAt(1) === 108) && (that.charAt(2) === 97) && (that.charAt(3) === 115) && (that.charAt(4) === 115) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.CLASS_VERSION] = function(that, c) {
				var match, __ks_0, __ks_1;
				if(KSType.isValue(__ks_0 = regex.class_version.exec(that.substringAt(0))) ? (match = __ks_0, true) : false) {
					return that.next(match[0].length);
				}
				else {
					return false;
				}
			};
			d[Token.DESC] = function(that, c) {
				if((c === 100) && (that.charAt(1) === 101) && (that.charAt(2) === 115) && (that.charAt(3) === 99) && (that.isBoundary(4) === true)) {
					return that.next(4);
				}
				else {
					return false;
				}
			};
			d[Token.DOT] = function(that, c) {
				if((c === 46) && (that.charAt(1) !== 46)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.DOT_DOT] = function(that, c) {
				if((c === 46) && (that.charAt(1) === 46) && (that.charAt(2) !== 46)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.DOT_DOT_DOT] = function(that, c) {
				if((c === 46) && (that.charAt(1) === 46) && (that.charAt(2) === 46)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.ELSE] = function(that, c) {
				if((c === 101) && (that.charAt(1) === 108) && (that.charAt(2) === 115) && (that.charAt(3) === 101) && (that.isBoundary(4) === true)) {
					return that.next(4);
				}
				else {
					return false;
				}
			};
			d[Token.ELSE_IF] = function(that, c) {
				if((c === 101) && (that.charAt(1) === 108) && (that.charAt(2) === 115) && (that.charAt(3) === 101) && (that.charAt(4) === 32) && (that.charAt(5) === 105) && (that.charAt(6) === 102) && (that.isBoundary(7) === true)) {
					return that.next(7);
				}
				else {
					return false;
				}
			};
			d[Token.EQUALS] = function(that, c) {
				if((c === 61) && ((c = that.charAt(1)) !== 61) && (c !== 62)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.EQUALS_RIGHT_ANGLE] = function(that, c) {
				if((c === 61) && (that.charAt(1) === 62)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.EXCLAMATION] = function(that, c) {
				if(c === 33) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.EXTENDS] = function(that, c) {
				if((c === 101) && (that.charAt(1) === 120) && (that.charAt(2) === 116) && (that.charAt(3) === 101) && (that.charAt(4) === 110) && (that.charAt(5) === 100) && (that.charAt(6) === 115) && (that.isBoundary(7) === true)) {
					return that.next(7);
				}
				else {
					return false;
				}
			};
			d[Token.FINAL] = function(that, c) {
				if((c === 102) && (that.charAt(1) === 105) && (that.charAt(2) === 110) && (that.charAt(3) === 97) && (that.charAt(4) === 108) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.FINALLY] = function(that, c) {
				if((c === 102) && (that.charAt(1) === 105) && (that.charAt(2) === 110) && (that.charAt(3) === 97) && (that.charAt(4) === 108) && (that.charAt(5) === 108) && (that.charAt(6) === 121) && (that.isBoundary(7) === true)) {
					return that.next(7);
				}
				else {
					return false;
				}
			};
			d[Token.FOR] = function(that, c) {
				if((c === 102) && (that.charAt(1) === 111) && (that.charAt(2) === 114) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.FROM] = function(that, c) {
				if((c === 102) && (that.charAt(1) === 114) && (that.charAt(2) === 111) && (that.charAt(3) === 109) && (that.isBoundary(4) === true)) {
					return that.next(4);
				}
				else {
					return false;
				}
			};
			d[Token.FUNC] = function(that, c) {
				if((c === 102) && (that.charAt(1) === 117) && (that.charAt(2) === 110) && (that.charAt(3) === 99) && (that.isBoundary(4) === true)) {
					return that.next(4);
				}
				else {
					return false;
				}
			};
			d[Token.GET] = function(that, c) {
				if((c === 103) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.HASH_EXCLAMATION_LEFT_SQUARE] = function(that, c) {
				if((c === 35) && (that.charAt(1) === 33) && (that.charAt(2) === 91)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.HASH_LEFT_SQUARE] = function(that, c) {
				if((c === 35) && (that.charAt(1) === 91)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.IDENTIFIER] = function(that, c) {
				if((c === 36) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					that.scanIdentifier(false);
					return true;
				}
				else if((c === 95) && !(that.isBoundary(1) === true)) {
					that.scanIdentifier(false);
					return true;
				}
				else {
					return false;
				}
			};
			d[Token.IF] = function(that, c) {
				if((c === 105) && (that.charAt(1) === 102) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.IN] = function(that, c) {
				if((c === 105) && (that.charAt(1) === 110) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.INTERNAL] = function(that, c) {
				if((c === 105) && (that.charAt(1) === 110) && (that.charAt(2) === 116) && (that.charAt(3) === 101) && (that.charAt(4) === 114) && (that.charAt(5) === 110) && (that.charAt(6) === 97) && (that.charAt(7) === 108) && (that.isBoundary(8) === true)) {
					return that.next(8);
				}
				else {
					return false;
				}
			};
			d[Token.IS] = function(that, c) {
				if((c === 105) && (that.charAt(1) === 115) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.LEFT_ANGLE] = function(that, c) {
				if(c === 60) {
					c = that.charAt(1);
					return ((c === 60) || (c === 61)) ? false : that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.LEFT_CURLY] = function(that, c) {
				if(c === 123) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.LEFT_ROUND] = function(that, c) {
				if(c === 40) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.LEFT_SQUARE] = function(that, c) {
				if(c === 91) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.LET] = function(that, c) {
				if((c === 108) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.MACRO] = function(that, c) {
				if((c === 109) && (that.charAt(1) === 97) && (that.charAt(2) === 99) && (that.charAt(3) === 114) && (that.charAt(4) === 111) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.MINUS] = function(that, c) {
				if((c === 45) && ((c = that.charAt(1)) !== 61)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.NEWLINE] = function(that, c) {
				if((c === 13) && (that.charAt(1) === 10)) {
					return that.nextLine(2);
				}
				else if((c === 10) || (c === 13)) {
					return that.nextLine(1);
				}
				return false;
			};
			d[Token.NUMERAL] = function(that, c) {
				if(48 <= c && c <= 57) {
					var i = 1;
					var __ks_0;
					while(KSOperator.lte(48, __ks_0 = that.charAt(i)) && KSOperator.lte(__ks_0, 57)) {
						++i;
					}
					if(that.isBoundary(i) === true) {
						return that.next(i);
					}
				}
				return false;
			};
			d[Token.OF] = function(that, c) {
				if((c === 111) && (that.charAt(1) === 102) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.ON] = function(that, c) {
				if((c === 111) && (that.charAt(1) === 110) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.OVERRIDE] = function(that, c) {
				if((c === 111) && (that.charAt(1) === 118) && (that.charAt(2) === 101) && (that.charAt(3) === 114) && (that.charAt(4) === 114) && (that.charAt(5) === 105) && (that.charAt(6) === 100) && (that.charAt(7) === 101) && (that.isBoundary(8) === true)) {
					return that.next(8);
				}
				else {
					return false;
				}
			};
			d[Token.OVERWRITE] = function(that, c) {
				if((c === 111) && (that.charAt(1) === 118) && (that.charAt(2) === 101) && (that.charAt(3) === 114) && (that.charAt(4) === 119) && (that.charAt(5) === 114) && (that.charAt(6) === 105) && (that.charAt(7) === 116) && (that.charAt(8) === 101) && (that.isBoundary(9) === true)) {
					return that.next(9);
				}
				else {
					return false;
				}
			};
			d[Token.PIPE] = function(that, c) {
				if((c === 124) && (that.charAt(1) !== 61)) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.PIPE_PIPE] = function(that, c) {
				if((c === 124) && (that.charAt(1) === 124)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.PRIVATE] = function(that, c) {
				if((c === 112) && (that.charAt(1) === 114) && (that.charAt(2) === 105) && (that.charAt(3) === 118) && (that.charAt(4) === 97) && (that.charAt(5) === 116) && (that.charAt(6) === 101) && (that.isBoundary(7) === true)) {
					return that.next(7);
				}
				else {
					return false;
				}
			};
			d[Token.PROTECTED] = function(that, c) {
				if((c === 112) && (that.charAt(1) === 114) && (that.charAt(2) === 111) && (that.charAt(3) === 116) && (that.charAt(4) === 101) && (that.charAt(5) === 99) && (that.charAt(6) === 116) && (that.charAt(7) === 101) && (that.charAt(8) === 100) && (that.isBoundary(9) === true)) {
					return that.next(9);
				}
				else {
					return false;
				}
			};
			d[Token.PUBLIC] = function(that, c) {
				if((c === 112) && (that.charAt(1) === 117) && (that.charAt(2) === 98) && (that.charAt(3) === 108) && (that.charAt(4) === 105) && (that.charAt(5) === 99) && (that.isBoundary(6) === true)) {
					return that.next(6);
				}
				else {
					return false;
				}
			};
			d[Token.QUESTION] = function(that, c) {
				if(c === 63) {
					return (((c = that.charAt(1)) === 40) || (c === 46) || (c === 61) || (c === 63) || (c === 91)) ? false : that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.RETURN] = function(that, c) {
				if((c === 114) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.charAt(3) === 117) && (that.charAt(4) === 114) && (that.charAt(5) === 110) && (that.isBoundary(6) === true)) {
					return that.next(6);
				}
				else {
					return false;
				}
			};
			d[Token.RIGHT_ANGLE] = function(that, c) {
				if(c === 62) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.RIGHT_CURLY] = function(that, c) {
				if(c === 125) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.RIGHT_ROUND] = function(that, c) {
				if(c === 41) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.RIGHT_SQUARE] = function(that, c) {
				if(c === 93) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.SET] = function(that, c) {
				if((c === 115) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.STATIC] = function(that, c) {
				if((c === 115) && (that.charAt(1) === 116) && (that.charAt(2) === 97) && (that.charAt(3) === 116) && (that.charAt(4) === 105) && (that.charAt(5) === 99) && (that.isBoundary(6) === true)) {
					return that.next(6);
				}
				else {
					return false;
				}
			};
			d[Token.STRING] = function(that, c) {
				if(c === 34) {
					var match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.double_quote.exec(that.substringAt(1))) ? (match = __ks_0, true) : false) {
						return that.next(match[0].length + 1);
					}
				}
				else if(c === 39) {
					var match, __ks_0, __ks_1;
					if(KSType.isValue(__ks_0 = regex.single_quote.exec(that.substringAt(1))) ? (match = __ks_0, true) : false) {
						return that.next(match[0].length + 1);
					}
				}
				return false;
			};
			d[Token.SWITCH] = function(that, c) {
				if((c === 115) && (that.charAt(1) === 119) && (that.charAt(2) === 105) && (that.charAt(3) === 116) && (that.charAt(4) === 99) && (that.charAt(5) === 104) && (that.isBoundary(6) === true)) {
					return that.next(6);
				}
				else {
					return false;
				}
			};
			d[Token.TEMPLATE_BEGIN] = function(that, c) {
				if(c === 96) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.TEMPLATE_END] = function(that, c) {
				if(c === 96) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.THROW] = function(that, c) {
				if((c === 116) && (that.charAt(1) === 104) && (that.charAt(2) === 114) && (that.charAt(3) === 111) && (that.charAt(4) === 119) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.TIL] = function(that, c) {
				if((c === 116) && (that.charAt(1) === 105) && (that.charAt(2) === 108) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.TILDE] = function(that, c) {
				if(c === 126) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.TILDE_TILDE] = function(that, c) {
				if((c === 126) && (that.charAt(1) === 126)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.TO] = function(that, c) {
				if((c === 116) && (that.charAt(1) === 111) && (that.isBoundary(2) === true)) {
					return that.next(2);
				}
				else {
					return false;
				}
			};
			d[Token.TRY] = function(that, c) {
				if((c === 116) && (that.charAt(1) === 114) && (that.charAt(2) === 121) && (that.isBoundary(3) === true)) {
					return that.next(3);
				}
				else {
					return false;
				}
			};
			d[Token.UNDERSCORE] = function(that, c) {
				if(c === 95) {
					return that.next(1);
				}
				else {
					return false;
				}
			};
			d[Token.UNLESS] = function(that, c) {
				if((c === 117) && (that.charAt(1) === 110) && (that.charAt(2) === 108) && (that.charAt(3) === 101) && (that.charAt(4) === 115) && (that.charAt(5) === 115) && (that.isBoundary(6) === true)) {
					return that.next(6);
				}
				else {
					return false;
				}
			};
			d[Token.UNTIL] = function(that, c) {
				if((c === 117) && (that.charAt(1) === 110) && (that.charAt(2) === 116) && (that.charAt(3) === 105) && (that.charAt(4) === 108) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.WHEN] = function(that, c) {
				if((c === 119) && (that.charAt(1) === 104) && (that.charAt(2) === 101) && (that.charAt(3) === 110) && (that.isBoundary(4) === true)) {
					return that.next(4);
				}
				else {
					return false;
				}
			};
			d[Token.WHERE] = function(that, c) {
				if((c === 119) && (that.charAt(1) === 104) && (that.charAt(2) === 101) && (that.charAt(3) === 114) && (that.charAt(4) === 101) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.WHILE] = function(that, c) {
				if((c === 119) && (that.charAt(1) === 104) && (that.charAt(2) === 105) && (that.charAt(3) === 108) && (that.charAt(4) === 101) && (that.isBoundary(5) === true)) {
					return that.next(5);
				}
				else {
					return false;
				}
			};
			d[Token.WITH] = function(that, c) {
				if((c === 119) && (that.charAt(1) === 105) && (that.charAt(2) === 116) && (that.charAt(3) === 104) && (that.isBoundary(4) === true)) {
					return that.next(4);
				}
				else {
					return false;
				}
			};
			return d;
		})();
		var Scanner = KSHelper.class({
			$name: "Scanner",
			$create: function() {
				this.__ks_init();
				this.__ks_cons(arguments);
			},
			__ks_init_1: function() {
				this._column = 1;
				this._eof = false;
				this._index = 0;
				this._line = 1;
				this._nextColumn = 1;
				this._nextIndex = 0;
				this._nextLine = 1;
			},
			__ks_init: function() {
				Scanner.prototype.__ks_init_1.call(this);
			},
			__ks_cons_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				else if(!KSType.isString(data)) {
					throw new TypeError("'data' is not of type 'String'");
				}
				this._data = data;
				this._length = this._data.length;
			},
			__ks_cons: function(args) {
				if(args.length === 1) {
					Scanner.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			},
			__ks_func_charAt_0: function(d) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(d === void 0 || d === null) {
					throw new TypeError("'d' is not nullable");
				}
				else if(!KSType.isNumber(d)) {
					throw new TypeError("'d' is not of type 'Number'");
				}
				return this._data.charCodeAt(this._index + d);
			},
			charAt: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_charAt_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_char_0: function() {
				return this._eof ? "EOF" : this._data[this._index];
			},
			char: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_char_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_column_0: function() {
				return this._column;
			},
			column: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_column_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_commit_0: function() {
				if(this._eof) {
					return null;
				}
				else {
					this._column = this._nextColumn;
					this._line = this._nextLine;
					this._index = this._nextIndex;
					return Token.INVALID;
				}
			},
			commit: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_commit_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_endPosition_0: function() {
				return (function(that) {
					var d = new Dictionary();
					d.line = that._nextLine;
					d.column = that._nextColumn;
					return d;
				})(this);
			},
			endPosition: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_endPosition_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_eof_0: function() {
				this._eof = true;
				return Token.EOF;
			},
			eof: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_eof_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_isBoundary_0: function(d) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(d === void 0 || d === null) {
					throw new TypeError("'d' is not nullable");
				}
				else if(!KSType.isNumber(d)) {
					throw new TypeError("'d' is not of type 'Number'");
				}
				var c = this._data.charCodeAt(this._index + d);
				return (c === 9) || (c === 10) || (c === 13) || (c === 32) || !(((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122)) || (c === 95) || (c === 36));
			},
			isBoundary: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_isBoundary_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_isEOF_0: function() {
				return this._eof;
			},
			isEOF: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_isEOF_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_line_0: function() {
				return this._line;
			},
			line: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_line_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mark_0: function() {
				return (function(that) {
					var d = new Dictionary();
					d.eof = that._eof;
					d.index = that._index;
					d.line = that._line;
					d.column = that._column;
					return d;
				})(this);
			},
			mark: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_mark_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_match_0: function() {
				var __ks_i = -1;
				var tokens = [];
				while(arguments.length > ++__ks_i) {
					if(KSType.isEnumMember(arguments[__ks_i], Token)) {
						tokens.push(arguments[__ks_i]);
					}
					else {
						throw new TypeError("'tokens' is not of type 'Token'");
					}
				}
				if(this._eof) {
					return Token.EOF;
				}
				else {
					var c = this.skip(this._index - 1);
					if(c === -1) {
						return this.eof();
					}
					for(var __ks_0 = 0, __ks_1 = tokens.length, token; __ks_0 < __ks_1; ++__ks_0) {
						token = tokens[__ks_0];
						if(recognize[token](this, c) === true) {
							return token;
						}
					}
					return Token.INVALID;
				}
			},
			match: function() {
				return Scanner.prototype.__ks_func_match_0.apply(this, arguments);
			},
			__ks_func_matchM_0: function(matcher) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(matcher === void 0 || matcher === null) {
					throw new TypeError("'matcher' is not nullable");
				}
				else if(!KSType.isFunction(matcher)) {
					throw new TypeError("'matcher' is not of type 'Function'");
				}
				if(this._eof) {
					return Token.EOF;
				}
				else {
					return matcher(this, this._index - 1);
				}
			},
			matchM: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_matchM_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_next_0: function(length) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(length === void 0 || length === null) {
					throw new TypeError("'length' is not nullable");
				}
				else if(!KSType.isNumber(length)) {
					throw new TypeError("'length' is not of type 'Number'");
				}
				this._nextIndex = this._index + length;
				this._nextColumn = this._column + length;
				return true;
			},
			next: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_next_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_nextLine_0: function(length) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(length === void 0 || length === null) {
					throw new TypeError("'length' is not nullable");
				}
				else if(!KSType.isNumber(length)) {
					throw new TypeError("'length' is not of type 'Number'");
				}
				this._nextIndex = this._index + length;
				this._nextColumn = 1;
				this._nextLine = this._line + 1;
				return true;
			},
			nextLine: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_nextLine_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_position_0: function() {
				return (function(that) {
					var d = new Dictionary();
					d.start = (function(that) {
						var d = new Dictionary();
						d.line = that._line;
						d.column = that._column;
						return d;
					})(that);
					d.end = (function(that) {
						var d = new Dictionary();
						d.line = that._nextLine;
						d.column = that._nextColumn;
						return d;
					})(that);
					return d;
				})(this);
			},
			position: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_position_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_rollback_0: function(mark) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mark === void 0 || mark === null) {
					throw new TypeError("'mark' is not nullable");
				}
				this._eof = mark.eof;
				this._index = mark.index;
				this._line = mark.line;
				this._column = mark.column;
				return true;
			},
			rollback: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_rollback_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_scanIdentifier_0: function(substr) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(substr === void 0 || substr === null) {
					throw new TypeError("'substr' is not nullable");
				}
				var index = this._index - 1;
				var c = this._data.charCodeAt(index);
				while((++index < this._length) && (((c = this._data.charCodeAt(index)) === 36) || ((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c === 95) || ((c >= 97) && (c <= 122)))) {
				}
				if(substr === true) {
					var identifier = this._data.substring(this._index + 1, index);
					this.next(index - this._index);
					return identifier;
				}
				else {
					this.next(index - this._index);
				}
			},
			scanIdentifier: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_scanIdentifier_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_skip_0: function() {
				this.skip(this._index - 1);
			},
			__ks_func_skip_1: function(index) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				else if(!KSType.isNumber(index)) {
					throw new TypeError("'index' is not of type 'Number'");
				}
				var c;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 32) || (c === 9)) {
						this._column++;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							var oldIndex = index;
							var line = this._line;
							var column = this._column;
							var left = 1;
							var lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							var lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.eof();
				return -1;
			},
			skip: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_skip_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_skip_1.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_skipComments_0: function() {
				var index = this._index - 1;
				var c;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 32) || (c === 9)) {
						this._column++;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							var oldIndex = index;
							var line = this._line;
							var column = this._column;
							var left = 1;
							var lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if((c === 32) || (c === 9)) {
									column++;
								}
								else {
									break;
								}
							}
							c = this._data.charCodeAt(index);
							if((c === 13) && (this._data.charCodeAt(index + 1) === 10)) {
								line++;
								column = 1;
								++index;
							}
							else if((c === 10) || (c === 13)) {
								line++;
								column = 1;
							}
							else {
								--index;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							var lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
							c = this._data.charCodeAt(index + 1);
							if((c === 13) && (this._data.charCodeAt(index + 2) === 10)) {
								this._line++;
								this._column = 1;
								index += 2;
							}
							else if((c === 10) || (c === 13)) {
								this._line++;
								this._column = 1;
								++index;
							}
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.eof();
				return -1;
			},
			skipComments: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_skipComments_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_skipNewLine_0: function(index) {
				if(index === void 0 || index === null) {
					index = this._index - 1;
				}
				else if(!KSType.isNumber(index)) {
					throw new TypeError("'index' is not of type 'Number'");
				}
				var c;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 13) && (this._data.charCodeAt(index + 1) === 10)) {
						this._line++;
						this._column = 1;
						++index;
					}
					else if((c === 10) || (c === 13)) {
						this._line++;
						this._column = 1;
					}
					else if((c === 32) || (c === 9)) {
						this._column++;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							var oldIndex = index;
							var line = this._line;
							var column = this._column;
							var left = 1;
							var lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							var lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.eof();
				return -1;
			},
			skipNewLine: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Scanner.prototype.__ks_func_skipNewLine_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_startPosition_0: function() {
				return (function(that) {
					var d = new Dictionary();
					d.line = that._line;
					d.column = that._column;
					return d;
				})(this);
			},
			startPosition: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_startPosition_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_substringAt_0: function(d) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(d === void 0 || d === null) {
					throw new TypeError("'d' is not nullable");
				}
				else if(!KSType.isNumber(d)) {
					throw new TypeError("'d' is not of type 'Number'");
				}
				return this._data.substr(this._index + d);
			},
			substringAt: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_substringAt_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_test_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				else if(!KSType.isEnumMember(token, Token)) {
					throw new TypeError("'token' is not of type 'Token'");
				}
				if(this._eof) {
					return false;
				}
				else {
					var c = this.skip(this._index - 1);
					if(c === -1) {
						return KSHelper.valueOf(this.eof()) === token.value;
					}
					else {
						return recognize[token](this, c);
					}
				}
			},
			test: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_test_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_testNS_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				else if(!KSType.isEnumMember(token, Token)) {
					throw new TypeError("'token' is not of type 'Token'");
				}
				if(this._eof) {
					return false;
				}
				else {
					return recognize[token](this, this._data.charCodeAt(this._index));
				}
			},
			testNS: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_testNS_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_toQuote_0: function() {
				if(this._eof) {
					return "\"EOF\"";
				}
				else if((this._index + 1) >= this._nextIndex) {
					var c = this._data.charCodeAt(this._index);
					if(c === 10) {
						return "\"NewLine\"";
					}
					else {
						return "\"" + this._data[this._index] + "\"";
					}
				}
				else {
					return "\"" + this._data.substring(this._index, this._nextIndex) + "\"";
				}
			},
			toQuote: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_toQuote_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_value_0: function() {
				return this._data.substring(this._index, this._nextIndex);
			},
			__ks_func_value_1: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				else if(!KSType.isEnumMember(token, Token)) {
					throw new TypeError("'token' is not of type 'Token'");
				}
				if(KSType.isFunction(overhauls[token])) {
					return overhauls[token](this._data.substring(this._index, this._nextIndex));
				}
				else {
					return this._data.substring(this._index, this._nextIndex);
				}
			},
			value: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_value_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_value_1.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		var DestructuringMode = KSHelper.enum(Number, {
			Nil: 0,
			COMPUTED: 1,
			DEFAULT: 2,
			RECURSION: 4,
			THIS_ALIAS: 8,
			TYPE: 16
		});
		DestructuringMode.Declaration = DestructuringMode(DestructuringMode.COMPUTED | DestructuringMode.DEFAULT | DestructuringMode.RECURSION | DestructuringMode.TYPE);
		DestructuringMode.Expression = DestructuringMode(DestructuringMode.COMPUTED | DestructuringMode.DEFAULT | DestructuringMode.RECURSION);
		DestructuringMode.Function = DestructuringMode(DestructuringMode.DEFAULT | DestructuringMode.RECURSION | DestructuringMode.TYPE);
		DestructuringMode.Method = DestructuringMode(DestructuringMode.DEFAULT | DestructuringMode.RECURSION | DestructuringMode.TYPE | DestructuringMode.THIS_ALIAS);
		var ExpressionMode = KSHelper.enum(Number, {
			Default: 0,
			NoAnonymousFunction: 1,
			NoAwait: 2,
			NoObject: 4,
			WithMacro: 8
		});
		var MacroTerminator = KSHelper.enum(Number, {
			Nil: 0,
			COMMA: 1,
			NEWLINE: 2,
			RIGHT_CURLY: 4,
			RIGHT_ROUND: 8,
			RIGHT_SQUARE: 16
		});
		MacroTerminator.Array = MacroTerminator(MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_SQUARE);
		MacroTerminator.List = MacroTerminator(MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_ROUND);
		MacroTerminator.Object = MacroTerminator(MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_CURLY);
		MacroTerminator.Parenthesis = MacroTerminator(MacroTerminator.NEWLINE | MacroTerminator.RIGHT_ROUND);
		var ParameterMode = KSHelper.enum(Number, {
			Function: 0,
			Macro: 1,
			Method: 2
		});
		var ParserMode = KSHelper.enum(Number, {
			Default: 0,
			MacroExpression: 1
		});
		var NO = (function() {
			var d = new Dictionary();
			d.ok = false;
			return d;
		})();
		var Parser = KSHelper.class({
			$name: "Parser",
			$create: function() {
				this.__ks_init();
				this.__ks_cons(arguments);
			},
			__ks_init_1: function() {
				this._history = [];
				this._mode = ParserMode.Default;
			},
			__ks_init: function() {
				Parser.prototype.__ks_init_1.call(this);
			},
			__ks_cons_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				else if(!KSType.isString(data)) {
					throw new TypeError("'data' is not of type 'String'");
				}
				this._scanner = new Scanner(data);
			},
			__ks_cons: function(args) {
				if(args.length === 1) {
					Parser.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			},
			__ks_func_commit_0: function() {
				this._token = this._scanner.commit();
				return this;
			},
			commit: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_commit_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mark_0: function() {
				return this._scanner.mark();
			},
			mark: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_mark_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_match_0: function() {
				var tokens = Array.prototype.slice.call(arguments, 0, arguments.length);
				return this._token = this._scanner.match.apply(this._scanner, tokens);
			},
			match: function() {
				return Parser.prototype.__ks_func_match_0.apply(this, arguments);
			},
			__ks_func_matchM_0: function(matcher) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(matcher === void 0 || matcher === null) {
					throw new TypeError("'matcher' is not nullable");
				}
				else if(!KSType.isFunction(matcher)) {
					throw new TypeError("'matcher' is not of type 'Function'");
				}
				return this._token = this._scanner.matchM(matcher);
			},
			matchM: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_matchM_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_position_0: function() {
				return this._scanner.position();
			},
			position: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_position_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_relocate_0: function(node, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				if(last === void 0) {
					last = null;
				}
				if(first !== null) {
					node.start = node.value.start = first.start;
				}
				if(last !== null) {
					node.end = node.value.end = last.end;
				}
				return node;
			},
			relocate: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_relocate_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_rollback_0: function(mark) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mark === void 0 || mark === null) {
					throw new TypeError("'mark' is not nullable");
				}
				this._token = mark.token;
				return this._scanner.rollback(mark);
			},
			rollback: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_rollback_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_skipNewLine_0: function() {
				if(this._scanner.skipNewLine() === -1) {
					this._token = Token.EOF;
				}
				else {
					this._token = Token.INVALID;
				}
			},
			skipNewLine: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_skipNewLine_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_test_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				if(this._scanner.test(token)) {
					this._token = token;
					return true;
				}
				else {
					return false;
				}
			},
			__ks_func_test_1: function() {
				var tokens = Array.prototype.slice.call(arguments, 0, arguments.length);
				return tokens.indexOf(this.match.apply(this, tokens)) !== -1;
			},
			test: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_test_0.apply(this, arguments);
				}
				else {
					return Parser.prototype.__ks_func_test_1.apply(this, arguments);
				}
			},
			__ks_func_testNS_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				if(this._scanner.testNS(token)) {
					this._token = token;
					return true;
				}
				else {
					return false;
				}
			},
			testNS: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_testNS_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_throw_0: function() {
				throw new SyntaxError("Unexpected " + this._scanner.toQuote() + " at line " + this._scanner.line() + " and column " + this._scanner.column());
			},
			__ks_func_throw_1: function(expected) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(expected === void 0 || expected === null) {
					throw new TypeError("'expected' is not nullable");
				}
				else if(!KSType.isString(expected)) {
					throw new TypeError("'expected' is not of type 'String'");
				}
				throw new SyntaxError("Expecting \"" + expected + "\" but got " + this._scanner.toQuote() + " at line " + this._scanner.line() + " and column " + this._scanner.column());
			},
			__ks_func_throw_2: function(expecteds) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(expecteds === void 0 || expecteds === null) {
					throw new TypeError("'expecteds' is not nullable");
				}
				else if(!KSType.isArray(expecteds)) {
					throw new TypeError("'expecteds' is not of type 'Array'");
				}
				throw new SyntaxError("Expecting \"" + expecteds.slice(0, expecteds.length - 1).join("\", \"") + "\" or \"" + expecteds[expecteds.length - 1] + "\" but got " + this._scanner.toQuote() + " at line " + this._scanner.line() + " and column " + this._scanner.column());
			},
			throw: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_throw_0.apply(this);
				}
				else if(arguments.length === 1) {
					if(KSType.isArray(arguments[0])) {
						return Parser.prototype.__ks_func_throw_2.apply(this, arguments);
					}
					else {
						return Parser.prototype.__ks_func_throw_1.apply(this, arguments);
					}
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_until_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				return !this._scanner.test(token) && !this._scanner.isEOF();
			},
			until: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_until_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_value_0: function() {
				return this._scanner.value(this._token);
			},
			value: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_value_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_yep_0: function() {
				var position = this._scanner.position();
				return (function() {
					var d = new Dictionary();
					d.ok = true;
					d.start = position.start;
					d.end = position.end;
					return d;
				})();
			},
			__ks_func_yep_1: function(value) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				return (function() {
					var d = new Dictionary();
					d.ok = true;
					d.value = value;
					d.start = value.start;
					d.end = value.end;
					return d;
				})();
			},
			__ks_func_yep_2: function(value, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return (function() {
					var d = new Dictionary();
					d.ok = true;
					d.value = value;
					d.start = first.start;
					d.end = last.end;
					return d;
				})();
			},
			yep: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_yep_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Parser.prototype.__ks_func_yep_1.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return Parser.prototype.__ks_func_yep_2.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_yes_0: function() {
				var position = this._scanner.position();
				this.commit();
				return (function() {
					var d = new Dictionary();
					d.ok = true;
					d.start = position.start;
					d.end = position.end;
					return d;
				})();
			},
			__ks_func_yes_1: function(value) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				var start = KSType.isValue(value.start) ? value.start : this._scanner.startPosition();
				var end = KSType.isValue(value.end) ? value.end : this._scanner.endPosition();
				this.commit();
				return (function() {
					var d = new Dictionary();
					d.ok = true;
					d.value = value;
					d.start = start;
					d.end = end;
					return d;
				})();
			},
			yes: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_yes_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Parser.prototype.__ks_func_yes_1.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_NL_0M_0: function() {
				this.skipNewLine();
			},
			NL_0M: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_NL_0M_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altArrayComprehension_0: function(expression, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var loop = this.reqForExpression(this.yes());
				this.NL_0M();
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				return this.yep(AST.ArrayComprehension(expression, loop, first, this.yes()));
			},
			altArrayComprehension: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_altArrayComprehension_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altArrayList_0: function(expression, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var values = [expression];
				while(this.match(Token.RIGHT_SQUARE, Token.COMMA, Token.NEWLINE).value !== null) {
					if(KSHelper.valueOf(this._token) === Token.RIGHT_SQUARE.value) {
						return this.yep(AST.ArrayExpression(values, first, this.yes()));
					}
					else if(KSHelper.valueOf(this._token) === Token.COMMA.value) {
						this.commit().NL_0M();
						values.push(this.reqExpression(null, MacroTerminator.Array));
					}
					else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
						this.commit().NL_0M();
						if(this.match(Token.RIGHT_SQUARE, Token.COMMA) === Token.COMMA) {
							this.commit().NL_0M();
							values.push(this.reqExpression(null, MacroTerminator.Array));
						}
						else if(KSHelper.valueOf(this._token) === Token.RIGHT_SQUARE.value) {
							return this.yep(AST.ArrayExpression(values, first, this.yes()));
						}
						else {
							values.push(this.reqExpression(null, MacroTerminator.Array));
						}
					}
					else {
						this.throw("]");
					}
				}
			},
			altArrayList: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_altArrayList_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altForExpressionFrom_0: function(modifiers, variable, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var from = this.reqExpression(ExpressionMode.Default);
				var til, to;
				if(this.match(Token.TIL, Token.TO) === Token.TIL) {
					this.commit();
					til = this.reqExpression(ExpressionMode.Default);
				}
				else if(KSHelper.valueOf(this._token) === Token.TO.value) {
					this.commit();
					to = this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["til", "to"]);
				}
				var by;
				if(this.test(Token.BY)) {
					this.commit();
					by = this.reqExpression(ExpressionMode.Default);
				}
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(KSHelper.valueOf(this._token) === Token.WHILE.value) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForFromStatement(modifiers, variable, from, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : from));
			},
			altForExpressionFrom: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_altForExpressionFrom_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altForExpressionIn_0: function(modifiers, value, type, index, expression, first) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var desc = null;
				if(this.test(Token.DESC)) {
					desc = this.yes();
					modifiers.push(AST.Modifier(ModifierKind.Descending, desc));
				}
				this.NL_0M();
				var from, til, to, by;
				if(this.test(Token.FROM)) {
					this.commit();
					from = this.reqExpression(ExpressionMode.Default);
				}
				if(this.match(Token.TIL, Token.TO) === Token.TIL) {
					this.commit();
					til = this.reqExpression(ExpressionMode.Default);
				}
				else if(KSHelper.valueOf(this._token) === Token.TO.value) {
					this.commit();
					to = this.reqExpression(ExpressionMode.Default);
				}
				if(this.test(Token.BY)) {
					this.commit();
					by = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(KSHelper.valueOf(this._token) === Token.WHILE.value) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForInStatement(modifiers, value, type, index, expression, from, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : KSType.isValue(from) ? from : KSType.isValue(desc) ? desc : expression));
			},
			altForExpressionIn: function() {
				if(arguments.length === 6) {
					return Parser.prototype.__ks_func_altForExpressionIn_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altForExpressionInRange_0: function(modifiers, value, type, index, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var operand = this.tryRangeOperand(ExpressionMode.Default);
				if(operand.ok === true) {
					if((this.match(Token.LEFT_ANGLE, Token.DOT_DOT) === Token.LEFT_ANGLE) || (KSHelper.valueOf(this._token) === Token.DOT_DOT.value)) {
						var then = KSHelper.valueOf(this._token) === Token.LEFT_ANGLE.value;
						if(then) {
							this.commit();
							if(!this.test(Token.DOT_DOT)) {
								this.throw("..");
							}
							this.commit();
						}
						else {
							this.commit();
						}
						var til = this.test(Token.LEFT_ANGLE);
						if(til) {
							this.commit();
						}
						var toOperand = this.reqPrefixedOperand(ExpressionMode.Default);
						var byOperand;
						if(this.test(Token.DOT_DOT)) {
							this.commit();
							byOperand = this.reqPrefixedOperand(ExpressionMode.Default);
						}
						return this.altForExpressionRange(modifiers, value, index, then ? null : operand, then ? operand : null, til ? toOperand : null, til ? null : toOperand, byOperand, first);
					}
					else {
						return this.altForExpressionIn(modifiers, value, type, index, operand, first);
					}
				}
				else {
					return this.altForExpressionIn(modifiers, value, type, index, this.reqExpression(ExpressionMode.Default), first);
				}
			},
			altForExpressionInRange: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_altForExpressionInRange_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altForExpressionOf_0: function(modifiers, value, type, key, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(key === void 0 || key === null) {
					throw new TypeError("'key' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var expression = this.reqExpression(ExpressionMode.Default);
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(KSHelper.valueOf(this._token) === Token.WHILE.value) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForOfStatement(modifiers, value, type, key, expression, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : expression));
			},
			altForExpressionOf: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_altForExpressionOf_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_altForExpressionRange_0: function(modifiers, value, index, from, then, til, to, by, first) {
				if(arguments.length < 9) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 9)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(from === void 0) {
					from = null;
				}
				if(then === void 0) {
					then = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(KSHelper.valueOf(this._token) === Token.WHILE.value) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForRangeStatement(modifiers, value, index, from, then, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : KSType.isValue(then) ? then : from));
			},
			altForExpressionRange: function() {
				if(arguments.length === 9) {
					return Parser.prototype.__ks_func_altForExpressionRange_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqAccessModifiers_0: function(modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(this.match(Token.PRIVATE, Token.PROTECTED, Token.PUBLIC, Token.INTERNAL) === Token.PRIVATE) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Private, this.yes())));
				}
				else if(KSHelper.valueOf(this._token) === Token.PROTECTED.value) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Protected, this.yes())));
				}
				else if(KSHelper.valueOf(this._token) === Token.PUBLIC.value) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Public, this.yes())));
				}
				else if(KSHelper.valueOf(this._token) === Token.INTERNAL.value) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Internal, this.yes())));
				}
				return modifiers;
			},
			reqAccessModifiers: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAccessModifiers_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqArray_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.RIGHT_SQUARE)) {
					return this.yep(AST.ArrayExpression([], first, this.yes()));
				}
				var mark = this.mark();
				var operand = this.tryRangeOperand(ExpressionMode.Default);
				if((operand.ok === true) && ((this.match(Token.LEFT_ANGLE, Token.DOT_DOT) === Token.LEFT_ANGLE) || (KSHelper.valueOf(this._token) === Token.DOT_DOT.value))) {
					var then = KSHelper.valueOf(this._token) === Token.LEFT_ANGLE.value;
					if(then) {
						this.commit();
						if(!this.test(Token.DOT_DOT)) {
							this.throw("..");
						}
						this.commit();
					}
					else {
						this.commit();
					}
					var til = this.test(Token.LEFT_ANGLE);
					if(til) {
						this.commit();
					}
					var toOperand = this.reqPrefixedOperand(ExpressionMode.Default);
					var byOperand;
					if(this.test(Token.DOT_DOT)) {
						this.commit();
						byOperand = this.reqPrefixedOperand(ExpressionMode.Default);
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
					if(then) {
						if(til) {
							return this.yep(AST.ArrayRangeTI(operand, toOperand, byOperand, first, this.yes()));
						}
						else {
							return this.yep(AST.ArrayRangeTO(operand, toOperand, byOperand, first, this.yes()));
						}
					}
					else {
						if(til) {
							return this.yep(AST.ArrayRangeFI(operand, toOperand, byOperand, first, this.yes()));
						}
						else {
							return this.yep(AST.ArrayRangeFO(operand, toOperand, byOperand, first, this.yes()));
						}
					}
				}
				else {
					this.rollback(mark);
					this.NL_0M();
					if(this.test(Token.RIGHT_SQUARE)) {
						return this.yep(AST.ArrayExpression([], first, this.yes()));
					}
					var expression = this.reqExpression(null, MacroTerminator.Array);
					if(this.match(Token.RIGHT_SQUARE, Token.FOR, Token.NEWLINE) === Token.RIGHT_SQUARE) {
						return this.yep(AST.ArrayExpression([expression], first, this.yes()));
					}
					else if(KSHelper.valueOf(this._token) === Token.FOR.value) {
						return this.altArrayComprehension(expression, first);
					}
					else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
						var __ks_mark_1 = this.mark();
						this.commit().NL_0M();
						if(this.match(Token.RIGHT_SQUARE, Token.FOR) === Token.RIGHT_SQUARE) {
							return this.yep(AST.ArrayExpression([expression], first, this.yes()));
						}
						else if(KSHelper.valueOf(this._token) === Token.FOR.value) {
							return this.altArrayComprehension(expression, first);
						}
						else {
							this.rollback(__ks_mark_1);
							return this.altArrayList(expression, first);
						}
					}
					else {
						return this.altArrayList(expression, first);
					}
				}
			},
			reqArray: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqArray_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqAttribute_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declaration = this.reqAttributeMember();
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				var last = this.yes();
				if(!this.test(Token.NEWLINE)) {
					this.throw("NewLine");
				}
				this.commit();
				this._token = this._scanner.skipComments();
				return this.yep(AST.AttributeDeclaration(declaration, first, last));
			},
			reqAttribute: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAttribute_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqAttributeIdentifier_0: function() {
				if(this._scanner.test(Token.ATTRIBUTE_IDENTIFIER)) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else {
					this.throw("Identifier");
				}
			},
			reqAttributeIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqAttributeIdentifier_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqAttributeMember_0: function() {
				var identifier = this.reqAttributeIdentifier();
				if(this.match(Token.EQUALS, Token.LEFT_ROUND) === Token.EQUALS) {
					this.commit();
					var value = this.reqString();
					return this.yep(AST.AttributeOperation(identifier, value, identifier, value));
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					this.commit();
					var __ks_arguments_1 = [this.reqAttributeMember()];
					while(this.test(Token.COMMA)) {
						this.commit();
						__ks_arguments_1.push(this.reqAttributeMember());
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					return this.yep(AST.AttributeExpression(identifier, __ks_arguments_1, identifier, this.yes()));
				}
				else {
					return identifier;
				}
			},
			reqAttributeMember: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqAttributeMember_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqAwaitExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var operand = this.reqPrefixedOperand(ExpressionMode.Default);
				return this.yep(AST.AwaitExpression([], null, operand, first, operand));
			},
			reqAwaitExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAwaitExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqBinaryOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var mark = this.mark();
				var expression;
				if((expression = this.tryAwaitExpression(mode)).ok === true) {
					return expression;
				}
				else if(this.rollback(mark) && ((expression = this.tryFunctionExpression(mode)).ok === true)) {
					return expression;
				}
				else if(this.rollback(mark) && ((expression = this.trySwitchExpression(mode)).ok === true)) {
					return expression;
				}
				else if(this.rollback(mark) && ((expression = this.tryTryExpression(mode)).ok === true)) {
					return expression;
				}
				this.rollback(mark);
				var operand = this.reqPrefixedOperand(mode);
				var operator;
				var __ks_0 = this.matchM(M.TYPE_OPERATOR);
				if(__ks_0 === Token.AS) {
					operator = this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeCasting, this.yes()));
				}
				else if(__ks_0 === Token.IS) {
					operator = this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeEquality, this.yes()));
				}
				else if(__ks_0 === Token.IS_NOT) {
					operator = this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeInequality, this.yes()));
				}
				else {
					return operand;
				}
				return this.yep(AST.BinaryExpression(operand, operator, this.reqTypeEntity(NO)));
			},
			reqBinaryOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqBinaryOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqBlock_0: function(first) {
				if(first === void 0 || first === null) {
					first = NO;
				}
				if(!(first.ok === true)) {
					if(!this.test(Token.LEFT_CURLY)) {
						this.throw("{");
					}
					first = this.yes();
				}
				this.NL_0M();
				var attributes = [];
				var statements = [];
				var attrs = [];
				var statement;
				while((this.match(Token.RIGHT_CURLY, Token.HASH_EXCLAMATION_LEFT_SQUARE, Token.HASH_LEFT_SQUARE) !== Token.EOF) && (KSHelper.valueOf(this._token) !== Token.RIGHT_CURLY.value)) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					this.stackOuterAttributes(attrs);
					statement = this.reqStatement();
					if(attrs.length > 0) {
						statement.value.attributes.unshift.apply(statement.value.attributes, attrs);
						statement.value.start = statement.value.attributes[0].start;
						attrs = [];
					}
					statements.push(statement);
					this.NL_0M();
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.Block(attributes, statements, first, this.yes()));
			},
			reqBlock: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqBlock_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqBreakStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return this.yep(AST.BreakStatement(first));
			},
			reqBreakStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqBreakStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqCatchOnClause_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var type = this.reqIdentifier();
				var binding;
				if(this.test(Token.CATCH)) {
					this.commit();
					binding = this.reqIdentifier();
				}
				this.NL_0M();
				var body = this.reqBlock();
				return this.yep(AST.CatchClause(binding, type, body, first, body));
			},
			reqCatchOnClause: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqCatchOnClause_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassAbstractMethod_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var async = this.reqIdentifier();
					name = this.tryIdentifier();
					if(name.ok === true) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, async)));
					}
					else {
						name = async;
					}
				}
				else {
					name = this.reqIdentifier();
				}
				return this.reqClassAbstractMethodBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			reqClassAbstractMethod: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_reqClassAbstractMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassAbstractMethodBody_0: function(attributes, modifiers, name, first) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqClassMethodParameterList();
				var type = this.tryFunctionReturns();
				var __ks_throws_1 = this.tryFunctionThrows();
				this.reqNL_1M();
				return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
			},
			reqClassAbstractMethodBody: function() {
				if(arguments.length === 4) {
					return Parser.prototype.__ks_func_reqClassAbstractMethodBody_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassField_0: function(attributes, modifiers, name, type, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var defaultValue;
				if(this.test(Token.EQUALS)) {
					this.commit();
					defaultValue = this.reqExpression(ExpressionMode.Default);
				}
				this.reqNL_1M();
				return this.yep(AST.FieldDeclaration(attributes, modifiers, name, type, defaultValue, first, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : name));
			},
			reqClassField: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqClassField_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassMember_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var async = this.reqIdentifier();
					name = this.tryNameIST();
					if(name.ok === true) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, async)));
						return this.reqClassMethod(attributes, modifiers, name, null, KSType.isValue(first) ? first : async);
					}
					else {
						name = async;
					}
				}
				else if(this.test(Token.AT)) {
					var modifier = this.yep(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
					var __ks_name_1 = this.reqNameIST();
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.reqClassField(attributes, [].concat(modifiers, [modifier]), __ks_name_1, type, KSType.isValue(first) ? first : modifier);
					}
					else {
						return this.reqClassField(attributes, [].concat(modifiers, [modifier]), __ks_name_1, null, KSType.isValue(first) ? first : modifier);
					}
				}
				else {
					name = this.reqNameIST();
				}
				return this.reqClassMemberBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			reqClassMember: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_reqClassMember_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassMemberBody_0: function(attributes, modifiers, name, first) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.match(Token.COLON, Token.LEFT_CURLY, Token.LEFT_ROUND) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					if(this.test(Token.LEFT_CURLY)) {
						this.commit();
						return this.reqClassProperty(attributes, modifiers, name, type, first);
					}
					else {
						return this.reqClassField(attributes, modifiers, name, type, first);
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					this.commit();
					return this.reqClassProperty(attributes, modifiers, name, null, first);
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					return this.reqClassMethod(attributes, modifiers, name, this.yes(), first);
				}
				else {
					return this.reqClassField(attributes, modifiers, name, null, first);
				}
			},
			reqClassMemberBody: function() {
				if(arguments.length === 4) {
					return Parser.prototype.__ks_func_reqClassMemberBody_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassMemberList_0: function(members) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				var first = null;
				var attributes = this.stackOuterAttributes([]);
				if(attributes.length !== 0) {
					first = attributes[0];
				}
				var mark1 = this.mark();
				if(this.test(Token.MACRO)) {
					first = this.yes();
					var identifier;
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						while(this.until(Token.RIGHT_CURLY)) {
							members.push(this.reqMacroStatement(attributes));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
						return;
					}
					else if((identifier = this.tryIdentifier()).ok === true) {
						members.push(this.reqMacroStatement(attributes, identifier, first));
						return;
					}
					this.rollback(mark1);
					first = null;
				}
				var modifiers = this.reqAccessModifiers([]);
				if(this.test(Token.FINAL)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Final, this.yes())));
				}
				var mark2 = this.mark();
				if(this.test(Token.ABSTRACT)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						first = null;
						var attrs;
						while(this.until(Token.RIGHT_CURLY)) {
							attrs = this.stackOuterAttributes([]);
							if(attrs.length !== 0) {
								first = attrs[0];
								attrs.unshift.apply(attrs, [].concat(attributes));
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqClassAbstractMethod(attrs, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
					}
					else {
						if(!KSType.isValue(first)) {
							first = modifiers[0];
						}
						var member = this.tryClassAbstractMethod(attributes, modifiers, first);
						if(member.ok === true) {
							members.push(member);
						}
						else {
							this.rollback(mark2);
							modifiers.pop();
							members.push(this.reqClassMember(attributes, modifiers, first));
						}
					}
				}
				else {
					if(this.match(Token.OVERRIDE, Token.STATIC) === Token.OVERRIDE) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Override, this.yes())));
					}
					else if(KSHelper.valueOf(this._token) === Token.STATIC.value) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, this.yes())));
					}
					if((first === null) && (modifiers.length !== 0)) {
						first = modifiers[0];
					}
					if((modifiers.length !== 0) && this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						first = null;
						var attrs;
						while(this.until(Token.RIGHT_CURLY)) {
							attrs = this.stackOuterAttributes([]);
							if(attrs.length !== 0) {
								first = attrs[0];
								attrs.unshift.apply(attrs, [].concat(attributes));
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqClassMember(attrs, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
					}
					else {
						var member = this.tryClassMember(attributes, modifiers, first);
						if(member.ok === true) {
							members.push(member);
						}
						else {
							if(modifiers.length === 2) {
								this.rollback(mark2);
							}
							else {
								this.rollback(mark1);
							}
							modifiers.pop();
							members.push(this.reqClassMember(attributes, modifiers, first));
						}
					}
				}
			},
			reqClassMemberList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqClassMemberList_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassMethod_0: function(attributes, modifiers, name, round, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(round === void 0) {
					round = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqClassMethodParameterList(round);
				var type = this.tryFunctionReturns();
				var __ks_throws_1 = this.tryFunctionThrows();
				var body = this.tryFunctionBody();
				this.reqNL_1M();
				return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, KSType.isValue(body) ? body : KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
			},
			reqClassMethod: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqClassMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassMethodParameterList_0: function(top) {
				if(top === void 0 || top === null) {
					top = NO;
				}
				if(!(top.ok === true)) {
					if(!this.test(Token.LEFT_ROUND)) {
						this.throw("(");
					}
					top = this.yes();
				}
				var parameters = [];
				while(this.until(Token.RIGHT_ROUND)) {
					while(this.reqParameter(parameters, ParameterMode.Method) === true) {
					}
				}
				if(!this.test(Token.RIGHT_ROUND)) {
					this.throw(")");
				}
				return this.yep(parameters, top, this.yes());
			},
			reqClassMethodParameterList: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqClassMethodParameterList_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassProperty_0: function(attributes, modifiers, name, type, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var defaultValue, accessor, mutator;
				if(this.test(Token.NEWLINE)) {
					this.commit().NL_0M();
					if(this.match(Token.GET, Token.SET) === Token.GET) {
						var __ks_first_1 = this.yes();
						if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
							this.commit();
							var expression = this.reqExpression(ExpressionMode.Default);
							accessor = this.yep(AST.AccessorDeclaration(expression, __ks_first_1, expression));
						}
						else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
							var block = this.reqBlock();
							accessor = this.yep(AST.AccessorDeclaration(block, __ks_first_1, block));
						}
						else {
							accessor = this.yep(AST.AccessorDeclaration(__ks_first_1));
						}
						this.reqNL_1M();
						if(this.test(Token.SET)) {
							var __ks_first_2 = this.yes();
							if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
								this.commit();
								var expression = this.reqExpression(ExpressionMode.Default);
								mutator = this.yep(AST.MutatorDeclaration(expression, __ks_first_2, expression));
							}
							else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
								var block = this.reqBlock();
								mutator = this.yep(AST.MutatorDeclaration(block, __ks_first_2, block));
							}
							else {
								mutator = this.yep(AST.MutatorDeclaration(__ks_first_2));
							}
							this.reqNL_1M();
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.SET.value) {
						var __ks_first_1 = this.yes();
						if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
							this.commit();
							var expression = this.reqExpression(ExpressionMode.Default);
							mutator = this.yep(AST.MutatorDeclaration(expression, __ks_first_1, expression));
						}
						else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
							var block = this.reqBlock();
							mutator = this.yep(AST.MutatorDeclaration(block, __ks_first_1, block));
						}
						else {
							mutator = this.yep(AST.MutatorDeclaration(__ks_first_1));
						}
						this.reqNL_1M();
					}
					else {
						this.throw(["get", "set"]);
					}
				}
				else {
					if(this.match(Token.GET, Token.SET) === Token.GET) {
						accessor = this.yep(AST.AccessorDeclaration(this.yes()));
						if(this.test(Token.COMMA)) {
							this.commit();
							if(this.test(Token.SET)) {
								mutator = this.yep(AST.MutatorDeclaration(this.yes()));
							}
							else {
								this.throw("set");
							}
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.SET.value) {
						mutator = this.yep(AST.MutatorDeclaration(this.yes()));
					}
					else {
						this.throw(["get", "set"]);
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				var last = this.yes();
				if(this.test(Token.EQUALS)) {
					this.commit();
					defaultValue = this.reqExpression(ExpressionMode.Default);
				}
				this.reqNL_1M();
				return this.yep(AST.PropertyDeclaration(attributes, modifiers, name, type, defaultValue, accessor, mutator, first, KSType.isValue(defaultValue) ? defaultValue : last));
			},
			reqClassProperty: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqClassProperty_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassStatement_0: function(first, modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				return this.reqClassStatementBody(this.reqIdentifier(), first, modifiers);
			},
			reqClassStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqClassStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqClassStatementBody_0: function(name, first, modifiers) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				var generic;
				if(this.test(Token.LEFT_ANGLE)) {
					generic = this.reqTypeGeneric(this.yes());
				}
				var version;
				if(this.test(Token.AT)) {
					this.commit();
					if(!this.test(Token.CLASS_VERSION)) {
						this.throw("Class Version");
					}
					var data = this.value();
					version = this.yes((function() {
						var d = new Dictionary();
						d.major = data[0];
						d.minor = KSOperator.gt(data.length, 1) ? data[1] : 0;
						d.patch = KSOperator.gt(data.length, 2) ? data[2] : 0;
						return d;
					})());
					version.value.start = version.start;
					version.value.end = version.end;
				}
				var __ks_extends_1;
				if(this.test(Token.EXTENDS)) {
					this.commit();
					__ks_extends_1 = this.reqIdentifier();
					if(this.testNS(Token.DOT)) {
						var property;
						do {
							this.commit();
							property = this.reqIdentifier();
							__ks_extends_1 = this.yep(AST.MemberExpression([], __ks_extends_1, property));
						}
						while(this.testNS(Token.DOT))
					}
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var attributes = [];
				var members = [];
				while(this.until(Token.RIGHT_CURLY)) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					this.reqClassMemberList(members);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ClassDeclaration(attributes, name, version, __ks_extends_1, modifiers, members, first, this.yes()));
			},
			reqClassStatementBody: function() {
				if(arguments.length >= 2 && arguments.length <= 3) {
					return Parser.prototype.__ks_func_reqClassStatementBody_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqComputedPropertyName_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var expression = this.reqExpression(ExpressionMode.Default);
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				return this.yep(AST.ComputedPropertyName(expression, first, this.yes()));
			},
			reqComputedPropertyName: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqComputedPropertyName_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqConstStatement_0: function(first, mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					mode = ExpressionMode.Default;
				}
				var variable = this.reqTypedVariable();
				var modifiers = [AST.Modifier(ModifierKind.Immutable, first)];
				if(this.test(Token.COMMA)) {
					var variables = [variable];
					do {
						this.commit();
						variables.push(this.reqTypedVariable());
					}
					while(this.test(Token.COMMA))
					this.reqVariableEquals(modifiers);
					if(!this.test(Token.AWAIT)) {
						this.throw("await");
					}
					this.commit();
					var operand = this.reqPrefixedOperand(mode);
					operand = this.yep(AST.AwaitExpression([], variables, operand, variable, operand));
					return this.yep(AST.VariableDeclaration(modifiers, variables, operand, first, operand));
				}
				else {
					this.reqVariableEquals(modifiers);
					var expression = this.reqExpression(mode);
					return this.yep(AST.VariableDeclaration(modifiers, [variable], expression, first, expression));
				}
			},
			reqConstStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqConstStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqContinueStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return this.yep(AST.ContinueStatement(first));
			},
			reqContinueStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqContinueStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqCreateExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.LEFT_ROUND)) {
					this.commit();
					var __ks_class_1 = this.reqExpression(ExpressionMode.Default);
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					this.commit();
					if(!this.test(Token.LEFT_ROUND)) {
						this.throw("(");
					}
					this.commit();
					return this.yep(AST.CreateExpression(__ks_class_1, this.reqExpression0CNList(), first, this.yes()));
				}
				var __ks_class_1 = this.reqVariableName();
				if(this.match(Token.LEFT_ANGLE, Token.LEFT_SQUARE) === Token.LEFT_ANGLE) {
					var generic = this.reqTypeGeneric(this.yes());
					__ks_class_1 = this.yep(AST.TypeReference([], __ks_class_1, generic, __ks_class_1, generic));
				}
				if(this.test(Token.LEFT_ROUND)) {
					this.commit();
					return this.yep(AST.CreateExpression(__ks_class_1, this.reqExpression0CNList(), first, this.yes()));
				}
				else {
					return this.yep(AST.CreateExpression(__ks_class_1, this.yep([]), first, __ks_class_1));
				}
			},
			reqCreateExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqCreateExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqDestructuringArray_0: function(first, mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					mode = DestructuringMode.Nil;
				}
				this.NL_0M();
				var elements = [];
				while(true) {
					elements.push(this.reqDestructuringArrayItem(mode));
					if(this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) {
						this.commit().NL_0M();
						continue;
					}
					else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
						this.commit().NL_0M();
						if(this.test(Token.RIGHT_SQUARE)) {
							break;
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				return this.yep(AST.ArrayBinding(elements, first, this.yes()));
			},
			reqDestructuringArray: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqDestructuringArray_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqDestructuringArrayItem_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var modifiers = [];
				var first = null;
				var name = null;
				var type = null;
				if(this.test(Token.DOT_DOT_DOT)) {
					modifiers.push(AST.Modifier(ModifierKind.Rest, first = this.yes()));
					if((KSOperator.bitwiseAnd(mode, DestructuringMode.THIS_ALIAS) !== 0) && this.test(Token.AT)) {
						modifiers.push(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
						name = this.reqIdentifier();
					}
					else if(this.test(Token.IDENTIFIER)) {
						name = this.yep(AST.Identifier(this._scanner.value(), this.yes()));
					}
				}
				else if((KSOperator.bitwiseAnd(mode, DestructuringMode.RECURSION) !== 0) && this.test(Token.LEFT_CURLY)) {
					name = this.reqDestructuringObject(this.yes(), mode);
				}
				else if((KSOperator.bitwiseAnd(mode, DestructuringMode.RECURSION) !== 0) && this.test(Token.LEFT_SQUARE)) {
					name = this.reqDestructuringArray(this.yes(), mode);
				}
				else if((KSOperator.bitwiseAnd(mode, DestructuringMode.THIS_ALIAS) !== 0) && this.test(Token.AT)) {
					modifiers.push(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
					name = this.reqIdentifier();
				}
				else if(this.test(Token.IDENTIFIER)) {
					name = this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else if(this.test(Token.UNDERSCORE)) {
					first = this.yes();
				}
				else {
					if(KSOperator.bitwiseAnd(mode, DestructuringMode.RECURSION) !== 0) {
						this.throw(["...", "_", "[", "{", "Identifier"]);
					}
					else {
						this.throw(["...", "_", "Identifier"]);
					}
				}
				if((KSOperator.bitwiseAnd(mode, DestructuringMode.TYPE) !== 0) && this.test(Token.COLON)) {
					this.commit();
					type = this.reqTypeVar();
				}
				if(name !== null) {
					var defaultValue = null;
					if((KSOperator.bitwiseAnd(mode, DestructuringMode.DEFAULT) !== 0) && this.test(Token.EQUALS)) {
						this.commit();
						defaultValue = this.reqExpression(ExpressionMode.Default);
					}
					return this.yep(AST.ArrayBindingElement(modifiers, name, type, defaultValue, KSType.isValue(first) ? first : name, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : name));
				}
				else {
					return this.yep(AST.ArrayBindingElement(modifiers, null, type, null, KSType.isValue(first) ? first : KSType.isValue(type) ? type : this.yep(), KSType.isValue(type) ? type : KSType.isValue(first) ? first : this.yep()));
				}
			},
			reqDestructuringArrayItem: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDestructuringArrayItem_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqDestructuringObject_0: function(first, mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					mode = DestructuringMode.Nil;
				}
				this.NL_0M();
				var elements = [];
				while(true) {
					elements.push(this.reqDestructuringObjectItem(mode));
					if((this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) || (KSHelper.valueOf(this._token) === Token.NEWLINE.value)) {
						this.commit().NL_0M();
					}
					else {
						break;
					}
					if(this.test(Token.RIGHT_CURLY)) {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ObjectBinding(elements, first, this.yes()));
			},
			reqDestructuringObject: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqDestructuringObject_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqDestructuringObjectItem_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var first;
				var modifiers = [];
				var name = null;
				var alias = null;
				var defaultValue = null;
				if(this.test(Token.DOT_DOT_DOT)) {
					modifiers.push(AST.Modifier(ModifierKind.Rest, first = this.yes()));
					if((KSOperator.bitwiseAnd(mode, DestructuringMode.THIS_ALIAS) !== 0) && this.test(Token.AT)) {
						modifiers.push(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
					}
					name = this.reqIdentifier();
				}
				else {
					if((KSOperator.bitwiseAnd(mode, DestructuringMode.COMPUTED) !== 0) && this.test(Token.LEFT_SQUARE)) {
						var __ks_first_1 = this.yes();
						if((KSOperator.bitwiseAnd(mode, DestructuringMode.THIS_ALIAS) !== 0) && this.test(Token.AT)) {
							modifiers.push(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
						}
						name = this.reqIdentifier();
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						modifiers.push(AST.Modifier(ModifierKind.Computed, __ks_first_1, this.yes()));
					}
					else {
						if((KSOperator.bitwiseAnd(mode, DestructuringMode.THIS_ALIAS) !== 0) && this.test(Token.AT)) {
							modifiers.push(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
						}
						name = this.reqIdentifier();
					}
					if(this.test(Token.COLON)) {
						this.commit();
						if((KSOperator.bitwiseAnd(mode, DestructuringMode.RECURSION) !== 0) && this.test(Token.LEFT_CURLY)) {
							alias = this.reqDestructuringObject(this.yes(), mode);
						}
						else if((KSOperator.bitwiseAnd(mode, DestructuringMode.RECURSION) !== 0) && this.test(Token.LEFT_SQUARE)) {
							alias = this.reqDestructuringArray(this.yes(), mode);
						}
						else {
							if((KSOperator.bitwiseAnd(mode, DestructuringMode.THIS_ALIAS) !== 0) && this.test(Token.AT)) {
								modifiers.push(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
							}
							alias = this.reqIdentifier();
						}
					}
				}
				if((KSOperator.bitwiseAnd(mode, DestructuringMode.DEFAULT) !== 0) && this.test(Token.EQUALS)) {
					this.commit();
					defaultValue = this.reqExpression(ExpressionMode.Default);
				}
				return this.yep(AST.ObjectBindingElement(modifiers, name, alias, defaultValue, KSType.isValue(first) ? first : name, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(alias) ? alias : name));
			},
			reqDestructuringObjectItem: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDestructuringObjectItem_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqDiscloseStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.reqIdentifier();
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var members = [];
				while(this.until(Token.RIGHT_CURLY)) {
					this.reqExternClassMemberList(members);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.DiscloseDeclaration(name, members, first, this.yes()));
			},
			reqDiscloseStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDiscloseStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqDoStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var body = this.reqBlock();
				this.reqNL_1M();
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.DoUntilStatement(condition, body, first, condition));
				}
				else if(KSHelper.valueOf(this._token) === Token.WHILE.value) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.DoWhileStatement(condition, body, first, condition));
				}
				else {
					this.throw(["until", "while"]);
				}
			},
			reqDoStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDoStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqEnumStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.reqIdentifier();
				var type;
				if(this.test(Token.LEFT_ANGLE)) {
					this.commit();
					type = this.reqTypeEntity(NO);
					if(!this.test(Token.RIGHT_ANGLE)) {
						this.throw(">");
					}
					this.commit();
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit();
				this.NL_0M();
				var members = [];
				var identifier;
				while(!this.test(Token.RIGHT_CURLY)) {
					identifier = this.reqIdentifier();
					if(this.test(Token.EQUALS)) {
						this.commit();
						members.push(AST.EnumMember(identifier, this.reqExpression(ExpressionMode.Default)));
					}
					else {
						members.push(AST.EnumMember(identifier));
					}
					if(this.test(Token.COMMA)) {
						this.commit().NL_0M();
					}
					else if(this.test(Token.NEWLINE)) {
						this.commit().NL_0M();
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.EnumDeclaration(name, type, members, first, this.yes()));
			},
			reqEnumStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqEnumStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExportDeclarator_0: function() {
				var __ks_0 = this.matchM(M.EXPORT_STATEMENT);
				if(__ks_0 === Token.ABSTRACT) {
					var first = this.yes();
					if(this.test(Token.CLASS)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Abstract, first))];
						return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_0 === Token.ASYNC) {
					var first = this.reqIdentifier();
					if(this.test(Token.FUNC)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
						return this.yep(AST.ExportDeclarationSpecifier(this.reqFunctionStatement(first, modifiers)));
					}
					else {
						return this.reqExportIdentifier(first);
					}
				}
				else if(__ks_0 === Token.CLASS) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(this.yes())));
				}
				else if(__ks_0 === Token.CONST) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqConstStatement(this.yes(), ExpressionMode.NoAwait)));
				}
				else if(__ks_0 === Token.ENUM) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqEnumStatement(this.yes())));
				}
				else if(__ks_0 === Token.FINAL) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Final, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
						}
						else {
							this.throw("class");
						}
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_0 === Token.FUNC) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqFunctionStatement(this.yes())));
				}
				else if(__ks_0 === Token.IDENTIFIER) {
					return this.reqExportIdentifier(this.reqIdentifier());
				}
				else if(__ks_0 === Token.LET) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqLetStatement(this.yes(), ExpressionMode.NoAwait)));
				}
				else if(__ks_0 === Token.MACRO) {
					if((this._mode & ParserMode.MacroExpression) === 0) {
						return this.yep(AST.ExportDeclarationSpecifier(this.tryMacroStatement(this.yes())));
					}
					else {
						return this.yep(AST.ExportDeclarationSpecifier(this.reqMacroExpression(this.yes())));
					}
				}
				else if(__ks_0 === Token.NAMESPACE) {
					return this.yep(AST.ExportDeclarationSpecifier(this.tryNamespaceStatement(this.yes())));
				}
				else if(__ks_0 === Token.SEALED) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Sealed, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
						}
						else {
							this.throw("class");
						}
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_0 === Token.STRUCT) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqStructStatement(this.yes())));
				}
				else if(__ks_0 === Token.TYPE) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqTypeStatement(this.yes(), this.reqIdentifier())));
				}
				else {
					this.throw();
				}
			},
			reqExportDeclarator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqExportDeclarator_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExportIdentifier_0: function(value) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				var identifier = null;
				if(this.testNS(Token.DOT)) {
					do {
						this.commit();
						if(this.testNS(Token.ASTERISK)) {
							return this.yep(AST.ExportWildcardSpecifier(value, this.yes()));
						}
						else {
							identifier = this.reqIdentifier();
							value = this.yep(AST.MemberExpression([], value, identifier));
						}
					}
					while(this.testNS(Token.DOT))
				}
				if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
					this.commit();
					return this.yep(AST.ExportNamedSpecifier(value, this.reqIdentifier()));
				}
				else if(this.test(Token.FOR)) {
					this.commit();
					if(this.test(Token.ASTERISK)) {
						return this.yep(AST.ExportWildcardSpecifier(value, this.yes()));
					}
					else if(this.test(Token.LEFT_CURLY)) {
						var members = [];
						this.commit().NL_0M();
						while(!this.test(Token.RIGHT_CURLY)) {
							identifier = this.reqIdentifier();
							if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
								this.commit();
								members.push(AST.ExportNamedSpecifier(identifier, this.reqIdentifier()));
							}
							else {
								members.push(AST.ExportNamedSpecifier(identifier, identifier));
							}
							if(this.test(Token.COMMA)) {
								this.commit();
							}
							this.reqNL_1M();
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						return this.yep(AST.ExportPropertiesSpecifier(value, members, this.yes()));
					}
					else {
						var members = [];
						identifier = this.reqIdentifier();
						if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.commit();
							members.push(AST.ExportNamedSpecifier(identifier, this.reqIdentifier()));
						}
						else {
							members.push(AST.ExportNamedSpecifier(identifier, identifier));
						}
						while(this.test(Token.COMMA)) {
							this.commit();
							identifier = this.reqIdentifier();
							if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
								this.commit();
								members.push(AST.ExportNamedSpecifier(identifier, this.reqIdentifier()));
							}
							else {
								members.push(AST.ExportNamedSpecifier(identifier, identifier));
							}
						}
						return this.yep(AST.ExportPropertiesSpecifier(value, members, this.yep()));
					}
				}
				else {
					return this.yep(AST.ExportNamedSpecifier(value, KSType.isValue(identifier) ? identifier : value));
				}
			},
			reqExportIdentifier: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExportIdentifier_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExportStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [];
				var declarations = [];
				var last;
				if(this.match(Token.ASTERISK, Token.LEFT_CURLY) === Token.ASTERISK) {
					var __ks_first_1 = this.yes();
					if(this.test(Token.BUT)) {
						this.commit();
						var exclusions = [];
						if(this.test(Token.LEFT_CURLY)) {
							this.commit().NL_0M();
							while(!this.test(Token.RIGHT_CURLY)) {
								exclusions.push(this.reqIdentifier());
								this.reqNL_1M();
							}
							if(!this.test(Token.RIGHT_CURLY)) {
								this.throw("}");
							}
							last = this.yes();
						}
						else {
							exclusions.push(this.reqIdentifier());
							while(this.test(Token.COMMA)) {
								this.commit();
								exclusions.push(this.reqIdentifier());
							}
							last = exclusions[exclusions.length - 1];
						}
						declarations.push(this.yep(AST.ExportExclusionSpecifier(exclusions, __ks_first_1, last)));
					}
					else {
						last = this.yep();
						declarations.push(this.yep(AST.ExportExclusionSpecifier([], __ks_first_1, last)));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					this.commit().NL_0M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqExportDeclarator();
						if(attrs.length > 0) {
							if(KSHelper.valueOf(declarator.value.kind) !== NodeKind.ExportDeclarationSpecifier.value) {
								this.throw();
							}
							declarator.value.declaration.attributes.unshift.apply(declarator.value.declaration.attributes, attrs);
							declarator.value.start = declarator.value.declaration.start = attrs[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(this.reqExportDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExportDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.ExportDeclaration(attributes, declarations, first, last));
			},
			reqExportStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExportStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExpression_0: function(mode, terminator) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0) {
					mode = null;
				}
				if(terminator === void 0) {
					terminator = null;
				}
				if(mode === null) {
					if(((this._mode & ParserMode.MacroExpression) !== 0) && this._scanner.test(Token.IDENTIFIER) && (this._scanner.value() === "macro")) {
						return this.reqMacroExpression(this.yes(), terminator);
					}
					else {
						mode = ExpressionMode.Default;
					}
				}
				return this.reqOperation(mode);
			},
			reqExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExpression0CNList_0: function() {
				this.NL_0M();
				if(this.test(Token.RIGHT_ROUND)) {
					return this.yep([]);
				}
				else {
					var expressions = [];
					while(true) {
						var expression = this.reqExpression(null, MacroTerminator.List);
						if(KSHelper.valueOf(expression.value.kind) === NodeKind.Identifier.value) {
							if(this.test(Token.COLON)) {
								this.commit();
								var value = this.reqExpression(null, MacroTerminator.List);
								expressions.push(this.yep(AST.NamedArgument(expression, value)));
							}
							else {
								expressions.push(expression);
							}
						}
						else {
							expressions.push(expression);
						}
						if((this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) || (KSHelper.valueOf(this._token) === Token.NEWLINE.value)) {
							this.commit().NL_0M();
						}
						else {
							break;
						}
						if(this.test(Token.RIGHT_ROUND)) {
							break;
						}
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					return this.yep(expressions);
				}
			},
			reqExpression0CNList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqExpression0CNList_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExpressionStatement_0: function() {
				var expression = this.reqExpression(ExpressionMode.Default);
				if(this.match(Token.FOR, Token.IF, Token.UNLESS) === Token.FOR) {
					var statement = this.reqForExpression(this.yes());
					statement.value.body = expression.value;
					this.relocate(statement, expression, null);
					return statement;
				}
				else if(KSHelper.valueOf(this._token) === Token.IF.value) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.IfStatement(condition, expression, null, expression, condition));
				}
				else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.UnlessStatement(condition, expression, expression, condition));
				}
				else {
					return this.yep(AST.ExpressionStatement(expression));
				}
			},
			reqExpressionStatement: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqExpressionStatement_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternClassDeclaration_0: function(first, modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				var name = this.reqIdentifier();
				var generic;
				if(this.test(Token.LEFT_ANGLE)) {
					generic = this.reqTypeGeneric(this.yes());
				}
				var __ks_extends_1;
				if(this.test(Token.EXTENDS)) {
					this.commit();
					__ks_extends_1 = this.reqIdentifier();
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var attributes = [];
					var members = [];
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.reqExternClassMemberList(members);
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.ClassDeclaration(attributes, name, null, __ks_extends_1, modifiers, members, first, this.yes()));
				}
				else {
					return this.yep(AST.ClassDeclaration([], name, null, __ks_extends_1, modifiers, [], first, KSType.isValue(__ks_extends_1) ? __ks_extends_1 : KSType.isValue(generic) ? generic : name));
				}
			},
			reqExternClassDeclaration: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqExternClassDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternClassField_0: function(attributes, modifiers, name, type, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.reqNL_1M();
				return this.yep(AST.FieldDeclaration(attributes, modifiers, name, type, null, first, KSType.isValue(type) ? type : name));
			},
			reqExternClassField: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqExternClassField_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternClassMember_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name = this.reqIdentifier();
				if(this.match(Token.COLON, Token.LEFT_CURLY, Token.LEFT_ROUND) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					if(this.test(Token.LEFT_CURLY)) {
						this.throw();
					}
					else {
						return this.reqExternClassField(attributes, modifiers, name, type, KSType.isValue(first) ? first : name);
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					this.throw();
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					return this.reqExternClassMethod(attributes, modifiers, name, this.yes(), KSType.isValue(first) ? first : name);
				}
				else {
					return this.reqExternClassField(attributes, modifiers, name, null, KSType.isValue(first) ? first : name);
				}
			},
			reqExternClassMember: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_reqExternClassMember_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternClassMemberList_0: function(members) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				var first = null;
				var attributes = this.stackOuterAttributes([]);
				if(attributes.length !== 0) {
					first = attributes[0];
				}
				var modifiers = this.reqAccessModifiers([]);
				if(this.test(Token.ABSTRACT)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
					first = modifiers[0];
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						first = null;
						var attrs;
						while(this.until(Token.RIGHT_CURLY)) {
							attrs = this.stackOuterAttributes([]);
							if(attrs.length !== 0) {
								first = attrs[0];
								attrs.unshift.apply(attrs, [].concat(attributes));
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqClassAbstractMethod(attrs, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
					}
					else {
						members.push(this.reqClassAbstractMethod(attributes, modifiers, first));
					}
				}
				else {
					if(this.test(Token.STATIC)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, this.yes())));
					}
					if((first === null) && (modifiers.length !== 0)) {
						first = modifiers[0];
					}
					if((modifiers.length !== 0) && this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						first = null;
						var attrs;
						while(this.until(Token.RIGHT_CURLY)) {
							attrs = this.stackOuterAttributes([]);
							if(attrs.length !== 0) {
								first = attrs[0];
								attrs.unshift.apply(attrs, [].concat(attributes));
							}
							else {
								attrs = attributes;
							}
							members.push(this.reqExternClassMember(attrs, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
					}
					else {
						members.push(this.reqExternClassMember(attributes, modifiers, first));
					}
				}
			},
			reqExternClassMemberList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternClassMemberList_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternClassMethod_0: function(attributes, modifiers, name, round, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(round === void 0 || round === null) {
					throw new TypeError("'round' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqClassMethodParameterList(round);
				var type = this.tryFunctionReturns();
				this.reqNL_1M();
				return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, null, null, first, KSType.isValue(type) ? type : parameters));
			},
			reqExternClassMethod: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqExternClassMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternDeclarator_0: function(ns) {
				if(ns === void 0 || ns === null) {
					ns = false;
				}
				var __ks_0 = this.matchM(M.EXTERN_STATEMENT);
				if(__ks_0 === Token.ABSTRACT) {
					var __ks_abstract_1 = this.yep(AST.Modifier(ModifierKind.Abstract, this.yes()));
					if(this.test(Token.CLASS)) {
						this.commit();
						return this.reqExternClassDeclaration(__ks_abstract_1, [__ks_abstract_1]);
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_0 === Token.ASYNC) {
					var first = this.reqIdentifier();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
					if(this.test(Token.FUNC)) {
						this.commit();
						return this.reqExternFunctionDeclaration(first, modifiers);
					}
					else {
						var fn = this.tryExternFunctionDeclaration(first, modifiers);
						if(fn.ok === true) {
							return fn;
						}
						else {
							return this.reqExternVariableDeclarator(first);
						}
					}
				}
				else if(__ks_0 === Token.CLASS) {
					return this.reqExternClassDeclaration(this.yes(), []);
				}
				else if(__ks_0 === Token.CONST && ns) {
					var first = this.yes();
					var name = this.reqIdentifier();
					var modifiers = [AST.Modifier(ModifierKind.Immutable, first)];
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.yep(AST.VariableDeclarator(modifiers, name, type, first, type));
					}
					else {
						return this.yep(AST.VariableDeclarator(modifiers, name, null, first, name));
					}
				}
				else if(__ks_0 === Token.ENUM) {
					return this.reqExternEnumDeclaration(this.yes());
				}
				else if(__ks_0 === Token.FINAL) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Final, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						return this.reqExternClassDeclaration(first, modifiers);
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							return this.reqExternClassDeclaration(first, modifiers);
						}
						else {
							this.throw("class");
						}
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_0 === Token.FUNC) {
					var first = this.yes();
					return this.reqExternFunctionDeclaration(first, []);
				}
				else if(__ks_0 === Token.IDENTIFIER) {
					return this.reqExternVariableDeclarator(this.reqIdentifier());
				}
				else if(__ks_0 === Token.NAMESPACE) {
					return this.reqExternNamespaceDeclaration(this.yes(), []);
				}
				else if(__ks_0 === Token.SEALED) {
					var __ks_sealed_1 = this.yep(AST.Modifier(ModifierKind.Sealed, this.yes()));
					if(this.matchM(M.EXTERN_STATEMENT) === Token.ABSTRACT) {
						var __ks_abstract_1 = this.yep(AST.Modifier(ModifierKind.Abstract, this.yes()));
						if(this.test(Token.CLASS)) {
							this.commit();
							return this.reqExternClassDeclaration(__ks_sealed_1, [__ks_sealed_1, __ks_abstract_1]);
						}
						else {
							this.throw("class");
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.CLASS.value) {
						this.commit();
						return this.reqExternClassDeclaration(__ks_sealed_1, [__ks_sealed_1]);
					}
					else if(KSHelper.valueOf(this._token) === Token.IDENTIFIER.value) {
						var name = this.reqIdentifier();
						var modifiers = [__ks_sealed_1.value];
						if(this.test(Token.COLON)) {
							this.commit();
							var type = this.reqTypeVar();
							return this.yep(AST.VariableDeclarator(modifiers, name, type, __ks_sealed_1, type));
						}
						else {
							return this.yep(AST.VariableDeclarator(modifiers, name, null, __ks_sealed_1, name));
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.NAMESPACE.value) {
						this.commit();
						return this.reqExternNamespaceDeclaration(__ks_sealed_1, [__ks_sealed_1]);
					}
					else {
						this.throw(["class", "namespace"]);
					}
				}
				else if(__ks_0 === Token.LET && ns) {
					var first = this.yes();
					var name = this.reqIdentifier();
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.yep(AST.VariableDeclarator([], name, type, first, type));
					}
					else {
						return this.yep(AST.VariableDeclarator([], name, null, first, name));
					}
				}
				else {
					this.throw();
				}
			},
			reqExternDeclarator: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqExternDeclarator_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternEnumDeclaration_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.reqIdentifier();
				var type;
				if(this.test(Token.LEFT_ANGLE)) {
					this.commit();
					type = this.reqTypeEntity(NO);
					if(!this.test(Token.RIGHT_ANGLE)) {
						this.throw(">");
					}
					this.commit();
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit();
				this.NL_0M();
				var members = [];
				while(!this.test(Token.RIGHT_CURLY)) {
					members.push(AST.EnumMember(this.reqIdentifier()));
					if(this.test(Token.COMMA)) {
						this.commit().NL_0M();
					}
					else if(this.test(Token.NEWLINE)) {
						this.commit().NL_0M();
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.EnumDeclaration(name, type, members, first, this.yes()));
			},
			reqExternEnumDeclaration: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternEnumDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternFunctionDeclaration_0: function(first, modifiers) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				var name = this.reqIdentifier();
				if(this.test(Token.LEFT_ROUND)) {
					var parameters = this.reqFunctionParameterList();
					var type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					return this.yep(AST.FunctionDeclaration(name, parameters, modifiers, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				else {
					var position = this.yep();
					var type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					return this.yep(AST.FunctionDeclaration(name, null, modifiers, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : name));
				}
			},
			reqExternFunctionDeclaration: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqExternFunctionDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternNamespaceDeclaration_0: function(first, modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				var name = this.reqIdentifier();
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var attributes = [];
					var statements = [];
					var attrs = [];
					var statement;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						statement = this.reqExternDeclarator(true);
						this.reqNL_1M();
						if(attrs.length > 0) {
							statement.value.attributes.unshift.apply(statement.value.attributes, attrs);
							statement.value.start = statement.value.attributes[0].start;
							attrs = [];
						}
						statements.push(statement);
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.NamespaceDeclaration(attributes, modifiers, name, statements, first, this.yes()));
				}
				else {
					return this.yep(AST.NamespaceDeclaration([], modifiers, name, [], first, name));
				}
			},
			reqExternNamespaceDeclaration: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqExternNamespaceDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternOrRequireStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [];
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqExternDeclarator();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift.apply(declarator.value.attributes, attrs);
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.ExternOrRequireDeclaration(attributes, declarations, first, last));
			},
			reqExternOrRequireStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternOrRequireStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [];
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqExternDeclarator();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift.apply(declarator.value.attributes, attrs);
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.ExternDeclaration(attributes, declarations, first, last));
			},
			reqExternStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqExternVariableDeclarator_0: function(name) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(this.match(Token.COLON, Token.LEFT_ROUND) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					return this.yep(AST.VariableDeclarator([], name, type, name, type));
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					var parameters = this.reqFunctionParameterList();
					var type = this.tryFunctionReturns();
					return this.yep(AST.FunctionDeclaration(name, parameters, [], type, null, null, name, KSType.isValue(type) ? type : parameters));
				}
				else {
					return this.yep(AST.VariableDeclarator([], name, null, name, name));
				}
			},
			reqExternVariableDeclarator: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternVariableDeclarator_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqFallthroughStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return this.yep(AST.FallthroughStatement(first));
			},
			reqFallthroughStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqFallthroughStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqForExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var modifiers = [];
				if(this.test(Token.LET)) {
					modifiers.push(AST.Modifier(ModifierKind.Declarative, this.yes()));
				}
				else if(this.test(Token.CONST)) {
					var position = this.yes();
					modifiers.push(AST.Modifier(ModifierKind.Declarative, position), AST.Modifier(ModifierKind.Immutable, position));
				}
				var identifier1 = NO;
				var type1 = NO;
				var identifier2 = NO;
				var destructuring = NO;
				if(this.test(Token.UNDERSCORE)) {
					this.commit();
				}
				else if(!((destructuring = this.tryDestructuring()).ok === true)) {
					identifier1 = this.reqIdentifier();
					if(this.test(Token.COLON)) {
						this.commit();
						type1 = this.reqTypeVar();
					}
				}
				if(this.test(Token.COMMA)) {
					this.commit();
					identifier2 = this.reqIdentifier();
				}
				this.NL_0M();
				if(destructuring.ok === true) {
					if(this.match(Token.IN, Token.OF) === Token.IN) {
						this.commit();
						return this.altForExpressionIn(modifiers, destructuring, type1, identifier2, this.reqExpression(ExpressionMode.Default), first);
					}
					else if(KSHelper.valueOf(this._token) === Token.OF.value) {
						this.commit();
						return this.altForExpressionOf(modifiers, destructuring, type1, identifier2, first);
					}
					else {
						this.throw(["in", "of"]);
					}
				}
				else if(identifier2.ok === true) {
					if(this.match(Token.IN, Token.OF) === Token.IN) {
						this.commit();
						return this.altForExpressionInRange(modifiers, identifier1, type1, identifier2, first);
					}
					else if(KSHelper.valueOf(this._token) === Token.OF.value) {
						this.commit();
						return this.altForExpressionOf(modifiers, identifier1, type1, identifier2, first);
					}
					else {
						this.throw(["in", "of"]);
					}
				}
				else {
					if(this.match(Token.FROM, Token.IN, Token.OF) === Token.FROM) {
						this.commit();
						return this.altForExpressionFrom(modifiers, identifier1, first);
					}
					else if(KSHelper.valueOf(this._token) === Token.IN.value) {
						this.commit();
						return this.altForExpressionInRange(modifiers, identifier1, type1, identifier2, first);
					}
					else if(KSHelper.valueOf(this._token) === Token.OF.value) {
						this.commit();
						return this.altForExpressionOf(modifiers, identifier1, type1, identifier2, first);
					}
					else {
						this.throw(["from", "in", "of"]);
					}
				}
			},
			reqForExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqForExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqForStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var statement = this.reqForExpression(first);
				this.NL_0M();
				var block = this.reqBlock();
				statement.value.body = block.value;
				this.relocate(statement, null, block);
				return statement;
			},
			reqForStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqForStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqFunctionBody_0: function() {
				this.NL_0M();
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					return this.reqBlock(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS_RIGHT_ANGLE.value) {
					this.commit().NL_0M();
					var expression = this.reqExpression(ExpressionMode.Default);
					if(this.match(Token.IF, Token.UNLESS) === Token.IF) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						if(this.match(Token.ELSE, Token.NEWLINE) === Token.ELSE) {
							this.commit();
							var whenFalse = this.reqExpression(ExpressionMode.Default);
							return this.yep(AST.ReturnStatement(this.yep(AST.IfExpression(condition, expression, whenFalse, expression, whenFalse)), expression, whenFalse));
						}
						else if((KSHelper.valueOf(this._token) === Token.NEWLINE.value) || (KSHelper.valueOf(this._token) === Token.EOF.value)) {
							return this.yep(AST.IfStatement(condition, this.yep(AST.ReturnStatement(expression, expression, expression)), null, expression, condition));
						}
						else {
							this.throw();
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.UnlessStatement(condition, this.yep(AST.ReturnStatement(expression, expression, expression)), expression, condition));
					}
					else {
						return expression;
					}
				}
				else {
					this.throw(["{", "=>"]);
				}
			},
			reqFunctionBody: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqFunctionBody_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqFunctionParameterList_0: function() {
				if(!this.test(Token.LEFT_ROUND)) {
					this.throw("(");
				}
				var first = this.yes();
				var parameters = [];
				if(!this.test(Token.RIGHT_ROUND)) {
					while(this.reqParameter(parameters, ParameterMode.Function) === true) {
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
				}
				return this.yep(parameters, first, this.yes());
			},
			reqFunctionParameterList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqFunctionParameterList_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqFunctionStatement_0: function(first, modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				var name = this.reqIdentifier();
				var parameters = this.reqFunctionParameterList();
				var type = this.tryFunctionReturns();
				var __ks_throws_1 = this.tryFunctionThrows();
				var body = this.reqFunctionBody();
				return this.yep(AST.FunctionDeclaration(name, parameters, modifiers, type, __ks_throws_1, body, first, body));
			},
			reqFunctionStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqFunctionStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqIdentifier_0: function() {
				if(this._scanner.test(Token.IDENTIFIER)) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else {
					this.throw("Identifier");
				}
			},
			reqIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqIdentifier_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqIfStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition;
				if(this.test(Token.LET, Token.CONST)) {
					var token = this._token;
					var mark = this.mark();
					var __ks_first_1 = this.yes();
					var modifiers = [];
					if(KSHelper.valueOf(token) === Token.CONST.value) {
						modifiers.push(AST.Modifier(ModifierKind.Immutable, __ks_first_1));
					}
					if(this.test(Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE)) {
						var variable = this.reqTypedVariable();
						if(this.test(Token.COMMA)) {
							var variables = [variable];
							do {
								this.commit();
								variables.push(this.reqTypedVariable());
							}
							while(this.test(Token.COMMA))
							this.reqVariableEquals(modifiers);
							if(!this.test(Token.AWAIT)) {
								this.throw("await");
							}
							this.commit();
							var operand = this.reqPrefixedOperand(ExpressionMode.Default);
							condition = this.yep(AST.VariableDeclaration(modifiers, variables, operand, __ks_first_1, operand));
						}
						else {
							this.reqVariableEquals(modifiers);
							var expression = this.reqExpression(ExpressionMode.Default);
							condition = this.yep(AST.VariableDeclaration(modifiers, [variable], expression, __ks_first_1, expression));
						}
					}
					else {
						this.rollback(mark);
						condition = this.reqExpression(ExpressionMode.NoAnonymousFunction);
					}
				}
				else {
					this.NL_0M();
					condition = this.reqExpression(ExpressionMode.NoAnonymousFunction);
				}
				this.NL_0M();
				var whenTrue = this.reqBlock();
				if(this.test(Token.NEWLINE)) {
					var mark = this.mark();
					this.commit().NL_0M();
					if(this.match(Token.ELSE_IF, Token.ELSE) === Token.ELSE_IF) {
						var position = this.yes();
						position.start.column = KSOperator.addOrConcat(position.start.column, 5);
						var whenFalse = this.reqIfStatement(position);
						return this.yep(AST.IfStatement(condition, whenTrue, whenFalse, first, whenFalse));
					}
					else if(KSHelper.valueOf(this._token) === Token.ELSE.value) {
						this.commit().NL_0M();
						var whenFalse = this.reqBlock();
						return this.yep(AST.IfStatement(condition, whenTrue, whenFalse, first, whenFalse));
					}
					else {
						this.rollback(mark);
						return this.yep(AST.IfStatement(condition, whenTrue, null, first, whenTrue));
					}
				}
				else {
					return this.yep(AST.IfStatement(condition, whenTrue, null, first, whenTrue));
				}
			},
			reqIfStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqIfStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqImplementMemberList_0: function(members) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				var first = null;
				var attributes = this.stackOuterAttributes([]);
				var mark = this.mark();
				var modifiers = this.reqAccessModifiers([]);
				if(this.match(Token.OVERRIDE, Token.OVERWRITE, Token.STATIC) === Token.OVERRIDE) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Override, this.yes())));
					if(KSOperator.gt(modifiers.length, 1)) {
						mark = this.mark();
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.OVERWRITE.value) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Overwrite, this.yes())));
					if(KSOperator.gt(modifiers.length, 1)) {
						mark = this.mark();
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.STATIC.value) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, this.yes())));
					if(KSOperator.gt(modifiers.length, 1)) {
						mark = this.mark();
					}
				}
				if(modifiers.length !== 0) {
					first = modifiers[0];
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit();
					this.NL_0M();
					var attrs;
					while(!this.test(Token.RIGHT_CURLY)) {
						attrs = this.stackOuterAttributes([]);
						if(KSOperator.gt(attrs.length, 0)) {
							first = attrs[0];
							attrs.unshift.apply(attrs, [].concat(attributes));
						}
						members.push(this.reqClassMember(attrs, modifiers, first));
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					this.commit();
					this.reqNL_1M();
				}
				else {
					var member = this.tryClassMember(attributes, modifiers, first);
					if(member.ok === true) {
						members.push(member);
					}
					else {
						this.rollback(mark);
						modifiers.pop();
						members.push(this.reqClassMember(attributes, modifiers, first));
					}
				}
			},
			reqImplementMemberList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImplementMemberList_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqImplementStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var variable = this.reqIdentifier();
				if(this.test(Token.LEFT_ANGLE)) {
					this.reqTypeGeneric(this.yes());
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var attributes = [];
				var members = [];
				while(!this.test(Token.RIGHT_CURLY)) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					this.reqImplementMemberList(members);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ImplementDeclaration(attributes, variable, members, first, this.yes()));
			},
			reqImplementStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImplementStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqImportDeclarator_0: function() {
				var source = this.reqString();
				var modifiers = [];
				var __ks_arguments_1 = null;
				var last = source;
				if(this.test(Token.LEFT_ROUND)) {
					this.commit();
					__ks_arguments_1 = [];
					if(this.test(Token.DOT_DOT_DOT)) {
						modifiers.push(AST.Modifier(ModifierKind.Autofill, this.yes()));
						if(this.test(Token.COMMA)) {
							this.commit();
						}
					}
					while(this.until(Token.RIGHT_ROUND)) {
						var name = this.reqExpression(ExpressionMode.Default);
						var __ks_modifiers_1 = [];
						if(KSHelper.valueOf(name.value.kind) === NodeKind.Identifier.value) {
							if((name.value.name === "require") && !this.test(Token.COLON, Token.COMMA, Token.RIGHT_ROUND)) {
								var first = name;
								__ks_modifiers_1.push(AST.Modifier(ModifierKind.Required, name));
								name = this.reqIdentifier();
								if(this.test(Token.COLON)) {
									this.commit();
									var value = this.reqIdentifier();
									__ks_arguments_1.push(AST.ImportArgument(__ks_modifiers_1, name, value, first, value));
								}
								else {
									__ks_arguments_1.push(AST.ImportArgument(__ks_modifiers_1, null, name, first, name));
								}
							}
							else {
								if(this.test(Token.COLON)) {
									this.commit();
									var value = this.reqExpression(ExpressionMode.Default);
									__ks_arguments_1.push(AST.ImportArgument(__ks_modifiers_1, name, value, name, value));
								}
								else {
									__ks_arguments_1.push(AST.ImportArgument(__ks_modifiers_1, null, name, name, name));
								}
							}
						}
						else {
							__ks_arguments_1.push(AST.ImportArgument(__ks_modifiers_1, null, name, name, name));
						}
						if(this.test(Token.COMMA)) {
							this.commit();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					this.commit();
				}
				var attributes = [];
				var specifiers = [];
				if(this.match(Token.BUT, Token.EQUALS_RIGHT_ANGLE, Token.FOR, Token.LEFT_CURLY) === Token.BUT) {
					var first = this.yes();
					var exclusions = [];
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						while(!this.test(Token.RIGHT_CURLY)) {
							exclusions.push(this.reqIdentifier());
							this.reqNL_1M();
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						last = this.yes();
					}
					else {
						exclusions.push(this.reqIdentifier());
						while(this.test(Token.COMMA)) {
							this.commit();
							exclusions.push(this.reqIdentifier());
						}
						last = exclusions[exclusions.length - 1];
					}
					specifiers.push(this.yep(AST.ImportExclusionSpecifier(exclusions, first, last)));
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS_RIGHT_ANGLE.value) {
					this.commit();
					last = this.reqIdentifier();
					if(this.test(Token.LEFT_CURLY)) {
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier(last, this.reqImportSpecifiers(attributes, []), last, this.yes())));
					}
					else {
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier(last, null, last, last)));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.FOR.value) {
					this.commit();
					var imported, local;
					while(this.until(Token.NEWLINE)) {
						imported = this.reqExternDeclarator();
						if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.commit();
							local = this.reqIdentifier();
							specifiers.push(this.yep(AST.ImportSpecifier(imported, local, imported, local)));
						}
						else {
							specifiers.push(this.yep(AST.ImportSpecifier(imported, this.yep(imported.value.name), imported, imported)));
						}
						if(this.test(Token.COMMA)) {
							this.commit();
						}
						else {
							break;
						}
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					this.reqImportSpecifiers(attributes, specifiers);
					last = this.yes();
				}
				return this.yep(AST.ImportDeclarator(attributes, modifiers, source, specifiers, __ks_arguments_1, source, last));
			},
			reqImportDeclarator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqImportDeclarator_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqImportSpecifiers_0: function(attributes, specifiers) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(specifiers === void 0 || specifiers === null) {
					throw new TypeError("'specifiers' is not nullable");
				}
				this.commit().reqNL_1M();
				var first, imported, local;
				var attrs = [];
				var specifier;
				while(!this.test(Token.RIGHT_CURLY)) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					this.stackOuterAttributes(attrs);
					if(this.match(Token.ASTERISK) === Token.ASTERISK) {
						first = this.yes();
						if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.throw("=>");
						}
						this.commit();
						local = this.reqIdentifier();
						specifier = this.yep(AST.ImportNamespaceSpecifier(local, null, first, local));
					}
					else {
						imported = this.reqExternDeclarator();
						if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.commit();
							local = this.reqIdentifier();
							specifier = this.yep(AST.ImportSpecifier(imported, local, imported, local));
						}
						else {
							specifier = this.yep(AST.ImportSpecifier(imported, this.yep(imported.value.name), imported, imported));
						}
					}
					if(attrs.length > 0) {
						specifier.value.attributes.unshift.apply(specifier.value.attributes, attrs);
						specifier.value.start = specifier.value.attributes[0].start;
						attrs = [];
					}
					specifiers.push(specifier);
					if(this.test(Token.NEWLINE)) {
						this.commit().NL_0M();
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return specifiers;
			},
			reqImportSpecifiers: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqImportSpecifiers_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqImportStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var attributes = [];
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqImportDeclarator();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift.apply(declarator.value.attributes, attrs);
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.test(Token.NEWLINE)) {
							this.commit().NL_0M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(last = this.reqImportDeclarator());
				}
				return this.yep(AST.ImportDeclaration(attributes, declarations, first, last));
			},
			reqImportStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImportStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqIncludeStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					var files = [];
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.test(Token.STRING)) {
							files.push(this.value());
							this.commit().reqNL_1M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeDeclaration(files, first, last));
				}
				else {
					if(!this.test(Token.STRING)) {
						this.throw("String");
					}
					var files = [this.value()];
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeDeclaration(files, first, last));
				}
			},
			reqIncludeStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqIncludeStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqIncludeAgainStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					var files = [];
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.test(Token.STRING)) {
							files.push(this.value());
							this.commit().reqNL_1M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeAgainDeclaration(files, first, last));
				}
				else {
					if(!this.test(Token.STRING)) {
						this.throw("String");
					}
					var files = [this.value()];
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeAgainDeclaration(files, first, last));
				}
			},
			reqIncludeAgainStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqIncludeAgainStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqLetStatement_0: function(first, mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					mode = ExpressionMode.Default;
				}
				var variable = this.reqTypedVariable();
				var modifiers = [];
				if(this.test(Token.COMMA)) {
					var variables = [variable];
					do {
						this.commit();
						variables.push(this.reqTypedVariable());
					}
					while(this.test(Token.COMMA))
					if(this.tryVariableEquals(modifiers).ok === true) {
						this.NL_0M();
						if(!this.test(Token.AWAIT)) {
							this.throw("await");
						}
						this.commit();
						var operand = this.reqPrefixedOperand(mode);
						operand = this.yep(AST.AwaitExpression([], variables, operand, variable, operand));
						return this.yep(AST.VariableDeclaration(modifiers, variables, operand, first, operand));
					}
					else {
						return this.yep(AST.VariableDeclaration(modifiers, variables, null, first, variables[variables.length - 1]));
					}
				}
				else {
					if(this.tryVariableEquals(modifiers).ok === true) {
						this.NL_0M();
						var init = this.reqExpression(mode);
						if(this.match(Token.IF, Token.UNLESS) === Token.IF) {
							var __ks_first_1 = this.yes();
							var condition = this.reqExpression(ExpressionMode.Default);
							if(this.test(Token.ELSE)) {
								this.commit();
								var whenFalse = this.reqExpression(ExpressionMode.Default);
								init = this.yep(AST.IfExpression(condition, init, whenFalse, init, whenFalse));
							}
							else {
								init = this.yep(AST.IfExpression(condition, init, null, init, condition));
							}
						}
						else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
							this.commit();
							var condition = this.reqExpression(ExpressionMode.Default);
							init = this.yep(AST.UnlessExpression(condition, init, init, condition));
						}
						return this.yep(AST.VariableDeclaration(modifiers, [variable], init, first, init));
					}
					else {
						return this.yep(AST.VariableDeclaration(modifiers, [variable], null, first, variable));
					}
				}
			},
			reqLetStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqLetStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqMacroElements_0: function(elements, terminator) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(terminator === void 0 || terminator === null) {
					throw new TypeError("'terminator' is not nullable");
				}
				var history = [];
				var literal = null;
				var first, last;
				var addLiteral = (function() {
					if(literal !== null) {
						elements.push(this.yep(AST.MacroElementLiteral(literal, first, last)));
						literal = null;
					}
				}).bind(this);
				var addToLiteral = (function() {
					if(literal === null) {
						literal = this._scanner.value();
						first = last = this.yep();
					}
					else {
						literal = KSOperator.addOrConcat(literal, this._scanner.value());
						last = this.yep();
					}
					this.commit();
				}).bind(this);
				var pushToLiteral = function(value, position) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					if(position === void 0 || position === null) {
						throw new TypeError("'position' is not nullable");
					}
					if(literal === null) {
						literal = value;
						first = last = position;
					}
					else {
						literal = KSOperator.addOrConcat(literal, value);
						last = position;
					}
				};
				while(true) {
					var __ks_0 = this.matchM(M.MACRO);
					if(__ks_0 === Token.EOF) {
						if((history.length === 0) && (KSOperator.bitwiseAnd(terminator, MacroTerminator.NEWLINE) === 0)) {
							this.throw();
						}
						break;
					}
					else if(__ks_0 === Token.HASH) {
						var __ks_first_1 = this.yes();
						if(this.testNS(Token.IDENTIFIER)) {
							addLiteral();
							var identifier = this._scanner.value();
							var __ks_last_1 = this.yes();
							var mark = this.mark();
							if((identifier.length === 1) && ((identifier === "a") || (identifier === "e") || (identifier === "s") || (identifier === "w")) && this.test(Token.LEFT_ROUND)) {
								var reification = AST.MacroReification(identifier, __ks_last_1);
								this.commit();
								var expression = this.reqExpression(ExpressionMode.Default);
								if(!this.test(Token.RIGHT_ROUND)) {
									this.throw(")");
								}
								elements.push(this.yep(AST.MacroElementExpression(expression, reification, __ks_first_1, this.yes())));
							}
							else if((identifier.length === 1) && (identifier === "j")) {
								var reification = AST.MacroReification(identifier, __ks_last_1);
								this.commit();
								if(!this.test(Token.LEFT_ROUND)) {
									this.throw("(");
								}
								this.commit();
								var expression = this.reqExpression(ExpressionMode.Default);
								if(!this.test(Token.COMMA)) {
									this.throw(",");
								}
								this.commit();
								var separator = this.reqExpression(ExpressionMode.Default);
								if(!this.test(Token.RIGHT_ROUND)) {
									this.throw(")");
								}
								var ast = AST.MacroElementExpression(expression, reification, __ks_first_1, this.yes());
								ast.separator = separator.value;
								elements.push(this.yep(ast));
							}
							else {
								this.rollback(mark);
								var expression = this.yep(AST.Identifier(identifier, __ks_last_1));
								elements.push(this.yep(AST.MacroElementExpression(expression, null, __ks_first_1, expression)));
							}
						}
						else if(this.testNS(Token.LEFT_ROUND)) {
							addLiteral();
							this.commit();
							var expression = this.reqExpression(ExpressionMode.Default);
							if(!this.test(Token.RIGHT_ROUND)) {
								this.throw(")");
							}
							elements.push(this.yep(AST.MacroElementExpression(expression, null, __ks_first_1, this.yes())));
						}
						else {
							pushToLiteral("#", __ks_first_1);
						}
					}
					else if(__ks_0 === Token.INVALID) {
						addToLiteral();
					}
					else if(__ks_0 === Token.LEFT_CURLY) {
						addToLiteral();
						history.unshift(Token.RIGHT_CURLY);
					}
					else if(__ks_0 === Token.LEFT_ROUND) {
						addToLiteral();
						history.unshift(Token.RIGHT_ROUND);
					}
					else if(__ks_0 === Token.NEWLINE) {
						if((history.length === 0) && (KSOperator.bitwiseAnd(terminator, MacroTerminator.NEWLINE) !== 0)) {
							break;
						}
						else {
							addLiteral();
							elements.push(this.yep(AST.MacroElementNewLine(this.yes())));
							this._scanner.skip();
						}
					}
					else if(__ks_0 === Token.RIGHT_CURLY) {
						if(history.length === 0) {
							if(KSOperator.bitwiseAnd(terminator, MacroTerminator.RIGHT_CURLY) === 0) {
								addToLiteral();
							}
							else {
								break;
							}
						}
						else {
							addToLiteral();
							if(KSHelper.valueOf(history[0]) === Token.RIGHT_CURLY.value) {
								history.shift();
							}
						}
					}
					else if(__ks_0 === Token.RIGHT_ROUND) {
						if(history.length === 0) {
							if(KSOperator.bitwiseAnd(terminator, MacroTerminator.RIGHT_ROUND) === 0) {
								addToLiteral();
							}
							else {
								break;
							}
						}
						else {
							addToLiteral();
							if(KSHelper.valueOf(history[0]) === Token.RIGHT_ROUND.value) {
								history.shift();
							}
						}
					}
				}
				if(!(history.length === 0)) {
					this.throw();
				}
				if(literal !== null) {
					elements.push(this.yep(AST.MacroElementLiteral(literal, first, last)));
				}
			},
			reqMacroElements: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqMacroElements_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqMacroExpression_0: function(first, terminator) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(terminator === void 0 || terminator === null) {
					terminator = MacroTerminator.NEWLINE;
				}
				var elements = [];
				if(this.test(Token.LEFT_CURLY)) {
					if(first.ok === true) {
						this.commit();
					}
					else {
						first = this.yes();
					}
					this.reqNL_1M();
					this.reqMacroElements(elements, MacroTerminator.RIGHT_CURLY);
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.MacroExpression(elements, first, this.yes()));
				}
				else {
					if(!(first.ok === true)) {
						first = this.yep();
					}
					this.reqMacroElements(elements, terminator);
					return this.yep(AST.MacroExpression(elements, first, elements[elements.length - 1]));
				}
			},
			reqMacroExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqMacroExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqMacroParameterList_0: function() {
				if(!this.test(Token.LEFT_ROUND)) {
					this.throw("(");
				}
				var first = this.yes();
				var parameters = [];
				if(!this.test(Token.RIGHT_ROUND)) {
					while(this.reqParameter(parameters, ParameterMode.Macro) === true) {
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
				}
				return this.yep(parameters, first, this.yes());
			},
			reqMacroParameterList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqMacroParameterList_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqMacroBody_0: function() {
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					this._mode |= ParserMode.MacroExpression;
					var body = this.reqBlock(this.yes());
					this._mode ^= ParserMode.MacroExpression;
					return body;
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS_RIGHT_ANGLE.value) {
					return this.reqMacroExpression(this.yes());
				}
				else {
					this.throw(["{", "=>"]);
				}
			},
			reqMacroBody: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqMacroBody_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqMacroStatement_0: function(attributes) {
				if(attributes === void 0 || attributes === null) {
					attributes = [];
				}
				var name = this.reqIdentifier();
				var parameters = this.reqMacroParameterList();
				var body = this.reqMacroBody();
				this.reqNL_1M();
				return this.yep(AST.MacroDeclaration(attributes, name, parameters, body, name, body));
			},
			__ks_func_reqMacroStatement_1: function() {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var __ks__;
				var attributes = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = arguments[++__ks_i];
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqMacroParameterList();
				var body = this.reqMacroBody();
				this.reqNL_1M();
				return this.yep(AST.MacroDeclaration(attributes, name, parameters, body, first, body));
			},
			reqMacroStatement: function() {
				if(arguments.length === 0 || arguments.length === 1) {
					return Parser.prototype.__ks_func_reqMacroStatement_0.apply(this, arguments);
				}
				else if(arguments.length === 2 || arguments.length === 3) {
					return Parser.prototype.__ks_func_reqMacroStatement_1.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqModule_0: function() {
				this.NL_0M();
				var attributes = [];
				var body = [];
				var attrs = [];
				var statement;
				while(!this._scanner.isEOF()) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					this.stackOuterAttributes(attrs);
					var __ks_0 = this.matchM(M.MODULE_STATEMENT);
					if(__ks_0 === Token.DISCLOSE) {
						statement = this.reqDiscloseStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.EXPORT) {
						statement = this.reqExportStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.EXTERN) {
						statement = this.reqExternStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.EXTERN_REQUIRE) {
						statement = this.reqExternOrRequireStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.INCLUDE) {
						statement = this.reqIncludeStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.INCLUDE_AGAIN) {
						statement = this.reqIncludeAgainStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.REQUIRE) {
						statement = this.reqRequireStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.REQUIRE_EXTERN) {
						statement = this.reqRequireOrExternStatement(this.yes()).value;
					}
					else if(__ks_0 === Token.REQUIRE_IMPORT) {
						statement = this.reqRequireOrImportStatement(this.yes()).value;
					}
					else {
						statement = this.reqStatement().value;
					}
					if(attrs.length > 0) {
						statement.attributes.unshift.apply(statement.attributes, attrs);
						statement.start = statement.attributes[0].start;
						attrs = [];
					}
					body.push(statement);
					this.NL_0M();
				}
				return AST.Module(attributes, body, this);
			},
			reqModule: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqModule_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqNameIST_0: function() {
				if(this.match(Token.IDENTIFIER, Token.STRING, Token.TEMPLATE_BEGIN) === Token.IDENTIFIER) {
					return this.reqIdentifier();
				}
				else if(KSHelper.valueOf(this._token) === Token.STRING.value) {
					return this.reqString();
				}
				else if(KSHelper.valueOf(this._token) === Token.TEMPLATE_BEGIN.value) {
					return this.reqTemplateExpression(this.yes());
				}
				else {
					this.throw(["Identifier", "String", "Template"]);
				}
			},
			reqNameIST: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNameIST_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqNamespaceStatement_0: function(first, name) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				this.NL_0M();
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit();
				this.NL_0M();
				var attributes = [];
				var statements = [];
				var attrs = [];
				var statement;
				while(!this.test(Token.RIGHT_CURLY)) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					this.stackOuterAttributes(attrs);
					if(this.matchM(M.MODULE_STATEMENT) === Token.EXPORT) {
						statement = this.reqExportStatement(this.yes());
					}
					else if(KSHelper.valueOf(this._token) === Token.EXTERN.value) {
						statement = this.reqExternStatement(this.yes());
					}
					else if(KSHelper.valueOf(this._token) === Token.IMPORT.value) {
						statement = this.reqImportStatement(this.yes());
					}
					else if(KSHelper.valueOf(this._token) === Token.INCLUDE.value) {
						statement = this.reqIncludeStatement(this.yes());
					}
					else if(KSHelper.valueOf(this._token) === Token.INCLUDE_AGAIN.value) {
						statement = this.reqIncludeAgainStatement(this.yes());
					}
					else {
						statement = this.reqStatement();
					}
					if(attrs.length > 0) {
						statement.value.attributes.unshift.apply(statement.value.attributes, attrs);
						statement.value.start = statement.value.attributes[0].start;
						attrs = [];
					}
					statements.push(statement);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.NamespaceDeclaration(attributes, [], name, statements, first, this.yes()));
			},
			reqNamespaceStatement: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqNamespaceStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqNumber_0: function() {
				var value;
				if((value = this.tryNumber()).ok === true) {
					return value;
				}
				else {
					this.throw("Number");
				}
			},
			reqNumber: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNumber_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqNumeralIdentifier_0: function() {
				if(this.test(Token.IDENTIFIER, Token.NUMERAL)) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else {
					this.throw("Identifier");
				}
			},
			reqNumeralIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNumeralIdentifier_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqNL_1M_0: function() {
				if(this.test(Token.NEWLINE)) {
					this.commit();
					this.skipNewLine();
				}
				else {
					this.throw("NewLine");
				}
			},
			reqNL_1M: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNL_1M_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqNL_EOF_1M_0: function() {
				if(this.match(Token.NEWLINE) === Token.NEWLINE) {
					this.commit();
					this.skipNewLine();
				}
				else if(KSHelper.valueOf(this._token) !== Token.EOF.value) {
					this.throw(["NewLine", "EOF"]);
				}
			},
			reqNL_EOF_1M: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNL_EOF_1M_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqObject_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var attributes = [];
				var properties = [];
				while(!this.test(Token.RIGHT_CURLY)) {
					if(this.stackInnerAttributes(attributes) === true) {
						continue;
					}
					properties.push(this.reqObjectItem());
					if(this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) {
						this.commit().NL_0M();
					}
					else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
						this.commit().NL_0M();
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ObjectExpression(attributes, properties, first, this.yes()));
			},
			reqObject: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqObject_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqObjectItem_0: function() {
				var first;
				var attributes = this.stackOuterAttributes([]);
				if(KSOperator.gt(attributes.length, 0)) {
					first = attributes[0];
				}
				if(this.test(Token.ASYNC)) {
					var marker = this.mark();
					var async = this.yes();
					var name = this.tryNameIST();
					if(name.ok === true) {
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, async))];
						var parameters = this.reqFunctionParameterList();
						var type = this.tryFunctionReturns();
						var __ks_throws_1 = this.tryFunctionThrows();
						var body = this.reqFunctionBody();
						return this.yep(AST.ObjectMember(attributes, name, this.yep(AST.FunctionExpression(parameters, modifiers, type, __ks_throws_1, body, parameters, body)), KSType.isValue(first) ? first : KSType.isValue(async) ? async : name, body));
					}
					else {
						this.rollback(marker);
					}
				}
				var name;
				if(this.match(Token.AT, Token.DOT_DOT_DOT, Token.IDENTIFIER, Token.LEFT_SQUARE, Token.STRING, Token.TEMPLATE_BEGIN) === Token.IDENTIFIER) {
					name = this.reqIdentifier();
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					name = this.reqComputedPropertyName(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.STRING.value) {
					name = this.reqString();
				}
				else if(KSHelper.valueOf(this._token) === Token.TEMPLATE_BEGIN.value) {
					name = this.reqTemplateExpression(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.AT.value) {
					name = this.reqThisExpression(this.yes());
					return this.yep(AST.ShorthandProperty(attributes, name, KSType.isValue(first) ? first : name, name));
				}
				else if(KSHelper.valueOf(this._token) === Token.DOT_DOT_DOT.value) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Spread, this.yes()));
					var operand = this.reqPrefixedOperand(ExpressionMode.Default);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else {
					this.throw(["Identifier", "String", "Template", "Computed Property Name"]);
				}
				if(this.test(Token.COLON)) {
					this.commit();
					var value = this.reqExpression(null, MacroTerminator.Object);
					return this.yep(AST.ObjectMember(attributes, name, value, KSType.isValue(first) ? first : name, value));
				}
				else if(this.test(Token.LEFT_ROUND)) {
					var parameters = this.reqFunctionParameterList();
					var type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					var body = this.reqFunctionBody();
					return this.yep(AST.ObjectMember(attributes, name, this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, body, parameters, body)), KSType.isValue(first) ? first : name, body));
				}
				else {
					return this.yep(AST.ShorthandProperty(attributes, name, KSType.isValue(first) ? first : name, name));
				}
			},
			reqObjectItem: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqObjectItem_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var value;
				if((value = this.tryOperand(mode)).ok === true) {
					return value;
				}
				else {
					this.throw();
				}
			},
			reqOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqOperation_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var mark = this.mark();
				var operand, operator;
				if((operand = this.tryDestructuring()).ok === true) {
					this.NL_0M();
					if((operator = this.tryAssignementOperator()).ok === true) {
						var values = [operand.value, AST.BinaryExpression(operator)];
						this.NL_0M();
						values.push(this.reqBinaryOperand(mode).value);
						return this.yep(AST.reorderExpression(values));
					}
				}
				this.rollback(mark);
				operand = this.reqBinaryOperand(mode);
				var values = [operand.value];
				while(true) {
					mark = this.mark();
					this.NL_0M();
					if((operator = this.tryBinaryOperator()).ok === true) {
						values.push(AST.BinaryExpression(operator));
						this.NL_0M();
						values.push(this.reqBinaryOperand(mode).value);
					}
					else if(this.test(Token.QUESTION)) {
						values.push(AST.ConditionalExpression(this.yes()));
						values.push(this.reqExpression(ExpressionMode.Default).value);
						if(!this.test(Token.COLON)) {
							this.throw(":");
						}
						this.commit();
						values.push(this.reqExpression(ExpressionMode.Default).value);
					}
					else {
						this.rollback(mark);
						break;
					}
				}
				if(values.length === 1) {
					return operand;
				}
				else {
					return this.yep(AST.reorderExpression(values));
				}
			},
			reqOperation: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqOperation_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqParameter_0: function(parameters, mode) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var modifiers = [];
				if((this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) || (KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value)) {
					if(mode.valueOf() === ParameterMode.Macro.value) {
						this.throw();
					}
					var destructuringMode = (KSOperator.bitwiseAnd(mode, ParameterMode.Function) !== 0) ? DestructuringMode.Function : DestructuringMode.Method;
					var name;
					if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
						name = this.reqDestructuringObject(this.yes(), destructuringMode);
					}
					else {
						name = this.reqDestructuringArray(this.yes(), destructuringMode);
					}
					if(this.match(Token.COLON, Token.EQUALS) === Token.COLON) {
						this.commit();
						var type = this.reqTypeVar();
						if(this.test(Token.EQUALS)) {
							this.commit();
							var defaultValue = this.reqExpression(ExpressionMode.Default);
							parameters.push(this.yep(AST.Parameter(name, type, modifiers, defaultValue, name, defaultValue)));
						}
						else {
							parameters.push(this.yep(AST.Parameter(name, type, modifiers, null, name, type)));
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.EQUALS.value) {
						this.commit();
						var defaultValue = this.reqExpression(ExpressionMode.Default);
						parameters.push(this.yep(AST.Parameter(name, null, modifiers, defaultValue, name, defaultValue)));
					}
					else {
						parameters.push(this.yep(AST.Parameter(name, null, modifiers, null, name, name)));
					}
					if(this.test(Token.COMMA)) {
						this.commit();
						return true;
					}
					else {
						return false;
					}
				}
				if(this.test(Token.DOT_DOT_DOT)) {
					var first = this.yes();
					if(this.test(Token.LEFT_CURLY)) {
						this.commit();
						var min, max;
						if(this.test(Token.COMMA)) {
							this.commit();
							min = 0;
							max = this.reqNumber().value.value;
						}
						else {
							min = this.reqNumber().value.value;
							if(this.test(Token.COMMA)) {
								this.commit();
								if(this.test(Token.RIGHT_CURLY)) {
									max = Infinity;
								}
								else {
									max = this.reqNumber().value.value;
								}
							}
							else {
								max = min;
							}
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						modifiers.push(AST.RestModifier(min, max, first, this.yes()));
					}
					else {
						modifiers.push(AST.RestModifier(0, Infinity, first, first));
					}
				}
				if(this.test(Token.AT)) {
					var first;
					if(mode.valueOf() === ParameterMode.Macro.value) {
						modifiers.push(AST.Modifier(ModifierKind.AutoEvaluate, first = this.yes()));
					}
					else if(mode.valueOf() === ParameterMode.Method.value) {
						modifiers.push(AST.Modifier(ModifierKind.ThisAlias, first = this.yes()));
					}
					else {
						this.throw();
					}
					parameters.push(this.reqParameterIdendifier(modifiers, first));
					if((mode.valueOf() === ParameterMode.Method.value) && this.test(Token.LEFT_ROUND)) {
						var __ks_first_1 = this.yes();
						if(!this.test(Token.RIGHT_ROUND)) {
							this.throw(")");
						}
						modifiers.push(AST.Modifier(ModifierKind.SetterAlias, __ks_first_1, this.yes()));
					}
					if(this.test(Token.COMMA)) {
						this.commit();
					}
					else {
						return false;
					}
				}
				else if(this.test(Token.IDENTIFIER)) {
					var first = (modifiers.length === 0) ? null : modifiers[0];
					parameters.push(this.reqParameterIdendifier(modifiers, first));
					if(this.test(Token.COMMA)) {
						this.commit();
					}
					else {
						return false;
					}
				}
				else if(this.test(Token.UNDERSCORE)) {
					var first = this.yes();
					if(this.test(Token.EXCLAMATION)) {
						modifiers.push(AST.Modifier(ModifierKind.Required, this.yes()));
					}
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						parameters.push(this.yep(AST.Parameter(null, type, modifiers, null, first, type)));
					}
					else if(this.test(Token.QUESTION)) {
						var type = this.yep(AST.Nullable(this.yes()));
						parameters.push(this.yep(AST.Parameter(null, type, modifiers, null, first, type)));
					}
					else {
						parameters.push(this.yep(AST.Parameter(null, null, modifiers, null, first, first)));
					}
					if(this.test(Token.COMMA)) {
						this.commit();
					}
					else {
						return false;
					}
				}
				else if(modifiers.length !== 0) {
					parameters.push(this.yep(AST.Parameter(null, null, modifiers, null, modifiers[0], modifiers[0])));
					if(this.test(Token.COMMA)) {
						this.commit();
					}
					else {
						return false;
					}
				}
				else {
					this.throw();
				}
				return true;
			},
			reqParameter: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqParameter_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqParameterIdendifier_0: function(modifiers, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var identifier = this.reqIdentifier();
				if(this.test(Token.EXCLAMATION)) {
					modifiers.push(AST.Modifier(ModifierKind.Required, this.yes()));
				}
				if(this.match(Token.COLON, Token.EQUALS, Token.QUESTION) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					if(this.test(Token.EQUALS)) {
						this.commit();
						var defaultValue = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.Parameter(identifier, type, modifiers, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
					}
					else {
						return this.yep(AST.Parameter(identifier, type, modifiers, null, KSType.isValue(first) ? first : identifier, type));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS.value) {
					this.commit();
					var defaultValue = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.Parameter(identifier, null, modifiers, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
				}
				else if(KSHelper.valueOf(this._token) === Token.QUESTION.value) {
					var type = this.yep(AST.Nullable(this.yes()));
					if(this.test(Token.EQUALS)) {
						this.commit();
						var defaultValue = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.Parameter(identifier, type, modifiers, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
					}
					else {
						return this.yep(AST.Parameter(identifier, type, modifiers, null, KSType.isValue(first) ? first : identifier, type));
					}
				}
				else {
					return this.yep(AST.Parameter(identifier, null, modifiers, null, KSType.isValue(first) ? first : identifier, identifier));
				}
			},
			reqParameterIdendifier: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqParameterIdendifier_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqParenthesis_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.NEWLINE)) {
					this.commit().NL_0M();
					var expression = this.reqExpression(null, MacroTerminator.Parenthesis);
					this.NL_0M();
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					this.relocate(expression, first, this.yes());
					return expression;
				}
				else {
					var expressions = [this.reqExpression(null, MacroTerminator.List)];
					while(this.test(Token.COMMA)) {
						this.commit();
						expressions.push(this.reqExpression(null, MacroTerminator.List));
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					if(expressions.length === 1) {
						this.relocate(expressions[0], first, this.yes());
						return expressions[0];
					}
					else {
						return this.yep(AST.SequenceExpression(expressions, first, this.yes()));
					}
				}
			},
			reqParenthesis: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqParenthesis_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqPostfixedOperand_0: function(mode, operand) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(operand === void 0) {
					operand = null;
				}
				operand = this.reqUnaryOperand(mode, operand);
				var operator;
				var __ks_0 = this.matchM(M.POSTFIX_OPERATOR);
				if(__ks_0 === Token.EXCLAMATION_EXCLAMATION) {
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.ForcedTypeCasting, this.yes()));
				}
				else if(__ks_0 === Token.EXCLAMATION_QUESTION) {
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.NullableTypeCasting, this.yes()));
				}
				else if(__ks_0 === Token.MINUS_MINUS) {
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.DecrementPostfix, this.yes()));
				}
				else if(__ks_0 === Token.PLUS_PLUS) {
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.IncrementPostfix, this.yes()));
				}
				else if(__ks_0 === Token.QUESTION) {
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Existential, this.yes()));
				}
				else {
					return operand;
				}
				return this.reqPostfixedOperand(mode, this.yep(AST.UnaryExpression(operator, operand, operand, operator)));
			},
			reqPostfixedOperand: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqPostfixedOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqPrefixedOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var __ks_0 = this.matchM(M.PREFIX_OPERATOR);
				if(__ks_0 === Token.DOT_DOT_DOT) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Spread, this.yes()));
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.EXCLAMATION) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Negation, this.yes()));
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.MINUS) {
					var first = this.yes();
					var operand = this.reqPrefixedOperand(mode);
					if(KSHelper.valueOf(operand.value.kind) === NodeKind.NumericExpression.value) {
						operand.value.value = KSOperator.negative(operand.value.value);
						return this.relocate(operand, first, null);
					}
					else {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Negative, first));
						return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
					}
				}
				else if(__ks_0 === Token.MINUS_MINUS) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.DecrementPrefix, this.yes()));
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.PLUS_PLUS) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.IncrementPrefix, this.yes()));
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.QUESTION) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Existential, this.yes()));
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else if(__ks_0 === Token.TILDE) {
					var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.BitwiseNot, this.yes()));
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.UnaryExpression(operator, operand, operator, operand));
				}
				else {
					return this.reqPostfixedOperand(mode);
				}
			},
			reqPrefixedOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqPrefixedOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqRequireStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [];
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqExternDeclarator();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift.apply(declarator.value.attributes, attrs);
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.RequireDeclaration(attributes, declarations, first, last));
			},
			reqRequireStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqRequireStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqRequireOrExternStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [];
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqExternDeclarator();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift.apply(declarator.value.attributes, attrs);
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.RequireOrExternDeclaration(attributes, declarations, first, last));
			},
			reqRequireOrExternStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqRequireOrExternStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqRequireOrImportStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [];
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					var attrs = [];
					var declarator;
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.stackInnerAttributes(attributes) === true) {
							continue;
						}
						this.stackOuterAttributes(attrs);
						declarator = this.reqImportDeclarator();
						if(attrs.length > 0) {
							declarator.value.attributes.unshift.apply(declarator.value.attributes, attrs);
							declarator.value.start = declarator.value.attributes[0].start;
							attrs = [];
						}
						declarations.push(declarator);
						if(this.test(Token.NEWLINE)) {
							this.commit().NL_0M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					last = this.yes();
				}
				else {
					declarations.push(last = this.reqImportDeclarator());
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.RequireOrImportDeclaration(attributes, declarations, first, last));
			},
			reqRequireOrImportStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqRequireOrImportStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqReturnStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.IfStatement(condition, this.yep(AST.ReturnStatement(first)), null, first, condition));
				}
				else if((KSHelper.valueOf(this._token) === Token.NEWLINE.value) || (KSHelper.valueOf(this._token) === Token.EOF.value)) {
					return this.yep(AST.ReturnStatement(first));
				}
				else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.UnlessStatement(condition, this.yep(AST.ReturnStatement(first)), first, condition));
				}
				else {
					var expression = this.tryExpression(ExpressionMode.Default);
					if(!(expression.ok === true)) {
						return NO;
					}
					if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						if(this.match(Token.ELSE, Token.NEWLINE) === Token.ELSE) {
							this.commit();
							var whenFalse = this.reqExpression(ExpressionMode.Default);
							return this.yep(AST.ReturnStatement(this.yep(AST.IfExpression(condition, expression, whenFalse, expression, whenFalse)), first, whenFalse));
						}
						else if((KSHelper.valueOf(this._token) === Token.NEWLINE.value) || (KSHelper.valueOf(this._token) === Token.EOF.value)) {
							return this.yep(AST.IfStatement(condition, this.yep(AST.ReturnStatement(expression, first, expression)), null, first, condition));
						}
						else {
							this.throw();
						}
					}
					else if((KSHelper.valueOf(this._token) === Token.NEWLINE.value) || (KSHelper.valueOf(this._token) === Token.EOF.value)) {
						return this.yep(AST.ReturnStatement(expression, first, expression));
					}
					else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.UnlessStatement(condition, this.yep(AST.ReturnStatement(expression, first, expression)), first, condition));
					}
					else {
						this.throw();
					}
				}
			},
			reqReturnStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqReturnStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqStatement_0: function() {
				var mark = this.mark();
				var statement = NO;
				var __ks_0 = this.matchM(M.STATEMENT);
				if(__ks_0 === Token.ABSTRACT) {
					var first = this.yes();
					if(this.test(Token.CLASS)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Abstract, first))];
						statement = this.reqClassStatement(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.ASYNC) {
					var first = this.yes();
					if(this.test(Token.FUNC)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
						statement = this.reqFunctionStatement(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.BREAK) {
					statement = this.reqBreakStatement(this.yes());
				}
				else if(__ks_0 === Token.CLASS) {
					statement = this.tryClassStatement(this.yes());
				}
				else if(__ks_0 === Token.CONST) {
					statement = this.reqConstStatement(this.yes());
				}
				else if(__ks_0 === Token.CONTINUE) {
					statement = this.reqContinueStatement(this.yes());
				}
				else if(__ks_0 === Token.DELETE) {
					statement = this.tryDestroyStatement(this.yes());
				}
				else if(__ks_0 === Token.DO) {
					statement = this.reqDoStatement(this.yes());
				}
				else if(__ks_0 === Token.ENUM) {
					statement = this.reqEnumStatement(this.yes());
				}
				else if(__ks_0 === Token.FALLTHROUGH) {
					statement = this.reqFallthroughStatement(this.yes());
				}
				else if(__ks_0 === Token.FINAL) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Final, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						statement = this.reqClassStatement(first, modifiers);
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							statement = this.reqClassStatement(first, modifiers);
						}
						else {
							this.throw("class");
						}
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.FOR) {
					statement = this.reqForStatement(this.yes());
				}
				else if(__ks_0 === Token.FUNC) {
					statement = this.reqFunctionStatement(this.yes());
				}
				else if(__ks_0 === Token.IF) {
					statement = this.reqIfStatement(this.yes());
				}
				else if(__ks_0 === Token.IMPL) {
					statement = this.reqImplementStatement(this.yes());
				}
				else if(__ks_0 === Token.IMPORT) {
					statement = this.reqImportStatement(this.yes());
				}
				else if(__ks_0 === Token.LET) {
					statement = this.reqLetStatement(this.yes());
				}
				else if(__ks_0 === Token.MACRO) {
					if((this._mode & ParserMode.MacroExpression) === 0) {
						statement = this.tryMacroStatement(this.yes());
					}
					else {
						statement = this.reqMacroExpression(this.yes());
					}
				}
				else if(__ks_0 === Token.NAMESPACE) {
					statement = this.tryNamespaceStatement(this.yes());
				}
				else if(__ks_0 === Token.RETURN) {
					statement = this.reqReturnStatement(this.yes());
				}
				else if(__ks_0 === Token.SEALED) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Sealed, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						statement = this.reqClassStatement(first, modifiers);
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							statement = this.reqClassStatement(first, modifiers);
						}
						else {
							this.throw("class");
						}
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_0 === Token.STRUCT) {
					statement = this.reqStructStatement(this.yes());
				}
				else if(__ks_0 === Token.SWITCH) {
					statement = this.reqSwitchStatement(this.yes());
				}
				else if(__ks_0 === Token.THROW) {
					statement = this.reqThrowStatement(this.yes());
				}
				else if(__ks_0 === Token.TRY) {
					statement = this.reqTryStatement(this.yes());
				}
				else if(__ks_0 === Token.TYPE) {
					statement = this.tryTypeStatement(this.yes());
				}
				else if(__ks_0 === Token.UNLESS) {
					statement = this.reqUnlessStatement(this.yes());
				}
				else if(__ks_0 === Token.UNTIL) {
					statement = this.tryUntilStatement(this.yes());
				}
				else if(__ks_0 === Token.WHILE) {
					statement = this.tryWhileStatement(this.yes());
				}
				if(!(statement.ok === true)) {
					this.rollback(mark);
					if(!((statement = this.tryAssignementStatement()).ok === true)) {
						this.rollback(mark);
						statement = this.reqExpressionStatement();
					}
				}
				this.reqNL_EOF_1M();
				return statement;
			},
			reqStatement: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqStatement_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqString_0: function() {
				if(this.test(Token.STRING)) {
					return this.yep(AST.Literal(this.value(), this.yes()));
				}
				else {
					this.throw("String");
				}
			},
			reqString: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqString_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqStructStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!(name.ok === true)) {
					return NO;
				}
				var attributes = [];
				var modifiers = [];
				var elements = [];
				if(this.match(Token.LEFT_CURLY, Token.LEFT_ROUND, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					var __ks_first_1 = this.yes();
					this.NL_0M();
					modifiers.push(AST.Modifier(ModifierKind.Object, __ks_first_1));
					this.stackInnerAttributes(attributes);
					while(!this.test(Token.RIGHT_CURLY)) {
						var __ks_name_1 = this.reqIdentifier();
						var type = null;
						if(this.test(Token.COLON)) {
							this.commit();
							type = this.reqTypeVar();
						}
						else if(this.test(Token.QUESTION)) {
							type = this.yep(AST.Nullable(this.yes()));
						}
						var defaultValue = null;
						if(this.test(Token.EQUALS)) {
							this.commit();
							defaultValue = this.reqExpression(ExpressionMode.Default);
						}
						elements.push(AST.StructField(__ks_name_1, type, defaultValue, __ks_name_1, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : __ks_name_1));
						if(this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) {
							this.commit().NL_0M();
						}
						else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
							this.commit().NL_0M();
							if(this.test(Token.COMMA)) {
								this.commit().NL_0M();
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					var __ks_first_1 = this.yes();
					this.NL_0M();
					modifiers.push(AST.Modifier(ModifierKind.Array, __ks_first_1));
					this.stackInnerAttributes(attributes);
					while(!this.test(Token.RIGHT_ROUND)) {
						var type = this.reqTypeVar();
						if(this.test(Token.EQUALS)) {
							this.commit();
							var defaultValue = this.reqExpression(ExpressionMode.Default);
							elements.push(AST.StructField(null, type, defaultValue, type, defaultValue));
						}
						else {
							elements.push(AST.StructField(null, type, null, type, type));
						}
						if(this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) {
							this.commit().NL_0M();
						}
						else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
							this.commit().NL_0M();
							if(this.test(Token.COMMA)) {
								this.commit().NL_0M();
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					var __ks_first_1 = this.yes();
					this.NL_0M();
					modifiers.push(AST.Modifier(ModifierKind.Array, __ks_first_1), AST.Modifier(ModifierKind.Named, __ks_first_1));
					this.stackInnerAttributes(attributes);
					while(!this.test(Token.RIGHT_SQUARE)) {
						var __ks_name_1 = this.reqIdentifier();
						var type = null;
						if(this.test(Token.COLON)) {
							this.commit();
							type = this.reqTypeVar();
						}
						else if(this.test(Token.QUESTION)) {
							type = this.yep(AST.Nullable(this.yes()));
						}
						var defaultValue = null;
						if(this.test(Token.EQUALS)) {
							this.commit();
							defaultValue = this.reqExpression(ExpressionMode.Default);
						}
						elements.push(AST.StructField(__ks_name_1, type, defaultValue, __ks_name_1, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : __ks_name_1));
						if(this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) {
							this.commit().NL_0M();
						}
						else if(KSHelper.valueOf(this._token) === Token.NEWLINE.value) {
							this.commit().NL_0M();
							if(this.test(Token.COMMA)) {
								this.commit().NL_0M();
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
				}
				return this.yep(AST.StructDeclaration(attributes, modifiers, name, elements, first, this.yes()));
			},
			reqStructStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqStructStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchBinding_0: function() {
				var bindings = [this.reqSwitchBindingValue()];
				while(this.test(Token.COMMA)) {
					this.commit();
					bindings.push(this.reqSwitchBindingValue());
				}
				return this.yep(bindings);
			},
			reqSwitchBinding: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchBinding_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchBindingValue_0: function() {
				var __ks_0 = this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE);
				if(__ks_0 === Token.LEFT_CURLY) {
					return this.reqDestructuringObject(this.yes());
				}
				else if(__ks_0 === Token.LEFT_SQUARE) {
					return this.reqDestructuringArray(this.yes());
				}
				else {
					var name = this.reqIdentifier();
					if(this.test(Token.AS)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.yep(AST.SwitchTypeCasting(name, type));
					}
					else {
						return name;
					}
				}
			},
			reqSwitchBindingValue: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchBindingValue_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchCaseExpression_0: function() {
				var __ks_0 = this.match(Token.LEFT_CURLY, Token.RETURN, Token.THROW);
				if(__ks_0 === Token.LEFT_CURLY) {
					return this.reqBlock(this.yes());
				}
				else if(__ks_0 === Token.RETURN) {
					var first = this.yes();
					var expression = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.ReturnStatement(expression, first, expression));
				}
				else if(__ks_0 === Token.THROW) {
					var first = this.yes();
					var expression = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.ThrowStatement(expression, first, expression));
				}
				else {
					return this.reqExpression(ExpressionMode.Default);
				}
			},
			reqSwitchCaseExpression: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchCaseExpression_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchCaseList_0: function() {
				this.NL_0M();
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var clauses = [];
				var conditions, bindings, filter, body, first;
				while(!this.test(Token.RIGHT_CURLY)) {
					first = conditions = bindings = filter = null;
					if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
						first = this.yes();
						body = this.reqSwitchCaseExpression();
					}
					else {
						if(this.test(Token.UNDERSCORE)) {
							first = this.yes();
						}
						else if(!(this.test(Token.WITH) || this.test(Token.WHERE))) {
							first = this.reqSwitchCondition();
							conditions = [first];
							while(this.test(Token.COMMA)) {
								this.commit();
								conditions.push(this.reqSwitchCondition());
							}
							this.NL_0M();
						}
						if(this.test(Token.WITH)) {
							if(first === null) {
								first = this.yes();
							}
							else {
								this.commit();
							}
							bindings = this.reqSwitchBinding();
							this.NL_0M();
						}
						if(this.test(Token.WHERE)) {
							if(first === null) {
								first = this.yes();
							}
							else {
								this.commit();
							}
							filter = this.reqExpression(ExpressionMode.NoAnonymousFunction);
							this.NL_0M();
						}
						if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.throw("=>");
						}
						this.commit();
						body = this.reqSwitchCaseExpression();
					}
					this.reqNL_1M();
					clauses.push(AST.SwitchClause(conditions, bindings, filter, body, first, body));
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yes(clauses);
			},
			reqSwitchCaseList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchCaseList_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchCondition_0: function() {
				var __ks_0 = this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.IS, Token.COLON);
				if(__ks_0 === Token.COLON) {
					throw new Error("Not Implemented");
				}
				else if(__ks_0 === Token.IS) {
					var first = this.yes();
					var type = this.reqTypeVar();
					return this.yep(AST.SwitchConditionType(type, first, type));
				}
				else if(__ks_0 === Token.LEFT_CURLY) {
					var first = this.yes();
					var members = [];
					if(!this.test(Token.RIGHT_CURLY)) {
						var name;
						while(true) {
							name = this.reqIdentifier();
							if(this.test(Token.COLON)) {
								this.commit();
								members.push(this.yep(AST.ObjectMember(name, this.reqSwitchConditionValue())));
							}
							else {
								members.push(this.yep(AST.ObjectMember(name)));
							}
							if(this.test(Token.COMMA)) {
								this.commit();
							}
							else {
								break;
							}
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.SwitchConditionObject(members, first, this.yes()));
				}
				else if(__ks_0 === Token.LEFT_SQUARE) {
					var first = this.yes();
					var values = [];
					while(!this.test(Token.RIGHT_SQUARE)) {
						if(this.test(Token.UNDERSCORE)) {
							values.push(this.yep(AST.OmittedExpression([], this.yes())));
						}
						else if(this.test(Token.DOT_DOT_DOT)) {
							var modifier = AST.Modifier(ModifierKind.Rest, this.yes());
							values.push(this.yep(AST.OmittedExpression([modifier], modifier)));
						}
						else {
							values.push(this.reqSwitchConditionValue());
						}
						if(this.test(Token.COMMA)) {
							this.commit();
							if(this.test(Token.RIGHT_SQUARE)) {
								values.push(this.yep(AST.OmittedExpression([], this.yep())));
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
					return this.yep(AST.SwitchConditionArray(values, first, this.yes()));
				}
				else {
					return this.reqSwitchConditionValue();
				}
			},
			reqSwitchCondition: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchCondition_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchConditionValue_0: function() {
				var operand = this.reqPrefixedOperand(ExpressionMode.Default);
				if(this.match(Token.LEFT_ANGLE, Token.DOT_DOT) === Token.DOT_DOT) {
					this.commit();
					if(this.test(Token.LEFT_ANGLE)) {
						this.commit();
						return this.yep(AST.SwitchConditionRangeFI(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
					else {
						return this.yep(AST.SwitchConditionRangeFO(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ANGLE.value) {
					this.commit();
					if(!this.test(Token.DOT_DOT)) {
						this.throw("..");
					}
					this.commit();
					if(this.test(Token.LEFT_ANGLE)) {
						this.commit();
						return this.yep(AST.SwitchConditionRangeTI(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
					else {
						return this.yep(AST.SwitchConditionRangeTO(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
				}
				else {
					return operand;
				}
			},
			reqSwitchConditionValue: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchConditionValue_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqSwitchStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var expression = this.reqOperation(ExpressionMode.Default);
				var clauses = this.reqSwitchCaseList();
				return this.yep(AST.SwitchStatement(expression, clauses, first, clauses));
			},
			reqSwitchStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqSwitchStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTemplateExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var elements = [];
				while(true) {
					if(this.matchM(M.TEMPLATE) === Token.TEMPLATE_ELEMENT) {
						this.commit();
						elements.push(this.reqExpression(ExpressionMode.Default));
						if(!this.test(Token.RIGHT_ROUND)) {
							this.throw(")");
						}
						this.commit();
					}
					else if(KSHelper.valueOf(this._token) === Token.TEMPLATE_VALUE.value) {
						elements.push(this.yep(AST.Literal(this._scanner.value(), this.yes())));
					}
					else {
						break;
					}
				}
				if(!this.test(Token.TEMPLATE_END)) {
					this.throw("`");
				}
				return this.yep(AST.TemplateExpression(elements, first, this.yes()));
			},
			reqTemplateExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTemplateExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqThisExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var identifier = this.reqIdentifier();
				return this.yep(AST.ThisExpression(identifier, first, identifier));
			},
			reqThisExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqThisExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqThrowStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var expression = this.reqExpression(ExpressionMode.Default);
				if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					if(this.match(Token.ELSE, Token.NEWLINE) === Token.ELSE) {
						this.commit();
						var whenFalse = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.ThrowStatement(this.yep(AST.IfExpression(condition, expression, whenFalse, expression, whenFalse)), first, whenFalse));
					}
					else if((KSHelper.valueOf(this._token) === Token.NEWLINE.value) || (KSHelper.valueOf(this._token) === Token.EOF.value)) {
						return this.yep(AST.IfStatement(condition, this.yep(AST.ThrowStatement(expression, first, expression)), null, first, condition));
					}
					else {
						this.throw();
					}
				}
				else if((KSHelper.valueOf(this._token) === Token.NEWLINE.value) || (KSHelper.valueOf(this._token) === Token.EOF.value)) {
					return this.yep(AST.ThrowStatement(expression, first, expression));
				}
				else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.UnlessStatement(condition, this.yep(AST.ThrowStatement(expression, first, expression)), first, condition));
				}
				else {
					this.throw();
				}
			},
			reqThrowStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqThrowStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTryCatchClause_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var binding;
				if(this.test(Token.IDENTIFIER)) {
					binding = this.reqIdentifier();
				}
				this.NL_0M();
				var body = this.reqBlock();
				return this.yep(AST.CatchClause(binding, null, body, first, body));
			},
			reqTryCatchClause: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTryCatchClause_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTryExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var modifiers = [];
				if(this.testNS(Token.EXCLAMATION)) {
					modifiers.push(AST.Modifier(ModifierKind.Disabled, this.yes()));
				}
				var operand = this.reqPrefixedOperand(ExpressionMode.Default);
				var __ks_default_1 = null;
				if(this.test(Token.TILDE_TILDE)) {
					this.commit();
					__ks_default_1 = this.reqPrefixedOperand(ExpressionMode.Default);
				}
				return this.yep(AST.TryExpression(modifiers, operand, __ks_default_1, first, KSType.isValue(__ks_default_1) ? __ks_default_1 : operand));
			},
			reqTryExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTryExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTryStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var body = this.tryBlock();
				if(!(body.ok === true)) {
					return NO;
				}
				var last = body;
				var mark = this.mark();
				var catchClauses = [];
				var catchClause, finalizer;
				this.NL_0M();
				if(this.test(Token.ON)) {
					do {
						catchClauses.push(last = this.reqCatchOnClause(this.yes()));
						mark = this.mark();
						this.NL_0M();
					}
					while(this.test(Token.ON))
				}
				else {
					this.rollback(mark);
					this.NL_0M();
				}
				if(this.test(Token.CATCH)) {
					catchClause = last = this.reqTryCatchClause(this.yes());
					mark = this.mark();
				}
				else {
					this.rollback(mark);
				}
				this.NL_0M();
				if(this.test(Token.FINALLY)) {
					this.commit();
					finalizer = last = this.reqBlock();
				}
				else {
					this.rollback(mark);
				}
				return this.yep(AST.TryStatement(body, catchClauses, catchClause, finalizer, first, last));
			},
			reqTryStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTryStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypeEntity_0: function(nullable) {
				if(nullable === void 0) {
					nullable = null;
				}
				var marker = this.mark();
				if(this.match(Token.ASYNC, Token.FUNC, Token.LEFT_ROUND) === Token.ASYNC) {
					var async = this.yes();
					if(this.test(Token.FUNC)) {
						this.commit();
					}
					if(this.test(Token.LEFT_ROUND)) {
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, async))];
						var parameters = this.reqFunctionParameterList();
						var type = this.tryFunctionReturns();
						var __ks_throws_1 = this.tryFunctionThrows();
						return this.yep(AST.FunctionExpression(parameters, modifiers, type, __ks_throws_1, null, async, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
					}
					else {
						this.rollback(marker);
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.FUNC.value) {
					var first = this.yes();
					if(this.test(Token.LEFT_ROUND)) {
						var parameters = this.reqFunctionParameterList();
						var type = this.tryFunctionReturns();
						var __ks_throws_1 = this.tryFunctionThrows();
						return this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
					}
					else {
						this.rollback(marker);
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					var parameters = this.reqFunctionParameterList();
					var type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					return this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				var name = this.reqIdentifier();
				if(this.testNS(Token.DOT)) {
					var property;
					do {
						this.commit();
						property = this.reqIdentifier();
						name = this.yep(AST.MemberExpression([], name, property));
					}
					while(this.testNS(Token.DOT))
				}
				var last = name;
				var generic;
				if(this.testNS(Token.LEFT_ANGLE)) {
					generic = last = this.reqTypeGeneric(this.yes());
				}
				var modifiers = [];
				if((nullable === null) && this.testNS(Token.QUESTION)) {
					last = this.yes();
					modifiers.push(AST.Modifier(ModifierKind.Nullable, last));
				}
				return this.yep(AST.TypeReference(modifiers, name, generic, name, last));
			},
			reqTypeEntity: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqTypeEntity_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypeGeneric_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var entities = [this.reqTypeEntity()];
				while(this.test(Token.COMMA)) {
					this.commit();
					entities.push(this.reqTypeEntity());
				}
				if(!this.test(Token.RIGHT_ANGLE)) {
					this.throw(">");
				}
				return this.yes(entities);
			},
			reqTypeGeneric: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTypeGeneric_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypeStatement_0: function(first, name) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(!this.test(Token.EQUALS)) {
					this.throw("=");
				}
				this.commit();
				var type = this.reqTypeVar(true);
				return this.yep(AST.TypeAliasDeclaration(name, type, first, type));
			},
			reqTypeStatement: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqTypeStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypeVar_0: function(isMultiLines) {
				if(isMultiLines === void 0 || isMultiLines === null) {
					isMultiLines = false;
				}
				if(isMultiLines === true) {
					this.NL_0M();
				}
				var type = this.reqTypeReference(isMultiLines);
				var mark = this.mark();
				if(isMultiLines === true) {
					var types = [type];
					this.NL_0M();
					if(this.match(Token.PIPE, Token.AMPERSAND, Token.CARET) === Token.PIPE) {
						do {
							this.commit();
							if(this.test(Token.PIPE)) {
								this.commit();
							}
							this.NL_0M();
							types.push(this.reqTypeReference(true));
							mark = this.mark();
							this.NL_0M();
						}
						while(this.test(Token.PIPE))
						this.rollback(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.UnionType(types, type, types[types.length - 1]));
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.AMPERSAND.value) {
						do {
							this.commit();
							if(this.test(Token.AMPERSAND)) {
								this.commit();
							}
							this.NL_0M();
							types.push(this.reqTypeReference(true));
							mark = this.mark();
							this.NL_0M();
						}
						while(this.test(Token.AMPERSAND))
						this.rollback(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.FusionType(types, type, types[types.length - 1]));
						}
					}
					else if(KSHelper.valueOf(this._token) === Token.CARET.value) {
						do {
							this.commit();
							if(this.test(Token.CARET)) {
								this.commit();
							}
							this.NL_0M();
							types.push(this.reqTypeReference(true));
							mark = this.mark();
							this.NL_0M();
						}
						while(this.test(Token.CARET))
						this.rollback(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.ExclusionType(types, type, types[types.length - 1]));
						}
					}
					else {
						this.rollback(mark);
					}
				}
				else {
					if(this.match(Token.PIPE_PIPE, Token.PIPE, Token.AMPERSAND_AMPERSAND, Token.AMPERSAND, Token.CARET_CARET, Token.CARET) === Token.PIPE) {
						this.commit();
						if(this.test(Token.NEWLINE)) {
							this.rollback(mark);
							return type;
						}
						var types = [type];
						do {
							this.commit();
							types.push(this.reqTypeReference(false));
						}
						while(this.test(Token.PIPE))
						return this.yep(AST.UnionType(types, type, types[types.length - 1]));
					}
					else if(KSHelper.valueOf(this._token) === Token.AMPERSAND.value) {
						this.commit();
						if(this.test(Token.NEWLINE)) {
							this.rollback(mark);
							return type;
						}
						var types = [type];
						do {
							this.commit();
							types.push(this.reqTypeReference(false));
						}
						while(this.test(Token.AMPERSAND))
						return this.yep(AST.FusionType(types, type, types[types.length - 1]));
					}
					else if(KSHelper.valueOf(this._token) === Token.CARET.value) {
						this.commit();
						if(this.test(Token.NEWLINE)) {
							this.rollback(mark);
							return type;
						}
						var types = [type];
						do {
							this.commit();
							types.push(this.reqTypeReference(false));
						}
						while(this.test(Token.CARET))
						return this.yep(AST.ExclusionType(types, type, types[types.length - 1]));
					}
				}
				return type;
			},
			reqTypeVar: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqTypeVar_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypeObjectMember_0: function() {
				var identifier = this.reqIdentifier();
				var type;
				if(this.test(Token.COLON)) {
					this.commit();
					type = this.reqTypeVar();
				}
				else {
					var parameters = this.reqFunctionParameterList();
					type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					type = this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				return this.yep(AST.ObjectMemberReference(identifier, type));
			},
			reqTypeObjectMember: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqTypeObjectMember_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypeReference_0: function(isMultiLines) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(isMultiLines === void 0 || isMultiLines === null) {
					throw new TypeError("'isMultiLines' is not nullable");
				}
				else if(!KSType.isBoolean(isMultiLines)) {
					throw new TypeError("'isMultiLines' is not of type 'Boolean'");
				}
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					var first = this.yes();
					var properties = [];
					this.NL_0M();
					while(!this.test(Token.RIGHT_CURLY)) {
						if(this.match(Token.ASYNC, Token.FUNC, Token.IDENTIFIER) === Token.IDENTIFIER) {
							properties.push(this.reqTypeObjectMember());
						}
						else if(KSHelper.valueOf(this._token) === Token.ASYNC.value) {
							var marker = this.mark();
							var async = this.yes();
							if(this.test(Token.FUNC)) {
								this.commit();
							}
							var identifier = this.reqIdentifier();
							if(this.test(Token.LEFT_ROUND)) {
								var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, async))];
								var parameters = this.reqFunctionParameterList();
								var type = this.tryFunctionReturns();
								var __ks_throws_1 = this.tryFunctionThrows();
								var objectType = this.yep(AST.FunctionExpression(parameters, modifiers, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
								properties.push(this.yep(AST.ObjectMemberReference(identifier, objectType)));
							}
							else {
								this.rollback(marker);
								properties.push(this.reqTypeObjectMember());
							}
						}
						else if(KSHelper.valueOf(this._token) === Token.FUNC.value) {
							var marker = this.mark();
							var __ks_first_1 = this.yes();
							var identifier = this.reqIdentifier();
							if(this.test(Token.LEFT_ROUND)) {
								var parameters = this.reqFunctionParameterList();
								var type = this.tryFunctionReturns();
								var __ks_throws_1 = this.tryFunctionThrows();
								var objectType = this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
								properties.push(this.yep(AST.ObjectMemberReference(identifier, objectType)));
							}
							else {
								this.rollback(marker);
								properties.push(this.reqTypeObjectMember());
							}
						}
						else {
							this.throw(["async", "func", "Identifier"]);
						}
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
						else if(this.test(Token.NEWLINE)) {
							this.commit().NL_0M();
							if(this.test(Token.COMMA)) {
								this.commit().NL_0M();
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.ObjectReference(properties, first, this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					var first = this.yes();
					var elements = [];
					this.NL_0M();
					while(this.until(Token.RIGHT_SQUARE)) {
						if(this.test(Token.COMMA)) {
							elements.push(AST.OmittedReference(this.yep()));
							this.commit().NL_0M();
						}
						else {
							elements.push(this.reqTypeVar(isMultiLines));
							if(this.test(Token.COMMA)) {
								this.commit().NL_0M();
							}
							else if(this.test(Token.NEWLINE)) {
								this.commit().NL_0M();
							}
							else {
								break;
							}
						}
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
					return this.yep(AST.ArrayReference(elements, first, this.yes()));
				}
				else {
					return this.reqTypeEntity();
				}
			},
			reqTypeReference: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTypeReference_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqTypedVariable_0: function() {
				var name = null;
				var type = null;
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					name = this.reqDestructuringObject(this.yes(), DestructuringMode.Declaration);
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					name = this.reqDestructuringArray(this.yes(), DestructuringMode.Declaration);
				}
				else {
					name = this.reqIdentifier();
				}
				if(this.test(Token.COLON)) {
					this.commit();
					type = this.reqTypeVar();
				}
				return this.yep(AST.VariableDeclarator([], name, type, name, KSType.isValue(type) ? type : name));
			},
			reqTypedVariable: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqTypedVariable_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqUnaryOperand_0: function(mode, value) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(value === void 0) {
					value = null;
				}
				if(value === null) {
					value = this.reqOperand(mode);
				}
				var expression, mark, first;
				while(true) {
					var __ks_0 = this.matchM(M.OPERAND_JUNCTION);
					if(__ks_0 === Token.ASTERISK_ASTERISK_LEFT_ROUND) {
						this.commit();
						value = this.yep(AST.CallExpression([], AST.Scope(ScopeKind.Null), value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_0 === Token.ASTERISK_DOLLAR_LEFT_ROUND) {
						this.commit();
						var __ks_arguments_1 = this.reqExpression0CNList();
						value = this.yep(AST.CallExpression([], AST.Scope(ScopeKind.Argument, __ks_arguments_1.value.shift()), value, __ks_arguments_1, value, this.yes()));
					}
					else if(__ks_0 === Token.CARET_AT_LEFT_ROUND) {
						this.commit();
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.This), value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_0 === Token.CARET_CARET_LEFT_ROUND) {
						this.commit();
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.Null), value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_0 === Token.CARET_DOLLAR_LEFT_ROUND) {
						this.commit();
						var __ks_arguments_1 = this.reqExpression0CNList();
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.Argument, __ks_arguments_1.value.shift()), value, __ks_arguments_1, value, this.yes()));
					}
					else if(__ks_0 === Token.COLON) {
						first = this.yes();
						expression = this.reqIdentifier();
						value = this.yep(AST.BinaryExpression(value, this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeCasting, first)), this.yep(AST.TypeReference(expression)), value, expression));
					}
					else if(__ks_0 === Token.COLON_COLON) {
						this.commit();
						expression = this.reqIdentifier();
						value = this.yep(AST.EnumExpression(value, expression));
					}
					else if(__ks_0 === Token.DOT) {
						this.commit();
						value = this.yep(AST.MemberExpression([], value, this.reqNumeralIdentifier()));
					}
					else if(__ks_0 === Token.EXCLAMATION_LEFT_ROUND) {
						this.commit();
						value = this.yep(AST.CallMacroExpression(value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_0 === Token.LEFT_SQUARE) {
						var modifiers = [AST.Modifier(ModifierKind.Computed, this.yes())];
						expression = this.reqExpression(ExpressionMode.Default);
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						value = this.yep(AST.MemberExpression(modifiers, value, expression, value, this.yes()));
					}
					else if(__ks_0 === Token.LEFT_ROUND) {
						this.commit();
						value = this.yep(AST.CallExpression([], value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_0 === Token.NEWLINE) {
						mark = this.mark();
						this.commit().NL_0M();
						if(this.test(Token.DOT)) {
							this.commit();
							value = this.yep(AST.MemberExpression([], value, this.reqIdentifier()));
						}
						else {
							this.rollback(mark);
							break;
						}
					}
					else if(__ks_0 === Token.QUESTION_DOT) {
						var modifiers = [AST.Modifier(ModifierKind.Nullable, this.yes())];
						expression = this.reqIdentifier();
						value = this.yep(AST.MemberExpression(modifiers, value, expression, value, expression));
					}
					else if(__ks_0 === Token.QUESTION_LEFT_ROUND) {
						var modifiers = [AST.Modifier(ModifierKind.Nullable, this.yes())];
						value = this.yep(AST.CallExpression(modifiers, AST.Scope(ScopeKind.This), value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_0 === Token.QUESTION_LEFT_SQUARE) {
						var position = this.yes();
						var modifiers = [AST.Modifier(ModifierKind.Nullable, position), AST.Modifier(ModifierKind.Computed, position)];
						expression = this.reqExpression(ExpressionMode.Default);
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						value = this.yep(AST.MemberExpression(modifiers, value, expression, value, this.yes()));
					}
					else if(__ks_0 === Token.TEMPLATE_BEGIN) {
						value = this.yep(AST.TaggedTemplateExpression(value, this.reqTemplateExpression(this.yes()), value, this.yes()));
					}
					else {
						break;
					}
				}
				return value;
			},
			reqUnaryOperand: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqUnaryOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqUnlessStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition = this.reqExpression(ExpressionMode.Default);
				var whenFalse = this.reqBlock();
				return this.yep(AST.UnlessStatement(condition, whenFalse, first, whenFalse));
			},
			reqUnlessStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqUnlessStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqVariableEquals_0: function(modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(this.match(Token.EQUALS, Token.COLON_EQUALS) === Token.EQUALS) {
					return this.yes();
				}
				else if(KSHelper.valueOf(this._token) === Token.COLON_EQUALS.value) {
					modifiers.push(AST.Modifier(ModifierKind.AutoTyping, this.yes()));
					return this.yep();
				}
				else {
					this.throw(["=", ":="]);
				}
			},
			reqVariableEquals: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqVariableEquals_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqVariableIdentifier_0: function() {
				if(this.match(Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.IDENTIFIER) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					return this.reqDestructuringObject(this.yes(), DestructuringMode.Expression);
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					return this.reqDestructuringArray(this.yes(), DestructuringMode.Expression);
				}
				else {
					this.throw(["Identifier", "{", "["]);
				}
			},
			reqVariableIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqVariableIdentifier_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_reqVariableName_0: function(object) {
				if(object === void 0 || object === null) {
					object = NO;
				}
				if(!(object.ok === true)) {
					if(this.test(Token.AT)) {
						object = this.reqThisExpression(this.yes());
					}
					else {
						object = this.reqIdentifier();
					}
				}
				var property;
				while(true) {
					if(this.match(Token.DOT, Token.LEFT_SQUARE) === Token.DOT) {
						this.commit();
						property = this.reqIdentifier();
						object = this.yep(AST.MemberExpression([], object, property));
					}
					else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
						var modifiers = [AST.Modifier(ModifierKind.Computed, this.yes())];
						property = this.reqExpression(ExpressionMode.Default);
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						object = this.yep(AST.MemberExpression(modifiers, object, property, object, this.yes()));
					}
					else {
						break;
					}
				}
				return object;
			},
			reqVariableName: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqVariableName_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_stackInnerAttributes_0: function(attributes) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(this.test(Token.HASH_EXCLAMATION_LEFT_SQUARE)) {
					do {
						var first = this.yes();
						var declaration = this.reqAttributeMember();
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						attributes.push(AST.AttributeDeclaration(declaration, first, this.yes()));
						this.reqNL_EOF_1M();
					}
					while(this.test(Token.HASH_EXCLAMATION_LEFT_SQUARE))
					return true;
				}
				else {
					return false;
				}
			},
			stackInnerAttributes: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_stackInnerAttributes_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_stackOuterAttributes_0: function(attributes) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				while(this.test(Token.HASH_LEFT_SQUARE)) {
					attributes.push(this.reqAttribute(this.yes()).value);
					this.NL_0M();
				}
				return attributes;
			},
			stackOuterAttributes: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_stackOuterAttributes_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryAssignementOperator_0: function() {
				var __ks_0 = this.matchM(M.ASSIGNEMENT_OPERATOR);
				if(__ks_0 === Token.AMPERSAND_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseAnd, this.yes()));
				}
				else if(__ks_0 === Token.ASTERISK_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Multiplication, this.yes()));
				}
				else if(__ks_0 === Token.CARET_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseXor, this.yes()));
				}
				else if(__ks_0 === Token.EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Equality, this.yes()));
				}
				else if(__ks_0 === Token.EXCLAMATION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.NonExistential, this.yes()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseLeftShift, this.yes()));
				}
				else if(__ks_0 === Token.MINUS_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Subtraction, this.yes()));
				}
				else if(__ks_0 === Token.PERCENT_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Modulo, this.yes()));
				}
				else if(__ks_0 === Token.PIPE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseOr, this.yes()));
				}
				else if(__ks_0 === Token.PLUS_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Addition, this.yes()));
				}
				else if(__ks_0 === Token.QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Existential, this.yes()));
				}
				else if(__ks_0 === Token.QUESTION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.NullCoalescing, this.yes()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseRightShift, this.yes()));
				}
				else if(__ks_0 === Token.SLASH_DOT_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Quotient, this.yes()));
				}
				else if(__ks_0 === Token.SLASH_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Division, this.yes()));
				}
				else {
					return NO;
				}
			},
			tryAssignementOperator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryAssignementOperator_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryAssignementStatement_0: function() {
				var identifier = NO;
				if(this.match(Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.AT) === Token.IDENTIFIER) {
					identifier = this.reqUnaryOperand(ExpressionMode.Default, this.reqIdentifier());
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					identifier = this.tryDestructuringObject(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					identifier = this.tryDestructuringArray(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.AT.value) {
					identifier = this.reqUnaryOperand(ExpressionMode.Default, this.reqThisExpression(this.yes()));
				}
				if(!(identifier.ok === true)) {
					return NO;
				}
				var statement;
				if(this.match(Token.COMMA, Token.EQUALS) === Token.COMMA) {
					if(!((KSHelper.valueOf(identifier.value.kind) === NodeKind.Identifier.value) || (KSHelper.valueOf(identifier.value.kind) === NodeKind.ArrayBinding.value) || (KSHelper.valueOf(identifier.value.kind) === NodeKind.ObjectBinding.value))) {
						return NO;
					}
					var variables = [identifier];
					do {
						this.commit();
						variables.push(this.reqVariableIdentifier());
					}
					while(this.test(Token.COMMA))
					if(this.test(Token.EQUALS)) {
						this.commit().NL_0M();
						if(!this.test(Token.AWAIT)) {
							this.throw("await");
						}
						var operand = this.reqPrefixedOperand(ExpressionMode.Default);
						statement = this.yep(AST.AwaitExpression([], variables, operand, identifier, operand));
					}
					else {
						this.throw("=");
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS.value) {
					var equals = this.yes();
					this.NL_0M();
					var expression = this.reqExpression(ExpressionMode.Default);
					statement = this.yep(AST.BinaryExpression(identifier, this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Equality, equals)), expression, identifier, expression));
				}
				else {
					return NO;
				}
				if(this.match(Token.IF, Token.UNLESS) === Token.IF) {
					var first = this.yes();
					var condition = this.reqExpression(ExpressionMode.Default);
					if(this.test(Token.ELSE)) {
						this.commit();
						var whenFalse = this.reqExpression(ExpressionMode.Default);
						statement.value.right = AST.IfExpression(condition, this.yep(statement.value.right), whenFalse, first, whenFalse);
						this.relocate(statement, statement, whenFalse);
					}
					else {
						statement = this.yep(AST.IfExpression(condition, statement, null, statement, condition));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.UNLESS.value) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					statement = this.yep(AST.UnlessExpression(condition, statement, statement, condition));
				}
				return this.yep(AST.ExpressionStatement(statement));
			},
			tryAssignementStatement: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryAssignementStatement_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryAwaitExpression_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(!this.test(Token.AWAIT)) {
					return NO;
				}
				try {
					return this.reqAwaitExpression(this.yes());
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryAwaitExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryAwaitExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryBinaryOperator_0: function() {
				var __ks_0 = this.matchM(M.BINARY_OPERATOR);
				if(__ks_0 === Token.AMPERSAND) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseAnd, this.yes()));
				}
				else if(__ks_0 === Token.AMPERSAND_AMPERSAND) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.And, this.yes()));
				}
				else if(__ks_0 === Token.AMPERSAND_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseAnd, this.yes()));
				}
				else if(__ks_0 === Token.ASTERISK) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Multiplication, this.yes()));
				}
				else if(__ks_0 === Token.ASTERISK_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Multiplication, this.yes()));
				}
				else if(__ks_0 === Token.CARET) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseXor, this.yes()));
				}
				else if(__ks_0 === Token.CARET_CARET) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Xor, this.yes()));
				}
				else if(__ks_0 === Token.CARET_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseXor, this.yes()));
				}
				else if(__ks_0 === Token.EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Equality, this.yes()));
				}
				else if(__ks_0 === Token.EQUALS_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Equality, this.yes()));
				}
				else if(__ks_0 === Token.EXCLAMATION_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Inequality, this.yes()));
				}
				else if(__ks_0 === Token.EXCLAMATION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.NonExistential, this.yes()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.LessThan, this.yes()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.LessThanOrEqual, this.yes()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_LEFT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseLeftShift, this.yes()));
				}
				else if(__ks_0 === Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseLeftShift, this.yes()));
				}
				else if(__ks_0 === Token.MINUS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Subtraction, this.yes()));
				}
				else if(__ks_0 === Token.MINUS_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Subtraction, this.yes()));
				}
				else if(__ks_0 === Token.MINUS_RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Imply, this.yes()));
				}
				else if(__ks_0 === Token.PERCENT) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Modulo, this.yes()));
				}
				else if(__ks_0 === Token.PERCENT_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Modulo, this.yes()));
				}
				else if(__ks_0 === Token.PIPE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseOr, this.yes()));
				}
				else if(__ks_0 === Token.PIPE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseOr, this.yes()));
				}
				else if(__ks_0 === Token.PIPE_PIPE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Or, this.yes()));
				}
				else if(__ks_0 === Token.PLUS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Addition, this.yes()));
				}
				else if(__ks_0 === Token.PLUS_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Addition, this.yes()));
				}
				else if(__ks_0 === Token.QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Existential, this.yes()));
				}
				else if(__ks_0 === Token.QUESTION_QUESTION) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.NullCoalescing, this.yes()));
				}
				else if(__ks_0 === Token.QUESTION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.NullCoalescing, this.yes()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.GreaterThan, this.yes()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.GreaterThanOrEqual, this.yes()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseRightShift, this.yes()));
				}
				else if(__ks_0 === Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseRightShift, this.yes()));
				}
				else if(__ks_0 === Token.SLASH) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Division, this.yes()));
				}
				else if(__ks_0 === Token.SLASH_DOT) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Quotient, this.yes()));
				}
				else if(__ks_0 === Token.SLASH_DOT_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Quotient, this.yes()));
				}
				else if(__ks_0 === Token.SLASH_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Division, this.yes()));
				}
				else {
					return NO;
				}
			},
			tryBinaryOperator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryBinaryOperator_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryBlock_0: function() {
				try {
					return this.reqBlock();
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryBlock: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryBlock_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryClassAbstractMethod_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var __ks_first_1 = this.reqIdentifier();
					name = this.tryIdentifier();
					if(name.ok === true) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, __ks_first_1)));
					}
					else {
						name = __ks_first_1;
					}
				}
				else {
					name = this.tryIdentifier();
					if(!(name.ok === true)) {
						return NO;
					}
				}
				return this.reqClassAbstractMethodBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			tryClassAbstractMethod: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_tryClassAbstractMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryClassMember_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var async = this.reqIdentifier();
					name = this.tryIdentifier();
					if(name.ok === true) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, async)));
						return this.reqClassMethod(attributes, modifiers, name, null, KSType.isValue(first) ? first : async);
					}
					else {
						name = async;
					}
				}
				else if(this.test(Token.AT)) {
					var modifier = this.yep(AST.Modifier(ModifierKind.ThisAlias, this.yes()));
					var __ks_name_1 = this.reqNameIST();
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.reqClassField(attributes, [].concat(modifiers, [modifier]), __ks_name_1, type, KSType.isValue(first) ? first : modifier);
					}
					else {
						return this.reqClassField(attributes, [].concat(modifiers, [modifier]), __ks_name_1, null, KSType.isValue(first) ? first : modifier);
					}
				}
				else {
					name = this.tryIdentifier();
					if(!(name.ok === true)) {
						return NO;
					}
				}
				return this.reqClassMemberBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			tryClassMember: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_tryClassMember_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryClassStatement_0: function(first, modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					modifiers = [];
				}
				var name = this.tryIdentifier();
				if(!(name.ok === true)) {
					return NO;
				}
				return this.reqClassStatementBody(name, first, modifiers);
			},
			tryClassStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_tryClassStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryDestroyStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var variable = this.tryVariableName();
				if(variable.ok === true) {
					return this.yep(AST.DestroyStatement(variable, first, variable));
				}
				else {
					return NO;
				}
			},
			tryDestroyStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryDestroyStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryDestructuring_0: function() {
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					try {
						return this.reqDestructuringObject(this.yes(), DestructuringMode.Expression);
					}
					catch(__ks_0) {
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					try {
						return this.reqDestructuringArray(this.yes(), DestructuringMode.Expression);
					}
					catch(__ks_0) {
					}
				}
				return NO;
			},
			tryDestructuring: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryDestructuring_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryDestructuringArray_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				try {
					return this.reqDestructuringArray(first, DestructuringMode.Expression);
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryDestructuringArray: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryDestructuringArray_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryDestructuringObject_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				try {
					return this.reqDestructuringObject(first, DestructuringMode.Expression);
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryDestructuringObject: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryDestructuringObject_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryExpression_0: function(mode) {
				if(mode === void 0 || mode === null) {
					mode = ExpressionMode.Default;
				}
				try {
					return this.reqExpression(mode);
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryExpression: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_tryExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryExternFunctionDeclaration_0: function(first, modifiers) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				try {
					return this.reqExternFunctionDeclaration(first, modifiers);
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryExternFunctionDeclaration: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_tryExternFunctionDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryFunctionBody_0: function() {
				var mark = this.mark();
				this.NL_0M();
				if(this.test(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE)) {
					return this.reqFunctionBody();
				}
				else {
					this.rollback(mark);
					return null;
				}
			},
			tryFunctionBody: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryFunctionBody_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryFunctionExpression_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(KSOperator.bitwiseAnd(mode, ExpressionMode.NoAnonymousFunction) !== 0) {
					return NO;
				}
				if(this.match(Token.ASYNC, Token.FUNC, Token.LEFT_ROUND, Token.IDENTIFIER) === Token.ASYNC) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
					if(this.test(Token.FUNC)) {
						this.commit();
						var parameters = this.reqFunctionParameterList();
						var type = this.tryFunctionReturns();
						var __ks_throws_1 = this.tryFunctionThrows();
						var body = this.reqFunctionBody();
						return this.yep(AST.FunctionExpression(parameters, modifiers, type, __ks_throws_1, body, first, body));
					}
					else {
						var parameters = this.tryFunctionParameterList();
						if(!(parameters.ok === true)) {
							return NO;
						}
						var type = this.tryFunctionReturns();
						var __ks_throws_1 = this.tryFunctionThrows();
						var body = this.reqFunctionBody();
						return this.yep(AST.LambdaExpression(parameters, modifiers, type, __ks_throws_1, body, first, body));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.FUNC.value) {
					var first = this.yes();
					var parameters = this.tryFunctionParameterList();
					if(!(parameters.ok === true)) {
						return NO;
					}
					var type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					var body = this.reqFunctionBody();
					return this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, body, first, body));
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					var parameters = this.tryFunctionParameterList();
					var type = this.tryFunctionReturns();
					var __ks_throws_1 = this.tryFunctionThrows();
					if(!(parameters.ok === true) || !this.test(Token.EQUALS_RIGHT_ANGLE)) {
						return NO;
					}
					this.commit();
					if(this.test(Token.LEFT_CURLY)) {
						var body = this.reqBlock();
						return this.yep(AST.LambdaExpression(parameters, null, type, __ks_throws_1, body, parameters, body));
					}
					else {
						var body = this.reqExpression(KSOperator.bitwiseOr(mode, ExpressionMode.NoObject));
						return this.yep(AST.LambdaExpression(parameters, null, type, __ks_throws_1, body, parameters, body));
					}
				}
				else if(KSHelper.valueOf(this._token) === Token.IDENTIFIER.value) {
					var name = this.reqIdentifier();
					if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
						return NO;
					}
					this.commit();
					var parameters = this.yep([this.yep(AST.Parameter(name))], name, name);
					if(this.test(Token.LEFT_CURLY)) {
						var body = this.reqBlock();
						return this.yep(AST.LambdaExpression(parameters, null, null, null, body, parameters, body));
					}
					else {
						var body = this.reqExpression(KSOperator.bitwiseOr(mode, ExpressionMode.NoObject));
						return this.yep(AST.LambdaExpression(parameters, null, null, null, body, parameters, body));
					}
				}
				else {
					return NO;
				}
			},
			tryFunctionExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryFunctionExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryFunctionParameterList_0: function() {
				if(!this.test(Token.LEFT_ROUND)) {
					return NO;
				}
				var first = this.yes();
				var parameters = [];
				if(!this.test(Token.RIGHT_ROUND)) {
					try {
						while(this.reqParameter(parameters, ParameterMode.Function) === true) {
						}
					}
					catch(__ks_0) {
						return NO;
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						return NO;
					}
				}
				return this.yep(parameters, first, this.yes());
			},
			tryFunctionParameterList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryFunctionParameterList_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryFunctionReturns_0: function() {
				var mark = this.mark();
				this.NL_0M();
				if(this.test(Token.COLON)) {
					this.commit();
					return this.reqTypeVar();
				}
				else {
					this.rollback(mark);
					return null;
				}
			},
			tryFunctionReturns: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryFunctionReturns_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryFunctionThrows_0: function() {
				var mark = this.mark();
				this.NL_0M();
				if(this.test(Token.TILDE)) {
					this.commit();
					var exceptions = [this.reqIdentifier()];
					while(this.test(Token.COMMA)) {
						this.commit();
						exceptions.push(this.reqIdentifier());
					}
					return this.yep(exceptions);
				}
				else {
					this.rollback(mark);
					return null;
				}
			},
			tryFunctionThrows: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryFunctionThrows_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryIdentifier_0: function() {
				if(this._scanner.test(Token.IDENTIFIER)) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else {
					return NO;
				}
			},
			tryIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryIdentifier_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryMacroStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!(name.ok === true)) {
					return NO;
				}
				var parameters = this.reqMacroParameterList();
				var body = this.reqMacroBody();
				return this.yep(AST.MacroDeclaration([], name, parameters, body, first, body));
			},
			tryMacroStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryMacroStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryNameIST_0: function() {
				if(this.match(Token.IDENTIFIER, Token.STRING, Token.TEMPLATE_BEGIN) === Token.IDENTIFIER) {
					return this.reqIdentifier();
				}
				else if(KSHelper.valueOf(this._token) === Token.STRING.value) {
					return this.reqString();
				}
				else if(KSHelper.valueOf(this._token) === Token.TEMPLATE_BEGIN.value) {
					return this.reqTemplateExpression(this.yes());
				}
				else {
					return NO;
				}
			},
			tryNameIST: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryNameIST_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryNamespaceStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!(name.ok === true)) {
					return NO;
				}
				return this.reqNamespaceStatement(first, name);
			},
			tryNamespaceStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryNamespaceStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryNumber_0: function() {
				if(this.matchM(M.NUMBER) === Token.BINARY_NUMBER) {
					return this.yep(AST.NumericExpression(parseInt(this._scanner.value().slice(2).replace(/\_/g, ""), 2), this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.OCTAL_NUMBER.value) {
					var radix = 8;
					var number = this._scanner.value().slice(2).replace(/\_/g, "").split("p");
					var literals = number[0].split(".");
					var value = parseInt(literals[0], radix);
					if(KSOperator.gt(literals.length, 1)) {
						var floating = literals[1];
						var power = 1;
						for(var i = 0, __ks_0 = floating.length; i < __ks_0; ++i) {
							power *= radix;
							value += parseInt(floating[i], radix) / power;
						}
					}
					if(KSOperator.gt(number.length, 1) && (number[1] !== "0")) {
						value = KSOperator.multiplication(value, Math.pow(2, parseInt(number[1])));
					}
					return this.yep(AST.NumericExpression(value, this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.HEX_NUMBER.value) {
					var radix = 16;
					var number = this._scanner.value().slice(2).replace(/\_/g, "").split("p");
					var literals = number[0].split(".");
					var value = parseInt(literals[0], radix);
					if(KSOperator.gt(literals.length, 1)) {
						var floating = literals[1];
						var power = 1;
						for(var i = 0, __ks_0 = floating.length; i < __ks_0; ++i) {
							power *= radix;
							value += parseInt(floating[i], radix) / power;
						}
					}
					if(KSOperator.gt(number.length, 1) && (number[1] !== "0")) {
						value = KSOperator.multiplication(value, Math.pow(2, parseInt(number[1])));
					}
					return this.yep(AST.NumericExpression(value, this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.RADIX_NUMBER.value) {
					var data = /^(\d+)r(.*)$/.exec(this._scanner.value());
					return this.yep(AST.NumericExpression(parseInt(data[2].replace(/\_/g, ""), parseInt(data[1])), this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.DECIMAL_NUMBER.value) {
					return this.yep(AST.NumericExpression(parseFloat(this._scanner.value().replace(/\_/g, ""), 10), this.yes()));
				}
				else {
					return NO;
				}
			},
			tryNumber: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryNumber_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(this.matchM(M.OPERAND) === Token.AT) {
					return this.reqThisExpression(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.IDENTIFIER.value) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_CURLY.value) {
					return this.reqObject(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_ROUND.value) {
					return this.reqParenthesis(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.LEFT_SQUARE.value) {
					return this.reqArray(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.NEW.value) {
					return this.reqCreateExpression(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.REGEXP.value) {
					return this.yep(AST.RegularExpression(this._scanner.value(), this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.STRING.value) {
					return this.yep(AST.Literal(this.value(), this.yes()));
				}
				else if(KSHelper.valueOf(this._token) === Token.TEMPLATE_BEGIN.value) {
					return this.reqTemplateExpression(this.yes());
				}
				else {
					return this.tryNumber();
				}
			},
			tryOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryRangeOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var operand = this.tryOperand(mode);
				if(!(operand.ok === true)) {
					return NO;
				}
				return this.reqPostfixedOperand(mode, operand);
			},
			tryRangeOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryRangeOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_trySwitchExpression_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(!this.test(Token.SWITCH)) {
					return NO;
				}
				var first = this.yes();
				var expression = this.reqOperation(mode);
				var clauses = this.reqSwitchCaseList();
				return this.yep(AST.SwitchExpression(expression, clauses, first, clauses));
			},
			trySwitchExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_trySwitchExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryTryExpression_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(!this.test(Token.TRY)) {
					return NO;
				}
				try {
					return this.reqTryExpression(this.yes());
				}
				catch(__ks_0) {
					return NO;
				}
			},
			tryTryExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryTryExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryTypeStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!(name.ok === true)) {
					return NO;
				}
				return this.reqTypeStatement(first, name);
			},
			tryTypeStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryTypeStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryUntilStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition = this.tryExpression();
				if(!(condition.ok === true)) {
					return NO;
				}
				var body;
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					body = this.reqBlock(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS_RIGHT_ANGLE.value) {
					this.commit();
					body = this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["{", "=>"]);
				}
				return this.yep(AST.UntilStatement(condition, body, first, body));
			},
			tryUntilStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryUntilStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryVariableEquals_0: function(modifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(this.match(Token.EQUALS, Token.COLON_EQUALS) === Token.EQUALS) {
					return this.yes();
				}
				else if(KSHelper.valueOf(this._token) === Token.COLON_EQUALS.value) {
					modifiers.push(AST.Modifier(ModifierKind.AutoTyping, this.yes()));
					return this.yep();
				}
				else {
					return NO;
				}
			},
			tryVariableEquals: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryVariableEquals_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryVariableName_0: function() {
				var object;
				if(this.test(Token.AT)) {
					object = this.reqThisExpression(this.yes());
				}
				else {
					object = this.tryIdentifier();
					if(!(object.ok === true)) {
						return NO;
					}
				}
				return this.reqVariableName(object);
			},
			tryVariableName: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryVariableName_0.apply(this);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_tryWhileStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition;
				if(this.test(Token.LET, Token.CONST)) {
					var token = this._token;
					var mark = this.mark();
					var __ks_first_1 = this.yes();
					var modifiers = [];
					if(KSHelper.valueOf(token) === Token.CONST.value) {
						modifiers.push(AST.Modifier(ModifierKind.Immutable, __ks_first_1));
					}
					if(this.test(Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE)) {
						var variable = this.reqTypedVariable();
						if(this.test(Token.COMMA)) {
							var variables = [variable];
							do {
								this.commit();
								variables.push(this.reqTypedVariable());
							}
							while(this.test(Token.COMMA))
							this.reqVariableEquals(modifiers);
							if(!this.test(Token.AWAIT)) {
								this.throw("await");
							}
							this.commit();
							var operand = this.reqPrefixedOperand(ExpressionMode.Default);
							condition = this.yep(AST.VariableDeclaration(modifiers, variables, operand, __ks_first_1, operand));
						}
						else {
							this.reqVariableEquals(modifiers);
							var expression = this.reqExpression(ExpressionMode.Default);
							condition = this.yep(AST.VariableDeclaration(modifiers, [variable], expression, __ks_first_1, expression));
						}
					}
					else {
						this.rollback(mark);
						condition = this.tryExpression();
					}
				}
				else {
					condition = this.tryExpression();
				}
				if(!(condition.ok === true)) {
					return NO;
				}
				var body;
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					body = this.reqBlock(this.yes());
				}
				else if(KSHelper.valueOf(this._token) === Token.EQUALS_RIGHT_ANGLE.value) {
					this.commit();
					body = this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["{", "=>"]);
				}
				return this.yep(AST.WhileStatement(condition, body, first, body));
			},
			tryWhileStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryWhileStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		function parse(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			else if(!KSType.isString(data)) {
				throw new TypeError("'data' is not of type 'String'");
			}
			var parser = new Parser(data);
			return parser.reqModule();
		}
		return {
			parse: parse
		};
	});
	function $clone(value) {
		if(value === void 0) {
			value = null;
		}
		if(value === null) {
			return null;
		}
		else if(KSType.isArray(value)) {
			return __ks_Array._im_clone(value);
		}
		else if(KSType.isDictionary(value)) {
			return __ks_Dictionary._cm_clone(value);
		}
		else {
			return value;
		}
	}
	var $merge = (function() {
		var d = new Dictionary();
		d.merge = function(source, key, value) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(source === void 0 || source === null) {
				throw new TypeError("'source' is not nullable");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.isArray(value)) {
				source[key] = __ks_Array._im_clone(value);
			}
			else if(!KSType.isPrimitive(value)) {
				if(KSType.isDictionary(source[key]) || KSType.isObject(source[key])) {
					$merge.object(source[key], value);
				}
				else {
					source[key] = $clone(value);
				}
			}
			else {
				source[key] = value;
			}
			return source;
		};
		d.object = function(source, current) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(source === void 0 || source === null) {
				throw new TypeError("'source' is not nullable");
			}
			if(current === void 0 || current === null) {
				throw new TypeError("'current' is not nullable");
			}
			var __ks_0;
			for(var key in current) {
				if(KSType.isValue(source[key])) {
					$merge.merge(source, key, current[key]);
				}
				else {
					source[key] = current[key];
				}
			}
		};
		return d;
	})();
	var __ks_Array = {};
	var __ks_Dictionary = {};
	__ks_Array.__ks_func_append_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var l, i, j, arg;
		for(var k = 0, __ks_0 = args.length; k < __ks_0; ++k) {
			arg = KSHelper.array(args[k]);
			if((l = arg.length) > 50000) {
				i = 0;
				j = 50000;
				while(i < l) {
					this.push.apply(this, arg.slice(i, j));
					i = j;
					j += 50000;
				}
			}
			else {
				this.push.apply(this, arg);
			}
		}
		return this;
	};
	__ks_Array.__ks_func_appendUniq_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(args.length === 1) {
			__ks_Array._im_pushUniq.apply(null, [this].concat(args[0]));
		}
		else {
			for(var i = 0, __ks_0 = args.length; i < __ks_0; ++i) {
				__ks_Array._im_pushUniq.apply(null, [this].concat(args[i]));
			}
		}
		return this;
	};
	__ks_Array.__ks_func_any_0 = function(fn) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(fn === void 0 || fn === null) {
			throw new TypeError("'fn' is not nullable");
		}
		for(var index = 0, __ks_0 = this.length, item; index < __ks_0; ++index) {
			item = this[index];
			if(fn(item, index, this) === true) {
				return true;
			}
		}
		return false;
	};
	__ks_Array.__ks_func_clear_0 = function() {
		this.length = 0;
		return this;
	};
	__ks_Array.__ks_func_clone_0 = function() {
		var i = this.length;
		var clone = new Array(i);
		while(i > 0) {
			clone[--i] = $clone(this[i]);
		}
		return clone;
	};
	__ks_Array.__ks_func_contains_0 = function(item, from) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		if(from === void 0 || from === null) {
			from = 0;
		}
		return this.indexOf(item, from) !== -1;
	};
	__ks_Array.__ks_func_last_0 = function(index) {
		if(index === void 0 || index === null) {
			index = 1;
		}
		else if(!KSType.isNumber(index)) {
			throw new TypeError("'index' is not of type 'Number'");
		}
		return (this.length !== 0) ? this[this.length - index] : null;
	};
	__ks_Array.__ks_func_remove_0 = function() {
		var items = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(items.length === 1) {
			var item = items[0];
			for(var i = this.length - 1; i >= 0; --i) {
				if(this[i] === item) {
					this.splice(i, 1);
				}
			}
		}
		else {
			for(var __ks_0 = 0, __ks_1 = items.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = items[__ks_0];
				for(var i = this.length - 1; i >= 0; --i) {
					if(this[i] === item) {
						this.splice(i, 1);
					}
				}
			}
		}
		return this;
	};
	__ks_Array.__ks_sttc_merge_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var source = [];
		var i = 0;
		var l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isArray(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isArray(args[i])) {
				for(var __ks_0 = 0, __ks_1 = args[i].length, value; __ks_0 < __ks_1; ++__ks_0) {
					value = args[i][__ks_0];
					__ks_Array._im_pushUniq(source, value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Array.__ks_func_pushUniq_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(args.length === 1) {
			if(!__ks_Array._im_contains(this, args[0])) {
				this.push(args[0]);
			}
		}
		else {
			for(var __ks_0 = 0, __ks_1 = args.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = args[__ks_0];
				if(!__ks_Array._im_contains(this, item)) {
					this.push(item);
				}
			}
		}
		return this;
	};
	__ks_Array.__ks_sttc_same_0 = function(a, b) {
		if(arguments.length < 2) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(a === void 0 || a === null) {
			throw new TypeError("'a' is not nullable");
		}
		if(b === void 0 || b === null) {
			throw new TypeError("'b' is not nullable");
		}
		if(a.length !== b.length) {
			return false;
		}
		for(var i = 0, __ks_0 = a.length; i < __ks_0; ++i) {
			if(a[i] !== b[i]) {
				return false;
			}
		}
		return true;
	};
	__ks_Array._im_append = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_append_0.apply(that, args);
	};
	__ks_Array._im_appendUniq = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_appendUniq_0.apply(that, args);
	};
	__ks_Array._im_any = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 1) {
			return __ks_Array.__ks_func_any_0.apply(that, args);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Array._im_clear = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 0) {
			return __ks_Array.__ks_func_clear_0.apply(that);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Array._im_clone = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 0) {
			return __ks_Array.__ks_func_clone_0.apply(that);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Array._im_contains = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length >= 1 && args.length <= 2) {
			return __ks_Array.__ks_func_contains_0.apply(that, args);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Array._im_last = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length >= 0 && args.length <= 1) {
			return __ks_Array.__ks_func_last_0.apply(that, args);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Array._im_remove = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_remove_0.apply(that, args);
	};
	__ks_Array._cm_merge = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Array.__ks_sttc_merge_0.apply(null, args);
	};
	__ks_Array._im_pushUniq = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_pushUniq_0.apply(that, args);
	};
	__ks_Array._cm_same = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 2) {
			return __ks_Array.__ks_sttc_same_0.apply(null, args);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Dictionary.__ks_sttc_clone_0 = function(dict) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(dict === void 0 || dict === null) {
			throw new TypeError("'dict' is not nullable");
		}
		if(KSType.isFunction(dict.clone)) {
			return dict.clone();
		}
		var clone = new Dictionary();
		for(var key in dict) {
			var value = dict[key];
			clone[key] = $clone(value);
		}
		return clone;
	};
	__ks_Dictionary.__ks_sttc_defaults_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		return __ks_Dictionary._cm_merge.apply(null, [].concat([new Dictionary()], args));
	};
	__ks_Dictionary.__ks_sttc_isEmpty_0 = function(item) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		return KSHelper.isEmptyDictionary(item);
	};
	__ks_Dictionary.__ks_sttc_merge_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var source = new Dictionary();
		var i = 0;
		var l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isDictionary(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isDictionary(args[i]) || KSType.isObject(args[i])) {
				for(var key in args[i]) {
					var value = args[i][key];
					$merge.merge(source, key, value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Dictionary._cm_clone = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Dictionary.__ks_sttc_clone_0.apply(null, args);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Dictionary._cm_defaults = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Dictionary.__ks_sttc_defaults_0.apply(null, args);
	};
	__ks_Dictionary._cm_isEmpty = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Dictionary.__ks_sttc_isEmpty_0.apply(null, args);
		}
		throw new SyntaxError("Wrong number of arguments");
	};
	__ks_Dictionary._cm_merge = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Dictionary.__ks_sttc_merge_0.apply(null, args);
	};
	var __ks_Error = {};
	Error.prepareStackTrace = function(error, stack) {
		if(arguments.length < 2) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(error === void 0 || error === null) {
			throw new TypeError("'error' is not nullable");
		}
		else if(!KSType.isInstance(error, Error)) {
			throw new TypeError("'error' is not of type 'Error'");
		}
		if(stack === void 0 || stack === null) {
			throw new TypeError("'stack' is not nullable");
		}
		else if(!KSType.isArray(stack)) {
			throw new TypeError("'stack' is not of type 'Array'");
		}
		var message = error.toString();
		for(var i = 0, __ks_0 = Math.min(12, stack.length); i < __ks_0; ++i) {
			message = KSHelper.concatString(message, "\n    ", stack[i].toString());
		}
		return message;
	};
	var Exception = KSHelper.class({
		$name: "Exception",
		$extends: Error,
		$static: {
			__ks_sttc_validateReportedError_0: function(error, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(error === void 0 || error === null) {
					throw new TypeError("'error' is not nullable");
				}
				else if(!KSType.isInstance(error, Type)) {
					throw new TypeError("'error' is not of type 'Type'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				while(!KSType.isInstance(error, NamedType)) {
					if(error.isExtending() === true) {
						error = error.extends();
					}
					else {
						error = node.scope().getVariable("Error").type();
					}
				}
				var options = node._options.error;
				if(options.level === "fatal") {
					if(!(node.parent().isConsumedError(error) === true)) {
						if(options.ignore.length === 0) {
							SyntaxException.throwUnreportedError(error.name(), node);
						}
						else {
							var hierarchy = error.getHierarchy();
							var nf = true;
							for(var __ks_0 = 0, __ks_1 = hierarchy.length, name; __ks_0 < __ks_1 && nf; ++__ks_0) {
								name = hierarchy[__ks_0];
								if(__ks_Array._im_contains(options.ignore, name)) {
									nf = false;
								}
							}
							if(nf) {
								SyntaxException.throwUnreportedError(error.name(), node);
							}
							else if(options.raise.length !== 0) {
								for(var __ks_0 = 0, __ks_1 = hierarchy.length, name; __ks_0 < __ks_1; ++__ks_0) {
									name = hierarchy[__ks_0];
									if(__ks_Array._im_contains(options.raise, name)) {
										SyntaxException.throwUnreportedError(error.name(), node);
									}
								}
							}
						}
					}
				}
			},
			validateReportedError: function() {
				if(arguments.length === 2) {
					return Exception.__ks_sttc_validateReportedError_0.apply(this, arguments);
				}
				else if(Error.validateReportedError) {
					return Error.validateReportedError.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this.fileName = null;
			this.lineNumber = 0;
		},
		__ks_init: function() {
			Exception.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(message) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			(1);
			this.message = message;
			this.name = this.constructor.name;
		},
		__ks_cons_1: function(message, fileName, lineNumber) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(fileName === void 0) {
				fileName = null;
			}
			else if(fileName !== null && !KSType.isString(fileName)) {
				throw new TypeError("'fileName' is not of type 'String?'");
			}
			if(lineNumber === void 0 || lineNumber === null) {
				throw new TypeError("'lineNumber' is not nullable");
			}
			else if(!KSType.isNumber(lineNumber)) {
				throw new TypeError("'lineNumber' is not of type 'Number'");
			}
			Exception.prototype.__ks_cons.call(this, [message]);
			this.fileName = fileName;
			this.lineNumber = lineNumber;
		},
		__ks_cons_2: function(message, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node.file(), node._data.start.line]);
		},
		__ks_cons_3: function(message, node, data) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, node.file(), data.start.line]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Exception.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 2) {
				Exception.prototype.__ks_cons_2.apply(this, args);
			}
			else if(args.length === 3) {
				if(KSType.isNumber(args[2])) {
					Exception.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					Exception.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_toString_0: function() {
			if(this.lineNumber === 0) {
				if(this.message.length === 0) {
					return this.name + ": Unexpected error";
				}
				else {
					return this.name + ": " + this.message;
				}
			}
			else {
				if(this.message.length === 0) {
					return this.name + ": line " + this.lineNumber + ", file \"" + this.fileName + "\"";
				}
				else {
					return this.name + ": " + this.message + " (line " + this.lineNumber + ", file \"" + this.fileName + "\")";
				}
			}
		},
		toString: function() {
			if(arguments.length === 0) {
				return Exception.prototype.__ks_func_toString_0.apply(this);
			}
			else if(Error.prototype.toString) {
				return Error.prototype.toString.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var IOException = KSHelper.class({
		$name: "IOException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwNotFoundFile_0: function(path, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(path === void 0 || path === null) {
					throw new TypeError("'path' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The file \"" + path + "\" can't be found", node);
			},
			__ks_sttc_throwNotFoundFile_1: function(path, directory, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(path === void 0 || path === null) {
					throw new TypeError("'path' is not nullable");
				}
				if(directory === void 0 || directory === null) {
					throw new TypeError("'directory' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The file \"" + path + "\" can't be found in the directory \"" + directory + "\"", node);
			},
			throwNotFoundFile: function() {
				if(arguments.length === 2) {
					return IOException.__ks_sttc_throwNotFoundFile_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return IOException.__ks_sttc_throwNotFoundFile_1.apply(this, arguments);
				}
				else if(Exception.throwNotFoundFile) {
					return Exception.throwNotFoundFile.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotFoundModule_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The module \"" + name + "\" can't be found", node);
			},
			__ks_sttc_throwNotFoundModule_1: function(name, directory, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(directory === void 0 || directory === null) {
					throw new TypeError("'directory' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The module \"" + name + "\" can't be found in the directory \"" + directory + "\"", node);
			},
			throwNotFoundModule: function() {
				if(arguments.length === 2) {
					return IOException.__ks_sttc_throwNotFoundModule_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return IOException.__ks_sttc_throwNotFoundModule_1.apply(this, arguments);
				}
				else if(Exception.throwNotFoundModule) {
					return Exception.throwNotFoundModule.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var NotImplementedException = KSHelper.class({
		$name: "NotImplementedException",
		$extends: Exception,
		$static: {
			__ks_sttc_throw_0: function() {
				var __ks_arguments_1 = Array.prototype.slice.call(arguments, 0, arguments.length);
				throw KSHelper.create(NotImplementedException, __ks_arguments_1);
			},
			throw: function() {
				return NotImplementedException.__ks_sttc_throw_0.apply(this, arguments);
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(message) {
			if(message === void 0 || message === null) {
				message = "Not Implemented";
			}
			Exception.prototype.__ks_cons.call(this, [message]);
		},
		__ks_cons_1: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node]);
		},
		__ks_cons_2: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, node, data]);
		},
		__ks_cons_3: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var fileName = arguments[++__ks_i];
			if(fileName === void 0 || fileName === null) {
				throw new TypeError("'fileName' is not nullable");
			}
			var lineNumber = arguments[++__ks_i];
			if(lineNumber === void 0 || lineNumber === null) {
				throw new TypeError("'lineNumber' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, fileName, lineNumber]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NotImplementedException.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 1) {
				if(KSType.isInstance(args[0], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 2) {
				if(KSType.isInstance(args[1], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_1.apply(this, args);
				}
				else if(KSType.isInstance(args[0], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else if(args.length === 3) {
				if(KSType.isInstance(args[1], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		}
	});
	var NotSupportedException = KSHelper.class({
		$name: "NotSupportedException",
		$extends: Exception,
		$static: {
			__ks_sttc_throw_0: function() {
				var __ks_arguments_1 = Array.prototype.slice.call(arguments, 0, arguments.length);
				throw KSHelper.create(NotSupportedException, __ks_arguments_1);
			},
			throw: function() {
				return NotSupportedException.__ks_sttc_throw_0.apply(this, arguments);
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(message) {
			if(message === void 0 || message === null) {
				message = "Not Supported";
			}
			Exception.prototype.__ks_cons.call(this, [message]);
		},
		__ks_cons_1: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Supported";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NotSupportedException.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 1) {
				if(KSType.isInstance(args[0], AbstractNode)) {
					NotSupportedException.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					NotSupportedException.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 2) {
				NotSupportedException.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		}
	});
	var ReferenceException = KSHelper.class({
		$name: "ReferenceException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwAlreadyDefinedField_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Field \"" + name + "\" is already defined by its parent class", node);
			},
			throwAlreadyDefinedField: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwAlreadyDefinedField_0.apply(this, arguments);
				}
				else if(Exception.throwAlreadyDefinedField) {
					return Exception.throwAlreadyDefinedField.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwDefined_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" should not be defined", node);
			},
			throwDefined: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwDefined_0.apply(this, arguments);
				}
				else if(Exception.throwDefined) {
					return Exception.throwDefined.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwImmutable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Identifier \"" + name + "\" is immutable", node);
			},
			throwImmutable: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwImmutable_0.apply(this, arguments);
				}
				else if(Exception.throwImmutable) {
					return Exception.throwImmutable.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidAssignment_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Invalid left-hand side in assignment", node);
			},
			throwInvalidAssignment: function() {
				if(arguments.length === 1) {
					return ReferenceException.__ks_sttc_throwInvalidAssignment_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidAssignment) {
					return Exception.throwInvalidAssignment.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwLoopingAlias_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Alias \"@" + name + "\" is looping on itself", node);
			},
			throwLoopingAlias: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwLoopingAlias_0.apply(this, arguments);
				}
				else if(Exception.throwLoopingAlias) {
					return Exception.throwLoopingAlias.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoMatchingConstructor_0: function(name, __ks_arguments_1, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(__ks_arguments_1.length === 0) {
					throw new ReferenceException("The constructor of class \"" + name + "\" can't be matched to no arguments", node);
				}
				else {
					throw new ReferenceException("The constructor of class \"" + name + "\" can't be matched to given arguments (" + KSHelper.mapArray(__ks_arguments_1, function(argument) {
						return "" + argument.type().toQuote();
					}).join(", ") + ")", node);
				}
			},
			throwNoMatchingConstructor: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNoMatchingConstructor_0.apply(this, arguments);
				}
				else if(Exception.throwNoMatchingConstructor) {
					return Exception.throwNoMatchingConstructor.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoMatchingFunction_0: function(name, __ks_arguments_1, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(__ks_arguments_1.length === 0) {
					throw new ReferenceException("The function \"" + name + "\" can't be matched to no arguments", node);
				}
				else {
					throw new ReferenceException("The function \"" + name + "\" can't be matched to given arguments (" + KSHelper.mapArray(__ks_arguments_1, function(argument) {
						return "" + argument.type().toQuote();
					}).join(", ") + ")", node);
				}
			},
			throwNoMatchingFunction: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNoMatchingFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNoMatchingFunction) {
					return Exception.throwNoMatchingFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoMatchingFunctionInNamespace_0: function(name, __ks_namespace_1, __ks_arguments_1, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_namespace_1 === void 0 || __ks_namespace_1 === null) {
					throw new TypeError("'namespace' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(__ks_arguments_1.length === 0) {
					throw new ReferenceException("The function \"" + name + "\" in namespace " + __ks_namespace_1.toQuote(true) + " can't be matched to no arguments", node);
				}
				else {
					throw new ReferenceException("The function \"" + name + "\" in namespace " + __ks_namespace_1.toQuote(true) + " can't be matched to given arguments (" + KSHelper.mapArray(__ks_arguments_1, function(argument) {
						return "" + argument.type().toQuote();
					}).join(", ") + ")", node);
				}
			},
			throwNoMatchingFunctionInNamespace: function() {
				if(arguments.length === 4) {
					return ReferenceException.__ks_sttc_throwNoMatchingFunctionInNamespace_0.apply(this, arguments);
				}
				else if(Exception.throwNoMatchingFunctionInNamespace) {
					return Exception.throwNoMatchingFunctionInNamespace.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoMatchingMethod_0: function(method, __ks_class_1, __ks_arguments_1, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(__ks_arguments_1.length === 0) {
					throw new ReferenceException("The method \"" + method + "\" of the class \"" + __ks_class_1 + "\" can't be matched to no arguments", node);
				}
				else {
					throw new ReferenceException("The method \"" + method + "\" of the class \"" + __ks_class_1 + "\" can't be matched to given arguments (" + KSHelper.mapArray(__ks_arguments_1, function(argument) {
						return "" + argument.toQuote();
					}).join(", ") + ")", node);
				}
			},
			throwNoMatchingMethod: function() {
				if(arguments.length === 4) {
					return ReferenceException.__ks_sttc_throwNoMatchingMethod_0.apply(this, arguments);
				}
				else if(Exception.throwNoMatchingMethod) {
					return Exception.throwNoMatchingMethod.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotDefined_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" is not defined", node);
			},
			throwNotDefined: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefined_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefined) {
					return Exception.throwNotDefined.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedField_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Field \"" + name + "\" is not defined", node);
			},
			throwNotDefinedField: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedField_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedField) {
					return Exception.throwNotDefinedField.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedEnumElement_0: function(element, __ks_enum_1, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(element === void 0 || element === null) {
					throw new TypeError("'element' is not nullable");
				}
				if(__ks_enum_1 === void 0 || __ks_enum_1 === null) {
					throw new TypeError("'enum' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Element \"" + element + "\" is not defined in enum \"" + __ks_enum_1 + "\"", node);
			},
			throwNotDefinedEnumElement: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotDefinedEnumElement_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedEnumElement) {
					return Exception.throwNotDefinedEnumElement.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedInModule_0: function(name, module, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" is not defined in the module \"" + module + "\"", node);
			},
			throwNotDefinedInModule: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotDefinedInModule_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedInModule) {
					return Exception.throwNotDefinedInModule.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedMember_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Member \"" + name + "\" is not defined", node);
			},
			throwNotDefinedMember: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedMember_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedMember) {
					return Exception.throwNotDefinedMember.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedProperty_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Property \"" + name + "\" is not defined", node);
			},
			throwNotDefinedProperty: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedProperty_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedProperty) {
					return Exception.throwNotDefinedProperty.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotExportable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("The exported variable \"" + name + "\" is not exportable", node);
			},
			throwNotExportable: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotExportable_0.apply(this, arguments);
				}
				else if(Exception.throwNotExportable) {
					return Exception.throwNotExportable.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotFoundMethod_0: function(method, __ks_class_1, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("The method \"" + method + "\" can't be found in the class \"" + __ks_class_1 + "\"", node);
			},
			throwNotFoundMethod: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotFoundMethod_0.apply(this, arguments);
				}
				else if(Exception.throwNotFoundMethod) {
					return Exception.throwNotFoundMethod.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotPassed_0: function(name, module, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("To overwrite \"" + name + "\", it needs to be passed to the module \"" + module + "\"", node);
			},
			throwNotPassed: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotPassed_0.apply(this, arguments);
				}
				else if(Exception.throwNotPassed) {
					return Exception.throwNotPassed.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNullExpression_0: function(expression, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("The expression " + expression.toQuote(true) + " is \"null\"", node);
			},
			throwNullExpression: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNullExpression_0.apply(this, arguments);
				}
				else if(Exception.throwNullExpression) {
					return Exception.throwNullExpression.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var SyntaxException = KSHelper.class({
		$name: "SyntaxException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwAfterDefaultClause_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Clause is must be before the default clause", node);
			},
			throwAfterDefaultClause: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwAfterDefaultClause_0.apply(this, arguments);
				}
				else if(Exception.throwAfterDefaultClause) {
					return Exception.throwAfterDefaultClause.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwAfterRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter must be before the rest parameter", node);
			},
			throwAfterRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwAfterRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwAfterRestParameter) {
					return Exception.throwAfterRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwAlreadyDeclared_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Identifier \"" + name + "\" has already been declared", node);
			},
			throwAlreadyDeclared: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwAlreadyDeclared_0.apply(this, arguments);
				}
				else if(Exception.throwAlreadyDeclared) {
					return Exception.throwAlreadyDeclared.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwDeadCode_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Dead code", node);
			},
			throwDeadCode: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwDeadCode_0.apply(this, arguments);
				}
				else if(Exception.throwDeadCode) {
					return Exception.throwDeadCode.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwDuplicateKey_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Duplicate key has been found in object", node);
			},
			throwDuplicateKey: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwDuplicateKey_0.apply(this, arguments);
				}
				else if(Exception.throwDuplicateKey) {
					return Exception.throwDuplicateKey.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwDuplicateMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The method \"" + name + "\" is matching an existing method", node);
			},
			throwDuplicateMethod: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwDuplicateMethod_0.apply(this, arguments);
				}
				else if(Exception.throwDuplicateMethod) {
					return Exception.throwDuplicateMethod.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwEnumOverflow_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The bit flags enum \"" + name + "\" can only have at most 53 bits.", node);
			},
			throwEnumOverflow: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwEnumOverflow_0.apply(this, arguments);
				}
				else if(Exception.throwEnumOverflow) {
					return Exception.throwEnumOverflow.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwIdenticalConstructor_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The constructor is identical with another constructor", node);
			},
			throwIdenticalConstructor: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwIdenticalConstructor_0.apply(this, arguments);
				}
				else if(Exception.throwIdenticalConstructor) {
					return Exception.throwIdenticalConstructor.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwIdenticalFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The function \"" + name + "\" is identical with another function \"" + name + "\"", node);
			},
			throwIdenticalFunction: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwIdenticalFunction_0.apply(this, arguments);
				}
				else if(Exception.throwIdenticalFunction) {
					return Exception.throwIdenticalFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwIdenticalMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The method \"" + name + "\" is identical with another method \"" + name + "\"", node);
			},
			throwIdenticalMethod: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwIdenticalMethod_0.apply(this, arguments);
				}
				else if(Exception.throwIdenticalMethod) {
					return Exception.throwIdenticalMethod.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwIllegalStatement_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The statement \"" + name + "\" is illegal", node);
			},
			throwIllegalStatement: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwIllegalStatement_0.apply(this, arguments);
				}
				else if(Exception.throwIllegalStatement) {
					return Exception.throwIllegalStatement.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidAwait_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("\"await\" can only be used in functions or binary module", node);
			},
			throwInvalidAwait: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwInvalidAwait_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidAwait) {
					return Exception.throwInvalidAwait.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidEnumAccess_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Accessing an enum can only be done with \"::\"", node);
			},
			throwInvalidEnumAccess: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwInvalidEnumAccess_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidEnumAccess) {
					return Exception.throwInvalidEnumAccess.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidMethodReturn_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" of the class \"" + className + "\" has an invalid return type", node);
			},
			throwInvalidMethodReturn: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwInvalidMethodReturn_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidMethodReturn) {
					return Exception.throwInvalidMethodReturn.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidImportAliasArgument_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Aliases arguments can't be used with classic JavaScript module", node);
			},
			throwInvalidImportAliasArgument: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwInvalidImportAliasArgument_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidImportAliasArgument) {
					return Exception.throwInvalidImportAliasArgument.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidIdentifier_0: function(value, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("\"" + value + "\" is an invalid identifier", node);
			},
			throwInvalidIdentifier: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwInvalidIdentifier_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidIdentifier) {
					return Exception.throwInvalidIdentifier.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidSyncMethods_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" of the class \"" + className + "\" can be neither sync nor async", node);
			},
			throwInvalidSyncMethods: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwInvalidSyncMethods_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidSyncMethods) {
					return Exception.throwInvalidSyncMethods.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidForcedTypeCasting_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The forced type casting \"!!\" can't determine the expected type", node);
			},
			throwInvalidForcedTypeCasting: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwInvalidForcedTypeCasting_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidForcedTypeCasting) {
					return Exception.throwInvalidForcedTypeCasting.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwLoopingImport_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The import \"" + name + "\" is looping", node);
			},
			throwLoopingImport: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwLoopingImport_0.apply(this, arguments);
				}
				else if(Exception.throwLoopingImport) {
					return Exception.throwLoopingImport.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwMismatchedInclude_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Inclusions of \"" + name + "\" should have the same version", node);
			},
			throwMismatchedInclude: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwMismatchedInclude_0.apply(this, arguments);
				}
				else if(Exception.throwMismatchedInclude) {
					return Exception.throwMismatchedInclude.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwMissingAbstractMethods_0: function(name, methods, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				var fragments = [];
				for(var __ks_name_1 in methods) {
					var __ks_methods_1 = methods[__ks_name_1];
					for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = __ks_methods_1[__ks_0];
						fragments.push("\"" + __ks_name_1 + method.toQuote() + "\"");
					}
				}
				throw new SyntaxException("Class \"" + name + "\" doesn't implement the following abstract method" + ((fragments.length > 1) ? "s" : "") + ": " + fragments.join(", "), node);
			},
			throwMissingAbstractMethods: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwMissingAbstractMethods_0.apply(this, arguments);
				}
				else if(Exception.throwMissingAbstractMethods) {
					return Exception.throwMissingAbstractMethods.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwMissingRequirement_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("import is missing the argument \"" + name + "\"", node);
			},
			throwMissingRequirement: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwMissingRequirement_0.apply(this, arguments);
				}
				else if(Exception.throwMissingRequirement) {
					return Exception.throwMissingRequirement.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwMixedOverloadedFunction_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Overloaded functions can't mix sync/async", node);
			},
			throwMixedOverloadedFunction: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwMixedOverloadedFunction_0.apply(this, arguments);
				}
				else if(Exception.throwMixedOverloadedFunction) {
					return Exception.throwMixedOverloadedFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoDefaultParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't have a default value", node);
			},
			throwNoDefaultParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoDefaultParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoDefaultParameter) {
					return Exception.throwNoDefaultParameter.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoExport_0: function(module, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("No export can be found in module \"" + module + "\"", node);
			},
			throwNoExport: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNoExport_0.apply(this, arguments);
				}
				else if(Exception.throwNoExport) {
					return Exception.throwNoExport.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoNullParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't be nullable", node);
			},
			throwNoNullParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoNullParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoNullParameter) {
					return Exception.throwNoNullParameter.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't be a rest parameter", node);
			},
			throwNoRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoRestParameter) {
					return Exception.throwNoRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoSuitableOverride_0: function(__ks_class_1, name, parameters, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("\"" + __ks_class_1.toQuote() + "." + name + FunctionType.toQuote(parameters) + "\" can't be matched to any suitable method to override", node);
			},
			throwNoSuitableOverride: function() {
				if(arguments.length === 4) {
					return SyntaxException.__ks_sttc_throwNoSuitableOverride_0.apply(this, arguments);
				}
				else if(Exception.throwNoSuitableOverride) {
					return Exception.throwNoSuitableOverride.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoSuitableOverwrite_0: function(__ks_class_1, name, type, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("\"" + __ks_class_1.toQuote() + "." + name + type.toQuote() + "\" can't be matched to any suitable method to overwrite", node);
			},
			throwNoSuitableOverwrite: function() {
				if(arguments.length === 4) {
					return SyntaxException.__ks_sttc_throwNoSuitableOverwrite_0.apply(this, arguments);
				}
				else if(Exception.throwNoSuitableOverwrite) {
					return Exception.throwNoSuitableOverwrite.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNoSuperCall_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Call \"super()\" is missing", node);
			},
			throwNoSuperCall: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoSuperCall_0.apply(this, arguments);
				}
				else if(Exception.throwNoSuperCall) {
					return Exception.throwNoSuperCall.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotAbstractClass_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" is abstract but the class \"" + className + "\" is not", node);
			},
			throwNotAbstractClass: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwNotAbstractClass_0.apply(this, arguments);
				}
				else if(Exception.throwNotAbstractClass) {
					return Exception.throwNotAbstractClass.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotBinary_0: function(tag, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(tag === void 0 || tag === null) {
					throw new TypeError("'tag' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Binary file can't use \"" + tag + "\" statement", node);
			},
			throwNotBinary: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotBinary_0.apply(this, arguments);
				}
				else if(Exception.throwNotBinary) {
					return Exception.throwNotBinary.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleConstructor_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parent's constructor of class \"" + name + "\" can't be called", node);
			},
			throwNotCompatibleConstructor: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotCompatibleConstructor_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleConstructor) {
					return Exception.throwNotCompatibleConstructor.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotNamedParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter must be named", node);
			},
			throwNotNamedParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotNamedParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNotNamedParameter) {
					return Exception.throwNotNamedParameter.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotOverloadableFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Variable \"" + name + "\" is not an overloadable function", node);
			},
			throwNotOverloadableFunction: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotOverloadableFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotOverloadableFunction) {
					return Exception.throwNotOverloadableFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotSealedOverwrite_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("A method can be overwritten only in a sealed class", node);
			},
			throwNotSealedOverwrite: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotSealedOverwrite_0.apply(this, arguments);
				}
				else if(Exception.throwNotSealedOverwrite) {
					return Exception.throwNotSealedOverwrite.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwReservedClassMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class method \"" + name + "\" is reserved", node);
			},
			throwReservedClassMethod: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwReservedClassMethod_0.apply(this, arguments);
				}
				else if(Exception.throwReservedClassMethod) {
					return Exception.throwReservedClassMethod.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwReservedClassVariable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class variable \"" + name + "\" is reserved", node);
			},
			throwReservedClassVariable: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwReservedClassVariable_0.apply(this, arguments);
				}
				else if(Exception.throwReservedClassVariable) {
					return Exception.throwReservedClassVariable.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwTooMuchAttributesForIfAttribute_0: function() {
				throw new SyntaxException("Expected 1 argument for 'if' attribute");
			},
			throwTooMuchAttributesForIfAttribute: function() {
				if(arguments.length === 0) {
					return SyntaxException.__ks_sttc_throwTooMuchAttributesForIfAttribute_0.apply(this);
				}
				else if(Exception.throwTooMuchAttributesForIfAttribute) {
					return Exception.throwTooMuchAttributesForIfAttribute.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwTooMuchRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Rest parameter has already been declared", node);
			},
			throwTooMuchRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwTooMuchRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwTooMuchRestParameter) {
					return Exception.throwTooMuchRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedAlias_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Alias \"@" + name + "\" is expected in an instance method/variable", node);
			},
			throwUnexpectedAlias: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwUnexpectedAlias_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedAlias) {
					return Exception.throwUnexpectedAlias.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUndefinedFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The function \"" + name + "\" can't be found", node);
			},
			throwUndefinedFunction: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwUndefinedFunction_0.apply(this, arguments);
				}
				else if(Exception.throwUndefinedFunction) {
					return Exception.throwUndefinedFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnmatchedMacro_0: function(name, node, data) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				throw new SyntaxException("The macro \"" + name + "\" can't be matched", node, data);
			},
			throwUnmatchedMacro: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwUnmatchedMacro_0.apply(this, arguments);
				}
				else if(Exception.throwUnmatchedMacro) {
					return Exception.throwUnmatchedMacro.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnnamedWildcardImport_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Wilcard import can't be named", node);
			},
			throwUnnamedWildcardImport: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwUnnamedWildcardImport_0.apply(this, arguments);
				}
				else if(Exception.throwUnnamedWildcardImport) {
					return Exception.throwUnnamedWildcardImport.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnreportedError_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("An error is unreported, it must be caught or declared to be thrown", node);
			},
			__ks_sttc_throwUnreportedError_1: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("An error \"" + name + "\" is unreported, it must be caught or declared to be thrown", node);
			},
			throwUnreportedError: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwUnreportedError_0.apply(this, arguments);
				}
				else if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwUnreportedError_1.apply(this, arguments);
				}
				else if(Exception.throwUnreportedError) {
					return Exception.throwUnreportedError.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var TypeException = KSHelper.class({
		$name: "TypeException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwCannotBeInstantiated_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Class \"" + name + "\" is abstract so it can't be instantiated", node);
			},
			throwCannotBeInstantiated: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwCannotBeInstantiated_0.apply(this, arguments);
				}
				else if(Exception.throwCannotBeInstantiated) {
					return Exception.throwCannotBeInstantiated.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwConstructorWithoutNew_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Class constructor \"" + name + "\" cannot be invoked without 'new'", node);
			},
			throwConstructorWithoutNew: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwConstructorWithoutNew_0.apply(this, arguments);
				}
				else if(Exception.throwConstructorWithoutNew) {
					return Exception.throwConstructorWithoutNew.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwExpectedReturnedValue_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("A value is expected to be returned", node);
			},
			throwExpectedReturnedValue: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwExpectedReturnedValue_0.apply(this, arguments);
				}
				else if(Exception.throwExpectedReturnedValue) {
					return Exception.throwExpectedReturnedValue.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwExpectedThrownError_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("An error is expected to be thrown", node);
			},
			throwExpectedThrownError: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwExpectedThrownError_0.apply(this, arguments);
				}
				else if(Exception.throwExpectedThrownError) {
					return Exception.throwExpectedThrownError.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwImplFieldToSealedType_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("impl can add field to only non-sealed type", node);
			},
			throwImplFieldToSealedType: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwImplFieldToSealedType_0.apply(this, arguments);
				}
				else if(Exception.throwImplFieldToSealedType) {
					return Exception.throwImplFieldToSealedType.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwImplInvalidType_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("impl has an invalid type", node);
			},
			throwImplInvalidType: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwImplInvalidType_0.apply(this, arguments);
				}
				else if(Exception.throwImplInvalidType) {
					return Exception.throwImplInvalidType.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalid_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Invalid type \"" + name + "\"", node);
			},
			throwInvalid: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwInvalid_0.apply(this, arguments);
				}
				else if(Exception.throwInvalid) {
					return Exception.throwInvalid.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidAssignement_0: function(name, declaredType, valueType, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(declaredType === void 0 || declaredType === null) {
					throw new TypeError("'declaredType' is not nullable");
				}
				else if(!KSType.isInstance(declaredType, Type)) {
					throw new TypeError("'declaredType' is not of type 'Type'");
				}
				if(valueType === void 0 || valueType === null) {
					throw new TypeError("'valueType' is not nullable");
				}
				else if(!KSType.isInstance(valueType, Type)) {
					throw new TypeError("'valueType' is not of type 'Type'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(valueType.isNull() === true) {
					throw new TypeException("The variable \"" + name + "\" of type " + declaredType.toQuote(true) + " can't be assigned with the value \"null\"", node);
				}
				else {
					throw new TypeException("The variable \"" + name + "\" of type " + declaredType.toQuote(true) + " can't be assigned with a value of type " + valueType.toQuote(true), node);
				}
			},
			__ks_sttc_throwInvalidAssignement_1: function(name, declaredType, valueType, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isInstance(name, AbstractNode)) {
					throw new TypeError("'name' is not of type 'AbstractNode'");
				}
				if(declaredType === void 0 || declaredType === null) {
					throw new TypeError("'declaredType' is not nullable");
				}
				else if(!KSType.isInstance(declaredType, Type)) {
					throw new TypeError("'declaredType' is not of type 'Type'");
				}
				if(valueType === void 0 || valueType === null) {
					throw new TypeError("'valueType' is not nullable");
				}
				else if(!KSType.isInstance(valueType, Type)) {
					throw new TypeError("'valueType' is not of type 'Type'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(valueType.isNull() === true) {
					throw new TypeException("The variable " + name.toQuote(true) + " of type " + declaredType.toQuote(true) + " can't be assigned with the value \"null\"", node);
				}
				else {
					throw new TypeException("The variable " + name.toQuote(true) + " of type " + declaredType.toQuote(true) + " can't be assigned with a value of type " + valueType.toQuote(true), node);
				}
			},
			throwInvalidAssignement: function() {
				if(arguments.length === 4) {
					if(KSType.isString(arguments[0])) {
						return TypeException.__ks_sttc_throwInvalidAssignement_0.apply(this, arguments);
					}
					else {
						return TypeException.__ks_sttc_throwInvalidAssignement_1.apply(this, arguments);
					}
				}
				else if(Exception.throwInvalidAssignement) {
					return Exception.throwInvalidAssignement.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidBinding_0: function(expected, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expected === void 0 || expected === null) {
					throw new TypeError("'expected' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The binding is expected to be of type \"" + expected + "\"", node);
			},
			throwInvalidBinding: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwInvalidBinding_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidBinding) {
					return Exception.throwInvalidBinding.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidCasting_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Only variables can be casted", node);
			},
			throwInvalidCasting: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidCasting_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidCasting) {
					return Exception.throwInvalidCasting.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidCondition_0: function(expression, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The condition " + expression.toQuote(true) + " is expected to be of type \"Boolean\" or \"Any\" and not of type " + expression.type().toQuote(true), node);
			},
			throwInvalidCondition: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwInvalidCondition_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidCondition) {
					return Exception.throwInvalidCondition.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidForInExpression_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("\"for..in\" must be used with an array", node);
			},
			throwInvalidForInExpression: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidForInExpression_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidForInExpression) {
					return Exception.throwInvalidForInExpression.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidForOfExpression_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("\"for..of\" must be used with a dictionary", node);
			},
			throwInvalidForOfExpression: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidForOfExpression_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidForOfExpression) {
					return Exception.throwInvalidForOfExpression.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidOperand_0: function(expression, operator, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The expression " + expression.toQuote(true) + " of type " + expression.type().toQuote(true) + " is expected to be of type \"" + $operatorTypes[operator].join("\", \"") + "\" or \"Any\" in a " + operator + " operation", node);
			},
			throwInvalidOperand: function() {
				if(arguments.length === 3) {
					return TypeException.__ks_sttc_throwInvalidOperand_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidOperand) {
					return Exception.throwInvalidOperand.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidSpread_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Spread operator require an array", node);
			},
			throwInvalidSpread: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidSpread_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidSpread) {
					return Exception.throwInvalidSpread.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwInvalidTypeChecking_0: function(left, right, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(left === void 0 || left === null) {
					throw new TypeError("'left' is not nullable");
				}
				if(right === void 0 || right === null) {
					throw new TypeError("'right' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The variable of type " + left.toQuote(true) + " can never be of type " + right.toQuote(true), node);
			},
			throwInvalidTypeChecking: function() {
				if(arguments.length === 3) {
					return TypeException.__ks_sttc_throwInvalidTypeChecking_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidTypeChecking) {
					return Exception.throwInvalidTypeChecking.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotAlien_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The type \"" + name + "\" must be declared externally", node);
			},
			throwNotAlien: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotAlien_0.apply(this, arguments);
				}
				else if(Exception.throwNotAlien) {
					return Exception.throwNotAlien.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotAsyncFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The function \"" + name + "\" is not asynchronous", node);
			},
			throwNotAsyncFunction: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotAsyncFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotAsyncFunction) {
					return Exception.throwNotAsyncFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotClass_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Identifier \"" + name + "\" is not a class", node);
			},
			throwNotClass: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotClass_0.apply(this, arguments);
				}
				else if(Exception.throwNotClass) {
					return Exception.throwNotClass.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleArgument_0: function(varname, argname, modname, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(varname === void 0 || varname === null) {
					throw new TypeError("'varname' is not nullable");
				}
				if(argname === void 0 || argname === null) {
					throw new TypeError("'argname' is not nullable");
				}
				if(modname === void 0 || modname === null) {
					throw new TypeError("'modname' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The variable \"" + varname + "\" and the argument \"" + argname + "\" of the module \"" + modname + "\" aren't compatible", node);
			},
			throwNotCompatibleArgument: function() {
				if(arguments.length === 4) {
					return TypeException.__ks_sttc_throwNotCompatibleArgument_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleArgument) {
					return Exception.throwNotCompatibleArgument.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleDefinition_0: function(varname, argname, modname, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(varname === void 0 || varname === null) {
					throw new TypeError("'varname' is not nullable");
				}
				if(argname === void 0 || argname === null) {
					throw new TypeError("'argname' is not nullable");
				}
				if(modname === void 0 || modname === null) {
					throw new TypeError("'modname' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The definition for \"" + varname + "\" and the variable \"" + argname + "\" of the module \"" + modname + "\" aren't compatible", node);
			},
			throwNotCompatibleDefinition: function() {
				if(arguments.length === 4) {
					return TypeException.__ks_sttc_throwNotCompatibleDefinition_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleDefinition) {
					return Exception.throwNotCompatibleDefinition.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotEnum_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Identifier \"" + name + "\" is not an enum", node);
			},
			throwNotEnum: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotEnum_0.apply(this, arguments);
				}
				else if(Exception.throwNotEnum) {
					return Exception.throwNotEnum.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotNamespace_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Identifier \"" + name + "\" is not a namespace", node);
			},
			throwNotNamespace: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotNamespace_0.apply(this, arguments);
				}
				else if(Exception.throwNotNamespace) {
					return Exception.throwNotNamespace.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotNullableExistential_0: function(expression, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The existentiality test of " + expression.toQuote(true) + " is always positive", node);
			},
			throwNotNullableExistential: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotNullableExistential_0.apply(this, arguments);
				}
				else if(Exception.throwNotNullableExistential) {
					return Exception.throwNotNullableExistential.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotNullableOperand_0: function(expression, operator, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The operand " + expression.toQuote(true) + " can't be nullable in a " + operator + " operation", node);
			},
			throwNotNullableOperand: function() {
				if(arguments.length === 3) {
					return TypeException.__ks_sttc_throwNotNullableOperand_0.apply(this, arguments);
				}
				else if(Exception.throwNotNullableOperand) {
					return Exception.throwNotNullableOperand.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNotSyncFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The function \"" + name + "\" is not synchronous", node);
			},
			throwNotSyncFunction: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotSyncFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotSyncFunction) {
					return Exception.throwNotSyncFunction.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNullableCaller_0: function(property, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(property === void 0 || property === null) {
					throw new TypeError("'property' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The caller of \"" + property + "\" can't be nullable", node);
			},
			throwNullableCaller: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNullableCaller_0.apply(this, arguments);
				}
				else if(Exception.throwNullableCaller) {
					return Exception.throwNullableCaller.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNullTypeChecking_0: function(type, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The variable is \"null\" and can't be checked against the type " + type.toQuote(true), node);
			},
			throwNullTypeChecking: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNullTypeChecking_0.apply(this, arguments);
				}
				else if(Exception.throwNullTypeChecking) {
					return Exception.throwNullTypeChecking.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwNullTypeVariable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The variable \"" + name + "\" can't be of type \"Null\"", node);
			},
			throwNullTypeVariable: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNullTypeVariable_0.apply(this, arguments);
				}
				else if(Exception.throwNullTypeVariable) {
					return Exception.throwNullTypeVariable.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwRequireClass_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("An instance is required", node);
			},
			throwRequireClass: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwRequireClass_0.apply(this, arguments);
				}
				else if(Exception.throwRequireClass) {
					return Exception.throwRequireClass.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedExportType_0: function(name, expected, unexpected, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(expected === void 0 || expected === null) {
					throw new TypeError("'expected' is not nullable");
				}
				if(unexpected === void 0 || unexpected === null) {
					throw new TypeError("'unexpected' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The type of export \"" + name + "\" must be " + expected.toQuote(true) + " and not " + unexpected.toQuote(true), node);
			},
			throwUnexpectedExportType: function() {
				if(arguments.length === 4) {
					return TypeException.__ks_sttc_throwUnexpectedExportType_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedExportType) {
					return Exception.throwUnexpectedExportType.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedInoperative_0: function(operand, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operand === void 0 || operand === null) {
					throw new TypeError("'operand' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The operand " + operand.toQuote(true) + " can't be of type " + operand.type().toQuote(true), node);
			},
			throwUnexpectedInoperative: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwUnexpectedInoperative_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedInoperative) {
					return Exception.throwUnexpectedInoperative.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedReturnedValue_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("No values are expected to be returned", node);
			},
			throwUnexpectedReturnedValue: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwUnexpectedReturnedValue_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedReturnedValue) {
					return Exception.throwUnexpectedReturnedValue.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedReturnType_0: function(expected, unexpected, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expected === void 0 || expected === null) {
					throw new TypeError("'expected' is not nullable");
				}
				if(unexpected === void 0 || unexpected === null) {
					throw new TypeError("'unexpected' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The return type must be " + expected.toQuote(true) + " and not " + unexpected.toQuote(true), node);
			},
			throwUnexpectedReturnType: function() {
				if(arguments.length === 3) {
					return TypeException.__ks_sttc_throwUnexpectedReturnType_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedReturnType) {
					return Exception.throwUnexpectedReturnType.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_throwUnnecessaryTypeChecking_0: function(type, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The variable is always of type " + type.toQuote(true), node);
			},
			throwUnnecessaryTypeChecking: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwUnnecessaryTypeChecking_0.apply(this, arguments);
				}
				else if(Exception.throwUnnecessaryTypeChecking) {
					return Exception.throwUnnecessaryTypeChecking.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var $extensions = (function() {
		var d = new Dictionary();
		d.binary = ".ksb";
		d.hash = ".ksh";
		d.metadata = ".ksm";
		d.source = ".ks";
		return d;
	})();
	var $targetRegex = /^(\w+)-v((?:\d+)(?:\.\d+)?(?:\.\d+)?)$/;
	var $typeofs = (function() {
		var d = new Dictionary();
		d.Array = true;
		d.Boolean = true;
		d.Class = true;
		d.Dictionary = true;
		d.Enum = true;
		d.Function = true;
		d.Namespace = true;
		d.Number = true;
		d.Object = true;
		d.Primitive = true;
		d.RegExp = true;
		d.String = true;
		d.Struct = true;
		return d;
	})();
	var $ast = (function() {
		var d = new Dictionary();
		d.block = function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(KSHelper.valueOf(data.kind) === NodeKind.Block.value) {
				return data;
			}
			else {
				return (function() {
					var d = new Dictionary();
					d.kind = NodeKind.Block;
					d.statements = [data];
					d.start = data.start;
					d.end = data.end;
					return d;
				})();
			}
		};
		d.body = function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0) {
				data = null;
			}
			if(!KSType.isValue(data.body)) {
				return (function() {
					var d = new Dictionary();
					d.kind = NodeKind.Block;
					d.statements = [];
					d.start = data.start;
					d.end = data.end;
					return d;
				})();
			}
			else if((KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) || (KSHelper.valueOf(data.body.kind) === NodeKind.ReturnStatement.value)) {
				return data.body;
			}
			else if((KSHelper.valueOf(data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(data.body.kind) === NodeKind.UnlessStatement.value)) {
				return (function() {
					var d = new Dictionary();
					d.kind = NodeKind.Block;
					d.statements = [data.body];
					d.start = data.body.start;
					d.end = data.body.end;
					return d;
				})();
			}
			else {
				return (function() {
					var d = new Dictionary();
					d.kind = NodeKind.ReturnStatement;
					d.value = data.body;
					d.start = data.body.start;
					d.end = data.body.end;
					return d;
				})();
			}
		};
		d.identifier = function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(name)) {
				return (function() {
					var d = new Dictionary();
					d.kind = NodeKind.Identifier;
					d.name = name;
					return d;
				})();
			}
			else {
				return name;
			}
		};
		return d;
	})();
	var $runtime = (function() {
		var d = new Dictionary();
		d.dictionary = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Dictionary") : null;
			return node._options.runtime.dictionary.alias;
		};
		d.getVariable = function(name, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if((node._options.runtime.dictionary.alias === name) || ((node.isIncluded() === true) && (name === "Dictionary"))) {
				KSType.isFunction(node.module) ? node.module().flag("Dictionary") : null;
				return node._options.runtime.dictionary.alias;
			}
			else if((node._options.runtime.helper.alias === name) || ((node.isIncluded() === true) && (name === "Helper"))) {
				KSType.isFunction(node.module) ? node.module().flag("Helper") : null;
				return node._options.runtime.helper.alias;
			}
			else if((node._options.runtime.type.alias === name) || ((node.isIncluded() === true) && (name === "Type"))) {
				KSType.isFunction(node.module) ? node.module().flag("Type") : null;
				return node._options.runtime.type.alias;
			}
			else {
				return null;
			}
		};
		d.helper = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Helper") : null;
			return node._options.runtime.helper.alias;
		};
		d.initFlag = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("initFlag") : null;
			return node._options.runtime.initFlag.alias;
		};
		d.operator = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Operator") : null;
			return node._options.runtime.operator.alias;
		};
		d.scope = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (node._options.format.variables === "es5") ? "var " : "let ";
		};
		d.type = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Type") : null;
			return node._options.runtime.type.alias;
		};
		d.typeof = function(type, node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(node === void 0) {
				node = null;
			}
			if(KSType.isValue(node)) {
				if($typeofs[type] === true) {
					return KSHelper.concatString($runtime.type(node), ".is", type);
				}
				else {
					return null;
				}
			}
			else {
				return $typeofs[type];
			}
		};
		return d;
	})();
	var AbstractNode = KSHelper.class({
		$name: "AbstractNode",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._parent = null;
			this._scope = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = KSType.isValue(parent) ? parent.scope() : null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			this._data = data;
			this._parent = parent;
			this._scope = scope;
			this._options = parent._options;
		},
		__ks_cons_2: function(data, parent, scope, kind) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			else if(!KSType.isEnumMember(kind, ScopeType)) {
				throw new TypeError("'kind' is not of type 'ScopeType'");
			}
			this._data = data;
			this._parent = parent;
			this._options = parent._options;
			this._scope = this.newScope(scope, kind);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				AbstractNode.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 2 || args.length === 3) {
				AbstractNode.prototype.__ks_cons_1.apply(this, args);
			}
			else if(args.length === 4) {
				AbstractNode.prototype.__ks_cons_2.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_data_0: function() {
			return this._data;
		},
		data: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_data_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._parent.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_directory_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._parent.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_file_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._parent.isConsumedError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isIncluded_0: function() {
			return this.file() !== this.module().file();
		},
		isIncluded: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_isIncluded_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._parent.module();
		},
		module: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_module_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newScope_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isEnumMember(type, ScopeType)) {
				throw new TypeError("'type' is not of type 'ScopeType'");
			}
			if(type === ScopeType.Bleeding) {
				return new BleedingScope(scope);
			}
			else if(type === ScopeType.Block) {
				return new BlockScope(scope);
			}
			else if(type === ScopeType.Function) {
				return new FunctionScope(scope);
			}
			else if(type === ScopeType.Hollow) {
				return new HollowScope(scope);
			}
			else if(type === ScopeType.InlineBlock) {
				if(this._options.format.variables === "es6") {
					return new InlineBlockScope(scope);
				}
				else {
					return new LaxInlineBlockScope(scope);
				}
			}
			else if(type === ScopeType.Operation) {
				return new OperationScope(scope);
			}
		},
		newScope: function() {
			if(arguments.length === 2) {
				return AbstractNode.prototype.__ks_func_newScope_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_parent_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			if(KSType.isValue(this._parent) && KSType.isValue(this._parent.reference())) {
				return KSOperator.addOrConcat(this._parent.reference(), this._reference);
			}
			else {
				return this._reference;
			}
		},
		__ks_func_reference_1: function(reference) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(reference === void 0 || reference === null) {
				throw new TypeError("'reference' is not nullable");
			}
			this._reference = reference;
		},
		reference: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_reference_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_reference_1.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return KSType.isValue(this._parent) ? this._parent.statement() : null;
		},
		statement: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_statement_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AttributeData = KSHelper.enum(Number, {
		Conditional: 0
	});
	var AttributeTarget = KSHelper.enum(Number, {
		Class: 1,
		Conditional: 2,
		Constructor: 4,
		Field: 8,
		Global: 16,
		Method: 32,
		Property: 64,
		Statement: 128
	});
	var $attributes = new Dictionary();
	var $semverRegex = /^(\w+)(?:-v((?:\d+)(?:\.\d+)?(?:\.\d+)?))?$/;
	var Attribute = KSHelper.class({
		$name: "Attribute",
		$static: {
			__ks_sttc_conditional_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(KSType.isValue(data.attributes) ? KSOperator.gt(data.attributes.length, 0) : false) {
					for(var __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
						attr = data.attributes[__ks_0];
						var attribute = Attribute.get(attr.declaration, AttributeTarget.Conditional);
						if(KSType.isValue(attribute)) {
							return attribute.evaluate(node);
						}
					}
				}
				return true;
			},
			conditional: function() {
				if(arguments.length === 2) {
					return Attribute.__ks_sttc_conditional_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_configure_0: function(data, options, mode, force) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(options === void 0) {
					options = null;
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(force === void 0 || force === null) {
					force = false;
				}
				var clone = !(force === true) && (options !== null) && (KSOperator.bitwiseAnd(AttributeTarget.Global, mode) === 0);
				if(options === null) {
					options = (function() {
						var d = new Dictionary();
						d.rules = new Dictionary();
						return d;
					})();
				}
				if(KSType.isValue(data.attributes) ? KSOperator.gt(data.attributes.length, 0) : false) {
					var cloned = new Dictionary();
					if(force === true) {
						options = __ks_Dictionary._cm_clone(options);
					}
					else if(clone) {
						var original = options;
						options = new Dictionary();
						for(var key in original) {
							var value = original[key];
							options[key] = value;
						}
					}
					for(var __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
						attr = data.attributes[__ks_0];
						var attribute = Attribute.get(attr.declaration, mode);
						if(KSType.isValue(attribute)) {
							if(clone) {
								options = attribute.clone(options, cloned);
							}
							options = attribute.configure(options);
						}
					}
				}
				return options;
			},
			configure: function() {
				if(arguments.length >= 3 && arguments.length <= 4) {
					return Attribute.__ks_sttc_configure_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_get_0: function(data, targets) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				var name = null;
				if(KSHelper.valueOf(data.kind) === NodeKind.AttributeExpression.value) {
					name = data.name.name;
				}
				else if(KSHelper.valueOf(data.kind) === NodeKind.Identifier.value) {
					name = data.name;
				}
				var clazz;
				if(KSType.isValue(name) && (KSType.isValue($attributes[name]) ? (clazz = $attributes[name], true) : false) && KSOperator.gt(KSOperator.bitwiseAnd(clazz.target(), targets), 0)) {
					return new clazz(data);
				}
				else {
					return null;
				}
			},
			get: function() {
				if(arguments.length === 2) {
					return Attribute.__ks_sttc_get_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_register_0: function(__ks_class_1) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				else if(!KSType.isClass(__ks_class_1)) {
					throw new TypeError("'class' is not of type 'Class'");
				}
				var name = __ks_class_1.name.toLowerCase();
				if(KSOperator.gt(name.length, 9) && (name.substr(-9) === "attribute")) {
					name = name.substr(0, KSOperator.subtraction(name.length, 9));
				}
				$attributes[name] = __ks_class_1;
			},
			register: function() {
				if(arguments.length === 1) {
					return Attribute.__ks_sttc_register_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("Wrong number of arguments");
			}
		}
	});
	var ElseAttribute = KSHelper.class({
		$name: "ElseAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Conditional;
			},
			target: function() {
				if(arguments.length === 0) {
					return ElseAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ElseAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return ElseAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_evaluate_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var flag = node.getAttributeData(AttributeData.Conditional);
			if(KSType.isValue(flag)) {
				return !(flag === true);
			}
			else {
				SyntaxException.throwNoIfAttribute();
			}
		},
		evaluate: function() {
			if(arguments.length === 1) {
				return ElseAttribute.prototype.__ks_func_evaluate_0.apply(this, arguments);
			}
			else if(Attribute.prototype.evaluate) {
				return Attribute.prototype.evaluate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ErrorAttribute = KSHelper.class({
		$name: "ErrorAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Property | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return ErrorAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ErrorAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			if(!KSType.isValue(cloned.error)) {
				options.error = __ks_Dictionary._cm_clone(options.error);
				cloned.error = true;
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return ErrorAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				var __ks_2 = arg.kind.valueOf();
				if(__ks_2 === NodeKind.AttributeExpression.value) {
					if(arg.name.name === "ignore") {
						for(var __ks_3 = 0, __ks_4 = arg.arguments.length, a; __ks_3 < __ks_4; ++__ks_3) {
							a = arg.arguments[__ks_3];
							options.error.ignore.push(a.name);
						}
					}
					else if(arg.name.name === "raise") {
						for(var __ks_3 = 0, __ks_4 = arg.arguments.length, a; __ks_3 < __ks_4; ++__ks_3) {
							a = arg.arguments[__ks_3];
							options.error.raise.push(a.name);
						}
					}
				}
				else if(__ks_2 === NodeKind.Identifier.value) {
					var __ks_3 = arg.name;
					if(__ks_3 === "off") {
						options.error.level = "off";
					}
				}
			}
			return options;
		},
		configure: function() {
			if(arguments.length === 1) {
				return ErrorAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FormatAttribute = KSHelper.class({
		$name: "FormatAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return FormatAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FormatAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			if(!KSType.isValue(cloned.format)) {
				options.format = __ks_Dictionary._cm_clone(options.format);
				cloned.format = true;
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return FormatAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeOperation.value) {
					options.format[arg.name.name] = arg.value.value;
				}
			}
			return options;
		},
		configure: function() {
			if(arguments.length === 1) {
				return FormatAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var IfAttribute = KSHelper.class({
		$name: "IfAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Conditional;
			},
			target: function() {
				if(arguments.length === 0) {
					return IfAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				IfAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return IfAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compareVersion_0: function(a, b) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(a === void 0 || a === null) {
				throw new TypeError("'a' is not nullable");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			a = a.split(".");
			b = b.split(".");
			var ai = parseInt(a[0]);
			var bi = parseInt(b[0]);
			if(KSOperator.lt(ai, bi)) {
				return -1;
			}
			else if(KSOperator.gt(ai, bi)) {
				return 1;
			}
			else {
				ai = (a.length === 1) ? 0 : parseInt(a[1]);
				bi = (b.length === 1) ? 0 : parseInt(b[1]);
				if(KSOperator.lt(ai, bi)) {
					return -1;
				}
				else if(KSOperator.gt(ai, bi)) {
					return 1;
				}
				else {
					return 0;
				}
			}
		},
		compareVersion: function() {
			if(arguments.length === 2) {
				return IfAttribute.prototype.__ks_func_compareVersion_0.apply(this, arguments);
			}
			else if(Attribute.prototype.compareVersion) {
				return Attribute.prototype.compareVersion.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_evaluate_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._data.arguments.length !== 1) {
				SyntaxException.throwTooMuchAttributesForIfAttribute();
			}
			var flag = this.evaluate(this._data.arguments[0], node.target());
			node.setAttributeData(AttributeData.Conditional, flag);
			return flag;
		},
		__ks_func_evaluate_1: function(data, target) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(KSHelper.valueOf(data.kind) === NodeKind.AttributeExpression.value) {
				var __ks_0 = data.name.name;
				if(__ks_0 === "all") {
					for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(!(this.evaluate(arg, target) === true)) {
							return false;
						}
					}
					return true;
				}
				else if(__ks_0 === "any") {
					for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(this.evaluate(arg, target) === true) {
							return true;
						}
					}
					return false;
				}
				else if(__ks_0 === "gt") {
					var match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if((match[1] !== target.name) || !KSType.isValue(match[2])) {
							return false;
						}
						return KSOperator.gt(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "gte") {
					var match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if(match[1] !== target.name) {
							return false;
						}
						else if(!KSType.isValue(match[2])) {
							return true;
						}
						return KSOperator.gte(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "lt") {
					var match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if((match[1] !== target.name) || !KSType.isValue(match[2])) {
							return false;
						}
						return KSOperator.lt(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "lte") {
					var match = $semverRegex.exec(data.arguments[0].name);
					if(KSType.isValue(match)) {
						if(match[1] !== target.name) {
							return false;
						}
						else if(!KSType.isValue(match[2])) {
							return true;
						}
						return KSOperator.lte(this.compareVersion(target.version, match[2]), 0);
					}
					else {
						return false;
					}
				}
				else if(__ks_0 === "none") {
					for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(this.evaluate(arg, target) === true) {
							return false;
						}
					}
					return true;
				}
				else if(__ks_0 === "one") {
					var count = 0;
					for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
						arg = data.arguments[__ks_1];
						if(this.evaluate(arg, target) === true) {
							++count;
						}
					}
					return count === 1;
				}
				else {
					console.info(data);
					throw new NotImplementedException();
				}
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.Identifier.value) {
				var match, __ks_0;
				if(KSType.isValue(__ks_0 = $semverRegex.exec(data.name)) ? (match = __ks_0, true) : false) {
					if(KSType.isValue(match[2])) {
						return (target.name === match[1]) && (target.version === match[2]);
					}
					else {
						return target.name === match[1];
					}
				}
				else {
					return false;
				}
			}
		},
		evaluate: function() {
			if(arguments.length === 1) {
				return IfAttribute.prototype.__ks_func_evaluate_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return IfAttribute.prototype.__ks_func_evaluate_1.apply(this, arguments);
			}
			else if(Attribute.prototype.evaluate) {
				return Attribute.prototype.evaluate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ParseAttribute = KSHelper.class({
		$name: "ParseAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return ParseAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ParseAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			if(!KSType.isValue(cloned.parse)) {
				options.parse = __ks_Dictionary._cm_clone(options.parse);
				cloned.parse = true;
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return ParseAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeOperation.value) {
					options.parse[arg.name.name] = arg.value.value;
				}
			}
			return options;
		},
		configure: function() {
			if(arguments.length === 1) {
				return ParseAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RulesAttribute = KSHelper.class({
		$name: "RulesAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Property | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return RulesAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				RulesAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			if(!KSType.isValue(cloned.rules)) {
				options.rules = __ks_Dictionary._cm_clone(options.rules);
				cloned.rules = true;
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return RulesAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(argument.kind) === NodeKind.Identifier.value) {
					var name = argument.name.toLowerCase().replace(/[-_\s]+(.)/g, function(m, l) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(m === void 0 || m === null) {
							throw new TypeError("'m' is not nullable");
						}
						if(l === void 0 || l === null) {
							throw new TypeError("'l' is not nullable");
						}
						return l.toUpperCase();
					});
					options.rules[name] = true;
				}
			}
			return options;
		},
		configure: function() {
			if(arguments.length === 1) {
				return RulesAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RuntimeAttribute = KSHelper.class({
		$name: "RuntimeAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global;
			},
			target: function() {
				if(arguments.length === 0) {
					return RuntimeAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				RuntimeAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeOperation.value) {
					if(arg.name.name === "package") {
						options.runtime.helper.package = options.runtime.type.package = arg.value.value;
					}
					else if(arg.name.name === "prefix") {
						var prefix = arg.value.value;
						options.runtime.helper.alias = KSOperator.addOrConcat(prefix, options.runtime.helper.alias);
						options.runtime.operator.alias = KSOperator.addOrConcat(prefix, options.runtime.operator.alias);
						options.runtime.type.alias = KSOperator.addOrConcat(prefix, options.runtime.type.alias);
					}
				}
				else if(KSHelper.valueOf(arg.kind) === NodeKind.AttributeExpression.value) {
					if(arg.name.name === "helper") {
						for(var __ks_2 = 0, __ks_3 = arg.arguments.length, __ks_arg_1; __ks_2 < __ks_3; ++__ks_2) {
							__ks_arg_1 = arg.arguments[__ks_2];
							if(KSHelper.valueOf(__ks_arg_1.kind) === NodeKind.AttributeOperation.value) {
								var __ks_4 = __ks_arg_1.name.name;
								if(__ks_4 === "alias") {
									options.runtime.helper.alias = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.helper.member = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.helper.package = __ks_arg_1.value.value;
								}
							}
						}
					}
					else if(arg.name.name === "operator") {
						for(var __ks_2 = 0, __ks_3 = arg.arguments.length, __ks_arg_1; __ks_2 < __ks_3; ++__ks_2) {
							__ks_arg_1 = arg.arguments[__ks_2];
							if(KSHelper.valueOf(__ks_arg_1.kind) === NodeKind.AttributeOperation.value) {
								var __ks_4 = __ks_arg_1.name.name;
								if(__ks_4 === "alias") {
									options.runtime.operator.alias = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.operator.member = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.operator.package = __ks_arg_1.value.value;
								}
							}
						}
					}
					else if(arg.name.name === "type") {
						for(var __ks_2 = 0, __ks_3 = arg.arguments.length, __ks_arg_1; __ks_2 < __ks_3; ++__ks_2) {
							__ks_arg_1 = arg.arguments[__ks_2];
							if(KSHelper.valueOf(__ks_arg_1.kind) === NodeKind.AttributeOperation.value) {
								var __ks_4 = __ks_arg_1.name.name;
								if(__ks_4 === "alias") {
									options.runtime.type.alias = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.type.member = __ks_arg_1.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.type.package = __ks_arg_1.value.value;
								}
							}
						}
					}
				}
			}
			return options;
		},
		configure: function() {
			if(arguments.length === 1) {
				return RuntimeAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var TargetAttribute = KSHelper.class({
		$name: "TargetAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return TargetAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				TargetAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function(options, cloned) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			if(cloned === void 0 || cloned === null) {
				throw new TypeError("'cloned' is not nullable");
			}
			if(!KSType.isValue(cloned.target)) {
				options.target = __ks_Dictionary._cm_clone(options.target);
				cloned.target = true;
			}
			if(!KSType.isValue(cloned.parse)) {
				options.parse = __ks_Dictionary._cm_clone(options.parse);
				cloned.parse = true;
			}
			if(!KSType.isValue(cloned.format)) {
				options.format = __ks_Dictionary._cm_clone(options.format);
				cloned.format = true;
			}
			return options;
		},
		clone: function() {
			if(arguments.length === 2) {
				return TargetAttribute.prototype.__ks_func_clone_0.apply(this, arguments);
			}
			else if(Attribute.prototype.clone) {
				return Attribute.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if(KSHelper.valueOf(argument.kind) === NodeKind.Identifier.value) {
					var match, __ks_2;
					if(KSType.isValue(__ks_2 = $targetRegex.exec(argument.name)) ? (match = __ks_2, false) : true) {
						throw new Error("Invalid target syntax: " + argument.name);
					}
					options.target = (function() {
						var d = new Dictionary();
						d.name = match[1];
						d.version = match[2];
						return d;
					})();
					options = $expandOptions(options);
				}
			}
			return options;
		},
		configure: function() {
			if(arguments.length === 1) {
				return TargetAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	Attribute.register(ElseAttribute);
	Attribute.register(ErrorAttribute);
	Attribute.register(FormatAttribute);
	Attribute.register(IfAttribute);
	Attribute.register(ParseAttribute);
	Attribute.register(RulesAttribute);
	Attribute.register(RuntimeAttribute);
	Attribute.register(TargetAttribute);
	var Writer = KSHelper.class({
		$name: "Writer",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._cache = (function() {
				var d = new Dictionary();
				d.array = new Dictionary();
				d.block = new Dictionary();
				d.comment = new Dictionary();
				d.control = new Dictionary();
				d.expression = new Dictionary();
				d.indent = new Dictionary();
				d.line = new Dictionary();
				d.object = new Dictionary();
				return d;
			})();
			this._fragments = [];
		},
		__ks_init: function() {
			Writer.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(options) {
			if(options === void 0 || options === null) {
				options = new Dictionary();
			}
			this._options = __ks_Dictionary._cm_merge((function() {
				var d = new Dictionary();
				d.indent = (function() {
					var d = new Dictionary();
					d.level = 0;
					d.style = "tab";
					d.size = 4;
					return d;
				})();
				d.terminators = (function() {
					var d = new Dictionary();
					d.line = ";";
					d.list = ",";
					return d;
				})();
				d.classes = (function() {
					var d = new Dictionary();
					d.array = ArrayWriter;
					d.block = BlockWriter;
					d.comment = CommentWriter;
					d.control = ControlWriter;
					d.expression = ExpressionWriter;
					d.fragment = Fragment;
					d.line = LineWriter;
					d.mark = MarkWriter;
					d.object = ObjectWriter;
					return d;
				})();
				return d;
			})(), options);
			this._indent = this._options.indent.level;
			this.Array = this._options.classes.array;
			this.Block = this._options.classes.block;
			this.Comment = this._options.classes.comment;
			this.Control = this._options.classes.control;
			this.Expression = this._options.classes.expression;
			this.Fragment = this._options.classes.fragment;
			this.Line = this._options.classes.line;
			this.Mark = this._options.classes.mark;
			this.Object = this._options.classes.object;
			this.breakTerminator = this.newFragment("\n");
			this.lineTerminator = this.newFragment("" + this._options.terminators.line + "\n");
			this.listTerminator = this.newFragment("" + this._options.terminators.list + "\n");
		},
		__ks_cons: function(args) {
			if(args.length >= 0 && args.length <= 1) {
				Writer.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_comment_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newComment(this._indent), __ks_0.code).apply(__ks_0, args).done();
			return this;
		},
		comment: function() {
			return Writer.prototype.__ks_func_comment_0.apply(this, arguments);
		},
		__ks_func_insertAt_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			var args = Array.prototype.slice.call(arguments, 1, arguments.length);
			var l = this._fragments.length;
			this._fragments.splice.apply(this._fragments, [].concat([index, 0], args));
			return this._fragments.length - l;
		},
		insertAt: function() {
			return Writer.prototype.__ks_func_insertAt_0.apply(this, arguments);
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newLine(this._indent), __ks_0.code).apply(__ks_0, args).done();
			return this;
		},
		line: function() {
			return Writer.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_mark_0: function() {
			return new this.Mark(this, this._indent, this._fragments.length);
		},
		mark: function() {
			if(arguments.length === 0) {
				return Writer.prototype.__ks_func_mark_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newArray_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.array[indent])) {
				this._cache.array[indent] = new this.Array(this, indent);
			}
			return this._cache.array[indent].init();
		},
		newArray: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newArray_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newBlock_0: function(indent, breakable) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(breakable === void 0 || breakable === null) {
				breakable = false;
			}
			var key = "" + indent + "|" + breakable;
			if(!KSType.isValue(this._cache.block[key])) {
				this._cache.block[key] = new this.Block(this, indent, breakable);
			}
			return this._cache.block[key].init();
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 2) {
				return Writer.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newComment_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.comment[indent])) {
				this._cache.comment[indent] = new this.Comment(this, indent);
			}
			return this._cache.comment[indent].init();
		},
		newComment: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newComment_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			var key = "" + indent + "|" + initiator + "|" + terminator;
			if(!KSType.isValue(this._cache.control[key])) {
				this._cache.control[key] = new this.Control(this, indent, initiator, terminator);
			}
			return this._cache.control[key].init();
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 3) {
				return Writer.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newExpression_0: function(indent, initiator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			var key = "" + indent + "|" + initiator;
			if(!KSType.isValue(this._cache.expression[key])) {
				this._cache.expression[key] = new this.Expression(this, indent, initiator);
			}
			return this._cache.expression[key].init();
		},
		newExpression: function() {
			if(arguments.length >= 0 && arguments.length <= 2) {
				return Writer.prototype.__ks_func_newExpression_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newFragment_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return KSHelper.create(this.Fragment, args);
		},
		newFragment: function() {
			return Writer.prototype.__ks_func_newFragment_0.apply(this, arguments);
		},
		__ks_func_newIndent_0: function(indent) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			return KSType.isValue(this._cache.indent[indent]) ? this._cache.indent[indent] : this._cache.indent[indent] = new this.Fragment("\t".repeat(indent));
		},
		newIndent: function() {
			if(arguments.length === 1) {
				return Writer.prototype.__ks_func_newIndent_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.line[indent])) {
				this._cache.line[indent] = new this.Line(this, indent);
			}
			return this._cache.line[indent].init();
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newObject_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.object[indent])) {
				this._cache.object[indent] = new this.Object(this, indent);
			}
			return this._cache.object[indent].init();
		},
		newObject: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newObject_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_push_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._fragments.push.apply(this._fragments, args);
			return this;
		},
		push: function() {
			return Writer.prototype.__ks_func_push_0.apply(this, arguments);
		},
		__ks_func_toArray_0: function() {
			return this._fragments;
		},
		toArray: function() {
			if(arguments.length === 0) {
				return Writer.prototype.__ks_func_toArray_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var Fragment = KSHelper.class({
		$name: "Fragment",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(code) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			this.code = code;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Fragment.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_toString_0: function() {
			return this.code;
		},
		toString: function() {
			if(arguments.length === 0) {
				return Fragment.prototype.__ks_func_toString_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ArrayWriter = KSHelper.class({
		$name: "ArrayWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._line = null;
		},
		__ks_init: function() {
			ArrayWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ArrayWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._line = null;
				this._writer.push(this._writer.newFragment("\n"), this._writer.newIndent(this._indent), this._writer.newFragment("]"));
			}
			else {
				this._writer.push(this._writer.newFragment("]"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._writer.push(this._writer.newFragment("["));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newLine(), __ks_0.code).apply(__ks_0, args);
			return this;
		},
		line: function() {
			return ArrayWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(",\n"));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newControl(this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newExpression(this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BlockWriter = KSHelper.class({
		$name: "BlockWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._undone = true;
		},
		__ks_init: function() {
			BlockWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent, breakable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			if(breakable === void 0 || breakable === null) {
				breakable = false;
			}
			else if(!KSType.isBoolean(breakable)) {
				throw new TypeError("'breakable' is not of type 'Boolean'");
			}
			this._writer = writer;
			this._indent = indent;
			this._breakable = breakable;
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				BlockWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.newIndent(this._indent), this._writer.newFragment("}"));
				if(this._breakable) {
					this._writer.push(this._writer.breakTerminator);
				}
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return BlockWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			if(this._breakable) {
				this._writer.push(this._writer.newIndent(this._indent), this._writer.newFragment("{\n"));
			}
			else {
				this._writer.push(this._writer.newFragment(" {\n"));
			}
			this._undone = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return BlockWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this._writer.newLine(this._indent + 1), __ks_0.code).apply(__ks_0, args).done();
			return this;
		},
		line: function() {
			return BlockWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newBlock_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newBlock(indent, true);
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockWriter.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 3) {
				return BlockWriter.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newLine(indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockWriter.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ControlWriter = KSHelper.class({
		$name: "ControlWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._firstStep = true;
		},
		__ks_init: function() {
			ControlWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent, initiator, terminator) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			else if(!KSType.isBoolean(initiator)) {
				throw new TypeError("'initiator' is not of type 'Boolean'");
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			else if(!KSType.isBoolean(terminator)) {
				throw new TypeError("'terminator' is not of type 'Boolean'");
			}
			this._writer = writer;
			this._indent = indent;
			this._initiator = initiator;
			this._terminator = terminator;
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 4) {
				ControlWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.code.apply(this._step, args);
			return this;
		},
		code: function() {
			return ControlWriter.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_done_0: function() {
			if((this._step.done() === true) && this._terminator) {
				this._writer.push(this._writer.breakTerminator);
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isFirstStep_0: function() {
			return this._firstStep;
		},
		isFirstStep: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_isFirstStep_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._step = this._writer.newExpression(this._indent, this._initiator);
			this._firstStep = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.line.apply(this._step, args);
			return this;
		},
		line: function() {
			return ControlWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return this._step.newControl();
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			return this._step.newLine();
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_step_0: function() {
			this._step.done();
			if(KSType.isInstance(this._step, ExpressionWriter)) {
				this._step = this._writer.newBlock(this._indent);
			}
			else {
				if(this._terminator) {
					this._writer.push(this._writer.newFragment("\n"));
				}
				this._step = this._writer.newExpression(this._indent);
			}
			if(this._firstStep) {
				this._firstStep = false;
			}
			return this;
		},
		step: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_step_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExpressionWriter = KSHelper.class({
		$name: "ExpressionWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._undone = true;
		},
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent, initiator) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			else if(!KSType.isBoolean(initiator)) {
				throw new TypeError("'initiator' is not of type 'Boolean'");
			}
			this._writer = writer;
			this._indent = indent;
			this._initiator = initiator;
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				ExpressionWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			for(var __ks_0 = 0, __ks_1 = args.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = args[__ks_0];
				if(KSType.isArray(arg)) {
					this.code.apply(this, arg);
				}
				else if(KSType.isDictionary(arg)) {
					this._writer.push(arg);
				}
				else {
					this._writer.push(this._writer.newFragment(arg));
				}
			}
			return this;
		},
		code: function() {
			return ExpressionWriter.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ExpressionWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			if(this._initiator) {
				this._writer.push(this._writer.newIndent(this._indent));
			}
			this._undone = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ExpressionWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newArray_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newArray(indent);
		},
		newArray: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newArray_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newBlock_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newBlock(indent);
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 3) {
				return ExpressionWriter.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newLine(indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newObject_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newObject(indent);
		},
		newObject: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newObject_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CommentWriter = KSHelper.class({
		$name: "CommentWriter",
		$extends: ExpressionWriter,
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.breakTerminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return CommentWriter.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionWriter.prototype.done.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return this;
		},
		newLine: function() {
			if(arguments.length === 0) {
				return CommentWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			return ExpressionWriter.prototype.newLine.apply(this, arguments);
		}
	});
	var LineWriter = KSHelper.class({
		$name: "LineWriter",
		$extends: ExpressionWriter,
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.lineTerminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return LineWriter.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionWriter.prototype.done.apply(this, arguments);
		},
		__ks_func_newControl_0: function(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 3) {
				return LineWriter.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			return ExpressionWriter.prototype.newControl.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return this;
		},
		newLine: function() {
			if(arguments.length === 0) {
				return LineWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			return ExpressionWriter.prototype.newLine.apply(this, arguments);
		}
	});
	var ObjectWriter = KSHelper.class({
		$name: "ObjectWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._line = null;
		},
		__ks_init: function() {
			ObjectWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ObjectWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._line = null;
				this._writer.push(this._writer.newFragment("\n"), this._writer.newIndent(this._indent), this._writer.newFragment("}"));
			}
			else {
				this._writer.push(this._writer.newFragment("}"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._writer.push(this._writer.newFragment("{"));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newLine(), __ks_0.code).apply(__ks_0, args);
			return this;
		},
		line: function() {
			return ObjectWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newControl(this._indent + 1, true, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			return this._line = this._writer.newExpression(this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var MarkWriter = KSHelper.class({
		$name: "MarkWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(writer, indent, index) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
			this._index = index;
			this.breakTerminator = this._writer.breakTerminator;
			this.lineTerminator = this._writer.lineTerminator;
			this.listTerminator = this._writer.listTerminator;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				MarkWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newLine(), __ks_0.code).apply(__ks_0, args).done();
			return this;
		},
		line: function() {
			return MarkWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return new this._writer.Control(this, this._indent);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return MarkWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newFragment_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return this._writer.newFragment.apply(this._writer, args);
		},
		newFragment: function() {
			return MarkWriter.prototype.__ks_func_newFragment_0.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return new this._writer.Line(this, this._indent);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return MarkWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_push_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._index = KSOperator.addOrConcat(this._index, this._writer.insertAt.apply(this._writer, [].concat([this._index], args)));
			return this;
		},
		push: function() {
			return MarkWriter.prototype.__ks_func_push_0.apply(this, arguments);
		}
	});
	var Generator = KSHelper.namespace(function() {
		var AssignmentOperatorSymbol = (function() {
			var d = new Dictionary();
			d[AssignmentOperatorKind.Addition] = " += ";
			d[AssignmentOperatorKind.BitwiseAnd] = " &= ";
			d[AssignmentOperatorKind.BitwiseLeftShift] = " <<= ";
			d[AssignmentOperatorKind.BitwiseOr] = " |= ";
			d[AssignmentOperatorKind.BitwiseRightShift] = " >>= ";
			d[AssignmentOperatorKind.BitwiseXor] = " ^= ";
			d[AssignmentOperatorKind.Division] = " /= ";
			d[AssignmentOperatorKind.Equality] = " = ";
			d[AssignmentOperatorKind.Existential] = " ?= ";
			d[AssignmentOperatorKind.Modulo] = " %= ";
			d[AssignmentOperatorKind.Multiplication] = " *= ";
			d[AssignmentOperatorKind.NonExistential] = " !?= ";
			d[AssignmentOperatorKind.NullCoalescing] = " ??= ";
			d[AssignmentOperatorKind.Quotient] = " /.= ";
			d[AssignmentOperatorKind.Subtraction] = " -= ";
			return d;
		})();
		var BinaryOperatorSymbol = (function() {
			var d = new Dictionary();
			d[BinaryOperatorKind.Addition] = " + ";
			d[BinaryOperatorKind.And] = " && ";
			d[BinaryOperatorKind.BitwiseAnd] = " & ";
			d[BinaryOperatorKind.BitwiseLeftShift] = " << ";
			d[BinaryOperatorKind.BitwiseOr] = " | ";
			d[BinaryOperatorKind.BitwiseRightShift] = " >> ";
			d[BinaryOperatorKind.BitwiseXor] = " ^ ";
			d[BinaryOperatorKind.Division] = " / ";
			d[BinaryOperatorKind.Equality] = " == ";
			d[BinaryOperatorKind.GreaterThan] = " > ";
			d[BinaryOperatorKind.GreaterThanOrEqual] = " >= ";
			d[BinaryOperatorKind.Imply] = " -> ";
			d[BinaryOperatorKind.Inequality] = " != ";
			d[BinaryOperatorKind.LessThan] = " < ";
			d[BinaryOperatorKind.LessThanOrEqual] = " <= ";
			d[BinaryOperatorKind.Modulo] = " % ";
			d[BinaryOperatorKind.Multiplication] = " * ";
			d[BinaryOperatorKind.NullCoalescing] = " ?? ";
			d[BinaryOperatorKind.Or] = " || ";
			d[BinaryOperatorKind.Quotient] = " /. ";
			d[BinaryOperatorKind.Subtraction] = " - ";
			d[BinaryOperatorKind.TypeCasting] = ":";
			d[BinaryOperatorKind.TypeEquality] = " is ";
			d[BinaryOperatorKind.TypeInequality] = " is not ";
			d[BinaryOperatorKind.Xor] = " ^^ ";
			return d;
		})();
		var UnaryPrefixOperatorSymbol = (function() {
			var d = new Dictionary();
			d[UnaryOperatorKind.BitwiseNot] = "~";
			d[UnaryOperatorKind.DecrementPrefix] = "--";
			d[UnaryOperatorKind.Existential] = "?";
			d[UnaryOperatorKind.IncrementPrefix] = "++";
			d[UnaryOperatorKind.Negation] = "!";
			d[UnaryOperatorKind.Negative] = "-";
			d[UnaryOperatorKind.Spread] = "...";
			return d;
		})();
		var UnaryPostfixOperatorSymbol = (function() {
			var d = new Dictionary();
			d[UnaryOperatorKind.DecrementPostfix] = "--";
			d[UnaryOperatorKind.ForcedTypeCasting] = "!!";
			d[UnaryOperatorKind.IncrementPostfix] = "++";
			d[UnaryOperatorKind.NullableTypeCasting] = "!?";
			return d;
		})();
		var KSWriterMode = KSHelper.enum(Number, {
			Default: 0,
			Extern: 1,
			Property: 2
		});
		function $nilFilter() {
			return false;
		}
		function $nilTransformer() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return args[0];
		}
		var KSWriter = KSHelper.class({
			$name: "KSWriter",
			$extends: Writer,
			__ks_init_1: function() {
				this._stack = [];
			},
			__ks_init: function() {
				Writer.prototype.__ks_init.call(this);
				KSWriter.prototype.__ks_init_1.call(this);
			},
			__ks_cons_0: function(options) {
				if(options === void 0) {
					options = null;
				}
				Writer.prototype.__ks_cons.call(this, [__ks_Dictionary._cm_merge((function() {
					var d = new Dictionary();
					d.mode = KSWriterMode.Default;
					d.classes = (function() {
						var d = new Dictionary();
						d.block = KSBlockWriter;
						d.control = KSControlWriter;
						d.expression = KSExpressionWriter;
						d.line = KSLineWriter;
						d.object = KSObjectWriter;
						return d;
					})();
					d.filters = (function() {
						var d = new Dictionary();
						d.expression = $nilFilter;
						d.statement = $nilFilter;
						return d;
					})();
					d.terminators = (function() {
						var d = new Dictionary();
						d.line = "";
						d.list = "";
						return d;
					})();
					d.transformers = (function() {
						var d = new Dictionary();
						d.expression = $nilTransformer;
						d.statement = $nilTransformer;
						return d;
					})();
					return d;
				})(), options)]);
				this._mode = this._options.mode;
			},
			__ks_cons: function(args) {
				if(args.length >= 0 && args.length <= 1) {
					KSWriter.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					throw new SyntaxError("Wrong number of arguments");
				}
			},
			__ks_func_filterExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.filters.expression(data, writer);
			},
			filterExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(Writer.prototype.filterExpression) {
					return Writer.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.filters.statement(data, writer);
			},
			filterStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(Writer.prototype.filterStatement) {
					return Writer.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._mode;
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(Writer.prototype.mode) {
					return Writer.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				this._mode = this._stack.pop();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(Writer.prototype.popMode) {
					return Writer.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				this._stack.push(this._mode);
				this._mode = mode;
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(Writer.prototype.pushMode) {
					return Writer.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterStatement(data) === true)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(Writer.prototype.statement) {
					return Writer.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_toSource_0: function() {
				var source = "";
				for(var __ks_0 = 0, __ks_1 = this.toArray(), __ks_2 = __ks_1.length, fragment; __ks_0 < __ks_2; ++__ks_0) {
					fragment = __ks_1[__ks_0];
					source = KSHelper.concatString(source, fragment.code);
				}
				if(source.length !== 0) {
					return source.substr(0, KSOperator.subtraction(source.length, 1));
				}
				else {
					return source;
				}
			},
			toSource: function() {
				if(arguments.length === 0) {
					return KSWriter.prototype.__ks_func_toSource_0.apply(this);
				}
				else if(Writer.prototype.toSource) {
					return Writer.prototype.toSource.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.transformers.expression(data, writer);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				else if(Writer.prototype.transformExpression) {
					return Writer.prototype.transformExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformStatement_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._options.transformers.statement(data, writer);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				else if(Writer.prototype.transformStatement) {
					return Writer.prototype.transformStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		var KSBlockWriter = KSHelper.class({
			$name: "KSBlockWriter",
			$extends: BlockWriter,
			__ks_init: function() {
				BlockWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				BlockWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.expression) {
					return BlockWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.filterExpression) {
					return BlockWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.filterStatement) {
					return BlockWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSBlockWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(BlockWriter.prototype.mode) {
					return BlockWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSBlockWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(BlockWriter.prototype.popMode) {
					return BlockWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.pushMode) {
					return BlockWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterStatement(data) === true)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.statement) {
					return BlockWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSBlockWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.transformExpression) {
					return BlockWriter.prototype.transformExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformStatement_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSBlockWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.transformStatement) {
					return BlockWriter.prototype.transformStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		var KSControlWriter = KSHelper.class({
			$name: "KSControlWriter",
			$extends: ControlWriter,
			__ks_init: function() {
				ControlWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				ControlWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.expression) {
					return ControlWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.filterExpression) {
					return ControlWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.filterStatement) {
					return ControlWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSControlWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(ControlWriter.prototype.mode) {
					return ControlWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSControlWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(ControlWriter.prototype.popMode) {
					return ControlWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.pushMode) {
					return ControlWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterStatement(data) === true)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.statement) {
					return ControlWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSControlWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.transformExpression) {
					return ControlWriter.prototype.transformExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformStatement_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSControlWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.transformStatement) {
					return ControlWriter.prototype.transformStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_wrap_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toWrap(this.transformExpression(data), this);
				}
				return this;
			},
			wrap: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_wrap_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.wrap) {
					return ControlWriter.prototype.wrap.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		var KSExpressionWriter = KSHelper.class({
			$name: "KSExpressionWriter",
			$extends: ExpressionWriter,
			__ks_init: function() {
				ExpressionWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				ExpressionWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.expression) {
					return ExpressionWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.filterExpression) {
					return ExpressionWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSExpressionWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(ExpressionWriter.prototype.mode) {
					return ExpressionWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSExpressionWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(ExpressionWriter.prototype.popMode) {
					return ExpressionWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.pushMode) {
					return ExpressionWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSExpressionWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.transformExpression) {
					return ExpressionWriter.prototype.transformExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_wrap_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toWrap(this.transformExpression(data), this);
				}
				return this;
			},
			wrap: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_wrap_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.wrap) {
					return ExpressionWriter.prototype.wrap.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		var KSLineWriter = KSHelper.class({
			$name: "KSLineWriter",
			$extends: LineWriter,
			__ks_init: function() {
				LineWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				LineWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.expression) {
					return LineWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.filterExpression) {
					return LineWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.filterStatement) {
					return LineWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSLineWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(LineWriter.prototype.mode) {
					return LineWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSLineWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(LineWriter.prototype.popMode) {
					return LineWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.pushMode) {
					return LineWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_run_0: function(data, fn) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				fn(data, this);
				return this;
			},
			run: function() {
				if(arguments.length === 2) {
					return KSLineWriter.prototype.__ks_func_run_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.run) {
					return LineWriter.prototype.run.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterStatement(data) === true)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.statement) {
					return LineWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSLineWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.transformExpression) {
					return LineWriter.prototype.transformExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformStatement_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSLineWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.transformStatement) {
					return LineWriter.prototype.transformStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_wrap_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterExpression(data) === true)) {
					toWrap(this.transformExpression(data), this);
				}
				return this;
			},
			wrap: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_wrap_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.wrap) {
					return LineWriter.prototype.wrap.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		var KSObjectWriter = KSHelper.class({
			$name: "KSObjectWriter",
			$extends: ObjectWriter,
			__ks_init: function() {
				ObjectWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				ObjectWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.filterExpression) {
					return ObjectWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.filterStatement) {
					return ObjectWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSObjectWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(ObjectWriter.prototype.mode) {
					return ObjectWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSObjectWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(ObjectWriter.prototype.popMode) {
					return ObjectWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.pushMode) {
					return ObjectWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!(this.filterStatement(data) === true)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.statement) {
					return ObjectWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformExpression_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSObjectWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.transformExpression) {
					return ObjectWriter.prototype.transformExpression.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_func_transformStatement_0: function(data, writer) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(writer === void 0 || writer === null) {
					writer = this;
				}
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSObjectWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.transformStatement) {
					return ObjectWriter.prototype.transformStatement.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		});
		function generate(data, options) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(options === void 0) {
				options = null;
			}
			var writer = new KSWriter(options);
			toStatement(data, writer);
			return writer.toSource();
		}
		function toAttribute(data, inner, writer) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(inner === void 0 || inner === null) {
				throw new TypeError("'inner' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			return writer.code((inner === true) ? "#![" : "#[").expression(data.declaration).code("]");
		}
		function toAttributes(data, inner, writer) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(inner === void 0 || inner === null) {
				throw new TypeError("'inner' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(KSType.isValue(data.attributes) ? KSOperator.gt(data.attributes.length, 0) : false) {
				for(var __ks_0 = 0, __ks_1 = data.attributes.length, attribute; __ks_0 < __ks_1; ++__ks_0) {
					attribute = data.attributes[__ks_0];
					toAttribute(attribute, inner, writer.newLine()).done();
				}
				if(inner === true) {
					writer.newLine().done();
				}
			}
		}
		function toExpression(data, writer, header) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(header === void 0) {
				header = null;
			}
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ArrayBinding.value) {
				writer.code("[");
				for(var index = 0, __ks_1 = data.elements.length, element; index < __ks_1; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(element);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.ArrayComprehension.value) {
				writer.code("[").expression(data.body).run(data.loop, toLoopHeader).code("]");
			}
			else if(__ks_0 === NodeKind.ArrayExpression.value) {
				writer.code("[");
				for(var index = 0, __ks_1 = data.values.length, value; index < __ks_1; ++index) {
					value = data.values[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(value);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.ArrayRange.value) {
				writer.code("[");
				if(KSType.isValue(data.from)) {
					writer.expression(data.from);
				}
				else {
					writer.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					writer.code("..").expression(data.to);
				}
				else {
					writer.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.AttributeExpression.value) {
				writer.expression(data.name).code("(");
				for(var index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.AttributeOperation.value) {
				writer.expression(data.name).code(" = ").expression(data.value);
			}
			else if(__ks_0 === NodeKind.AwaitExpression.value) {
				writer.code("await ").expression(data.operation);
			}
			else if(__ks_0 === NodeKind.BinaryExpression.value) {
				writer.wrap(data.left);
				if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.Assignment.value) {
					writer.code(AssignmentOperatorSymbol[data.operator.assignment]);
				}
				else {
					writer.code(BinaryOperatorSymbol[data.operator.kind]);
				}
				writer.wrap(data.right);
			}
			else if(__ks_0 === NodeKind.BindingElement.value) {
				var computed = false;
				var thisAlias = false;
				var rest = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
						computed = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
						writer.code("...");
						rest = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
						thisAlias = true;
					}
				}
				if(KSType.isValue(data.name)) {
					if(KSType.isValue(data.alias)) {
						if(computed) {
							writer.code("[").expression(data.name).code("]");
						}
						else {
							writer.expression(data.name);
						}
						writer.code(": ");
						if(thisAlias) {
							writer.code("@");
						}
						writer.expression(data.alias);
					}
					else {
						if(computed) {
							writer.code("[");
						}
						if(thisAlias) {
							writer.code("@");
						}
						writer.expression(data.name);
						if(computed) {
							writer.code("]");
						}
						if(KSType.isValue(data.type)) {
							writer.code(": ").expression(data.type);
						}
					}
					if(KSType.isValue(data.defaultValue)) {
						writer.code(" = ").expression(data.defaultValue);
					}
				}
				else if(!rest) {
					writer.code("_");
				}
			}
			else if(__ks_0 === NodeKind.Block.value) {
				toAttributes(data, true, writer);
				for(var __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = data.statements[__ks_1];
					writer.statement(statement);
				}
			}
			else if(__ks_0 === NodeKind.CallExpression.value) {
				writer.expression(data.callee);
				if(data.modifiers.some(function(modifier) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(modifier === void 0 || modifier === null) {
						throw new TypeError("'modifier' is not nullable");
					}
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
				}) === true) {
					writer.code("?");
				}
				var __ks_1 = data.scope.kind.valueOf();
				if(__ks_1 === ScopeKind.Argument.value) {
					writer.code("*$(").expression(data.scope.value);
					if(data.arguments.length !== 0) {
						writer.code(", ");
					}
				}
				else if(__ks_1 === ScopeKind.Null.value) {
					writer.code("**(");
				}
				else if(__ks_1 === ScopeKind.This.value) {
					writer.code("(");
				}
				for(var index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.CallMacroExpression.value) {
				writer.expression(data.callee).code("!(");
				for(var index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.ClassDeclaration.value) {
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					var __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Abstract.value) {
						writer.code("abstract ");
					}
					else if(__ks_3 === ModifierKind.Sealed.value) {
						writer.code("sealed ");
					}
				}
				writer.code("class ").expression(data.name);
			}
			else if(__ks_0 === NodeKind.ComparisonExpression.value) {
				for(var i = 0, __ks_1 = data.values.length, value; i < __ks_1; ++i) {
					value = data.values[i];
					if((i % 2) === 0) {
						writer.wrap(value);
					}
					else {
						writer.code(BinaryOperatorSymbol[value.kind]);
					}
				}
			}
			else if(__ks_0 === NodeKind.ComputedPropertyName.value) {
				writer.code("[").expression(data.expression).code("]");
			}
			else if(__ks_0 === NodeKind.ConditionalExpression.value) {
				writer.wrap(data.condition).code(" ? ").wrap(data.whenTrue).code(" : ").wrap(data.whenFalse);
			}
			else if(__ks_0 === NodeKind.CreateExpression.value) {
				writer.code("new ");
				if((KSHelper.valueOf(data.class.kind) === NodeKind.Identifier.value) || (KSHelper.valueOf(data.class.kind) === NodeKind.MemberExpression.value) || (KSHelper.valueOf(data.class.kind) === NodeKind.ThisExpression.value)) {
					writer.expression(data.class);
				}
				else {
					writer.code("(").expression(data.class).code(")");
				}
				writer.code("(");
				for(var index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.CurryExpression.value) {
				writer.expression(data.callee);
				var __ks_1 = data.scope.kind.valueOf();
				if(__ks_1 === ScopeKind.Argument.value) {
					writer.code("^$(").expression(data.scope.value);
					if(data.arguments.length === true) {
						writer.code(", ");
					}
				}
				else if(__ks_1 === ScopeKind.Null.value) {
					writer.code("^^(");
				}
				else if(__ks_1 === ScopeKind.This.value) {
					writer.code("^@(");
				}
				for(var index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.EnumExpression.value) {
				writer.expression(data.enum).code("::").expression(data.member);
			}
			else if(__ks_0 === NodeKind.ExclusionType.value) {
				for(var index = 0, __ks_1 = data.types.length, type; index < __ks_1; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((KSHelper.valueOf(type.kind) === NodeKind.FunctionExpression.value) ? " ^^ " : " ^ ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value) {
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					return writer.code("func ");
				}, writer);
			}
			else if(__ks_0 === NodeKind.FunctionExpression.value) {
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					if(KSHelper.valueOf(writer.mode()) === KSWriterMode.Property.value) {
						if(KSType.isValue(header)) {
							header(writer);
						}
					}
					else {
						writer.code("func");
					}
				}, writer);
				if(KSType.isValue(data.body)) {
					if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
						writer.newBlock().expression(data.body).done();
					}
					else {
						writer.code(" => ").expression(data.body);
					}
				}
			}
			else if(__ks_0 === NodeKind.FusionType.value) {
				for(var index = 0, __ks_1 = data.types.length, type; index < __ks_1; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((KSHelper.valueOf(type.kind) === NodeKind.FunctionExpression.value) ? " && " : " & ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_0 === NodeKind.Identifier.value) {
				writer.code(data.name);
			}
			else if(__ks_0 === NodeKind.IfExpression.value) {
				writer.expression(data.whenTrue).code(" if ").expression(data.condition);
				if(KSType.isValue(data.whenFalse)) {
					writer.code(" else ").expression(data.whenFalse);
				}
			}
			else if(__ks_0 === NodeKind.ImportArgument.value) {
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Required.value) {
						writer.code("require ");
					}
				}
				if(KSType.isValue(data.name)) {
					writer.expression(data.name).code(": ");
				}
				writer.expression(data.value);
			}
			else if(__ks_0 === NodeKind.ImportDeclarator.value) {
				writer.expression(data.source);
				if(KSType.isValue(data.arguments) ? data.arguments.length !== 0 : false) {
					writer.code("(");
					for(var index = 0, __ks_1 = data.arguments.length, argument; index < __ks_1; ++index) {
						argument = data.arguments[index];
						if(index !== 0) {
							writer.code(", ");
						}
						writer.expression(argument);
					}
					writer.code(")");
				}
				if((data.specifiers.length === 1) && (data.specifiers[0].attributes.length === 0)) {
					var specifier = data.specifiers[0];
					var __ks_1 = specifier.kind.valueOf();
					if(__ks_1 === NodeKind.ImportSpecifier.value) {
						writer.code(" for ").expression(specifier);
					}
					else if(__ks_1 === NodeKind.ImportExclusionSpecifier.value) {
						writer.code(" but ").expression(specifier);
					}
					else if(__ks_1 === NodeKind.ImportNamespaceSpecifier.value) {
						writer.code(" => ").expression(specifier);
					}
				}
				else if(data.specifiers.length !== 0) {
					var block = writer.newBlock();
					for(var __ks_1 = 0, __ks_2 = data.specifiers.length, specifier; __ks_1 < __ks_2; ++__ks_1) {
						specifier = data.specifiers[__ks_1];
						toAttributes(specifier, false, block);
						block.newLine().expression(specifier).done();
					}
					block.done();
				}
			}
			else if(__ks_0 === NodeKind.ImportExclusionSpecifier.value) {
				for(var i = 0, __ks_1 = data.exclusions.length, exclusion; i < __ks_1; ++i) {
					exclusion = data.exclusions[i];
					if(i !== 0) {
						writer.code(", ");
					}
					writer.expression(exclusion);
				}
			}
			else if(__ks_0 === NodeKind.ImportNamespaceSpecifier.value) {
				writer.expression(data.local);
				if(KSType.isValue(data.specifiers) ? data.specifiers.length !== 0 : false) {
					var block = writer.newBlock();
					for(var __ks_1 = 0, __ks_2 = data.specifiers.length, specifier; __ks_1 < __ks_2; ++__ks_1) {
						specifier = data.specifiers[__ks_1];
						block.newLine().expression(specifier).done();
					}
					block.done();
				}
			}
			else if(__ks_0 === NodeKind.ImportSpecifier.value) {
				writer.expression(data.imported);
				if(!((KSHelper.valueOf(data.imported.kind) === NodeKind.ClassDeclaration.value) || (KSHelper.valueOf(data.imported.kind) === NodeKind.FunctionDeclaration.value) || (KSHelper.valueOf(data.imported.kind) === NodeKind.VariableDeclarator.value)) || (data.local.name !== data.imported.name.name)) {
					writer.code(" => ").expression(data.local);
				}
			}
			else if(__ks_0 === NodeKind.LambdaExpression.value) {
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
				}, writer);
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					writer.code(" =>").newBlock().expression(data.body).done();
				}
				else {
					writer.code(" => ").expression(data.body);
				}
			}
			else if(__ks_0 === NodeKind.Literal.value) {
				writer.code(toQuote(data.value));
			}
			else if(__ks_0 === NodeKind.MacroExpression.value) {
				writer.code("macro ");
				if(data.elements[0].start.line === data.elements[KSOperator.subtraction(data.elements.length, 1)].end.line) {
					toMacroElements(data.elements, writer);
				}
				else {
					var o = writer.newObject();
					var line = o.newLine();
					toMacroElements(data.elements, line, o);
					o.done();
				}
			}
			else if(__ks_0 === NodeKind.MemberExpression.value) {
				var nullable = false;
				var computed = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
						computed = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
						nullable = true;
					}
				}
				writer.wrap(data.object);
				if(nullable) {
					writer.code("?");
				}
				if(computed) {
					writer.code("[").expression(data.property).code("]");
				}
				else {
					writer.code(".").expression(data.property);
				}
			}
			else if(__ks_0 === NodeKind.NumericExpression.value) {
				writer.code(data.value);
			}
			else if(__ks_0 === NodeKind.ObjectBinding.value) {
				writer.code("{");
				for(var index = 0, __ks_1 = data.elements.length, element; index < __ks_1; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(element);
				}
				writer.code("}");
			}
			else if(__ks_0 === NodeKind.ObjectExpression.value) {
				var o = writer.newObject();
				toAttributes(data, true, o);
				o.pushMode(KSWriterMode.Property);
				for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					toAttributes(property, false, o);
					o.newLine().expression(property).done();
				}
				o.popMode();
				o.done();
			}
			else if(__ks_0 === NodeKind.ObjectMember.value) {
				var value = KSType.isValue(data.value) ? data.value : data.type;
				if(KSType.isValue(value)) {
					var element = writer.transformExpression(value);
					if(KSHelper.valueOf(element.kind) === NodeKind.FunctionExpression.value) {
						toExpression(element, writer, function(writer) {
							if(arguments.length < 1) {
								throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
							}
							if(writer === void 0 || writer === null) {
								throw new TypeError("'writer' is not nullable");
							}
							return writer.expression(data.name);
						});
					}
					else {
						writer.expression(data.name).code(": ").expression(element);
					}
				}
				else {
					writer.expression(data.name);
				}
			}
			else if(__ks_0 === NodeKind.OmittedExpression.value) {
				if(data.spread === true) {
					writer.code("...");
				}
				else {
					writer.code("_");
				}
			}
			else if(__ks_0 === NodeKind.Parameter.value) {
				var rest = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					var __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.AutoEvaluate.value) {
						writer.code("@");
					}
					else if(__ks_3 === ModifierKind.Rest.value) {
						writer.code("...");
						if((modifier.arity.min !== 0) || (KSOperator.neq(modifier.arity.max, Infinity))) {
							writer.code("{");
							if(modifier.arity.min === modifier.arity.max) {
								writer.code(modifier.arity.min);
							}
							else {
								if(modifier.arity.min !== 0) {
									writer.code(modifier.arity.min);
								}
								writer.code(",");
								if(KSOperator.neq(modifier.arity.max, Infinity)) {
									writer.code(modifier.arity.max);
								}
							}
							writer.code("}");
						}
						rest = true;
					}
					else if(__ks_3 === ModifierKind.ThisAlias.value) {
						writer.code("@");
					}
				}
				if(KSType.isValue(data.name)) {
					writer.expression(data.name);
					for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
						modifier = data.modifiers[__ks_1];
						var __ks_3 = modifier.kind.valueOf();
						if(__ks_3 === ModifierKind.Required.value) {
							writer.code("!");
						}
						else if(__ks_3 === ModifierKind.SetterAlias.value) {
							writer.code("()");
						}
					}
				}
				else if(!rest) {
					writer.code("_");
				}
				if(KSType.isValue(data.type)) {
					writer.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" = ").expression(data.defaultValue);
				}
			}
			else if(__ks_0 === NodeKind.PolyadicExpression.value) {
				writer.wrap(data.operands[0]);
				for(var __ks_1 = 1, __ks_2 = data.operands.length, operand; __ks_1 < __ks_2; ++__ks_1) {
					operand = data.operands[__ks_1];
					writer.code(BinaryOperatorSymbol[data.operator.kind]).wrap(operand);
				}
			}
			else if(__ks_0 === NodeKind.RegularExpression.value) {
				writer.code(data.value);
			}
			else if(__ks_0 === NodeKind.SequenceExpression.value) {
				writer.code("(");
				for(var index = 0, __ks_1 = data.expressions.length, expression; index < __ks_1; ++index) {
					expression = data.expressions[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(expression);
				}
				writer.code(")");
			}
			else if(__ks_0 === NodeKind.ShorthandProperty.value) {
				writer.expression(data.name);
			}
			else if(__ks_0 === NodeKind.SwitchConditionArray.value) {
				writer.code("[");
				for(var index = 0, __ks_1 = data.values.length, value; index < __ks_1; ++index) {
					value = data.values[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(value);
				}
				writer.code("]");
			}
			else if(__ks_0 === NodeKind.SwitchConditionObject.value) {
				writer.code("{");
				for(var index = 0, __ks_1 = data.members.length, member; index < __ks_1; ++index) {
					member = data.members[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(member);
				}
				writer.code("}");
			}
			else if(__ks_0 === NodeKind.SwitchConditionRange.value) {
				if(KSType.isValue(data.from)) {
					writer.expression(data.from);
				}
				else {
					writer.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					writer.code("..").expression(data.to);
				}
				else {
					writer.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
			}
			else if(__ks_0 === NodeKind.SwitchConditionType.value) {
				writer.code("is ").expression(data.type);
			}
			else if(__ks_0 === NodeKind.SwitchExpression.value) {
				writer.code("switch ").expression(data.expression);
				var block = writer.newBlock();
				for(var __ks_1 = 0, __ks_2 = data.clauses.length, clause; __ks_1 < __ks_2; ++__ks_1) {
					clause = data.clauses[__ks_1];
					block.statement(clause);
				}
				block.done();
			}
			else if(__ks_0 === NodeKind.SwitchTypeCasting.value) {
				writer.expression(data.name).code(" as ").expression(data.type);
			}
			else if(__ks_0 === NodeKind.TaggedTemplateExpression.value) {
				writer.expression(data.tag).expression(data.template);
			}
			else if(__ks_0 === NodeKind.TemplateExpression.value) {
				writer.code("`");
				for(var __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
					element = data.elements[__ks_1];
					if(KSHelper.valueOf(element.kind) === NodeKind.Literal.value) {
						writer.code(element.value);
					}
					else {
						writer.code("\\(").expression(element).code(")");
					}
				}
				writer.code("`");
			}
			else if(__ks_0 === NodeKind.ThisExpression.value) {
				writer.code("@").expression(data.name);
			}
			else if(__ks_0 === NodeKind.TryExpression.value) {
				writer.code("try");
				if(data.modifiers.some(function(modifier) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(modifier === void 0 || modifier === null) {
						throw new TypeError("'modifier' is not nullable");
					}
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Disabled.value;
				}) === true) {
					writer.code("!");
				}
				writer.code(" ").expression(data.argument);
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" ~~ ").expression(data.defaultValue);
				}
			}
			else if(__ks_0 === NodeKind.TypeReference.value) {
				if(KSType.isValue(data.properties)) {
					var o = writer.newObject();
					o.pushMode(KSWriterMode.Property);
					for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
						property = data.properties[__ks_1];
						o.statement(property);
					}
					o.popMode();
					o.done();
				}
				else if(KSType.isValue(data.elements)) {
					writer.code("[");
					for(var index = 0, __ks_1 = data.elements.length, element; index < __ks_1; ++index) {
						element = data.elements[index];
						if(index !== 0) {
							writer.code(", ");
						}
						writer.expression(element);
					}
					writer.code("]");
				}
				else {
					writer.expression(data.typeName);
					if(KSType.isValue(data.typeParameters)) {
						writer.code("<");
						for(var index = 0, __ks_1 = data.typeParameters.length, parameter; index < __ks_1; ++index) {
							parameter = data.typeParameters[index];
							if(index !== 0) {
								writer.code(", ");
							}
							writer.expression(parameter);
						}
						writer.code(">");
					}
					if(data.modifiers.some(function(modifier) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(modifier === void 0 || modifier === null) {
							throw new TypeError("'modifier' is not nullable");
						}
						return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
					}) === true) {
						writer.code("?");
					}
				}
			}
			else if(__ks_0 === NodeKind.UnaryExpression.value) {
				if(KSType.isValue(UnaryPrefixOperatorSymbol[data.operator.kind])) {
					writer.code(UnaryPrefixOperatorSymbol[data.operator.kind]).wrap(data.argument);
				}
				else {
					writer.wrap(data.argument).code(UnaryPostfixOperatorSymbol[data.operator.kind]);
				}
			}
			else if(__ks_0 === NodeKind.UnionType.value) {
				for(var index = 0, __ks_1 = data.types.length, type; index < __ks_1; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((KSHelper.valueOf(type.kind) === NodeKind.FunctionExpression.value) ? " || " : " | ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_0 === NodeKind.UnlessExpression.value) {
				writer.expression(data.whenFalse).code(" unless ").expression(data.condition);
			}
			else if(__ks_0 === NodeKind.VariableDeclaration.value) {
				var immutable = false;
				var autoTyping = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.AutoTyping.value) {
						autoTyping = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				writer.code(immutable ? "const " : "let ");
				for(var index = 0, __ks_1 = data.variables.length, variable; index < __ks_1; ++index) {
					variable = data.variables[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(variable);
				}
				writer.code(autoTyping ? " := " : " = ");
				if(data.await === true) {
					writer.code("await ");
				}
				writer.expression(data.init);
			}
			else if(__ks_0 === NodeKind.VariableDeclarator.value) {
				if(data.modifiers.some(function(modifier) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(modifier === void 0 || modifier === null) {
						throw new TypeError("'modifier' is not nullable");
					}
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value;
				}) === true) {
					writer.code("const ");
				}
				writer.expression(data.name);
				if(KSType.isValue(data.type)) {
					writer.code(": ").expression(data.type);
				}
			}
			else {
				console.error(data);
				throw new Error("Not Implemented");
			}
		}
		function toFunctionHeader(data, header, writer) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(KSType.isValue(data.modifiers)) {
				for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					var __ks_2 = modifier.kind.valueOf();
					if(__ks_2 === ModifierKind.Abstract.value) {
						writer.code("abstract ");
					}
					else if(__ks_2 === ModifierKind.Async.value) {
						writer.code("async ");
					}
					else if(__ks_2 === ModifierKind.Final.value) {
						writer.code("final ");
					}
					else if(__ks_2 === ModifierKind.Override.value) {
						writer.code("override ");
					}
					else if(__ks_2 === ModifierKind.Overwrite.value) {
						writer.code("overwrite ");
					}
					else if(__ks_2 === ModifierKind.Private.value) {
						writer.code("private ");
					}
					else if(__ks_2 === ModifierKind.Protected.value) {
						writer.code("protected ");
					}
					else if(__ks_2 === ModifierKind.Public.value) {
						writer.code("public ");
					}
					else if(__ks_2 === ModifierKind.Static.value) {
						writer.code("static ");
					}
				}
			}
			header(writer);
			if(KSType.isValue(data.name)) {
				writer.expression(data.name);
			}
			if(KSType.isValue(data.parameters)) {
				writer.code("(");
				for(var i = 0, __ks_0 = data.parameters.length, parameter; i < __ks_0; ++i) {
					parameter = data.parameters[i];
					if(i !== 0) {
						writer.code(", ");
					}
					writer.expression(parameter);
				}
				writer.code(")");
			}
			if(KSType.isValue(data.type)) {
				writer.code(": ").expression(data.type);
			}
			if(KSType.isValue(data.throws) ? KSOperator.gt(data.throws.length, 0) : false) {
				writer.code(" ~ ");
				for(var index = 0, __ks_0 = data.throws.length, __ks_throw_1; index < __ks_0; ++index) {
					__ks_throw_1 = data.throws[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(__ks_throw_1);
				}
			}
		}
		function toFunctionBody(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(KSHelper.valueOf(data.kind) === NodeKind.Block.value) {
				writer.newBlock().expression(data).done();
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.IfStatement.value) {
				writer.code(" => ").expression(data.whenTrue.value).code(" if ").expression(data.condition);
				if(KSType.isValue(data.whenFalse)) {
					writer.code(" else ").expression(data.whenFalse.value);
				}
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.ReturnStatement.value) {
				writer.code(" => ").expression(data.value);
			}
			else {
				writer.code(" => ").expression(data);
			}
		}
		function toLoopHeader(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ForFromStatement.value) {
				var declaration = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				writer.code(" for ");
				if(declaration) {
					if(immutable) {
						writer.code("const ");
					}
					else {
						writer.code("let ");
					}
				}
				writer.expression(data.variable).code(" from ").expression(data.from);
				if(KSType.isValue(data.til)) {
					writer.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					writer.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					writer.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else if(__ks_0 === NodeKind.ForInStatement.value) {
				var declaration = false;
				var descending = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
						descending = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				writer.code(" for ");
				if(declaration) {
					if(immutable) {
						writer.code("const ");
					}
					else {
						writer.code("let ");
					}
				}
				if(KSType.isValue(data.value)) {
					writer.expression(data.value);
					if(KSType.isValue(data.index)) {
						writer.code(", ").expression(data.index);
					}
				}
				else {
					writer.code(":").expression(data.index);
				}
				writer.code(" in ").expression(data.expression);
				if(descending) {
					writer.code(" desc");
				}
				if(KSType.isValue(data.from)) {
					writer.code(" from ").expression(data.from);
				}
				if(KSType.isValue(data.til)) {
					writer.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					writer.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else if(__ks_0 === NodeKind.ForOfStatement.value) {
				var declaration = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				writer.code(" for ");
				if(declaration) {
					if(immutable) {
						writer.code("const ");
					}
					else {
						writer.code("let ");
					}
				}
				if(KSType.isValue(data.value)) {
					writer.expression(data.value);
					if(KSType.isValue(data.key)) {
						writer.code(", ").expression(data.key);
					}
				}
				else {
					writer.code(":").expression(data.key);
				}
				writer.code(" of ").expression(data.expression);
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else if(__ks_0 === NodeKind.ForRangeStatement.value) {
				var declaration = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				writer.code(" for ");
				if(declaration) {
					if(immutable) {
						writer.code("const ");
					}
					else {
						writer.code("let ");
					}
				}
				writer.expression(data.value).code(" in ");
				if(KSType.isValue(data.from)) {
					writer.expression(data.from).code("..");
				}
				else if(KSType.isValue(data.then)) {
					writer.expression(data.then).code("<..");
				}
				if(KSType.isValue(data.til)) {
					writer.code("<").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					writer.code("").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					writer.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					writer.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
		}
		function toMacroElements(elements, writer, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(elements === void 0 || elements === null) {
				throw new TypeError("'elements' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			var last = KSOperator.subtraction(elements.length, 1);
			for(var index = 0, __ks_0 = elements.length, element; index < __ks_0; ++index) {
				element = elements[index];
				var __ks_1 = element.kind.valueOf();
				if(__ks_1 === MacroElementKind.Expression.value) {
					writer.code("#");
					if((KSHelper.valueOf(element.reification.kind) === ReificationKind.Expression.value) && (KSHelper.valueOf(element.expression.kind) === NodeKind.Identifier.value)) {
						writer.expression(element.expression);
					}
					else if(KSHelper.valueOf(element.reification.kind) === ReificationKind.Join.value) {
						writer.code("j(").expression(element.expression).code(", ").expression(element.separator).code(")");
					}
					else {
						var __ks_2 = element.reification.kind.valueOf();
						if(__ks_2 === ReificationKind.Argument.value) {
							writer.code("a");
						}
						else if(__ks_2 === ReificationKind.Expression.value) {
							writer.code("e");
						}
						else if(__ks_2 === ReificationKind.Statement.value) {
							writer.code("s");
						}
						else if(__ks_2 === ReificationKind.Write.value) {
							writer.code("w");
						}
						writer.code("(").expression(element.expression).code(")");
					}
				}
				else if(__ks_1 === MacroElementKind.Literal.value) {
					writer.code(element.value);
				}
				else if(__ks_1 === MacroElementKind.NewLine.value) {
					if((index !== 0) && (index !== last) && (KSHelper.valueOf(elements[index - 1].kind) !== MacroElementKind.NewLine.value)) {
						parent.newLine();
					}
				}
			}
		}
		function toQuote(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			return KSHelper.concatString("\"", value.replace(/"/g, "\\\"").replace(/\n/g, "\\n"), "\"");
		}
		function toStatement(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.AccessorDeclaration.value) {
				var line = writer.newLine().code("get");
				if(KSType.isValue(data.body)) {
					if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.BreakStatement.value) {
				writer.newLine().code("break").done();
			}
			else if(__ks_0 === NodeKind.CatchClause.value) {
				if(KSType.isValue(data.type)) {
					writer.code("on ").expression(data.type);
					if(KSType.isValue(data.binding)) {
						writer.code(" catch ").expression(data.binding);
					}
				}
				else {
					writer.code("catch");
					if(KSType.isValue(data.binding)) {
						writer.code(" ").expression(data.binding);
					}
				}
				writer.step().expression(data.body);
			}
			else if(__ks_0 === NodeKind.ClassDeclaration.value) {
				var line = writer.newLine();
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					var __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Abstract.value) {
						line.code("abstract ");
					}
					else if(__ks_3 === ModifierKind.Final.value) {
						line.code("final ");
					}
					else if(__ks_3 === ModifierKind.Sealed.value) {
						line.code("sealed ");
					}
				}
				line.code("class ").expression(data.name);
				if(KSType.isValue(data.version)) {
					line.code("@" + data.version.major + "." + data.version.minor + "." + data.version.patch);
				}
				if(KSType.isValue(data.extends)) {
					line.code(" extends ").expression(data.extends);
				}
				var block = line.newBlock();
				for(var __ks_1 = 0, __ks_2 = data.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = data.members[__ks_1];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.ContinueStatement.value) {
				writer.newLine().code("continue").done();
			}
			else if(__ks_0 === NodeKind.DestroyStatement.value) {
				writer.newLine().code("delete ").expression(data.variable).done();
			}
			else if(__ks_0 === NodeKind.DiscloseDeclaration.value) {
				var line = writer.newLine().code("disclose ").expression(data.name);
				var block = line.newBlock();
				for(var __ks_1 = 0, __ks_2 = data.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = data.members[__ks_1];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.DoUntilStatement.value) {
				writer.newControl().code("do").step().expression(data.body).step().code("until ").expression(data.condition).done();
			}
			else if(__ks_0 === NodeKind.DoWhileStatement.value) {
				writer.newControl().code("do").step().expression(data.body).step().code("while ").expression(data.condition).done();
			}
			else if(__ks_0 === NodeKind.EnumDeclaration.value) {
				var line = writer.newLine().code("enum ").expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code("<").expression(data.type).code(">");
				}
				var block = line.newBlock();
				for(var __ks_1 = 0, __ks_2 = data.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = data.members[__ks_1];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.EnumMember.value) {
				var line = writer.newLine().expression(data.name);
				if(KSType.isValue(data.value)) {
					line.code(" = ").expression(data.value);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportDeclaration.value) {
				var line = writer.newLine();
				if((data.declarations.length === 1) && (!KSType.isValue(data.declarations[0].declaration) || (data.declarations[0].declaration.attributes.length === 0))) {
					line.code("export ").statement(data.declarations[0]);
				}
				else {
					var block = line.code("export").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportDeclarationSpecifier.value) {
				writer.statement(data.declaration);
			}
			else if(__ks_0 === NodeKind.ExportExclusionSpecifier.value) {
				var line = writer.newLine().code("*");
				if(data.exclusions.length !== 0) {
					line.code(" but ");
					for(var i = 0, __ks_1 = data.exclusions.length, exclusion; i < __ks_1; ++i) {
						exclusion = data.exclusions[i];
						if(i !== 0) {
							line.code(", ");
						}
						line.expression(exclusion);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportNamedSpecifier.value) {
				if((data.local.kind === data.exported.kind) && (data.local.name === data.exported.name)) {
					writer.newLine().code(data.local.name).done();
				}
				else {
					writer.newLine().expression(data.local).code(" => " + data.exported.name).done();
				}
			}
			else if(__ks_0 === NodeKind.ExportPropertiesSpecifier.value) {
				var line = writer.newLine();
				line.expression(data.object);
				if(data.properties.length === 1) {
					line.code(" for ").statement(data.dpropertieseclarations[0]);
				}
				else {
					var block = line.code(" for").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
						property = data.properties[__ks_1];
						block.statement(property);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExportWildcardSpecifier.value) {
				writer.newLine().expression(data.local).code(" for *").done();
			}
			else if(__ks_0 === NodeKind.ExternDeclaration.value) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("extern ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("extern").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ExternOrRequireDeclaration.value) {
				var line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("extern|require ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("extern|require").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.FieldDeclaration.value) {
				var line = writer.newLine();
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					var __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Private.value) {
						line.code("private ");
					}
					else if(__ks_3 === ModifierKind.Protected.value) {
						line.code("protected ");
					}
					else if(__ks_3 === ModifierKind.Public.value) {
						line.code("public ");
					}
					else if(__ks_3 === ModifierKind.Static.value) {
						line.code("static ");
					}
				}
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
						line.code("@");
						break;
					}
				}
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ").expression(data.defaultValue);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ForFromStatement.value) {
				var declaration = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				var ctrl = writer.newControl().code("for ");
				if(declaration) {
					if(immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				ctrl.expression(data.variable).code(" from ").expression(data.from);
				if(KSType.isValue(data.til)) {
					ctrl.code(" til ").expression(data.til);
				}
				else {
					ctrl.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				ctrl.step().expression(data.body).done();
			}
			else if(__ks_0 === NodeKind.ForInStatement.value) {
				var declaration = false;
				var descending = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
						descending = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				var ctrl;
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl = writer.newControl().code("for ");
				}
				else {
					ctrl = writer.newLine().expression(data.body).code(" for ");
				}
				if(declaration) {
					if(immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				if(KSType.isValue(data.value)) {
					ctrl.expression(data.value);
					if(KSType.isValue(data.type)) {
						ctrl.code(": ").expression(data.type);
					}
					if(KSType.isValue(data.index)) {
						ctrl.code(", ").expression(data.index);
					}
				}
				else {
					ctrl.code("_, ").expression(data.index);
				}
				ctrl.code(" in ").expression(data.expression);
				if(descending) {
					ctrl.code(" desc");
				}
				if(KSType.isValue(data.from)) {
					ctrl.code(" from ").expression(data.from);
				}
				if(KSType.isValue(data.til)) {
					ctrl.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					ctrl.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl.step().expression(data.body);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.ForRangeStatement.value) {
				var declaration = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				var ctrl = writer.newControl().code("for ");
				if(declaration) {
					if(immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				ctrl.expression(data.value).code(" in ");
				if(KSType.isValue(data.from)) {
					ctrl.expression(data.from);
				}
				else {
					ctrl.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					ctrl.code("..").expression(data.to);
				}
				else {
					ctrl.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code("..").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				ctrl.step().expression(data.body);
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.ForOfStatement.value) {
				var declaration = false;
				var immutable = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
						declaration = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				var ctrl;
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl = writer.newControl().code("for ");
				}
				else {
					ctrl = writer.newLine().expression(data.body).code(" for ");
				}
				if(declaration) {
					if(immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				if(KSType.isValue(data.value)) {
					ctrl.expression(data.value);
					if(KSType.isValue(data.type)) {
						ctrl.code(": ").expression(data.type);
					}
					if(KSType.isValue(data.key)) {
						ctrl.code(", ").expression(data.key);
					}
				}
				else {
					ctrl.code("_, ").expression(data.key);
				}
				ctrl.code(" of ").expression(data.expression);
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					ctrl.step().expression(data.body);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value) {
				var line = writer.newLine();
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					if(KSHelper.valueOf(writer.mode()) !== KSWriterMode.Extern.value) {
						writer.code("func ");
					}
				}, line);
				if(KSType.isValue(data.body)) {
					toFunctionBody(data.body, line);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.IfStatement.value) {
				var __ks_1 = data.whenTrue.kind.valueOf();
				if(__ks_1 === NodeKind.Block.value) {
					var ctrl = writer.newControl().code("if ").expression(data.condition).step().expression(data.whenTrue);
					while(KSType.isValue(data.whenFalse)) {
						if(KSHelper.valueOf(data.whenFalse.kind) === NodeKind.IfStatement.value) {
							data = data.whenFalse;
							ctrl.step().code("else if ").expression(data.condition).step().expression(data.whenTrue);
						}
						else {
							ctrl.step().code("else").step().expression(data.whenFalse);
							break;
						}
					}
					ctrl.done();
				}
				else if(__ks_1 === NodeKind.ReturnStatement.value) {
					if(KSType.isValue(data.whenTrue.value)) {
						writer.newLine().code("return ").expression(data.whenTrue.value).code(" if ").expression(data.condition).done();
					}
					else {
						writer.newLine().code("return if ").expression(data.condition).done();
					}
				}
				else if(__ks_1 === NodeKind.ThrowStatement.value) {
					writer.newLine().code("throw ").expression(data.whenTrue.value).code(" if ").expression(data.condition).done();
				}
				else {
					writer.newLine().expression(data.whenTrue).code(" if ").expression(data.condition).done();
				}
			}
			else if(__ks_0 === NodeKind.ImplementDeclaration.value) {
				var line = writer.newLine().code("impl ").expression(data.variable);
				var block = line.newBlock();
				for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					block.statement(property);
				}
				block.done();
				line.done();
			}
			else if(__ks_0 === NodeKind.ImportDeclaration.value) {
				var line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("import ").expression(data.declarations[0]);
				}
				else {
					var block = line.code("import").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						toAttributes(declaration, false, block);
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.IncludeAgainDeclaration.value) {
				var line = writer.newLine();
				if(data.files.length === 1) {
					line.code("include again ").code(toQuote(data.files[0]));
				}
				else {
					var block = line.code("include again").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.files.length, file; __ks_1 < __ks_2; ++__ks_1) {
						file = data.files[__ks_1];
						block.newLine().code(toQuote(file)).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.IncludeDeclaration.value) {
				var line = writer.newLine();
				if(data.files.length === 1) {
					line.code("include ").code(toQuote(data.files[0]));
				}
				else {
					var block = line.code("include").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.files.length, file; __ks_1 < __ks_2; ++__ks_1) {
						file = data.files[__ks_1];
						block.newLine().code(toQuote(file)).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.MacroDeclaration.value) {
				var line = writer.newLine();
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					writer.code("macro ");
				}, line);
				if(KSHelper.valueOf(data.body.kind) === NodeKind.MacroExpression.value) {
					line.code(" => ");
					toMacroElements(data.body.elements, line);
				}
				else {
					line.newBlock().expression(data.body).done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.MethodDeclaration.value) {
				var line = writer.newLine();
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
				}, line);
				if(KSType.isValue(data.body)) {
					toFunctionBody(data.body, line);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.Module.value) {
				toAttributes(data, true, writer);
				for(var __ks_1 = 0, __ks_2 = data.body.length, node; __ks_1 < __ks_2; ++__ks_1) {
					node = data.body[__ks_1];
					writer.statement(node);
				}
			}
			else if(__ks_0 === NodeKind.MutatorDeclaration.value) {
				var line = writer.newLine().code("set");
				if(KSType.isValue(data.body)) {
					if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.NamespaceDeclaration.value) {
				var line = writer.newLine();
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					var __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Sealed.value) {
						line.code("sealed ");
					}
				}
				line.code("namespace ").expression(data.name);
				if(data.statements.length !== 0) {
					var block = line.newBlock();
					for(var __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
						statement = data.statements[__ks_1];
						block.statement(statement);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.PropertyDeclaration.value) {
				var line = writer.newLine();
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					var __ks_3 = modifier.kind.valueOf();
					if(__ks_3 === ModifierKind.Private.value) {
						line.code("private ");
					}
					else if(__ks_3 === ModifierKind.Protected.value) {
						line.code("protected ");
					}
					else if(__ks_3 === ModifierKind.Public.value) {
						line.code("public ");
					}
				}
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				var block = line.newBlock();
				if(KSType.isValue(data.accessor)) {
					block.statement(data.accessor);
				}
				if(KSType.isValue(data.mutator)) {
					block.statement(data.mutator);
				}
				block.done();
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ");
					line.expression(data.defaultValue);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.RequireDeclaration.value) {
				var line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("require ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("require").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.RequireOrExternDeclaration.value) {
				var line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("require|extern ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("require|extern").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.RequireOrImportDeclaration.value) {
				var line = writer.newLine();
				if((data.declarations.length === 1) && (data.declarations[0].attributes.length === 0)) {
					line.code("require|import ").expression(data.declarations[0]);
				}
				else {
					var block = line.code("require|import").newBlock();
					for(var __ks_1 = 0, __ks_2 = data.declarations.length, declaration; __ks_1 < __ks_2; ++__ks_1) {
						declaration = data.declarations[__ks_1];
						toAttributes(declaration, false, block);
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.ReturnStatement.value) {
				if(KSType.isValue(data.value)) {
					writer.newLine().code("return ").expression(data.value).done();
				}
				else {
					writer.newLine().code("return").done();
				}
			}
			else if(__ks_0 === NodeKind.SwitchClause.value) {
				var line = writer.newLine();
				if(data.conditions.length !== 0) {
					for(var index = 0, __ks_1 = data.conditions.length, condition; index < __ks_1; ++index) {
						condition = data.conditions[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.expression(condition);
					}
					line.code(" ");
				}
				if(data.bindings.length !== 0) {
					line.code("with ");
					for(var index = 0, __ks_1 = data.bindings.length, binding; index < __ks_1; ++index) {
						binding = data.bindings[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.expression(binding);
					}
					line.code(" ");
				}
				if(KSType.isValue(data.filter)) {
					line.code("where ").expression(data.filter).code(" ");
				}
				if(KSHelper.valueOf(data.body.kind) === NodeKind.Block.value) {
					line.code("=>").newBlock().expression(data.body).done();
				}
				else {
					line.code("=> ").statement(data.body);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.SwitchStatement.value) {
				var ctrl = writer.newControl().code("switch ").expression(data.expression).step();
				for(var __ks_1 = 0, __ks_2 = data.clauses.length, clause; __ks_1 < __ks_2; ++__ks_1) {
					clause = data.clauses[__ks_1];
					ctrl.statement(clause);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.ThrowStatement.value) {
				writer.newLine().code("throw ").expression(data.value).done();
			}
			else if(__ks_0 === NodeKind.TryStatement.value) {
				var ctrl = writer.newControl().code("try").step().expression(data.body);
				for(var __ks_1 = 0, __ks_2 = data.catchClauses.length, clause; __ks_1 < __ks_2; ++__ks_1) {
					clause = data.catchClauses[__ks_1];
					ctrl.step().statement(clause);
				}
				if(KSType.isValue(data.catchClause)) {
					ctrl.step().statement(data.catchClause);
				}
				if(KSType.isValue(data.finalizer)) {
					ctrl.step().code("finally").step().expression(data.finalizer);
				}
				ctrl.done();
			}
			else if(__ks_0 === NodeKind.TypeAliasDeclaration.value) {
				writer.newLine().code("type ").expression(data.name).code(" = ").expression(data.type).done();
			}
			else if(__ks_0 === NodeKind.UnlessStatement.value) {
				var __ks_1 = data.whenFalse.kind.valueOf();
				if(__ks_1 === NodeKind.Block.value) {
					var ctrl = writer.newControl().code("unless ").expression(data.condition).step().expression(data.whenFalse);
					ctrl.done();
				}
				else if(__ks_1 === NodeKind.ReturnStatement.value) {
					if(KSType.isValue(data.whenFalse.value)) {
						writer.newLine().code("return ").expression(data.whenFalse.value).code(" unless ").expression(data.condition).done();
					}
					else {
						writer.newLine().code("return unless ").expression(data.condition).done();
					}
				}
				else if(__ks_1 === NodeKind.ThrowStatement.value) {
					writer.newLine().code("throw ").expression(data.whenFalse.value).code(" unless ").expression(data.condition).done();
				}
				else {
					writer.newLine().expression(data.whenFalse).code(" unless ").expression(data.condition).done();
				}
			}
			else if(__ks_0 === NodeKind.UntilStatement.value) {
				writer.newControl().code("until ").expression(data.condition).step().expression(data.body).done();
			}
			else if(__ks_0 === NodeKind.VariableDeclaration.value) {
				var immutable = false;
				var autoTyping = false;
				for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = data.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.AutoTyping.value) {
						autoTyping = true;
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
						immutable = true;
					}
				}
				var line = writer.newLine().code(immutable ? "const " : "let ");
				for(var index = 0, __ks_1 = data.variables.length, variable; index < __ks_1; ++index) {
					variable = data.variables[index];
					if(index !== 0) {
						line.code(", ");
					}
					line.expression(variable);
				}
				if(KSType.isValue(data.init)) {
					line.code(autoTyping ? " := " : " = ");
					if(data.await === true) {
						line.code("await ");
					}
					line.expression(data.init);
				}
				line.done();
			}
			else if(__ks_0 === NodeKind.WhileStatement.value) {
				writer.newControl().code("while ").expression(data.condition).step().expression(data.body).done();
			}
			else {
				writer.newLine().expression(data).done();
			}
		}
		function toWrap(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.BinaryExpression.value && KSHelper.valueOf(data.operator.kind) !== BinaryOperatorKind.TypeCasting.value) {
				writer.code("(").expression(data).code(")");
			}
			else if(__ks_0 === NodeKind.ComparisonExpression.value || __ks_0 === NodeKind.ConditionalExpression.value || __ks_0 === NodeKind.PolyadicExpression.value) {
				writer.code("(").expression(data).code(")");
			}
			else {
				writer.expression(data);
			}
		}
		return {
			generate: generate,
			KSWriter: KSWriter,
			KSWriterMode: KSWriterMode
		};
	});
	var Mode = KSHelper.enum(Number, {
		None: 0,
		Async: 1
	});
	var CodeFragment = KSHelper.class({
		$name: "CodeFragment",
		$extends: Fragment,
		__ks_init_1: function() {
			this.end = null;
			this.start = null;
		},
		__ks_init: function() {
			Fragment.prototype.__ks_init.call(this);
			CodeFragment.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(code) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			Fragment.prototype.__ks_cons.call(this, [code]);
		},
		__ks_cons_1: function(code, start, end) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			if(end === void 0 || end === null) {
				throw new TypeError("'end' is not nullable");
			}
			Fragment.prototype.__ks_cons.call(this, [code]);
			this.start = start;
			this.end = end;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				CodeFragment.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				CodeFragment.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		}
	});
	function $code(code) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(code === void 0 || code === null) {
			throw new TypeError("'code' is not nullable");
		}
		return new CodeFragment(code);
	}
	function $const(node) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(node === void 0 || node === null) {
			throw new TypeError("'node' is not nullable");
		}
		return (node._options.format.variables === "es5") ? "var " : "const ";
	}
	function $quote(value) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(value === void 0 || value === null) {
			throw new TypeError("'value' is not nullable");
		}
		return KSHelper.concatString("\"", value.replace(/"/g, "\\\"").replace(/\n/g, "\\n"), "\"");
	}
	var $comma = $code(", ");
	var $dot = $code(".");
	var $equals = $code(" = ");
	var $space = $code(" ");
	var FragmentBuilder = KSHelper.class({
		$name: "FragmentBuilder",
		$extends: Writer,
		__ks_init: function() {
			Writer.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(indent) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			Writer.prototype.__ks_cons.call(this, [(function() {
				var d = new Dictionary();
				d.indent = (function() {
					var d = new Dictionary();
					d.level = indent;
					return d;
				})();
				d.classes = (function() {
					var d = new Dictionary();
					d.array = ArrayWriter;
					d.block = BlockBuilder;
					d.control = ControlBuilder;
					d.expression = ExpressionBuilder;
					d.fragment = CodeFragment;
					d.line = LineBuilder;
					d.object = ObjectWriter;
					return d;
				})();
				return d;
			})()]);
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FragmentBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = this.newLine(this._indent);
			if((args.length === 1) && !KSType.isPrimitive(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return FragmentBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		}
	});
	var BlockBuilder = KSHelper.class({
		$name: "BlockBuilder",
		$extends: BlockWriter,
		__ks_init: function() {
			BlockWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BlockWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_compile_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(!KSType.isPrimitive(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return BlockBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			else if(BlockWriter.prototype.compile) {
				return BlockWriter.prototype.compile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = this._writer.newLine(this._indent + 1);
			if((args.length === 1) && !KSType.isPrimitive(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return BlockBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		}
	});
	var ControlBuilder = KSHelper.class({
		$name: "ControlBuilder",
		$extends: ControlWriter,
		__ks_init: function() {
			ControlWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ControlWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_compile_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			this._step.compile(node, mode);
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.compile) {
				return ControlWriter.prototype.compile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.compileBoolean(node);
			return this;
		},
		compileBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.compileBoolean) {
				return ControlWriter.prototype.compileBoolean.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.compileNullable(node);
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.compileNullable) {
				return ControlWriter.prototype.compileNullable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_wrap_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0) {
				mode = null;
			}
			this._step.wrap(node, mode);
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.wrap) {
				return ControlWriter.prototype.wrap.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.wrapBoolean(node);
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.wrapBoolean) {
				return ControlWriter.prototype.wrapBoolean.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.wrapNullable(node);
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.wrapNullable) {
				return ControlWriter.prototype.wrapNullable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExpressionBuilder = KSHelper.class({
		$name: "ExpressionBuilder",
		$extends: ExpressionWriter,
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var data;
			for(var i = 0, __ks_0 = args.length, arg; i < __ks_0; ++i) {
				arg = args[i];
				if(KSType.isArray(arg)) {
					this.code.apply(this, arg);
				}
				else if(!KSType.isPrimitive(arg)) {
					this._writer.push(arg);
				}
				else {
					if(((i + 1) < args.length) && !KSType.isPrimitive(data = args[i + 1]) && KSType.isValue(data.kind)) {
						if(KSType.isValue(data.start)) {
							this._writer.push(this._writer.newFragment(arg, data.start, data.end));
						}
						else {
							this._writer.push(this._writer.newFragment(arg));
						}
						i++;
					}
					else {
						this._writer.push(this._writer.newFragment(arg));
					}
				}
			}
			return this;
		},
		code: function() {
			return ExpressionBuilder.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_compile_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(!KSType.isPrimitive(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.compile) {
				return ExpressionWriter.prototype.compile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(!KSType.isPrimitive(node)) {
				node.toBooleanFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compileBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.compileBoolean) {
				return ExpressionWriter.prototype.compileBoolean.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!KSType.isPrimitive(node)) {
				node.toNullableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.compileNullable) {
				return ExpressionWriter.prototype.compileNullable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileReusable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!KSType.isPrimitive(node)) {
				node.toReusableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compileReusable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileReusable_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.compileReusable) {
				return ExpressionWriter.prototype.compileReusable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_wrap_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(node.isComputed() === true) {
				this.code("(");
				node.toFragments(this, mode);
				this.code(")");
			}
			else {
				node.toFragments(this, mode);
			}
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.wrap) {
				return ExpressionWriter.prototype.wrap.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function(node, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			if(node.isBooleanComputed() === true) {
				this.code("(");
				node.toBooleanFragments(this, mode);
				this.code(")");
			}
			else {
				node.toBooleanFragments(this, mode);
			}
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.wrapBoolean) {
				return ExpressionWriter.prototype.wrapBoolean.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node.isNullableComputed() === true) {
				this.code("(");
				node.toNullableFragments(this);
				this.code(")");
			}
			else {
				node.toNullableFragments(this);
			}
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.wrapNullable) {
				return ExpressionWriter.prototype.wrapNullable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var LineBuilder = KSHelper.class({
		$name: "LineBuilder",
		$extends: ExpressionBuilder,
		__ks_init: function() {
			ExpressionBuilder.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionBuilder.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.lineTerminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return LineBuilder.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionBuilder.prototype.done.apply(this, arguments);
		},
		__ks_func_newControl_0: function(indent, initiator, terminator) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(initiator === void 0 || initiator === null) {
				initiator = true;
			}
			if(terminator === void 0 || terminator === null) {
				terminator = true;
			}
			return this._writer.newControl(indent, initiator, terminator);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 3) {
				return LineBuilder.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			return ExpressionBuilder.prototype.newControl.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return this;
		},
		newLine: function() {
			if(arguments.length === 0) {
				return LineBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			return ExpressionBuilder.prototype.newLine.apply(this, arguments);
		}
	});
	var $importTypeModifiers = /^(\w+)(!)?(\?)?$/;
	var $natives = (function() {
		var d = new Dictionary();
		d.Any = true;
		d.any = true;
		d.Array = true;
		d.array = true;
		d.Boolean = true;
		d.bool = true;
		d.Class = true;
		d.class = true;
		d.Date = true;
		d.date = true;
		d.Dictionary = true;
		d.dict = true;
		d.Enum = true;
		d.enum = true;
		d.Error = true;
		d.Function = true;
		d.func = true;
		d.Never = true;
		d.never = true;
		d.Namespace = true;
		d.Null = true;
		d.null = true;
		d.Number = true;
		d.number = true;
		d.Primitive = true;
		d.Object = true;
		d.object = true;
		d.RegExp = true;
		d.regex = true;
		d.String = true;
		d.string = true;
		d.Struct = true;
		d.struct = true;
		d.Void = true;
		d.void = true;
		return d;
	})();
	var $types = (function() {
		var d = new Dictionary();
		d.any = "Any";
		d.array = "Array";
		d.bool = "Boolean";
		d.class = "Class";
		d.date = "Date";
		d.dict = "Dictionary";
		d.enum = "Enum";
		d.func = "Function";
		d.never = "Never";
		d.number = "Number";
		d.object = "Object";
		d.string = "String";
		d.struct = "Struct";
		d.void = "Void";
		return d;
	})();
	var $virtuals = (function() {
		var d = new Dictionary();
		d.Enum = true;
		d.Namespace = true;
		d.Primitive = true;
		d.Struct = true;
		return d;
	})();
	var ExportMode = KSHelper.enum(Number, {
		Default: 0,
		IgnoreAlteration: 1,
		OverloadedFunction: 2
	});
	var MatchingMode = KSHelper.enum(Number, {
		Default: 0,
		Exact: 1,
		ExactParameters: 2,
		ExactReturn: 4,
		Similar: 8,
		SimilarParameters: 16,
		SimilarReturn: 32,
		MissingParameters: 64,
		MissingReturn: 128,
		MissingType: 256,
		MissingParameterType: 512,
		ShiftableParameters: 1024,
		RequireAllParameters: 2048
	});
	MatchingMode.Signature = MatchingMode(MatchingMode.Similar | MatchingMode.MissingParameters | MatchingMode.ShiftableParameters | MatchingMode.MissingParameterType | MatchingMode.RequireAllParameters | MatchingMode.MissingReturn);
	var QuoteMode = KSHelper.enum(Number, {
		None: 0,
		Double: 1,
		Single: 2
	});
	var TypeKind = KSHelper.enum(String, {
		Alias: "alias",
		Array: "array",
		Class: "class",
		Dictionary: "dictionary",
		Enum: "enum",
		Exclusion: "exclusion",
		Function: "function",
		Fusion: "fusion",
		Namespace: "namespace",
		OverloadedFunction: "overloadedfunction",
		Reference: "reference",
		Sealable: "sealable",
		Struct: "struct",
		Union: "union"
	});
	var Type = KSHelper.class({
		$name: "Type",
		$static: {
			__ks_sttc_arrayOf_0: function(parameter, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameter === void 0 || parameter === null) {
					throw new TypeError("'parameter' is not nullable");
				}
				else if(!KSType.isInstance(parameter, Type)) {
					throw new TypeError("'parameter' is not of type 'Type'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				return new ReferenceType(scope, "Array", false, [parameter]);
			},
			arrayOf: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_arrayOf_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0) {
					data = null;
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return Type.fromAST(data, node.scope(), true, node);
			},
			__ks_sttc_fromAST_1: function(data, scope, defined, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0) {
					data = null;
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(defined === void 0 || defined === null) {
					throw new TypeError("'defined' is not nullable");
				}
				else if(!KSType.isBoolean(defined)) {
					throw new TypeError("'defined' is not of type 'Boolean'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(!KSType.isValue(data)) {
					return AnyType.NullableUnexplicit;
				}
				else if(KSType.isInstance(data, Type)) {
					return data;
				}
				var __ks_0 = data.kind.valueOf();
				if(__ks_0 === NodeKind.ClassDeclaration.value) {
					var type = new ClassType(scope);
					for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
						modifier = data.modifiers[__ks_1];
						if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
							type._abstract = data.abstract;
						}
						else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
							type.flagSealed();
						}
					}
					return new NamedType(data.name.name, type);
				}
				else if(__ks_0 === NodeKind.ExclusionType.value) {
					return new ExclusionType(scope, KSHelper.mapArray(data.types, function(type) {
						return Type.fromAST(type, scope, defined, node);
					}));
				}
				else if(__ks_0 === NodeKind.FunctionDeclaration.value || __ks_0 === NodeKind.MethodDeclaration.value) {
					if(KSType.isValue(data.parameters)) {
						return new FunctionType(KSHelper.mapArray(data.parameters, function(parameter) {
							return Type.fromAST(parameter, scope, defined, node);
						}), data, node);
					}
					else {
						return new FunctionType([new ParameterType(scope, AnyType.NullableUnexplicit, 0, Infinity)], data, node);
					}
				}
				else if(__ks_0 === NodeKind.FunctionExpression.value || __ks_0 === NodeKind.MethodDeclaration.value) {
					return new FunctionType(KSHelper.mapArray(data.parameters, function(parameter) {
						return Type.fromAST(parameter, scope, defined, node);
					}), data, node);
				}
				else if(__ks_0 === NodeKind.FusionType.value) {
					return new FusionType(scope, KSHelper.mapArray(data.types, function(type) {
						return Type.fromAST(type, scope, defined, node);
					}));
				}
				else if(__ks_0 === NodeKind.Identifier.value) {
					var variable = scope.getVariable(data.name);
					if(KSType.isValue(variable)) {
						return variable.getDeclaredType();
					}
					else if($runtime.getVariable(data.name, node) !== null) {
						return Type.Any;
					}
					else {
						ReferenceException.throwNotDefined(data.name, node);
					}
				}
				else if(__ks_0 === NodeKind.MemberExpression.value) {
					var object = Type.fromAST(data.object, scope, defined, node);
					if(object.isAny() === true) {
						return Type.Any;
					}
					else {
						return object.getProperty(data.property.name);
					}
				}
				else if(__ks_0 === NodeKind.NumericExpression.value) {
					return scope.reference("Number");
				}
				else if(__ks_0 === NodeKind.Parameter.value) {
					var type = KSType.isValue(data.type) ? Type.fromAST(data.type, scope, defined, node) : AnyType.Unexplicit;
					var __ks_default_1 = 0;
					var min = 1;
					var max = 1;
					if(KSType.isValue(data.defaultValue)) {
						__ks_default_1 = 1;
						min = 0;
					}
					var nf = true;
					for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2 && nf; ++__ks_1) {
						modifier = data.modifiers[__ks_1];
						if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
							if(modifier.arity === true) {
								min = modifier.arity.min;
								max = modifier.arity.max;
							}
							else {
								min = 0;
								max = Infinity;
							}
							nf = true;
						}
					}
					var name = null;
					if(KSType.isValue(data.name)) {
						if(KSHelper.valueOf(data.name.kind) === NodeKind.Identifier.value) {
							name = data.name.name;
						}
					}
					else {
						type = type.setNullable(true);
					}
					return new ParameterType(scope, name, type, min, max, __ks_default_1);
				}
				else if(__ks_0 === NodeKind.TypeReference.value) {
					if(KSType.isValue(data.elements)) {
						var type = new ArrayType(scope);
						for(var __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
							element = data.elements[__ks_1];
							type.addElement(Type.fromAST(element, scope, defined, node));
						}
						return type;
					}
					else if(KSType.isValue(data.properties)) {
						var type = new DictionaryType(scope);
						for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
							property = data.properties[__ks_1];
							type.addProperty(property.name.name, Type.fromAST(property.type, scope, defined, node));
						}
						return type;
					}
					else if(KSType.isValue(data.typeName)) {
						var nullable = false;
						for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
							modifier = data.modifiers[__ks_1];
							if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
								nullable = true;
							}
						}
						if(KSHelper.valueOf(data.typeName.kind) === NodeKind.Identifier.value) {
							var name = Type.renameNative(data.typeName.name);
							if(name === "Any") {
								return nullable ? AnyType.NullableExplicit : AnyType.Explicit;
							}
							else if(!defined || (Type.isNative(name) === true) || (scope.hasVariable(name, -1) === true)) {
								if(KSType.isValue(data.typeParameters)) {
									var type = new ReferenceType(scope, name, nullable);
									for(var __ks_1 = 0, __ks_2 = data.typeParameters.length, parameter; __ks_1 < __ks_2; ++__ks_1) {
										parameter = data.typeParameters[__ks_1];
										type._parameters.push(Type.fromAST(parameter, scope, defined, node));
									}
									return type;
								}
								else {
									return scope.reference(name, nullable);
								}
							}
							else {
								ReferenceException.throwNotDefined(data.typeName.name, node);
							}
						}
						else if((KSHelper.valueOf(data.typeName.kind) === NodeKind.MemberExpression.value) && !(data.typeName.computed === true)) {
							var __ks_namespace_1 = Type.fromAST(data.typeName.object, scope, defined, node);
							var type = new ReferenceType(__ks_namespace_1.scope(), data.typeName.property.name, nullable);
							if(KSType.isValue(data.typeParameters)) {
								for(var __ks_1 = 0, __ks_2 = data.typeParameters.length, parameter; __ks_1 < __ks_2; ++__ks_1) {
									parameter = data.typeParameters[__ks_1];
									type._parameters.push(Type.fromAST(parameter, scope, defined, node));
								}
							}
							return type;
						}
					}
				}
				else if(__ks_0 === NodeKind.UnionType.value) {
					return new UnionType(scope, KSHelper.mapArray(data.types, function(type) {
						return Type.fromAST(type, scope, defined, node);
					}));
				}
				else if(__ks_0 === NodeKind.VariableDeclarator.value || __ks_0 === NodeKind.FieldDeclaration.value) {
					return Type.fromAST(data.type, scope, defined, node);
				}
				console.info(data);
				throw new NotImplementedException(node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				else if(arguments.length === 4) {
					return Type.__ks_sttc_fromAST_1.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(KSType.isNumber(data)) {
					var index = data;
					while(KSType.isValue(alterations[index])) {
						index = alterations[index];
					}
					var type;
					if(KSType.isValue(references[index]) ? (type = references[index], true) : false) {
						return type;
					}
					else {
						var __ks_type_1 = Type.import(index, metadata, references, alterations, queue, scope, node);
						if(KSType.isInstance(__ks_type_1, AliasType) || KSType.isInstance(__ks_type_1, ClassType) || KSType.isInstance(__ks_type_1, EnumType)) {
							__ks_type_1 = new NamedType(scope.acquireTempName(), __ks_type_1);
							scope.define(__ks_type_1.name(), true, __ks_type_1, node);
						}
						else if(KSType.isInstance(__ks_type_1, NamespaceType)) {
							__ks_type_1 = new NamedContainerType(scope.acquireTempName(), __ks_type_1);
							scope.define(__ks_type_1.name(), true, __ks_type_1, node);
						}
						references[index] = __ks_type_1;
						return __ks_type_1;
					}
				}
				else if(KSType.isString(data)) {
					if(data === "Null") {
						return Type.Null;
					}
					var match = $importTypeModifiers.exec(data);
					if(KSType.isValue(match)) {
						var nullable = KSType.isValue(match[3]);
						if(match[1] === "Any") {
							if(KSType.isValue(match[2])) {
								return nullable ? AnyType.NullableExplicit : AnyType.Explicit;
							}
							else {
								return nullable ? AnyType.NullableUnexplicit : AnyType.Unexplicit;
							}
						}
						else {
							return scope.reference(match[1], nullable);
						}
					}
					else {
						return scope.reference(data);
					}
				}
				else if(KSType.isArray(data)) {
					var index = data[0];
					if(KSType.isNumber(index)) {
						var type = references[index];
						if(!KSType.isValue(type)) {
							type = Type.fromMetadata(index, metadata, references, alterations, queue, scope, node);
						}
						if(!KSType.isInstance(type, NamedType)) {
							type = new NamedType(data[1], type);
							references[index] = type;
						}
						return type;
					}
				}
				else if(KSType.isValue(data.kind)) {
					var __ks_0 = data.kind.valueOf();
					if(__ks_0 === TypeKind.Class.value) {
						return ClassType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Enum.value) {
						return EnumType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Function.value) {
						return FunctionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Fusion.value) {
						return FusionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.OverloadedFunction.value) {
						return OverloadedFunctionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Reference.value) {
						return ReferenceType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Sealable.value) {
						return SealableType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Union.value) {
						return UnionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
				}
				else if(KSType.isValue(data.reference)) {
					var type = Type.fromMetadata(data.reference, metadata, references, alterations, queue, scope, node);
					if(KSType.isInstance(type, NamedType)) {
						return scope.reference(type);
					}
					else {
						return type;
					}
				}
				else if(KSType.isValue(data.type)) {
					return Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node);
				}
				console.info(data);
				throw new NotImplementedException(node);
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return Type.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_import_0: function(index, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var data = metadata.references[index];
				if(!KSType.isValue(data)) {
					return Type.Any;
				}
				else if(KSType.isString(data)) {
					return (data === "Any") ? Type.Any : scope.reference(data);
				}
				else if(KSType.isArray(data)) {
					if(KSType.isNumber(data[0])) {
						if(data[0] === -1) {
							throw new NotImplementedException(node);
						}
						else {
							return references[data[0]].name(data[1]);
						}
					}
				}
				else if(KSType.isValue(data.reference)) {
					if(KSType.isValue(references[data.reference])) {
						return scope.reference(references[data.reference]);
					}
					else {
						var type = Type.import(data.reference, metadata, references, alterations, queue, scope, node);
						if(KSType.isInstance(type, AliasType) || KSType.isInstance(type, ClassType) || KSType.isInstance(type, EnumType)) {
							type = new NamedType(scope.acquireTempName(), type);
							scope.define(type.name(), true, type, node);
						}
						else if(KSType.isInstance(type, NamespaceType)) {
							type = new NamedContainerType(scope.acquireTempName(), type);
							scope.define(type.name(), true, type, node);
						}
						references[data.reference] = type;
						return scope.reference(type);
					}
				}
				else if(KSType.isValue(data.kind)) {
					var __ks_0 = data.kind.valueOf();
					if(__ks_0 === TypeKind.Alias.value) {
						return AliasType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Class.value) {
						return ClassType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Dictionary.value) {
						return DictionaryType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Enum.value) {
						return EnumType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Function.value) {
						return FunctionType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Namespace.value) {
						return NamespaceType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.OverloadedFunction.value) {
						return OverloadedFunctionType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Struct.value) {
						return StructType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_0 === TypeKind.Union.value) {
						return UnionType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
				}
				console.info(data);
				throw new NotImplementedException(node);
			},
			import: function() {
				if(arguments.length === 7) {
					return Type.__ks_sttc_import_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_isNative_0: function(name) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				return $natives[name] === true;
			},
			isNative: function() {
				if(arguments.length === 1) {
					return Type.__ks_sttc_isNative_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_renameNative_0: function(name) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				return KSType.isString($types[name]) ? $types[name] : name;
			},
			renameNative: function() {
				if(arguments.length === 1) {
					return Type.__ks_sttc_renameNative_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toNamedType_0: function(name, type) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				else if(!KSType.isInstance(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
				if(KSType.isInstance(type, AliasType) || KSType.isInstance(type, ClassType) || KSType.isInstance(type, EnumType) || KSType.isInstance(type, StructType)) {
					return new NamedType(name, type);
				}
				else if(KSType.isInstance(type, NamespaceType)) {
					return new NamedContainerType(name, type);
				}
				else {
					return type;
				}
			},
			toNamedType: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_toNamedType_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_union_0: function(scope) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				var types = Array.prototype.slice.call(arguments, 1, arguments.length);
				if(types.length === 1) {
					return types[0];
				}
				var union = new UnionType(scope);
				for(var __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					union.addType(type);
				}
				return union.type();
			},
			union: function() {
				return Type.__ks_sttc_union_0.apply(this, arguments);
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._alien = false;
			this._exhaustive = null;
			this._exported = false;
			this._referenced = false;
			this._referenceIndex = -1;
			this._required = false;
			this._sealed = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			this._scope = scope;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Type.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_canBeBoolean_0: function() {
			return (this.isAny() === true) || (this.isBoolean() === true);
		},
		canBeBoolean: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_canBeBoolean_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_canBeNumber_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			else if(!KSType.isBoolean(any)) {
				throw new TypeError("'any' is not of type 'Boolean'");
			}
			return (any && (this.isAny() === true)) || (this.isNumber() === true);
		},
		canBeNumber: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Type.prototype.__ks_func_canBeNumber_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_canBeString_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			else if(!KSType.isBoolean(any)) {
				throw new TypeError("'any' is not of type 'Boolean'");
			}
			return (any && (this.isAny() === true)) || (this.isString() === true);
		},
		canBeString: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Type.prototype.__ks_func_canBeString_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_canBeVirtual_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(this.isAny() === true) {
				return true;
			}
			if(name === "Enum") {
				return this.isEnum();
			}
			else if(name === "Namespace") {
				return this.isNamespace();
			}
			else if(name === "Struct") {
				return this.isStruct();
			}
			return false;
		},
		canBeVirtual: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_canBeVirtual_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_condense_0: function() {
			return this;
		},
		condense: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_condense_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discard_0: function() {
			return this;
		},
		discard: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discard_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discardAlias_0: function() {
			return this;
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardAlias_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discardName_0: function() {
			return this;
		},
		discardName: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardName_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discardReference_0: function() {
			return this;
		},
		discardReference: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardReference_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discardSpread_0: function() {
			return this;
		},
		discardSpread: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardSpread_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discardVariable_0: function() {
			return this;
		},
		discardVariable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardVariable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_equals_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0) {
				value = null;
			}
			return KSType.isValue(value) && (this.isMatching(value, MatchingMode.Exact) === true);
		},
		equals: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagAlien_0: function() {
			this._alien = true;
			return this;
		},
		flagAlien: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagAlien_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			this._exported = true;
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagReferenced_0: function() {
			this._referenced = true;
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagRequired_0: function() {
			this._required = true;
			return this;
		},
		flagRequired: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagRequired_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagSealed_0: function() {
			this._sealed = true;
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagSealed_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return null;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return false;
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlias_0: function() {
			return false;
		},
		isAlias: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAlias_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlien_0: function() {
			return this._alien;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAlien_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return false;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAlteration_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return false;
		},
		isAny: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAny_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return false;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isArray_0: function() {
			return false;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isArray_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBoolean_0: function() {
			return false;
		},
		isBoolean: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isBoolean_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isCloned_0: function() {
			return false;
		},
		isCloned: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isCloned_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isClass_0: function() {
			return false;
		},
		isClass: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isClass_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isContainedIn_0: function(types) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(types === void 0 || types === null) {
				throw new TypeError("'types' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				if(this.equals(type)) {
					return true;
				}
			}
			return false;
		},
		isContainedIn: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_isContainedIn_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDictionary_0: function() {
			return false;
		},
		isDictionary: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isDictionary_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return false;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isEnum_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExclusion_0: function() {
			return false;
		},
		isExclusion: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExclusion_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExhaustive_0: function() {
			if(this._exhaustive === null) {
				return !this._alien && !this._required;
			}
			else {
				return this._exhaustive;
			}
		},
		__ks_func_isExhaustive_1: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (this.isExhaustive() === true) && !(node._options.rules.ignoreMisfit === true);
		},
		isExhaustive: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExhaustive_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Type.prototype.__ks_func_isExhaustive_1.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExplicitlyExported_0: function() {
			return this._exported;
		},
		isExplicitlyExported: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExplicitlyExported_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return (this.isAlien() === true) || (this.isExported() === true) || (this.isNative() === true) || (this.isRequired() === true);
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExportable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExported_0: function() {
			return this._exported;
		},
		isExported: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExported_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return false;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExtendable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return false;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isFlexible_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isFunction_0: function() {
			return false;
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isFunction_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isHybrid_0: function() {
			return false;
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isHybrid_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInoperative_0: function() {
			return (this.isNever() === true) || (this.isVoid() === true);
		},
		isInoperative: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isInoperative_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return false;
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return false;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isMethod_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMorePreciseThan_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return false;
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNamed_0: function() {
			return false;
		},
		isNamed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNamed_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNamespace_0: function() {
			return false;
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNamespace_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNative_0: function() {
			return false;
		},
		isNative: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNative_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNever_0: function() {
			return false;
		},
		isNever: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNever_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNumber_0: function() {
			return false;
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNumber_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNull_0: function() {
			return false;
		},
		isNull: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNull_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isObject_0: function() {
			return false;
		},
		isObject: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isObject_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isPredefined_0: function() {
			return false;
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isPredefined_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isPrimitive_0: function() {
			return false;
		},
		isPrimitive: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isPrimitive_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isReducible_0: function() {
			return false;
		},
		isReducible: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isReducible_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isReference_0: function() {
			return false;
		},
		isReference: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isReference_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isReferenced_0: function() {
			return this._referenced;
		},
		isReferenced: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isReferenced_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRequired_0: function() {
			return this._required;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isRequired_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSealable_0: function() {
			return false;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealed_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSealedAlien_0: function() {
			return this._alien && this._sealed;
		},
		isSealedAlien: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealedAlien_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSpread_0: function() {
			return false;
		},
		isSpread: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSpread_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isString_0: function() {
			return false;
		},
		isString: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isString_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isStruct_0: function() {
			return false;
		},
		isStruct: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isStruct_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isTypeOf_0: function() {
			return false;
		},
		isTypeOf: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isTypeOf_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUnion_0: function() {
			return false;
		},
		isUnion: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isUnion_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isVirtual_0: function() {
			return false;
		},
		isVirtual: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isVirtual_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isVoid_0: function() {
			return false;
		},
		isVoid: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isVoid_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0) {
				that = null;
			}
			else if(that !== null && !KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type?'");
			}
			return this.equals(that);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reduce_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return this;
		},
		reduce: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_reduce_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function(scope) {
			if(scope === void 0 || scope === null) {
				scope = this._scope;
			}
			return scope.reference(this);
		},
		reference: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Type.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_referenceIndex_0: function() {
			return this._referenceIndex;
		},
		referenceIndex: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_referenceIndex_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setExhaustive_0: function(exhaustive) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(exhaustive === void 0) {
				exhaustive = null;
			}
			else if(exhaustive !== null && !KSType.isBoolean(exhaustive)) {
				throw new TypeError("'exhaustive' is not of type 'Boolean?'");
			}
			this._exhaustive = exhaustive;
			return this;
		},
		setExhaustive: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_setExhaustive_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setNullable_0: function(nullable) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			return this;
		},
		setNullable: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_setNullable_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toExportOrIndex_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this.isReferenced() === true) {
				return this.toMetadata(references, mode);
			}
			else {
				return this.export(references, mode);
			}
		},
		toExportOrIndex: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toExportOrIndex_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toExportOrReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._referenceIndex === -1) {
				return this.export(references, mode);
			}
			else {
				return (function(that) {
					var d = new Dictionary();
					d.reference = that._referenceIndex;
					return d;
				})(this);
			}
		},
		toExportOrReference: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toExportOrReference_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._referenceIndex === -1) {
				this._referenceIndex = references.length;
				references.push(null);
				references[this._referenceIndex] = this.export(references, mode);
			}
			return this._referenceIndex;
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotSupportedException();
		},
		__ks_func_toQuote_1: function(__ks_double_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_double_1 === void 0 || __ks_double_1 === null) {
				throw new TypeError("'double' is not nullable");
			}
			else if(!KSType.isBoolean(__ks_double_1)) {
				throw new TypeError("'double' is not of type 'Boolean'");
			}
			if(__ks_double_1) {
				return "\"" + this.toQuote() + "\"";
			}
			else {
				return "'" + this.toQuote() + "'";
			}
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Type.prototype.__ks_func_toQuote_1.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.reference = that.toMetadata(references, mode);
				return d;
			})(this);
		},
		toReference: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FunctionType = KSHelper.class({
		$name: "FunctionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return FunctionType.fromAST(data, node.scope(), true, node);
			},
			__ks_sttc_fromAST_1: function(data, scope, defined, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(defined === void 0 || defined === null) {
					throw new TypeError("'defined' is not nullable");
				}
				else if(!KSType.isBoolean(defined)) {
					throw new TypeError("'defined' is not of type 'Boolean'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(KSType.isValue(data.parameters)) {
					return new FunctionType(KSHelper.mapArray(data.parameters, function(parameter) {
						return Type.fromAST(parameter, scope, defined, node);
					}), data, node);
				}
				else {
					return new FunctionType([new ParameterType(scope, Type.Any, 0, Infinity)], data, node);
				}
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return FunctionType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				else if(arguments.length === 4) {
					return FunctionType.__ks_sttc_fromAST_1.apply(this, arguments);
				}
				return Type.fromAST.apply(null, arguments);
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new FunctionType(scope);
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				if(KSType.isValue(data.exhaustive)) {
					type._exhaustive = data.exhaustive;
				}
				type._throws = KSHelper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
				});
				if(KSType.isValue(data.returns)) {
					type._returnType = Type.fromMetadata(data.returns, metadata, references, alterations, queue, scope, node);
					type._missingReturn = false;
				}
				type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				});
				type.updateArguments();
				if(data.sealed === true) {
					type.flagSealed();
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return FunctionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new FunctionType(scope);
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				if(KSType.isValue(data.exhaustive)) {
					type._exhaustive = data.exhaustive;
				}
				queue.push(function() {
					type._throws = KSHelper.mapArray(data.throws, function(__ks_throw_1) {
						return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
					});
					if(KSType.isValue(data.returns)) {
						type._returnType = Type.fromMetadata(data.returns, metadata, references, alterations, queue, scope, node);
						type._missingReturn = false;
					}
					type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
						return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
					});
					type.updateArguments();
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return FunctionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			},
			__ks_sttc_isOptional_0: function(parameters, index, step) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(step === void 0 || step === null) {
					throw new TypeError("'step' is not nullable");
				}
				if(KSOperator.gte(index, parameters.length)) {
					return true;
				}
				if(KSOperator.lte(step, parameters[index].min())) {
					return false;
				}
				for(var __ks_0 = KSOperator.addOrConcat(index, 1), __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = parameters[__ks_0];
					if(parameter.min() !== 0) {
						return false;
					}
				}
				return true;
			},
			isOptional: function() {
				if(arguments.length === 3) {
					return FunctionType.__ks_sttc_isOptional_0.apply(this, arguments);
				}
				else if(Type.isOptional) {
					return Type.isOptional.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toQuote_0: function(parameters) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				var fragments = "";
				fragments += "(";
				for(var index = 0, __ks_0 = parameters.length, parameter; index < __ks_0; ++index) {
					parameter = parameters[index];
					if(index !== 0) {
						fragments += ", ";
					}
					console.log(parameter);
					fragments = KSHelper.concatString(fragments, parameter.toQuote());
				}
				fragments += ")";
				return fragments;
			},
			toQuote: function() {
				if(arguments.length === 1) {
					return FunctionType.__ks_sttc_toQuote_0.apply(this, arguments);
				}
				else if(Type.toQuote) {
					return Type.toQuote.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._async = false;
			this._hasRest = false;
			this._max = 0;
			this._maxBefore = 0;
			this._maxAfter = 0;
			this._min = 0;
			this._minBefore = 0;
			this._minAfter = 0;
			this._missingParameters = false;
			this._missingReturn = true;
			this._parameters = [];
			this._restIndex = -1;
			this._returnType = AnyType.NullableUnexplicit;
			this._throws = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			FunctionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
		},
		__ks_cons_1: function(parameters, data, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters, ParameterType)) {
				throw new TypeError("'parameters' is not of type 'Array<ParameterType>'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Type.prototype.__ks_cons.call(this, [node.scope()]);
			if(KSType.isValue(data.type)) {
				this._returnType = Type.fromAST(data.type, node);
				this._missingReturn = false;
			}
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if(KSOperator.eq(parameter.max(), Infinity)) {
					if(KSOperator.eq(this._max, Infinity)) {
						SyntaxException.throwTooMuchRestParameter(node);
					}
					else {
						this._max = Infinity;
					}
				}
				else {
					this._max = KSOperator.addOrConcat(this._max, parameter.max());
				}
				this._min = KSOperator.addOrConcat(this._min, parameter.min());
				this._parameters.push(parameter);
			}
			if(KSType.isValue(data.modifiers)) {
				this.processModifiers(data.modifiers);
			}
			if(KSType.isValue(data.throws)) {
				var type;
				for(var __ks_0 = 0, __ks_1 = data.throws.length, __ks_throw_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_throw_1 = data.throws[__ks_0];
					var __ks_2;
					if((KSType.isValue(__ks_2 = Type.fromAST(__ks_throw_1, node).discardReference()) ? (type = __ks_2, true) : false) && (type.isNamed() === true) && (type.isClass() === true)) {
						this._throws.push(type);
					}
					else {
						TypeException.throwNotClass(__ks_throw_1.name, node);
					}
				}
			}
			this.updateArguments();
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FunctionType.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				FunctionType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_absoluteMax_0: function() {
			return this._async ? this._max + 1 : this._max;
		},
		absoluteMax: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_absoluteMax_0.apply(this);
			}
			else if(Type.prototype.absoluteMax) {
				return Type.prototype.absoluteMax.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_absoluteMin_0: function() {
			return this._async ? this._min + 1 : this._min;
		},
		absoluteMin: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_absoluteMin_0.apply(this);
			}
			else if(Type.prototype.absoluteMin) {
				return Type.prototype.absoluteMin.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addParameter_0: function(type, min, max) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(min === void 0 || min === null) {
				min = 1;
			}
			if(max === void 0 || max === null) {
				max = 1;
			}
			this._parameters.push(new ParameterType(this._scope, type, min, max));
			if(this._hasRest) {
				this._max = KSOperator.addOrConcat(this._max, max);
				this._minAfter = KSOperator.addOrConcat(this._minAfter, min);
				this._maxAfter = KSOperator.addOrConcat(this._maxAfter, max);
			}
			else if(KSOperator.eq(max, Infinity)) {
				this._max = Infinity;
				this._restIndex = this._parameters.length - 1;
				this._hasRest = true;
			}
			else {
				this._max = KSOperator.addOrConcat(this._max, max);
				this._minBefore = KSOperator.addOrConcat(this._minBefore, min);
				this._maxBefore = KSOperator.addOrConcat(this._maxBefore, max);
			}
			this._min = KSOperator.addOrConcat(this._min, min);
		},
		addParameter: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return FunctionType.prototype.__ks_func_addParameter_0.apply(this, arguments);
			}
			else if(Type.prototype.addParameter) {
				return Type.prototype.addParameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_async_0: function() {
			this._async = true;
		},
		async: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_async_0.apply(this);
			}
			else if(Type.prototype.async) {
				return Type.prototype.async.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSOperator.bitwiseAnd(mode, ExportMode.OverloadedFunction) !== 0) {
				return (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Function;
					d.async = that._async;
					d.min = that._min;
					d.max = that._max;
					d.parameters = KSHelper.mapArray(that._parameters, function(parameter) {
						return parameter.export(references, mode);
					});
					d.returns = that._returnType.toReference(references, mode);
					d.throws = KSHelper.mapArray(that._throws, function(__ks_throw_1) {
						return __ks_throw_1.toReference(references, mode);
					});
					return d;
				})(this);
			}
			else {
				return (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Function;
					d.async = that._async;
					d.exhaustive = that.isExhaustive();
					d.min = that._min;
					d.max = that._max;
					d.parameters = KSHelper.mapArray(that._parameters, function(parameter) {
						return parameter.export(references, mode);
					});
					d.returns = that._returnType.toReference(references, mode);
					d.throws = KSHelper.mapArray(that._throws, function(__ks_throw_1) {
						return __ks_throw_1.toReference(references, mode);
					});
					return d;
				})(this);
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			if(this._exported) {
				return this;
			}
			this._exported = true;
			for(var __ks_0 = 0, __ks_1 = this._throws.length, error; __ks_0 < __ks_1; ++__ks_0) {
				error = this._throws[__ks_0];
				error.flagExported(false);
			}
			this._returnType.flagExported(false);
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return Type.Any;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		__ks_func_index_1: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_index_0.apply(this);
			}
			else if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_index_1.apply(this, arguments);
			}
			else if(Type.prototype.index) {
				return Type.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return this._async;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isCatchingError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			if(this._throws.length !== 0) {
				for(var __ks_0 = 0, __ks_1 = this._throws.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._throws[__ks_0];
					if(error.matchInheritanceOf(type) === true) {
						return true;
					}
				}
			}
			else if(this._returnType.isNever() === true) {
				return true;
			}
			return false;
		},
		isCatchingError: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_isCatchingError_0.apply(this, arguments);
			}
			else if(Type.prototype.isCatchingError) {
				return Type.prototype.isCatchingError.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(!(parameter.isExportable() === true)) {
					return false;
				}
			}
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isFunction_0: function() {
			return true;
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_isFunction_0.apply(this);
			}
			return Type.prototype.isFunction.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ReferenceType)) {
				throw new TypeError("'value' is not of type 'ReferenceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(value.name() !== "Function") {
				return false;
			}
			if(((mode & MatchingMode.Exact) !== 0) || ((mode & MatchingMode.ExactParameters) !== 0)) {
				return (this._min === 0) && (KSOperator.eq(this._max, Infinity));
			}
			else {
				return true;
			}
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, FunctionType)) {
				throw new TypeError("'value' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this._async !== value._async) {
				return false;
			}
			if((mode & MatchingMode.Exact) !== 0) {
				mode = MatchingMode(mode | MatchingMode.ExactParameters | MatchingMode.ExactReturn);
			}
			else if((mode & MatchingMode.Similar) !== 0) {
				mode = MatchingMode(mode | MatchingMode.SimilarParameters | MatchingMode.SimilarReturn);
			}
			if(((mode & MatchingMode.MissingParameters) !== 0) && this._missingParameters) {
			}
			else if((mode & MatchingMode.ShiftableParameters) !== 0) {
				var parameterMode;
				if((mode & MatchingMode.ExactParameters) !== 0) {
					parameterMode = MatchingMode.Exact;
				}
				else if((mode & MatchingMode.MissingParameterType) !== 0) {
					parameterMode = MatchingMode(MatchingMode.Similar | MatchingMode.MissingType);
				}
				else {
					parameterMode = MatchingMode.Similar;
				}
				if((mode & MatchingMode.RequireAllParameters) !== 0) {
					parameterMode = MatchingMode(parameterMode | MatchingMode.RequireAllParameters);
				}
				if(!this.isParametersMatching(value._parameters, parameterMode)) {
					return false;
				}
			}
			else {
				if((this._hasRest !== value._hasRest) || (this._max !== value._max) || (this._min !== value._min) || (this._restIndex !== value._restIndex) || (this._parameters.length !== value._parameters.length)) {
					return false;
				}
				if((mode & MatchingMode.ExactParameters) !== 0) {
					for(var index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						if(!(parameter.isMatching(value._parameters[index], MatchingMode.Exact) === true)) {
							return false;
						}
					}
				}
				else if((mode & MatchingMode.SimilarParameters) !== 0) {
					for(var index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						if(!(parameter.isMatching(value._parameters[index], MatchingMode.Similar) === true)) {
							return false;
						}
					}
				}
			}
			if(((mode & MatchingMode.MissingReturn) !== 0) && this._missingReturn) {
				return true;
			}
			else if((mode & MatchingMode.ExactReturn) !== 0) {
				return this._returnType.isMatching(value._returnType, MatchingMode.Exact);
			}
			else if((mode & MatchingMode.SimilarReturn) !== 0) {
				return this._returnType.isMatching(value._returnType, MatchingMode.Similar);
			}
			else {
				return true;
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], FunctionType)) {
					return FunctionType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], ReferenceType)) {
					return FunctionType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMorePreciseThan_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(type.isAny() === true) {
				return true;
			}
			return false;
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, ReferenceType)) {
				throw new TypeError("'target' is not of type 'ReferenceType'");
			}
			return target.name() === "Function";
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isParametersMatching_0: function(__ks_arguments_1, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return this.isParametersMatching(0, -1, __ks_arguments_1, 0, -1, mode);
		},
		__ks_func_isParametersMatching_1: function(pIndex, pStep, __ks_arguments_1, aIndex, aStep, mode) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(pIndex === void 0 || pIndex === null) {
				throw new TypeError("'pIndex' is not nullable");
			}
			if(pStep === void 0 || pStep === null) {
				throw new TypeError("'pStep' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(aIndex === void 0 || aIndex === null) {
				throw new TypeError("'aIndex' is not nullable");
			}
			if(aStep === void 0 || aStep === null) {
				throw new TypeError("'aStep' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(pStep === -1) {
				if(KSOperator.gte(pIndex, this._parameters.length)) {
					if((mode & MatchingMode.RequireAllParameters) === 0) {
						return FunctionType.isOptional(__ks_arguments_1, aIndex, aStep);
					}
					else {
						return KSOperator.gte(aIndex, __ks_arguments_1.length) || ((KSOperator.addOrConcat(aIndex, 1) === __ks_arguments_1.length) && KSOperator.gt(aStep, __ks_arguments_1[aIndex].max()));
					}
				}
				var parameter = this._parameters[pIndex];
				if(KSOperator.eq(parameter.max(), Infinity)) {
					return this.isParametersMatching(pIndex, 1, __ks_arguments_1, aIndex, aStep, mode);
				}
				for(var i = 1, __ks_0 = parameter.min(); i <= __ks_0; ++i) {
					if(!(this.isParametersMatching(pIndex, i, __ks_arguments_1, aIndex, aStep, mode) === true)) {
						return false;
					}
				}
				if(parameter.min() === parameter.max()) {
					return true;
				}
				for(var i = KSOperator.addOrConcat(parameter.min(), 1), __ks_0 = parameter.max(); i <= __ks_0; ++i) {
					if(this.isParametersMatching(pIndex, i, __ks_arguments_1, aIndex, aStep, mode) === true) {
						return true;
					}
				}
				return false;
			}
			else if(KSOperator.gt(pStep, this._parameters[pIndex].max())) {
				return this.isParametersMatching(KSOperator.addOrConcat(pIndex, 1), -1, __ks_arguments_1, aIndex, aStep, mode);
			}
			else if(aStep === -1) {
				if(KSOperator.gte(aIndex, __ks_arguments_1.length)) {
					return FunctionType.isOptional(this._parameters, pIndex, pStep);
				}
				var argument = __ks_arguments_1[aIndex];
				if(KSOperator.eq(argument.max(), Infinity)) {
					return this.isParametersMatching(pIndex, pStep, __ks_arguments_1, aIndex, 1, mode);
				}
				for(var i = 1, __ks_0 = argument.min(); i <= __ks_0; ++i) {
					if(!(this.isParametersMatching(pIndex, pStep, __ks_arguments_1, aIndex, i, mode) === true)) {
						return false;
					}
				}
				if(argument.min() === argument.max()) {
					return true;
				}
				for(var i = KSOperator.addOrConcat(argument.min(), 1), __ks_0 = argument.max(); i <= __ks_0; ++i) {
					if(this.isParametersMatching(pIndex, pStep, __ks_arguments_1, aIndex, i, mode) === true) {
						return true;
					}
				}
				return false;
			}
			else if(KSOperator.gt(aStep, __ks_arguments_1[aIndex].max())) {
				return this.isParametersMatching(pIndex, pStep, __ks_arguments_1, KSOperator.addOrConcat(aIndex, 1), -1, mode);
			}
			else if(this._parameters[pIndex].isMatching(__ks_arguments_1[aIndex], mode) === true) {
				if(KSOperator.eq(this._parameters[pIndex].max(), Infinity)) {
					if(KSOperator.eq(__ks_arguments_1[aIndex].max(), Infinity)) {
						return true;
					}
					else {
						return this.isParametersMatching(pIndex, pStep, __ks_arguments_1, aIndex, KSOperator.addOrConcat(aStep, 1), mode);
					}
				}
				else {
					return this.isParametersMatching(pIndex, KSOperator.addOrConcat(pStep, 1), __ks_arguments_1, aIndex, KSOperator.addOrConcat(aStep, 1), mode);
				}
			}
			else {
				return false;
			}
		},
		isParametersMatching: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_isParametersMatching_0.apply(this, arguments);
			}
			else if(arguments.length === 6) {
				return FunctionType.prototype.__ks_func_isParametersMatching_1.apply(this, arguments);
			}
			else if(Type.prototype.isParametersMatching) {
				return Type.prototype.isParametersMatching.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(__ks_arguments_1.length === 0) {
				return this._min === 0;
			}
			if(__ks_arguments_1.length > this._max) {
				return false;
			}
			var spreadIndex = -1;
			for(var index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
				argument = __ks_arguments_1[index];
				if(KSType.isInstance(argument, UnaryOperatorSpread)) {
					spreadIndex = index;
					break;
				}
			}
			if(spreadIndex !== -1) {
				if(__ks_arguments_1.length === 1) {
					var argument = __ks_arguments_1[0].type().parameter();
					for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
						parameter = this._parameters[__ks_0];
						if(!(parameter.matchArgument(argument) === true)) {
							return false;
						}
					}
				}
				else {
					var argIndex = 0;
					var parIndex = 0;
					for(argIndex = 0; argIndex < spreadIndex; ++argIndex) {
						if((parIndex + 1) > this._parameters.length) {
							return false;
						}
						if(!(this._parameters[parIndex].matchArgument(__ks_arguments_1[argIndex]) === true)) {
							return false;
						}
						++parIndex;
					}
					var argument = __ks_arguments_1[spreadIndex].type().parameter();
					for(var __ks_0 = parIndex, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
						parameter = this._parameters[__ks_0];
						if(!(parameter.matchArgument(argument) === true)) {
							return false;
						}
					}
				}
				return true;
			}
			if(__ks_arguments_1.length < this._min) {
				return false;
			}
			if(this._parameters.length === 1) {
				var parameter = this._parameters[0];
				for(var __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = __ks_arguments_1[__ks_0];
					if(!(parameter.matchArgument(argument) === true)) {
						return false;
					}
				}
				return true;
			}
			else if(this._hasRest) {
				var a = 0;
				var b = __ks_arguments_1.length - 1;
				for(var __ks_0 = Math.min(this._parameters.length - 1, this._parameters.length - 1), __ks_1 = this._restIndex, parameter; __ks_0 >= __ks_1; --__ks_0) {
					parameter = this._parameters[__ks_0];
					for(var j = 0, __ks_2 = parameter.min(); j < __ks_2; ++j) {
						if(!(parameter.matchArgument(__ks_arguments_1[b]) === true)) {
							return false;
						}
						--b;
					}
				}
				for(var __ks_0 = 0, __ks_1 = Math.min(this._parameters.length, this._restIndex), parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					for(var j = 0, __ks_2 = parameter.min(); j < __ks_2; ++j) {
						if(!(parameter.matchArgument(__ks_arguments_1[a]) === true)) {
							return false;
						}
						++a;
					}
					for(var j = parameter.min(), __ks_2 = parameter.max(); j < __ks_2 && ((a < b) && (parameter.matchArgument(__ks_arguments_1[a]) === true)); ++j) {
						++a;
					}
				}
				var parameter = this._parameters[this._restIndex];
				for(var j = 0, __ks_0 = parameter.min(); j < __ks_0; ++j) {
					if(!(parameter.matchArgument(__ks_arguments_1[a]) === true)) {
						return false;
					}
					++a;
				}
				return true;
			}
			else if(__ks_arguments_1.length === this._max) {
				var a = 0;
				var p;
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					var __ks_2;
					for(p = 0, __ks_2 = parameter.max(); p < __ks_2; ++p) {
						if(!(parameter.matchArgument(__ks_arguments_1[a]) === true)) {
							return false;
						}
						++a;
					}
				}
				return true;
			}
			else {
				var a = 0;
				var optional = __ks_arguments_1.length - this._min;
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					for(var i = 0, __ks_2 = parameter.min(); i < __ks_2; ++i) {
						if(!(parameter.matchArgument(__ks_arguments_1[a]) === true)) {
							return false;
						}
						++a;
					}
					for(var i = parameter.min(), __ks_2 = parameter.max(); i < __ks_2 && (optional > 0); ++i) {
						if(parameter.matchArgument(__ks_arguments_1[a]) === true) {
							++a;
							--optional;
						}
					}
				}
				return optional === 0;
			}
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArguments) {
				return Type.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if((type.isAny() === true) || (type.isFunction() === true)) {
				return true;
			}
			if(KSType.isInstance(type, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = type.types(), __ks_2 = __ks_1.length, __ks_type_1; __ks_0 < __ks_2; ++__ks_0) {
					__ks_type_1 = __ks_1[__ks_0];
					if(this.matchContentOf(__ks_type_1)) {
						return true;
					}
				}
			}
			return false;
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_max_0: function() {
			return this._max;
		},
		max: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_max_0.apply(this);
			}
			else if(Type.prototype.max) {
				return Type.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._min;
		},
		min: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_min_0.apply(this);
			}
			else if(Type.prototype.min) {
				return Type.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			return this._parameters[index];
		},
		parameter: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_parameter_0.apply(this, arguments);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Type.prototype.parameters) {
				return Type.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					this._async = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			else if(Type.prototype.processModifiers) {
				return Type.prototype.processModifiers.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_pushTo_0: function(methods) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(this.isMatching(method, MatchingMode.SimilarParameters) === true) {
					return;
				}
			}
			methods.push(this);
		},
		pushTo: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_pushTo_0.apply(this, arguments);
			}
			else if(Type.prototype.pushTo) {
				return Type.prototype.pushTo.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_restIndex_0: function() {
			return this._restIndex;
		},
		restIndex: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_restIndex_0.apply(this);
			}
			else if(Type.prototype.restIndex) {
				return Type.prototype.restIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_returnType_0: function() {
			return this._returnType;
		},
		returnType: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_returnType_0.apply(this);
			}
			else if(Type.prototype.returnType) {
				return Type.prototype.returnType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_throws_0: function() {
			return this._throws;
		},
		throws: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_throws_0.apply(this);
			}
			else if(Type.prototype.throws) {
				return Type.prototype.throws.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Function");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var fragments = "";
			fragments += "(";
			for(var index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
				parameter = this._parameters[index];
				if(index !== 0) {
					fragments += ", ";
				}
				fragments += parameter.toQuote();
			}
			fragments += ")";
			if(!(this._returnType.isAny() === true) || !(this._returnType.isNullable() === true)) {
				fragments += ": " + this._returnType.toQuote();
			}
			return fragments;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code(KSHelper.concatString($runtime.type(node), ".isFunction(")).compile(node).code(")");
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_updateArguments_0: function() {
			for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = this._parameters[i];
				if(this._hasRest) {
					this._minAfter = KSOperator.addOrConcat(this._minAfter, parameter.min());
					this._maxAfter = KSOperator.addOrConcat(this._maxAfter, parameter.max());
				}
				else if(KSOperator.eq(parameter.max(), Infinity)) {
					this._restIndex = i;
					this._hasRest = true;
				}
				else {
					this._minBefore = KSOperator.addOrConcat(this._minBefore, parameter.min());
					this._maxBefore = KSOperator.addOrConcat(this._maxBefore, parameter.max());
				}
			}
		},
		updateArguments: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_updateArguments_0.apply(this);
			}
			else if(Type.prototype.updateArguments) {
				return Type.prototype.updateArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var OverloadedFunctionType = KSHelper.class({
		$name: "OverloadedFunctionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new OverloadedFunctionType(scope);
				if(KSType.isValue(data.exhaustive)) {
					type._exhaustive = data.exhaustive;
				}
				for(var __ks_0 = 0, __ks_1 = data.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_function_1 = data.functions[__ks_0];
					type.addFunction(Type.fromMetadata(__ks_function_1, metadata, references, alterations, queue, scope, node));
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return OverloadedFunctionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new OverloadedFunctionType(scope);
				if(KSType.isValue(data.exhaustive)) {
					type._exhaustive = data.exhaustive;
				}
				queue.push(function() {
					for(var __ks_0 = 0, __ks_1 = data.functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
						__ks_function_1 = data.functions[__ks_0];
						type.addFunction(Type.fromMetadata(__ks_function_1, metadata, references, alterations, queue, scope, node));
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return OverloadedFunctionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._assessment = null;
			this._async = false;
			this._functions = [];
			this._references = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			OverloadedFunctionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addFunction_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(this._functions.length === 0) {
				this._async = type.isAsync();
			}
			this._functions.push(type);
			__ks_Array._im_pushUniq(this._references, type);
			if(type._exhaustive !== null) {
				if(type._exhaustive === true) {
					this._exhaustive = true;
				}
				else if(this._exhaustive === null) {
					this._exhaustive = false;
				}
			}
		},
		__ks_func_addFunction_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, OverloadedFunctionType)) {
				throw new TypeError("'type' is not of type 'OverloadedFunctionType'");
			}
			if(this._functions.length === 0) {
				this._async = type.isAsync();
			}
			__ks_Array._im_pushUniq(this._references, type);
			for(var __ks_0 = 0, __ks_1 = type.functions(), __ks_2 = __ks_1.length, __ks_function_1; __ks_0 < __ks_2; ++__ks_0) {
				__ks_function_1 = __ks_1[__ks_0];
				this._functions.push(__ks_function_1);
				if(__ks_function_1._exhaustive !== null) {
					if(__ks_function_1._exhaustive === true) {
						this._exhaustive = true;
					}
					else if(this._exhaustive === null) {
						this._exhaustive = false;
					}
				}
			}
		},
		__ks_func_addFunction_2: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ReferenceType)) {
				throw new TypeError("'type' is not of type 'ReferenceType'");
			}
			if(this._functions.length === 0) {
				this._async = type.isAsync();
			}
			var fn = new FunctionType(this._scope);
			fn.addParameter(Type.Any, 0, Infinity);
			fn._missingParameters = true;
			this._functions.push(fn);
			__ks_Array._im_pushUniq(this._references, type);
		},
		addFunction: function() {
			if(arguments.length === 1) {
				if(KSType.isInstance(arguments[0], FunctionType)) {
					return OverloadedFunctionType.prototype.__ks_func_addFunction_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], OverloadedFunctionType)) {
					return OverloadedFunctionType.prototype.__ks_func_addFunction_1.apply(this, arguments);
				}
				else {
					return OverloadedFunctionType.prototype.__ks_func_addFunction_2.apply(this, arguments);
				}
			}
			else if(Type.prototype.addFunction) {
				return Type.prototype.addFunction.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_assessment_0: function() {
			if(this._assessment === null) {
				this._assessment = Router.assess(this._functions, true);
			}
			return this._assessment;
		},
		assessment: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_assessment_0.apply(this);
			}
			else if(Type.prototype.assessment) {
				return Type.prototype.assessment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var functions = [];
			var overloadedMode = KSOperator.bitwiseOr(mode, ExportMode.OverloadedFunction);
			for(var __ks_0 = 0, __ks_1 = this._references.length, reference; __ks_0 < __ks_1; ++__ks_0) {
				reference = this._references[__ks_0];
				if((reference._referenceIndex === -1) && KSType.isInstance(reference, OverloadedFunctionType)) {
					for(var __ks_2 = 0, __ks_3 = reference.functions(), __ks_4 = __ks_3.length, fn; __ks_2 < __ks_4; ++__ks_2) {
						fn = __ks_3[__ks_2];
						if(fn.isExportable() === true) {
							functions.push(fn.toExportOrReference(references, overloadedMode));
						}
					}
				}
				else if(reference.isExportable() === true) {
					functions.push(reference.toExportOrReference(references, overloadedMode));
				}
			}
			return (function(that) {
				var d = new Dictionary();
				d.kind = TypeKind.OverloadedFunction;
				d.exhaustive = that.isExhaustive();
				d.functions = functions;
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_functions_0: function() {
			return this._functions;
		},
		functions: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_functions_0.apply(this);
			}
			else if(Type.prototype.functions) {
				return Type.prototype.functions.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasFunction_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			for(var __ks_0 = 0, __ks_1 = this._functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = this._functions[__ks_0];
				if(__ks_function_1.equals(type)) {
					return true;
				}
			}
			return false;
		},
		hasFunction: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_hasFunction_0.apply(this, arguments);
			}
			else if(Type.prototype.hasFunction) {
				return Type.prototype.hasFunction.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return this._async;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._references.length, reference; __ks_0 < __ks_1; ++__ks_0) {
				reference = this._references[__ks_0];
				if(reference.isExportable() === true) {
					return true;
				}
			}
			return false;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isFunction_0: function() {
			return true;
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_isFunction_0.apply(this);
			}
			return Type.prototype.isFunction.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ReferenceType)) {
				throw new TypeError("'value' is not of type 'ReferenceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return false;
			}
			return value.isFunction();
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, FunctionType)) {
				throw new TypeError("'value' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return false;
			}
			for(var __ks_0 = 0, __ks_1 = this._functions.length, fn; __ks_0 < __ks_1; ++__ks_0) {
				fn = this._functions[__ks_0];
				if(fn.isMatching(value, mode) === true) {
					return true;
				}
			}
			return false;
		},
		__ks_func_isMatching_2: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, OverloadedFunctionType)) {
				throw new TypeError("'value' is not of type 'OverloadedFunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return false;
			}
			var nf;
			for(var __ks_0 = 0, __ks_1 = value.functions(), __ks_2 = __ks_1.length, fb; __ks_0 < __ks_2; ++__ks_0) {
				fb = __ks_1[__ks_0];
				nf = true;
				for(var __ks_3 = 0, __ks_4 = this._functions.length, fn; __ks_3 < __ks_4 && nf; ++__ks_3) {
					fn = this._functions[__ks_3];
					if(fn.isMatching(fb, mode) === true) {
						nf = false;
					}
				}
				if(nf) {
					return false;
				}
			}
			return true;
		},
		__ks_func_isMatching_3: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, NamedType)) {
				throw new TypeError("'value' is not of type 'NamedType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return false;
			}
			return this.isMatching(value.type(), mode);
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], FunctionType)) {
					return OverloadedFunctionType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], NamedType)) {
					return OverloadedFunctionType.prototype.__ks_func_isMatching_3.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], OverloadedFunctionType)) {
					return OverloadedFunctionType.prototype.__ks_func_isMatching_2.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], ReferenceType)) {
					return OverloadedFunctionType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return KSType.isInstance(type, OverloadedFunctionType) && (this._async === type.isAsync());
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			return Type.prototype.isMergeable.apply(this, arguments);
		},
		__ks_func_isMorePreciseThan_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(type.isAny() === true) {
				return true;
			}
			return false;
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_length_0: function() {
			return this._functions.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_length_0.apply(this);
			}
			else if(Type.prototype.length) {
				return Type.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			for(var __ks_0 = 0, __ks_1 = this._functions.length, fn; __ks_0 < __ks_1; ++__ks_0) {
				fn = this._functions[__ks_0];
				if(fn.matchArguments(__ks_arguments_1) === true) {
					return true;
				}
			}
			return false;
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArguments) {
				return Type.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamedType = KSHelper.class({
		$name: "NamedType",
		$extends: Type,
		__ks_init_1: function() {
			this._cloned = false;
			this._container = null;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamedType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [type.scope()]);
			this._name = name;
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamedType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_canBeBoolean_0: function() {
			return this._type.canBeBoolean();
		},
		canBeBoolean: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_canBeBoolean_0.apply(this);
			}
			return Type.prototype.canBeBoolean.apply(this, arguments);
		},
		__ks_func_canBeNumber_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeNumber(any);
		},
		canBeNumber: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return NamedType.prototype.__ks_func_canBeNumber_0.apply(this, arguments);
			}
			return Type.prototype.canBeNumber.apply(this, arguments);
		},
		__ks_func_canBeString_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeString(any);
		},
		canBeString: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return NamedType.prototype.__ks_func_canBeString_0.apply(this, arguments);
			}
			return Type.prototype.canBeString.apply(this, arguments);
		},
		__ks_func_clone_0: function() {
			this._cloned = true;
			return new NamedType(this._name, this._type.clone());
		},
		clone: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_condense_0: function() {
			this._type.condense();
			return this;
		},
		condense: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_condense_0.apply(this);
			}
			return Type.prototype.condense.apply(this, arguments);
		},
		__ks_func_container_0: function() {
			return this._container;
		},
		__ks_func_container_1: function(container) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(container === void 0) {
				container = null;
			}
			else if(container !== null && !KSType.isInstance(container, NamedContainerType)) {
				throw new TypeError("'container' is not of type 'NamedContainerType?'");
			}
			this._container = container;
			return this;
		},
		container: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_container_0.apply(this);
			}
			else if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_container_1.apply(this, arguments);
			}
			else if(Type.prototype.container) {
				return Type.prototype.container.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discard_0: function() {
			return this._type.discard();
		},
		discard: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_discard_0.apply(this);
			}
			return Type.prototype.discard.apply(this, arguments);
		},
		__ks_func_discardAlias_0: function() {
			return this._type.discardAlias();
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_discardAlias_0.apply(this);
			}
			return Type.prototype.discardAlias.apply(this, arguments);
		},
		__ks_func_discardName_0: function() {
			return this._type;
		},
		discardName: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_discardName_0.apply(this);
			}
			return Type.prototype.discardName.apply(this, arguments);
		},
		__ks_func_duplicate_0: function() {
			return new NamedType(this._name, this._type);
		},
		duplicate: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_duplicate_0.apply(this);
			}
			else if(Type.prototype.duplicate) {
				return Type.prototype.duplicate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isInstance(this._type, ClassType) && ((this._type.isPredefined() === true) || !((this._type.isExported() === true) || (this._type.isAlien() === true)))) {
				return this._name;
			}
			else {
				return this._type.export(references, mode);
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagAlien_0: function() {
			this._type.flagAlien();
			return this;
		},
		flagAlien: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagAlien_0.apply(this);
			}
			return Type.prototype.flagAlien.apply(this, arguments);
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			this._type.flagExported(explicitly);
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagReferenced_0: function() {
			this._type.flagReferenced();
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			return Type.prototype.flagReferenced.apply(this, arguments);
		},
		__ks_func_flagRequired_0: function() {
			this._type.flagRequired();
			return this;
		},
		flagRequired: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagRequired_0.apply(this);
			}
			return Type.prototype.flagRequired.apply(this, arguments);
		},
		__ks_func_flagSealed_0: function() {
			this._type.flagSealed();
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_getHierarchy_0: function() {
			if(KSType.isInstance(this._type, ClassType)) {
				return this._type.getHierarchy(this._name);
			}
			else {
				return [this._name];
			}
		},
		getHierarchy: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_getHierarchy_0.apply(this);
			}
			else if(Type.prototype.getHierarchy) {
				return Type.prototype.getHierarchy.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.getProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_getSealedName_0: function() {
			return "__ks_" + this._name;
		},
		getSealedName: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_getSealedName_0.apply(this);
			}
			else if(Type.prototype.getSealedName) {
				return Type.prototype.getSealedName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSealedPath_0: function() {
			if(KSType.isValue(this._container)) {
				return "" + this._container.path() + "." + this.getSealedName();
			}
			else {
				return this.getSealedName();
			}
		},
		getSealedPath: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_getSealedPath_0.apply(this);
			}
			else if(Type.prototype.getSealedPath) {
				return Type.prototype.getSealedPath.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasContainer_0: function() {
			return KSType.isValue(this._container);
		},
		hasContainer: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_hasContainer_0.apply(this);
			}
			else if(Type.prototype.hasContainer) {
				return Type.prototype.hasContainer.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.hasProperty(name);
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			return Type.prototype.hasProperty.apply(this, arguments);
		},
		__ks_func_isAlias_0: function() {
			return this._type.isAlias();
		},
		isAlias: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isAlias_0.apply(this);
			}
			return Type.prototype.isAlias.apply(this, arguments);
		},
		__ks_func_isAlien_0: function() {
			return this._type.isAlien();
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isAlien_0.apply(this);
			}
			return Type.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_isAlteration_0: function() {
			return this._type.isAlteration();
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isArray_0: function() {
			return this._type.isArray();
		},
		isArray: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isBoolean_0: function() {
			return this._type.isBoolean();
		},
		isBoolean: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isBoolean_0.apply(this);
			}
			return Type.prototype.isBoolean.apply(this, arguments);
		},
		__ks_func_isCloned_0: function() {
			return this._cloned;
		},
		isCloned: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isCloned_0.apply(this);
			}
			return Type.prototype.isCloned.apply(this, arguments);
		},
		__ks_func_isClass_0: function() {
			return this._type.isClass();
		},
		isClass: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isClass_0.apply(this);
			}
			return Type.prototype.isClass.apply(this, arguments);
		},
		__ks_func_isEnum_0: function() {
			return this._type.isEnum();
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isEnum_0.apply(this);
			}
			return Type.prototype.isEnum.apply(this, arguments);
		},
		__ks_func_isExclusion_0: function() {
			return this._type.isExclusion();
		},
		isExclusion: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExclusion_0.apply(this);
			}
			return Type.prototype.isExclusion.apply(this, arguments);
		},
		__ks_func_isExhaustive_0: function() {
			return this._type.isExhaustive();
		},
		__ks_func_isExhaustive_1: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (this.isExhaustive() === true) && !(node._options.rules.ignoreMisfit === true);
		},
		isExhaustive: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExhaustive_0.apply(this);
			}
			else if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_isExhaustive_1.apply(this, arguments);
			}
			return Type.prototype.isExhaustive.apply(this, arguments);
		},
		__ks_func_isExplicitlyExported_0: function() {
			return this._type.isExplicitlyExported();
		},
		isExplicitlyExported: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExplicitlyExported_0.apply(this);
			}
			return Type.prototype.isExplicitlyExported.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return this._type.isExportable();
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isExported_0: function() {
			return this._type.isExported();
		},
		isExported: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExported_0.apply(this);
			}
			return Type.prototype.isExported.apply(this, arguments);
		},
		__ks_func_isExtendable_0: function() {
			return this._type.isExtendable();
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isFlexible_0: function() {
			return this._type.isFlexible();
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isHybrid_0: function() {
			return this._type.isHybrid();
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isHybrid_0.apply(this);
			}
			return Type.prototype.isHybrid.apply(this, arguments);
		},
		__ks_func_isInheriting_0: function(superclass) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(superclass === void 0 || superclass === null) {
				throw new TypeError("'superclass' is not nullable");
			}
			else if(!KSType.isInstance(superclass, NamedType)) {
				throw new TypeError("'superclass' is not of type 'NamedType'");
			}
			var that = this;
			while(that.type().isExtending() === true) {
				that = that.type().extends();
				if(that.name() === superclass) {
					return true;
				}
			}
			return false;
		},
		isInheriting: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_isInheriting_0.apply(this, arguments);
			}
			else if(Type.prototype.isInheriting) {
				return Type.prototype.isInheriting.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this === value) {
				return true;
			}
			else if((mode & MatchingMode.Exact) !== 0) {
				return false;
			}
			else {
				if(value.isAny() === true) {
					return true;
				}
				else if(KSType.isInstance(value, NamedType)) {
					if(KSType.isInstance(this._type, ClassType) && KSType.isInstance(value.type(), ClassType)) {
						if((this._type.isPredefined() === true) && (value.isPredefined() === true)) {
							return this._name === value.name();
						}
						else {
							return (this.isInheriting(value) === true) || (this._type.isMatching(value.type(), mode) === true);
						}
					}
					else if(KSType.isInstance(value.type(), EnumType)) {
						if(KSType.isInstance(this._type, EnumType)) {
							return this._name === value.name();
						}
						else {
							return this.isMatching(value.type().type(), mode);
						}
					}
					else if(KSType.isInstance(value.type(), ClassType) && (value.name() === "Enum")) {
						return this.isEnum();
					}
					else if(value.isAlias() === true) {
						if(this.isAlias() === true) {
							return (this._name === value.name()) || (this.discardAlias().isMatching(value.discardAlias(), mode) === true);
						}
						else {
							return this.isMatching(value.discardAlias(), mode);
						}
					}
					else {
						return this._type.isMatching(value.type(), mode);
					}
				}
				else if(this.isAlias() === true) {
					return this.discardAlias().isMatching(value, mode);
				}
				else if(KSType.isInstance(value, UnionType)) {
					for(var __ks_0 = 0, __ks_1 = value.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
						type = __ks_1[__ks_0];
						if(this.isMatching(type, mode) === true) {
							return true;
						}
					}
					return false;
				}
				else if(KSType.isInstance(value, ReferenceType)) {
					return (this._name === value.name()) || (this.isMatching(value.discardReference(), mode) === true);
				}
				else {
					return this._type.isMatching(value, mode);
				}
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMorePreciseThan_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(KSType.isInstance(that, NamedType)) {
				if((this.isClass() === true) && (that.isClass() === true)) {
					return (this._name !== that.name()) && (this.matchInheritanceOf(that) === true);
				}
				else if(that.isAlias() === true) {
					return this.isMorePreciseThan(that.discardAlias());
				}
			}
			else if(KSType.isInstance(that, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = that.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
				return false;
			}
			return false;
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_isNamed_0: function() {
			return true;
		},
		isNamed: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNamed_0.apply(this);
			}
			return Type.prototype.isNamed.apply(this, arguments);
		},
		__ks_func_isNamespace_0: function() {
			return this._type.isNamespace();
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNamespace_0.apply(this);
			}
			return Type.prototype.isNamespace.apply(this, arguments);
		},
		__ks_func_isNative_0: function() {
			return $natives[this._name] === true;
		},
		isNative: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNative_0.apply(this);
			}
			return Type.prototype.isNative.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._type.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNumber_0: function() {
			return this._type.isNumber();
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNumber_0.apply(this);
			}
			return Type.prototype.isNumber.apply(this, arguments);
		},
		__ks_func_isPredefined_0: function() {
			return this._type.isPredefined();
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isPredefined_0.apply(this);
			}
			return Type.prototype.isPredefined.apply(this, arguments);
		},
		__ks_func_isReducible_0: function() {
			return true;
		},
		isReducible: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isReducible_0.apply(this);
			}
			return Type.prototype.isReducible.apply(this, arguments);
		},
		__ks_func_isReferenced_0: function() {
			return this._type.isReferenced();
		},
		isReferenced: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isReferenced_0.apply(this);
			}
			return Type.prototype.isReferenced.apply(this, arguments);
		},
		__ks_func_isRequired_0: function() {
			return this._type.isRequired();
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isRequired_0.apply(this);
			}
			return Type.prototype.isRequired.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return this._type.isSealable();
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._type.isSealed();
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_isSealedAlien_0: function() {
			return this._type.isSealedAlien();
		},
		isSealedAlien: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isSealedAlien_0.apply(this);
			}
			return Type.prototype.isSealedAlien.apply(this, arguments);
		},
		__ks_func_isString_0: function() {
			return this._type.isString();
		},
		isString: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isString_0.apply(this);
			}
			return Type.prototype.isString.apply(this, arguments);
		},
		__ks_func_isStruct_0: function() {
			return this._type.isStruct();
		},
		isStruct: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isStruct_0.apply(this);
			}
			return Type.prototype.isStruct.apply(this, arguments);
		},
		__ks_func_isTypeOf_0: function() {
			return $typeofs[this._name];
		},
		isTypeOf: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isTypeOf_0.apply(this);
			}
			return Type.prototype.isTypeOf.apply(this, arguments);
		},
		__ks_func_isUnion_0: function() {
			return this._type.isUnion();
		},
		isUnion: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isUnion_0.apply(this);
			}
			return Type.prototype.isUnion.apply(this, arguments);
		},
		__ks_func_isVirtual_0: function() {
			return $virtuals[this._name];
		},
		isVirtual: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isVirtual_0.apply(this);
			}
			return Type.prototype.isVirtual.apply(this, arguments);
		},
		__ks_func_matchClassName_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0) {
				that = null;
			}
			else if(that !== null && !KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type?'");
			}
			if(that === null) {
				return false;
			}
			else if(KSType.isInstance(that, NamedType)) {
				if(KSType.isInstance(this._type, ClassType) && KSType.isInstance(that.type(), ClassType)) {
					return this._name === that.name();
				}
			}
			else if(KSType.isInstance(that, ReferenceType)) {
				return (this._name === that.name()) || (this.matchClassName(that.discardReference()) === true);
			}
			return false;
		},
		matchClassName: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_matchClassName_0.apply(this, arguments);
			}
			else if(Type.prototype.matchClassName) {
				return Type.prototype.matchClassName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0) {
				that = null;
			}
			else if(that !== null && !KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type?'");
			}
			if(that === null) {
				return false;
			}
			else if(that.isAny() === true) {
				return true;
			}
			else if((this._name === "Object") && KSType.isInstance(this._type, ClassType)) {
				return this._scope.module().getPredefined("Object").matchContentOf(that);
			}
			else if(KSType.isInstance(that, NamedType)) {
				if((that.name() === "Object") && KSType.isInstance(that.type(), ClassType)) {
					return this.matchContentOf(this._scope.module().getPredefined("Object"));
				}
				else if(KSType.isInstance(this._type, ClassType) && KSType.isInstance(that.type(), ClassType)) {
					return this.matchInheritanceOf(that);
				}
				else if(KSType.isInstance(that.type(), EnumType)) {
					if(KSType.isInstance(this._type, EnumType)) {
						return this._name === that.name();
					}
					else {
						return this.matchContentOf(that.type().type());
					}
				}
				else if(that.isAlias() === true) {
					if(this.isAlias() === true) {
						return (this._name === that.name()) || this.discardAlias().matchContentOf(that.discardAlias());
					}
					else {
						return this.matchContentOf(that.discardAlias());
					}
				}
				else {
					return this._type.matchContentOf(that);
				}
			}
			else if(this.isAlias() === true) {
				return this.discardAlias().matchContentOf(that);
			}
			else if(KSType.isInstance(that, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = that.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
				return false;
			}
			else if(KSType.isInstance(that, ExclusionType)) {
				var types = that.types();
				if(!this.matchContentOf(types[0])) {
					return false;
				}
				for(var __ks_0 = 1, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					if(this.matchContentOf(type)) {
						return false;
					}
				}
				return true;
			}
			else if(KSType.isInstance(that, ReferenceType)) {
				return (this._name === that.name()) || this.matchContentOf(that.discardReference());
			}
			else if(KSType.isInstance(that, DictionaryType)) {
				return this._name === "Dictionary";
			}
			else {
				return this._type.matchContentOf(that);
			}
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_matchInheritanceOf_0: function(base, strict) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(base === void 0 || base === null) {
				throw new TypeError("'base' is not nullable");
			}
			else if(!KSType.isInstance(base, Type)) {
				throw new TypeError("'base' is not of type 'Type'");
			}
			if(strict === void 0 || strict === null) {
				strict = false;
			}
			if(!KSType.isInstance(base, NamedType) || !(this.isClass() === true) || !(base.isClass() === true)) {
				return false;
			}
			var basename = base.name();
			if(!(strict === true) && (this._name === basename)) {
				return true;
			}
			var that = this;
			while(that.type().isExtending() === true) {
				that = that.type().extends();
				if(that.name() === basename) {
					return true;
				}
			}
			return false;
		},
		matchInheritanceOf: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return NamedType.prototype.__ks_func_matchInheritanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.matchInheritanceOf) {
				return Type.prototype.matchInheritanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_metaReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isInstance(this._type, ClassType)) {
				return this._type.metaReference(references, this._name, mode);
			}
			else {
				throw new NotSupportedException();
			}
		},
		metaReference: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_metaReference_0.apply(this, arguments);
			}
			else if(Type.prototype.metaReference) {
				return Type.prototype.metaReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		__ks_func_name_1: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._name = name;
			return this;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_name_0.apply(this);
			}
			else if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_name_1.apply(this, arguments);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return this._type.parameter();
		},
		parameter: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(KSType.isValue(this._container)) {
				return "" + this._container.path() + "." + this._name;
			}
			else {
				return this._name;
			}
		},
		path: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_path_0.apply(this);
			}
			else if(Type.prototype.path) {
				return Type.prototype.path.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reduce_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._type.isReducible() === true) {
				return this._type.reduce(type);
			}
			else {
				return this;
			}
		},
		reduce: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_reduce_0.apply(this, arguments);
			}
			return Type.prototype.reduce.apply(this, arguments);
		},
		__ks_func_referenceIndex_0: function() {
			return this._type.referenceIndex();
		},
		referenceIndex: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_referenceIndex_0.apply(this);
			}
			return Type.prototype.referenceIndex.apply(this, arguments);
		},
		__ks_func_toAlterationReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isInstance(this._type, ClassType)) {
				return this._type.toAlterationReference(references, mode);
			}
			else {
				throw new NotSupportedException();
			}
		},
		toAlterationReference: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.toAlterationReference) {
				return Type.prototype.toAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toExportOrIndex_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return this._type.toExportOrIndex(references, mode);
		},
		toExportOrIndex: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toExportOrIndex_0.apply(this, arguments);
			}
			return Type.prototype.toExportOrIndex.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return this._type.toMetadata(references, mode);
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			return Type.prototype.toMetadata.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return this._name;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isInstance(this._type, ClassType) && (this._type.isPredefined() === true)) {
				return this._name;
			}
			else {
				return this._type.toReference(references, mode);
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var tof = $runtime.typeof(this._name, node);
			if(KSType.isValue(tof)) {
				fragments.code("" + tof + "(").compile(node).code(")");
			}
			else {
				this._type.toTestFragments(fragments, node);
			}
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(KSType.isInstance(this._type, DictionaryType) || KSType.isInstance(this._type, NamespaceType)) {
				this._type.walk(fn);
			}
			else {
				throw new NotSupportedException();
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamedContainerType = KSHelper.class({
		$name: "NamedContainerType",
		$extends: NamedType,
		__ks_init_1: function() {
			this._properties = new Dictionary();
		},
		__ks_init: function() {
			NamedType.prototype.__ks_init.call(this);
			NamedContainerType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			NamedType.prototype.__ks_cons.call(this, [name, type]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamedContainerType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_addProperty_0: function(name, property) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isInstance(property, Type)) {
				throw new TypeError("'property' is not of type 'Type'");
			}
			if(KSType.isInstance(property, NamedType)) {
				property = property.duplicate().container(this);
			}
			this._type.addProperty(name, property);
			this._properties[name] = property;
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return NamedContainerType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(NamedType.prototype.addProperty) {
				return NamedType.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var property, __ks_0;
			if(KSType.isInstance(this._properties[name], Type)) {
				return this._properties[name];
			}
			else if(KSType.isValue(__ks_0 = this._type.getProperty(name)) ? (property = __ks_0, true) : false) {
				if(KSType.isInstance(property, NamedType)) {
					property = property.duplicate().container(this);
				}
				this._properties[name] = property;
				return property;
			}
			else {
				return null;
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamedContainerType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return NamedType.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.hasProperty(name);
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return NamedContainerType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			return NamedType.prototype.hasProperty.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0) {
				that = null;
			}
			else if(that !== null && !KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type?'");
			}
			if(that === null) {
				return false;
			}
			else if(that.isAny() === true) {
				return true;
			}
			else if(KSType.isInstance(that, NamedContainerType)) {
				return this._name === that.name();
			}
			else if(KSType.isInstance(that, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = that.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					if(this.matchContentOf(type)) {
						return true;
					}
				}
				return false;
			}
			else if(KSType.isInstance(that, ExclusionType)) {
				var types = that.types();
				if(!this.matchContentOf(types[0])) {
					return false;
				}
				for(var __ks_0 = 1, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = types[__ks_0];
					if(this.matchContentOf(type)) {
						return false;
					}
				}
				return true;
			}
			else if(KSType.isInstance(that, ReferenceType)) {
				return (this._name === that.name()) || this.matchContentOf(that.discardReference());
			}
			else {
				return this._type.matchContentOf(that);
			}
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return NamedContainerType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return NamedType.prototype.matchContentOf.apply(this, arguments);
		}
	});
	var $weightTOFs = (function() {
		var d = new Dictionary();
		d.Array = 1;
		d.Boolean = 2;
		d.Class = 12;
		d.Dictionary = 10;
		d.Enum = 4;
		d.Function = 3;
		d.Namespace = 8;
		d.Number = 5;
		d.Object = 12;
		d.Primitive = 7;
		d.RegExp = 9;
		d.String = 6;
		d.Struct = 11;
		return d;
	})();
	var ReferenceType = KSHelper.class({
		$name: "ReferenceType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var name = KSType.isNumber(data.name) ? Type.fromMetadata(data.name, metadata, references, alterations, queue, scope, node).name() : data.name;
				var parameters = KSType.isValue(data.parameters) ? KSHelper.mapArray(data.parameters, function(parameter) {
					return Type.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				}) : null;
				return new ReferenceType(scope, name, data.nullable, parameters);
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ReferenceType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_toQuote_0: function(name, nullable, parameters) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(nullable === void 0 || nullable === null) {
					throw new TypeError("'nullable' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				var fragments = [name];
				if(parameters.length !== 0) {
					fragments.push("<");
					for(var index = 0, __ks_0 = parameters.length, parameter; index < __ks_0; ++index) {
						parameter = parameters[index];
						if(index !== 0) {
							fragments.push(", ");
						}
						fragments.push(parameter.toQuote());
					}
					fragments.push(">");
				}
				if(nullable === true) {
					fragments.push("?");
				}
				return fragments.join("");
			},
			toQuote: function() {
				if(arguments.length === 3) {
					return ReferenceType.__ks_sttc_toQuote_0.apply(this, arguments);
				}
				else if(Type.toQuote) {
					return Type.toQuote.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._nullable = false;
			this._predefined = false;
			this._spread = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ReferenceType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var __ks_i = 1;
			var nullable;
			if(arguments.length > ++__ks_i && (nullable = arguments[__ks_i]) !== void 0 && nullable !== null) {
				if(!KSType.isBoolean(nullable)) {
					if(arguments.length - __ks_i < 2) {
						nullable = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'nullable' is not of type 'Boolean'");
					}
				}
			}
			else {
				nullable = false;
			}
			var parameters;
			if(arguments.length > ++__ks_i && (parameters = arguments[__ks_i]) !== void 0 && parameters !== null) {
				if(!KSType.isArray(parameters)) {
					throw new TypeError("'parameters' is not of type 'Array'");
				}
			}
			else {
				parameters = [];
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._nullable = nullable;
			this._parameters = parameters;
			this._name = KSType.isValue($types[name]) ? $types[name] : name;
			if(this._name === "Null") {
				this._nullable = true;
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 4) {
				ReferenceType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_canBeBoolean_0: function() {
			return (this.isUnion() === true) ? this._type.canBeBoolean() : Type.prototype.canBeBoolean.apply(this, []);
		},
		canBeBoolean: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_canBeBoolean_0.apply(this);
			}
			return Type.prototype.canBeBoolean.apply(this, arguments);
		},
		__ks_func_canBeNumber_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (this.isUnion() === true) ? this._type.canBeNumber(any) : Type.prototype.canBeNumber.apply(this, [any]);
		},
		canBeNumber: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ReferenceType.prototype.__ks_func_canBeNumber_0.apply(this, arguments);
			}
			return Type.prototype.canBeNumber.apply(this, arguments);
		},
		__ks_func_canBeString_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return (this.isUnion() === true) ? this._type.canBeString(any) : Type.prototype.canBeString.apply(this, [any]);
		},
		canBeString: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ReferenceType.prototype.__ks_func_canBeString_0.apply(this, arguments);
			}
			return Type.prototype.canBeString.apply(this, arguments);
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compareTo_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(this.matchContentOf(value)) {
				return -1;
			}
			else if(value.matchContentOf(this)) {
				return 1;
			}
			else if(this.isTypeOf()) {
				if(value.isTypeOf() === true) {
					return KSOperator.subtraction($weightTOFs[this._name], $weightTOFs[value.name()]);
				}
				else if(value.discardReference().isClass() === true) {
					return -1;
				}
				else {
					return 1;
				}
			}
			else if(this.type().isClass() === true) {
				if(value.isTypeOf() === true) {
					return 1;
				}
				else if(value.discardReference().isClass() === true) {
					return KSHelper.compareString(this._type.name(), value.discardReference().name());
				}
				else {
					return 1;
				}
			}
			else {
				return -1;
			}
		},
		compareTo: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_compareTo_0.apply(this, arguments);
			}
			else if(Type.prototype.compareTo) {
				return Type.prototype.compareTo.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discard_0: function() {
			var __ks_0;
			return KSType.isValue(__ks_0 = this.discardReference()) ? __ks_0.discard() : null;
		},
		discard: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_discard_0.apply(this);
			}
			return Type.prototype.discard.apply(this, arguments);
		},
		__ks_func_discardAlias_0: function() {
			var variable, __ks_0;
			if(this._name === "Any") {
				return Type.Any;
			}
			else if((KSType.isValue(__ks_0 = this._scope.getVariable(this._name)) ? (variable = __ks_0, true) : false) && (!KSType.isInstance(variable.getRealType(), ReferenceType) || (variable.name() !== this._name) || (variable.scope() !== this._scope))) {
				return variable.getRealType().discardAlias();
			}
			else {
				return this;
			}
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_discardAlias_0.apply(this);
			}
			return Type.prototype.discardAlias.apply(this, arguments);
		},
		__ks_func_discardReference_0: function() {
			var variable, type, __ks_0;
			if(this._name === "Any") {
				return this._nullable ? AnyType.NullableExplicit : AnyType.Explicit;
			}
			else if((KSType.isValue(__ks_0 = this._scope.getVariable(this._name, -1)) ? (variable = __ks_0, true) : false) && (KSType.isValue(__ks_0 = variable.getRealType()) ? (type = __ks_0, true) : false) && (!KSType.isInstance(type, ReferenceType) || (variable.name() !== this._name) || (type.scope() !== this._scope))) {
				return type.discardReference();
			}
			else {
				return null;
			}
		},
		discardReference: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_discardReference_0.apply(this);
			}
			return Type.prototype.discardReference.apply(this, arguments);
		},
		__ks_func_discardSpread_0: function() {
			if(this._spread) {
				if(KSType.isValue(this._parameters) ? this._parameters.length > 0 : false) {
					return this._parameters[0];
				}
				else {
					return AnyType.NullableUnexplicit;
				}
			}
			else {
				return this;
			}
		},
		discardSpread: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_discardSpread_0.apply(this);
			}
			return Type.prototype.discardSpread.apply(this, arguments);
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._parameters.length === 0) {
				return this._nullable ? this._name + "?" : this._name;
			}
			else {
				var __ks_export_1 = (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Reference;
					d.name = that._name;
					return d;
				})(this);
				if(this._nullable) {
					__ks_export_1.nullable = this._nullable;
				}
				if(this._parameters.length !== 0) {
					__ks_export_1.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
						return parameter.toReference(references, mode);
					});
				}
				return __ks_export_1;
			}
		},
		__ks_func_export_1: function(references, mode, name) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._nullable || (this._parameters.length !== 0)) {
				var __ks_export_1 = (function() {
					var d = new Dictionary();
					d.kind = TypeKind.Reference;
					d.name = KSType.isValue(name.reference) ? name.reference : name;
					return d;
				})();
				if(this._nullable) {
					__ks_export_1.nullable = this._nullable;
				}
				if(this._parameters.length !== 0) {
					__ks_export_1.parameters = KSHelper.mapArray(this._parameters, function(parameter) {
						return parameter.toReference(references, mode);
					});
				}
				return __ks_export_1;
			}
			else {
				return name;
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return ReferenceType.prototype.__ks_func_export_1.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			if(!(this.isAny() === true) && !(this.isVoid() === true)) {
				this.type().flagExported(explicitly).flagReferenced();
			}
			return Type.prototype.flagExported.apply(this, [explicitly]);
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagSealed_0: function() {
			var type = new ReferenceType(this._scope, this._name, this._nullable, this._parameters);
			type._sealed = true;
			return type;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_flagSpread_0: function() {
			var type = new ReferenceType(this._scope, this._name, this._nullable, this._parameters);
			type._spread = true;
			return type;
		},
		flagSpread: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_flagSpread_0.apply(this);
			}
			else if(Type.prototype.flagSpread) {
				return Type.prototype.flagSpread.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(this.isAny() === true) {
				return AnyType.NullableUnexplicit;
			}
			var type = this.type();
			if(KSType.isInstance(type, NamedType)) {
				type = type.type();
			}
			if(type.isClass() === true) {
				return type.getInstanceProperty(name);
			}
			else {
				return type.getProperty(name);
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_hashCode_0: function() {
			var hash = this._name;
			if(this._parameters.length !== 0) {
				hash += "<";
				for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
					parameter = this._parameters[i];
					if(i !== 0) {
						hash += ",";
					}
					hash += parameter.hashCode();
				}
				hash += ">";
			}
			if(this._nullable) {
				hash += "?";
			}
			return hash;
		},
		hashCode: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_hashCode_0.apply(this);
			}
			else if(Type.prototype.hashCode) {
				return Type.prototype.hashCode.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasParameters_0: function() {
			return this._parameters.length !== 0;
		},
		hasParameters: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_hasParameters_0.apply(this);
			}
			else if(Type.prototype.hasParameters) {
				return Type.prototype.hasParameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlien_0: function() {
			return this.type().isAlien();
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isAlien_0.apply(this);
			}
			return Type.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_isAny_0: function() {
			return this._name === "Any";
		},
		isAny: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isArray_0: function() {
			return (this._name === "Array") || (this.type().isArray() === true);
		},
		isArray: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isAsync_0: function() {
			return false;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBoolean_0: function() {
			return (this._name === "Boolean") || (this.type().isBoolean() === true);
		},
		isBoolean: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isBoolean_0.apply(this);
			}
			return Type.prototype.isBoolean.apply(this, arguments);
		},
		__ks_func_isClass_0: function() {
			return this._name === "Class";
		},
		isClass: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isClass_0.apply(this);
			}
			return Type.prototype.isClass.apply(this, arguments);
		},
		__ks_func_isDictionary_0: function() {
			return (this._name === "Dictionary") || (this.type().isDictionary() === true);
		},
		isDictionary: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isDictionary_0.apply(this);
			}
			return Type.prototype.isDictionary.apply(this, arguments);
		},
		__ks_func_isEnum_0: function() {
			return (this._name === "Enum") || (this.type().isEnum() === true);
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isEnum_0.apply(this);
			}
			return Type.prototype.isEnum.apply(this, arguments);
		},
		__ks_func_isExhaustive_0: function() {
			return this.type().isExhaustive();
		},
		isExhaustive: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isExhaustive_0.apply(this);
			}
			return Type.prototype.isExhaustive.apply(this, arguments);
		},
		__ks_func_isExplicitlyExported_0: function() {
			return this.type().isExplicitlyExported();
		},
		isExplicitlyExported: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isExplicitlyExported_0.apply(this);
			}
			return Type.prototype.isExplicitlyExported.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return this.type().isExportable();
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isExported_0: function() {
			return this.type().isExported();
		},
		isExported: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isExported_0.apply(this);
			}
			return Type.prototype.isExported.apply(this, arguments);
		},
		__ks_func_isFunction_0: function() {
			return (this._name === "Function") || (this.type().isFunction() === true);
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isFunction_0.apply(this);
			}
			return Type.prototype.isFunction.apply(this, arguments);
		},
		__ks_func_isHybrid_0: function() {
			return this.type().isHybrid();
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isHybrid_0.apply(this);
			}
			return Type.prototype.isHybrid.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, AnyType)) {
				throw new TypeError("'target' is not of type 'AnyType'");
			}
			return true;
		},
		__ks_func_isInstanceOf_1: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, ReferenceType)) {
				throw new TypeError("'target' is not of type 'ReferenceType'");
			}
			if((this._name === target.name()) || (target.isAny() === true)) {
				return true;
			}
			var type = target.discardAlias();
			if(KSType.isValue(type)) {
				if(KSType.isInstance(type, ClassType)) {
					var thisClass, __ks_0;
					if((KSType.isValue(__ks_0 = this.discardAlias()) ? (thisClass = __ks_0, true) : false) && KSType.isInstance(thisClass, ClassType)) {
						return thisClass.isInstanceOf(type);
					}
				}
				else if(KSType.isInstance(type, UnionType)) {
					for(var __ks_0 = 0, __ks_1 = type.types(), __ks_2 = __ks_1.length, __ks_type_1; __ks_0 < __ks_2; ++__ks_0) {
						__ks_type_1 = __ks_1[__ks_0];
						if(this.isInstanceOf(__ks_type_1) === true) {
							return true;
						}
					}
				}
			}
			return false;
		},
		__ks_func_isInstanceOf_2: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, UnionType)) {
				throw new TypeError("'target' is not of type 'UnionType'");
			}
			for(var __ks_0 = 0, __ks_1 = target.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
				type = __ks_1[__ks_0];
				if(this.isInstanceOf(type) === true) {
					return true;
				}
			}
			return false;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				if(KSType.isInstance(arguments[0], AnyType)) {
					return ReferenceType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], ReferenceType)) {
					return ReferenceType.prototype.__ks_func_isInstanceOf_1.apply(this, arguments);
				}
				else {
					return ReferenceType.prototype.__ks_func_isInstanceOf_2.apply(this, arguments);
				}
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this === value) {
				return true;
			}
			else if((mode & MatchingMode.Exact) !== 0) {
				if(KSType.isInstance(value, ReferenceType)) {
					if((this._name !== value._name) || (this._nullable !== value._nullable) || (this._parameters.length !== value._parameters.length)) {
						return false;
					}
					return true;
				}
				else {
					return value.isMatching(this, mode);
				}
			}
			else {
				if(KSType.isInstance(value, ReferenceType)) {
					if($virtuals[value.name()] === true) {
						return this.type().canBeVirtual(value.name());
					}
					else {
						return this._scope.isMatchingType(this.discardReference(), value.discardReference(), mode);
					}
				}
				else if((value.isDictionary() === true) && (this.type().isClass() === true)) {
					return this._type.type().matchInstanceWith(value, []);
				}
				else if(KSType.isInstance(value, UnionType)) {
					for(var __ks_0 = 0, __ks_1 = value.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
						type = __ks_1[__ks_0];
						if(this.isMatching(type, mode) === true) {
							return true;
						}
					}
					return false;
				}
				else {
					return value.isAny();
				}
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMorePreciseThan_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(that.isAny() === true) {
				return !(this.isAny() === true) || ((that.isNullable() === true) && !this._nullable);
			}
			else if(this.isAny() === true) {
				return false;
			}
			else if(KSType.isInstance(that, ReferenceType) && (that.name() === this._name)) {
				return (that.isNullable() === true) && !this._nullable;
			}
			else {
				var a = this.discardReference();
				var b = that.discardReference();
				return a.isMorePreciseThan(b);
			}
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_isNative_0: function() {
			return $natives[this._name] === true;
		},
		isNative: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNative_0.apply(this);
			}
			return Type.prototype.isNative.apply(this, arguments);
		},
		__ks_func_isNamespace_0: function() {
			return (this._name === "Namespace") || (this.type().isNamespace() === true);
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNamespace_0.apply(this);
			}
			return Type.prototype.isNamespace.apply(this, arguments);
		},
		__ks_func_isNever_0: function() {
			return (this._name === "Never") || (this.type().isNever() === true);
		},
		isNever: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNever_0.apply(this);
			}
			return Type.prototype.isNever.apply(this, arguments);
		},
		__ks_func_isNull_0: function() {
			return this._name === "Null";
		},
		isNull: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNull_0.apply(this);
			}
			return Type.prototype.isNull.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNumber_0: function() {
			return (this._name === "Number") || (this.type().isNumber() === true);
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNumber_0.apply(this);
			}
			return Type.prototype.isNumber.apply(this, arguments);
		},
		__ks_func_isObject_0: function() {
			return (this._name === "Object") || ((this.type().isClass() === true) && !((this._name === "Array") || (this._name === "Boolean") || (this._name === "Dictionary") || (this._name === "Enum") || (this._name === "Function") || (this._name === "Namespace") || (this._name === "Number") || (this._name === "String") || (this._name === "Struct")));
		},
		isObject: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isObject_0.apply(this);
			}
			return Type.prototype.isObject.apply(this, arguments);
		},
		__ks_func_isReference_0: function() {
			return true;
		},
		isReference: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isReference_0.apply(this);
			}
			return Type.prototype.isReference.apply(this, arguments);
		},
		__ks_func_isReducible_0: function() {
			return true;
		},
		isReducible: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isReducible_0.apply(this);
			}
			return Type.prototype.isReducible.apply(this, arguments);
		},
		__ks_func_isRequired_0: function() {
			return this.type().isRequired();
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isRequired_0.apply(this);
			}
			return Type.prototype.isRequired.apply(this, arguments);
		},
		__ks_func_isSpread_0: function() {
			return this._spread;
		},
		isSpread: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isSpread_0.apply(this);
			}
			return Type.prototype.isSpread.apply(this, arguments);
		},
		__ks_func_isString_0: function() {
			return (this._name === "String") || (this.type().isString() === true);
		},
		isString: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isString_0.apply(this);
			}
			return Type.prototype.isString.apply(this, arguments);
		},
		__ks_func_isStruct_0: function() {
			return (this._name === "Struct") || (this.type().isStruct() === true);
		},
		isStruct: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isStruct_0.apply(this);
			}
			return Type.prototype.isStruct.apply(this, arguments);
		},
		__ks_func_isTypeOf_0: function() {
			return $typeofs[this._name];
		},
		isTypeOf: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isTypeOf_0.apply(this);
			}
			return Type.prototype.isTypeOf.apply(this, arguments);
		},
		__ks_func_isUnion_0: function() {
			return this.type().isUnion();
		},
		isUnion: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isUnion_0.apply(this);
			}
			return Type.prototype.isUnion.apply(this, arguments);
		},
		__ks_func_isVoid_0: function() {
			return (this._name === "Void") || (this.type().isVoid() === true);
		},
		isVoid: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isVoid_0.apply(this);
			}
			return Type.prototype.isVoid.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(this === that) {
				return true;
			}
			else if(this._nullable && !(that.isNullable() === true)) {
				return false;
			}
			else if(that.isAny() === true) {
				return true;
			}
			else if(this.isFunction() === true) {
				return that.isFunction();
			}
			else {
				var a = this.discardReference();
				var b = that.discardReference();
				if(KSType.isInstance(a, ReferenceType) || KSType.isInstance(b, ReferenceType)) {
					return false;
				}
				if(KSType.isInstance(that, ReferenceType) && (that.hasParameters() === true)) {
					if(this._parameters.length === 0) {
						return true;
					}
					var parameters = that.parameters();
					if((this._parameters.length !== parameters.length) || !a.matchContentOf(b)) {
						return false;
					}
					for(var index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
						parameter = this._parameters[index];
						if(!parameter.matchContentOf(parameters[index])) {
							return false;
						}
					}
					return true;
				}
				else {
					return a.matchContentOf(b);
				}
			}
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function(index) {
			if(index === void 0 || index === null) {
				index = 0;
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			if((this._parameters.length === 0) && (this.isArray() === true)) {
				return this.type().parameter();
			}
			else if(index >= this._parameters.length) {
				return AnyType.NullableUnexplicit;
			}
			else {
				return this._parameters[index];
			}
		},
		parameter: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ReferenceType.prototype.__ks_func_parameter_0.apply(this, arguments);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Type.prototype.parameters) {
				return Type.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reassign_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			this._name = name;
			this._scope = scope;
			return this;
		},
		reassign: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_reassign_0.apply(this, arguments);
			}
			else if(Type.prototype.reassign) {
				return Type.prototype.reassign.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reduce_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this === type) {
				return this;
			}
			else {
				return this._scope.reference(this.type().reduce(type));
			}
		},
		reduce: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_reduce_0.apply(this, arguments);
			}
			return Type.prototype.reduce.apply(this, arguments);
		},
		__ks_func_resolveType_0: function() {
			if(!KSType.isValue(this._type) || (this._type.isCloned() === true)) {
				if(this._name === "Any") {
					this._type = Type.Any;
					this._predefined = true;
				}
				else if(this._name === "Never") {
					this._type = Type.Never;
					this._predefined = true;
				}
				else if(this._name === "Null") {
					this._type = Type.Null;
					this._predefined = true;
				}
				else if(this._name === "Void") {
					this._type = Type.Void;
					this._predefined = true;
				}
				else {
					var names = this._name.split(".");
					if(names.length === 1) {
						var __ks_0;
						if(KSType.isValue(__ks_0 = this._scope.getVariable(this._name, -1)) ? (this._variable = __ks_0, true) : false) {
							this._type = this._variable.getRealType();
							this._predefined = (this._variable.isPredefined() === true) || (this._type.isPredefined() === true);
							if(KSType.isInstance(this._type, AliasType)) {
								this._type = this._type.type();
							}
							if(KSType.isInstance(this._type, ReferenceType)) {
								this._type = this._type.type();
							}
						}
						else {
							console.info(this);
							throw new NotImplementedException();
						}
					}
					else {
						var __ks_0;
						var type = KSType.isValue(__ks_0 = this._scope.getVariable(names[0], -1)) ? __ks_0.getRealType() : null;
						if(!KSType.isValue(type)) {
							console.info(this);
							throw new NotImplementedException();
						}
						for(var __ks_0 = 1, __ks_1 = names.length, name; __ks_0 < __ks_1; ++__ks_0) {
							name = names[__ks_0];
							var __ks_2;
							if(KSType.isValue(__ks_2 = type.getProperty(name)) ? (type = __ks_2, false) : true) {
								console.info(this);
								throw new NotImplementedException();
							}
						}
						this._type = type;
						this._predefined = type.isPredefined();
					}
					if(KSType.isInstance(this._type, AliasType)) {
						this._type = this._type.type();
					}
					if(KSType.isInstance(this._type, ReferenceType)) {
						this._type = this._type.type();
					}
				}
			}
		},
		resolveType: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_resolveType_0.apply(this);
			}
			else if(Type.prototype.resolveType) {
				return Type.prototype.resolveType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setNullable_0: function(nullable) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(this._nullable === nullable) {
				return this;
			}
			else {
				return this._scope.reference(this._name, nullable, this._parameters);
			}
		},
		setNullable: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_setNullable_0.apply(this, arguments);
			}
			return Type.prototype.setNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.resolveType();
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this._predefined) {
				return Type.prototype.toMetadata.apply(this, [references, mode]);
			}
			else if(!(this._variable.getRealType().isClass() === true)) {
				this._referenceIndex = this._variable.getRealType().toMetadata(references, mode);
			}
			else if((this._type.isAlien() === true) && (this._type.isPredefined() === true)) {
				return Type.prototype.toMetadata.apply(this, [references, mode]);
			}
			else {
				var reference = this._variable.getRealType().toReference(references, mode);
				this._referenceIndex = references.length;
				references.push(reference);
			}
			return this._referenceIndex;
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			return Type.prototype.toMetadata.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return ReferenceType.toQuote(this._name, this._nullable, this._parameters);
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.resolveType();
			if(this._predefined) {
				return this.export(references, mode);
			}
			else if(!(this._variable.getDeclaredType().isClass() === true)) {
				return Type.prototype.toReference.apply(this, [references, mode]);
			}
			else if(this._type.isExplicitlyExported() === true) {
				if((KSOperator.bitwiseAnd(mode, ExportMode.IgnoreAlteration) !== 0) && (this._type.isAlteration() === true)) {
					return this.export(references, mode, this._type.toAlterationReference(references, mode));
				}
				else {
					return this.export(references, mode, this._type.toReference(references, mode));
				}
			}
			else if(this.isNative() === true) {
				return this.export(references, mode);
			}
			else {
				return this.export(references, mode, this._type.toReference(references, mode));
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this.resolveType();
			if((this._type.isAlias() === true) || (this._type.isUnion() === true) || (this._type.isExclusion() === true)) {
				this._type.toTestFragments(fragments, node);
			}
			else {
				var tof, __ks_0;
				if(KSType.isValue(__ks_0 = $runtime.typeof(this._name, node)) ? (tof = __ks_0, true) : false) {
					fragments.code("" + tof + "(").compile(node);
				}
				else {
					fragments.code("" + $runtime.type(node) + ".");
					if(this._type.isClass() === true) {
						fragments.code("isInstance");
					}
					else if(this._type.isEnum() === true) {
						fragments.code("isEnumMember");
					}
					else if(this._type.isStruct() === true) {
						fragments.code("isStructInstance");
					}
					fragments.code("(").compile(node).code(", ");
					if(KSType.isInstance(this._type, NamedType)) {
						fragments.code(this._type.path());
					}
					else {
						fragments.code(this._name);
					}
				}
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					fragments.code($comma);
					parameter.toFragments(fragments, node);
				}
				fragments.code(")");
			}
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			this.resolveType();
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var SealableType = KSHelper.class({
		$name: "SealableType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new SealableType(scope, Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node));
				if(data.sealed === true) {
					type.flagSealed();
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return SealableType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				SealableType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.kind = TypeKind.Sealable;
				d.sealed = that.isSealed();
				d.type = that._type.toReference(references, mode);
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			this._type.flagExported(explicitly);
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return SealableType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagReferenced_0: function() {
			this._type.flagReferenced();
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			return Type.prototype.flagReferenced.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, SealableType)) {
				throw new TypeError("'value' is not of type 'SealableType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return this._type.isMatching(value.type(), mode);
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Similar) !== 0) {
				return this._type.isMatching(value, mode);
			}
			else {
				return false;
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], SealableType)) {
					return SealableType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], Type)) {
					return SealableType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._sealed || (this._type.isSealed() === true);
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toFragments(fragments, node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return this._type.toQuote.apply(this._type, args);
		},
		toQuote: function() {
			return SealableType.prototype.__ks_func_toQuote_0.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var AliasType = KSHelper.class({
		$name: "AliasType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new AliasType(scope);
				queue.push(function() {
					type.type(Type.fromMetadata(data.of, metadata, references, alterations, queue, scope, node));
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return AliasType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
		},
		__ks_cons_1: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				AliasType.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 2) {
				AliasType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_canBeBoolean_0: function() {
			return this._type.canBeBoolean();
		},
		canBeBoolean: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_canBeBoolean_0.apply(this);
			}
			return Type.prototype.canBeBoolean.apply(this, arguments);
		},
		__ks_func_canBeNumber_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeNumber(any);
		},
		canBeNumber: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return AliasType.prototype.__ks_func_canBeNumber_0.apply(this, arguments);
			}
			return Type.prototype.canBeNumber.apply(this, arguments);
		},
		__ks_func_canBeString_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			return this._type.canBeString(any);
		},
		canBeString: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return AliasType.prototype.__ks_func_canBeString_0.apply(this, arguments);
			}
			return Type.prototype.canBeString.apply(this, arguments);
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discard_0: function() {
			return this._type.discard();
		},
		discard: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_discard_0.apply(this);
			}
			return Type.prototype.discard.apply(this, arguments);
		},
		__ks_func_discardAlias_0: function() {
			return this._type.discardAlias();
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_discardAlias_0.apply(this);
			}
			return Type.prototype.discardAlias.apply(this, arguments);
		},
		__ks_func_discardReference_0: function() {
			return this._type.discardAlias();
		},
		discardReference: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_discardReference_0.apply(this);
			}
			return Type.prototype.discardReference.apply(this, arguments);
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.kind = TypeKind.Alias;
				d.of = that._type.export(references, mode);
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.getProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isAlias_0: function() {
			return true;
		},
		isAlias: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isAlias_0.apply(this);
			}
			return Type.prototype.isAlias.apply(this, arguments);
		},
		__ks_func_isArray_0: function() {
			return this._type.isArray();
		},
		isArray: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isBoolean_0: function() {
			return this._type.isBoolean();
		},
		isBoolean: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isBoolean_0.apply(this);
			}
			return Type.prototype.isBoolean.apply(this, arguments);
		},
		__ks_func_isExclusion_0: function() {
			return this._type.isExclusion();
		},
		isExclusion: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isExclusion_0.apply(this);
			}
			return Type.prototype.isExclusion.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, AliasType)) {
				throw new TypeError("'value' is not of type 'AliasType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return this === value;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNumber_0: function() {
			return this._type.isNumber();
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isNumber_0.apply(this);
			}
			return Type.prototype.isNumber.apply(this, arguments);
		},
		__ks_func_isReducible_0: function() {
			return true;
		},
		isReducible: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isReducible_0.apply(this);
			}
			return Type.prototype.isReducible.apply(this, arguments);
		},
		__ks_func_isString_0: function() {
			return this._type.isString();
		},
		isString: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isString_0.apply(this);
			}
			return Type.prototype.isString.apply(this, arguments);
		},
		__ks_func_isUnion_0: function() {
			return this._type.isUnion();
		},
		isUnion: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isUnion_0.apply(this);
			}
			return Type.prototype.isUnion.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return this._type.isExportable();
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return this._type.matchContentOf(that);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_parameter_0: function() {
			return this._type.parameter();
		},
		parameter: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reduce_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return this._type.reduce(type);
		},
		reduce: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_reduce_0.apply(this, arguments);
			}
			return Type.prototype.reduce.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_type_1.apply(this, arguments);
			}
			return Type.prototype.type.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AnyType = KSHelper.class({
		$name: "AnyType",
		$extends: Type,
		__ks_init_1: function() {
			this._explicit = true;
			this._nullable = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			AnyType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			Type.prototype.__ks_cons.call(this, [null]);
		},
		__ks_cons_1: function(explicit, nullable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(explicit === void 0 || explicit === null) {
				throw new TypeError("'explicit' is not nullable");
			}
			else if(!KSType.isBoolean(explicit)) {
				throw new TypeError("'explicit' is not of type 'Boolean'");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			Type.prototype.__ks_cons.call(this, [null]);
			this._explicit = explicit;
			this._nullable = nullable;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				AnyType.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 2) {
				AnyType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compareTo_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(value.isAny() === true) {
				if(this._nullable === value.isNullable()) {
					return 0;
				}
				else if(this._nullable) {
					return 1;
				}
				else {
					return -1;
				}
			}
			else {
				return 1;
			}
		},
		compareTo: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_compareTo_0.apply(this, arguments);
			}
			else if(Type.prototype.compareTo) {
				return Type.prototype.compareTo.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return this.toReference(references, mode);
		},
		export: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagAlien_0: function() {
			if(this._alien === true) {
				return this;
			}
			var type = new AnyType(this._explicit, this._nullable);
			type._alien = true;
			return type;
		},
		flagAlien: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_flagAlien_0.apply(this);
			}
			return Type.prototype.flagAlien.apply(this, arguments);
		},
		__ks_func_flagRequired_0: function() {
			return this;
		},
		flagRequired: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_flagRequired_0.apply(this);
			}
			return Type.prototype.flagRequired.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return AnyType.NullableUnexplicit;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_hashCode_0: function() {
			return this._nullable ? "Any?" : "Any";
		},
		hashCode: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_hashCode_0.apply(this);
			}
			else if(Type.prototype.hashCode) {
				return Type.prototype.hashCode.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return true;
		},
		isAny: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isExplicit_0: function() {
			return this._explicit;
		},
		isExplicit: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isExplicit_0.apply(this);
			}
			else if(Type.prototype.isExplicit) {
				return Type.prototype.isExplicit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, Type)) {
				throw new TypeError("'target' is not of type 'Type'");
			}
			return true;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return (value.isAny() === true) && !(value.isNull() === true) && (this._nullable === value.isNullable());
			}
			else if(((mode & MatchingMode.MissingType) !== 0) && !this._explicit) {
				return this._nullable || !(value.isNullable() === true);
			}
			else {
				return (value.isAny() === true) && (this._nullable || !(value.isNullable() === true));
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMorePreciseThan_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return (type.isAny() === true) && (this._nullable !== type.isNullable());
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			return !this._explicit || ((b.isAny() === true) && (!this._nullable || (b.isNullable() === true)));
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_parameter_0: function() {
			return AnyType.NullableUnexplicit;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return this;
		},
		reference: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_reference_0.apply(this);
			}
			return Type.prototype.reference.apply(this, arguments);
		},
		__ks_func_setNullable_0: function(nullable) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			var type;
			if(this._nullable === nullable) {
				return this;
			}
			else if(this._explicit) {
				type = nullable ? AnyType.NullableExplicit : AnyType.Explicit;
			}
			else {
				type = nullable ? AnyType.NullableUnexplicit : AnyType.Unexplicit;
			}
			if(this._alien) {
				return type.flagAlien();
			}
			else {
				return type;
			}
		},
		setNullable: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_setNullable_0.apply(this, arguments);
			}
			return Type.prototype.setNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code(this._nullable ? "Any?" : "Any");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return this.toReference(references, mode);
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			return Type.prototype.toMetadata.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return this._nullable ? "Any?" : "Any";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._explicit) {
				return this._nullable ? "Any!?" : "Any!";
			}
			else {
				return this._nullable ? "Any?" : "Any";
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._nullable) {
				fragments.code("true");
			}
			else {
				fragments.code("" + $runtime.type(node) + ".isValue(").compile(node).code(")");
			}
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	AnyType.Explicit = new AnyType(true, false);
	AnyType.NullableExplicit = new AnyType(true, true);
	AnyType.Unexplicit = new AnyType(false, false);
	AnyType.NullableUnexplicit = new AnyType(false, true);
	var ArrayType = KSHelper.class({
		$name: "ArrayType",
		$extends: Type,
		__ks_init_1: function() {
			this._elements = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ArrayType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addElement_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._elements.push(type);
		},
		addElement: function() {
			if(arguments.length === 1) {
				return ArrayType.prototype.__ks_func_addElement_0.apply(this, arguments);
			}
			else if(Type.prototype.addElement) {
				return Type.prototype.addElement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return ArrayType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function() {
				var d = new Dictionary();
				d.kind = TypeKind.Array;
				return d;
			})();
			if(this._sealed) {
				__ks_export_1.sealed = this._sealed;
			}
			__ks_export_1.elements = KSHelper.mapArray(this._elements, function(element) {
				return element.export(references, mode);
			});
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ArrayType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getElement_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			return (index >= this._elements.length) ? AnyType.NullableUnexplicit : this._elements[index];
		},
		getElement: function() {
			if(arguments.length === 1) {
				return ArrayType.prototype.__ks_func_getElement_0.apply(this, arguments);
			}
			else if(Type.prototype.getElement) {
				return Type.prototype.getElement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isArray_0: function() {
			return true;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return ArrayType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ArrayType)) {
				throw new TypeError("'value' is not of type 'ArrayType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this.length() !== value.length()) {
				return false;
			}
			if(this.isSealed() !== value.isSealed()) {
				return false;
			}
			for(var index = 0, __ks_0 = value._elements.length, element; index < __ks_0; ++index) {
				element = value._elements[index];
				if(!(this._elements[index].isMatching(element, mode) === true)) {
					return false;
				}
			}
			return true;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return ArrayType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return ArrayType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return ArrayType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_length_0: function() {
			return this._elements.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return ArrayType.prototype.__ks_func_length_0.apply(this);
			}
			else if(Type.prototype.length) {
				return Type.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ArrayType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ArrayType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var Accessibility = KSHelper.enum(Number, {
		Internal: 1,
		Private: 2,
		Protected: 3,
		Public: 4
	});
	var ClassType = KSHelper.class({
		$name: "ClassType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassType(scope);
				type._abstract = data.abstract;
				type._alien = data.alien;
				type._hybrid = data.hybrid;
				type._init = data.init;
				type._exhaustive = data.exhaustive;
				if((data.exhaustive === true) && KSType.isValue(data.exhaustiveness)) {
					if(data.exhaustive.constructor === true) {
						type._exhaustiveness.constructor = true;
					}
					if(KSType.isValue(data.exhaustiveness.classMethods)) {
						type._exhaustiveness.classMethods = data.exhaustiveness.classMethods;
					}
					if(KSType.isValue(data.exhaustiveness.instanceMethods)) {
						type._exhaustiveness.instanceMethods = data.exhaustiveness.instanceMethods;
					}
				}
				if(data.sealed === true) {
					type.flagSealed();
				}
				if(KSType.isValue(data.extends)) {
					type.extends(Type.fromMetadata(data.extends, metadata, references, alterations, queue, scope, node).discardReference());
				}
				for(var __ks_0 = 0, __ks_1 = data.constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = data.constructors[__ks_0];
					type.addConstructor(ClassConstructorType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
				}
				for(var name in data.instanceVariables) {
					var vtype = data.instanceVariables[name];
					type.addInstanceVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
				}
				for(var name in data.classVariables) {
					var vtype = data.classVariables[name];
					type.addClassVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
				}
				for(var name in data.instanceMethods) {
					var methods = data.instanceMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						type.dedupInstanceMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
					}
				}
				for(var name in data.classMethods) {
					var methods = data.classMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						type.dedupClassMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
					}
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassType(scope);
				type._exhaustive = data.exhaustive;
				if((data.exhaustive === true) && KSType.isValue(data.exhaustiveness)) {
					if(data.exhaustiveness.constructor === true) {
						type._exhaustiveness.constructor = true;
					}
					if(KSType.isValue(data.exhaustiveness.classMethods)) {
						type._exhaustiveness.classMethods = data.exhaustiveness.classMethods;
					}
					if(KSType.isValue(data.exhaustiveness.instanceMethods)) {
						type._exhaustiveness.instanceMethods = data.exhaustiveness.instanceMethods;
					}
				}
				if(KSType.isValue(data.class)) {
					alterations[data.class.reference] = index;
					queue.push(function() {
						var source = references[data.class.reference];
						type.copyFrom(source.type());
						for(var __ks_0 = 0, __ks_1 = data.constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = data.constructors[__ks_0];
							type.addConstructor(ClassConstructorType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.instanceVariables) {
							var vtype = data.instanceVariables[name];
							type.addInstanceVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.classVariables) {
							var vtype = data.classVariables[name];
							type.addClassVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.instanceMethods) {
							var methods = data.instanceMethods[name];
							for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.dedupInstanceMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
							}
						}
						for(var name in data.classMethods) {
							var methods = data.classMethods[name];
							for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.dedupClassMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
							}
						}
					});
				}
				else {
					type._abstract = data.abstract;
					type._alien = data.alien;
					type._hybrid = data.hybrid;
					type._init = data.init;
					if(data.sealed === true) {
						type.flagSealed();
					}
					queue.push(function() {
						if(KSType.isValue(data.extends)) {
							type.extends(Type.fromMetadata(data.extends, metadata, references, alterations, queue, scope, node).discardReference());
						}
						for(var __ks_0 = 0, __ks_1 = data.constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = data.constructors[__ks_0];
							type.addConstructor(ClassConstructorType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.instanceVariables) {
							var vtype = data.instanceVariables[name];
							type.addInstanceVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.classVariables) {
							var vtype = data.classVariables[name];
							type.addClassVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.instanceMethods) {
							var methods = data.instanceMethods[name];
							for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.dedupInstanceMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
							}
						}
						for(var name in data.classMethods) {
							var methods = data.classMethods[name];
							for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.dedupClassMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
							}
						}
					});
				}
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return ClassType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._abstractMethods = new Dictionary();
			this._alteration = false;
			this._classAssessments = new Dictionary();
			this._classMethods = new Dictionary();
			this._classVariables = new Dictionary();
			this._constructors = [];
			this._destructors = 0;
			this._exhaustiveness = (function() {
				var d = new Dictionary();
				d.constructor = null;
				d.classMethods = new Dictionary();
				d.instanceMethods = new Dictionary();
				return d;
			})();
			this._explicitlyExported = false;
			this._extending = false;
			this._extends = null;
			this._hybrid = false;
			this._init = 0;
			this._instanceAssessments = new Dictionary();
			this._instanceMethods = new Dictionary();
			this._instanceVariables = new Dictionary();
			this._predefined = false;
			this._sequences = (function() {
				var d = new Dictionary();
				d.constructor = 0;
				d.classMethods = new Dictionary();
				d.instanceMethods = new Dictionary();
				return d;
			})();
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ClassType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addAbstractMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._abstractMethods[name])) {
				index = this._abstractMethods[name].length;
				this._abstractMethods[name].push(type);
			}
			else {
				this._abstractMethods[name] = [type];
			}
			return index;
		},
		addAbstractMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addAbstractMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addAbstractMethod) {
				return Type.prototype.addAbstractMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addClassMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			if(!KSType.isArray(this._classMethods[name])) {
				this._classMethods[name] = [];
				this._sequences.classMethods[name] = 0;
			}
			var id = type.identifier();
			if(id === -1) {
				id = this._sequences.classMethods[name]++;
				type.identifier(id);
			}
			else {
				if(KSOperator.gte(id, this._sequences.classMethods[name])) {
					this._sequences.classMethods[name] = KSOperator.addOrConcat(id, 1);
				}
			}
			this._classMethods[name].push(type);
			if(this._alteration) {
				type.flagAlteration();
			}
			if(type.isSealed() === true) {
				this._seal.classMethods[name] = true;
			}
			return id;
		},
		addClassMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addClassMethod) {
				return Type.prototype.addClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addClassVariable_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassVariableType)) {
				throw new TypeError("'type' is not of type 'ClassVariableType'");
			}
			this._classVariables[name] = type;
			if(this._alteration) {
				type.flagAlteration();
			}
		},
		addClassVariable: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addClassVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.addClassVariable) {
				return Type.prototype.addClassVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addConstructor_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassConstructorType)) {
				throw new TypeError("'type' is not of type 'ClassConstructorType'");
			}
			var id = type.identifier();
			if(id === -1) {
				id = this._sequences.constructor++;
				type.identifier(id);
			}
			else {
				if(KSOperator.gte(id, this._sequences.constructor)) {
					this._sequences.constructor = KSOperator.addOrConcat(id, 1);
				}
			}
			this._constructors.push(type);
			if(this._alteration) {
				type.flagAlteration();
			}
			if(type.isSealed() === true) {
				this._seal.constructors = true;
			}
			return id;
		},
		addConstructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_addConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.addConstructor) {
				return Type.prototype.addConstructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addDestructor_0: function() {
			this._destructors++;
		},
		addDestructor: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_addDestructor_0.apply(this);
			}
			else if(Type.prototype.addDestructor) {
				return Type.prototype.addDestructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addInstanceMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			if(!KSType.isArray(this._instanceMethods[name])) {
				this._instanceMethods[name] = [];
				this._sequences.instanceMethods[name] = 0;
			}
			var id = type.identifier();
			if(id === -1) {
				id = this._sequences.instanceMethods[name]++;
				type.identifier(id);
			}
			else {
				if(KSOperator.gte(id, this._sequences.instanceMethods[name])) {
					this._sequences.instanceMethods[name] = KSOperator.addOrConcat(id, 1);
				}
			}
			this._instanceMethods[name].push(type);
			if(this._alteration) {
				type.flagAlteration();
			}
			if(type.isSealed() === true) {
				this._seal.instanceMethods[name] = true;
			}
			return id;
		},
		addInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addInstanceMethod) {
				return Type.prototype.addInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addInstanceVariable_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassVariableType)) {
				throw new TypeError("'type' is not of type 'ClassVariableType'");
			}
			this._instanceVariables[name] = type;
			if(this._alteration) {
				type.flagAlteration();
			}
		},
		addInstanceVariable: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.addInstanceVariable) {
				return Type.prototype.addInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addPropertyFromAST_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var options = Attribute.configure(data, null, AttributeTarget.Property);
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.FieldDeclaration.value) {
				var instance = true;
				for(var i = 0, __ks_1 = data.modifiers.length; i < __ks_1 && instance; ++i) {
					if(KSHelper.valueOf(data.modifiers[i].kind) === ModifierKind.Static.value) {
						instance = false;
					}
				}
				var type = ClassVariableType.fromAST(data, node);
				if(instance) {
					this.addInstanceVariable(data.name.name, type);
				}
				else {
					this.addClassVariable(data.name.name, type);
				}
			}
			else if(__ks_0 === NodeKind.MethodDeclaration.value) {
				if(this.isConstructor(data.name.name) === true) {
					var type = ClassConstructorType.fromAST(data, node);
					if(options.rules.nonExhaustive === true) {
						this._exhaustiveness.constructor = false;
					}
					this.addConstructor(type);
				}
				else if(this.isDestructor(data.name.name) === true) {
					throw new NotImplementedException(node);
				}
				else {
					var instance = true;
					for(var i = 0, __ks_1 = data.modifiers.length; i < __ks_1 && instance; ++i) {
						if(KSHelper.valueOf(data.modifiers[i].kind) === ModifierKind.Static.value) {
							instance = false;
						}
					}
					var type = ClassMethodType.fromAST(data, node);
					if(options.rules.nonExhaustive === true) {
						if(instance) {
							this._exhaustiveness.instanceMethods[data.name.name] = false;
						}
						else {
							this._exhaustiveness.classMethods[data.name.name] = false;
						}
					}
					if(instance) {
						this.dedupInstanceMethod(data.name.name, type);
					}
					else {
						this.dedupClassMethod(data.name.name, type);
					}
				}
			}
			else {
				throw new NotSupportedException("Unexpected kind " + data.kind, node);
			}
		},
		addPropertyFromAST: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addPropertyFromAST_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromAST) {
				return Type.prototype.addPropertyFromAST.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			var that = new ClassType(this._scope);
			return that.copyFrom(this);
		},
		clone: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_condense_0: function() {
			for(var __ks_0 in this._abstractMethods) {
				var methods = this._abstractMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.unflagAlteration();
				}
			}
			for(var __ks_0 in this._classMethods) {
				var methods = this._classMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.unflagAlteration();
				}
			}
			for(var __ks_0 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.unflagAlteration();
				}
			}
			for(var __ks_0 in this._classVariables) {
				var variable = this._classVariables[__ks_0];
				variable.unflagAlteration();
			}
			for(var __ks_0 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_0];
				variable.unflagAlteration();
			}
			this._alteration = false;
			this._alterationReference = null;
			return this;
		},
		condense: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_condense_0.apply(this);
			}
			return Type.prototype.condense.apply(this, arguments);
		},
		__ks_func_copyFrom_0: function(src) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(src === void 0 || src === null) {
				throw new TypeError("'src' is not nullable");
			}
			else if(!KSType.isInstance(src, ClassType)) {
				throw new TypeError("'src' is not of type 'ClassType'");
			}
			this._abstract = src._abstract;
			this._alien = src._alien;
			this._destructors = src._destructors;
			this._extending = src._extending;
			this._extends = src._extends;
			this._hybrid = src._hybrid;
			this._init = src._init;
			this._sealed = src._sealed;
			for(var name in src._abstractMethods) {
				var methods = src._abstractMethods[name];
				this._abstractMethods[name] = [].concat(methods);
			}
			for(var name in src._classMethods) {
				var methods = src._classMethods[name];
				this._classMethods[name] = [].concat(methods);
			}
			for(var name in src._instanceMethods) {
				var methods = src._instanceMethods[name];
				this._instanceMethods[name] = [].concat(methods);
			}
			for(var name in src._classVariables) {
				var variable = src._classVariables[name];
				this._classVariables[name] = variable;
			}
			for(var name in src._instanceVariables) {
				var variable = src._instanceVariables[name];
				this._instanceVariables[name] = variable;
			}
			this._constructors.concat(src._constructors);
			if(src._sealed) {
				this._seal = __ks_Dictionary._cm_clone(src._seal);
			}
			this._sequences = __ks_Dictionary._cm_clone(src._sequences);
			if((src.isRequired() === true) || (src.isAlien() === true)) {
				this.setAlterationReference(src);
			}
			return this;
		},
		copyFrom: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_copyFrom_0.apply(this, arguments);
			}
			else if(Type.prototype.copyFrom) {
				return Type.prototype.copyFrom.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_dedupClassMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var id = type.identifier();
			if(KSType.isValue(id)) {
				if(KSType.isArray(this._classMethods[name])) {
					for(var __ks_0 = 0, __ks_1 = this._classMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._classMethods[name][__ks_0];
						if(method.identifier() === id) {
							return id;
						}
					}
				}
			}
			var __ks_overwrite_1 = type.overwrite();
			if(KSType.isValue(__ks_overwrite_1)) {
				var methods = this._classMethods[name];
				for(var __ks_0 = 0, __ks_1 = __ks_overwrite_1.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = __ks_overwrite_1[__ks_0];
					for(var i = KSOperator.subtraction(methods.length, 1); i >= 0; --i) {
						if(methods[i].identifier() === data.id) {
							methods.splice(i, 1);
							break;
						}
					}
				}
				type.overwrite(null);
			}
			return this.addClassMethod(name, type);
		},
		dedupClassMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_dedupClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.dedupClassMethod) {
				return Type.prototype.dedupClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_dedupInstanceMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var id = type.identifier();
			if(KSType.isValue(id)) {
				if(KSType.isArray(this._instanceMethods[name])) {
					for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = this._instanceMethods[name][__ks_0];
						if(method.identifier() === id) {
							return id;
						}
					}
				}
			}
			var __ks_overwrite_1 = type.overwrite();
			if(KSType.isValue(__ks_overwrite_1)) {
				var methods = this._instanceMethods[name];
				for(var __ks_0 = 0, __ks_1 = __ks_overwrite_1.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = __ks_overwrite_1[__ks_0];
					for(var i = KSOperator.subtraction(methods.length, 1); i >= 0; --i) {
						if(methods[i].identifier() === data.id) {
							methods.splice(i, 1);
							break;
						}
					}
				}
				type.overwrite(null);
			}
			return this.addInstanceMethod(name, type);
		},
		dedupInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_dedupInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.dedupInstanceMethod) {
				return Type.prototype.dedupInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_destructors_0: function() {
			return this._destructors;
		},
		destructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_destructors_0.apply(this);
			}
			else if(Type.prototype.destructors) {
				return Type.prototype.destructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var exhaustive = this.isExhaustive();
			var __ks_export_1;
			if(this.hasExportableAlteration() === true) {
				__ks_export_1 = (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Class;
					d.class = that._alterationReference.toAlterationReference(references, mode);
					d.exhaustive = exhaustive;
					d.init = that._init;
					d.constructors = KSHelper.mapArray(that._constructors, function(__ks_constructor_1) {
						return __ks_constructor_1.export(references, mode);
					}, function(__ks_constructor_1) {
						return (__ks_constructor_1.isAlteration() === true) && (__ks_constructor_1.isExportable() === true);
					});
					d.instanceVariables = new Dictionary();
					d.classVariables = new Dictionary();
					d.instanceMethods = new Dictionary();
					d.classMethods = new Dictionary();
					return d;
				})(this);
				for(var name in this._instanceVariables) {
					var variable = this._instanceVariables[name];
					if(variable.isAlteration() === true) {
						__ks_export_1.instanceVariables[name] = variable.export(references, mode);
					}
				}
				for(var name in this._classVariables) {
					var variable = this._classVariables[name];
					if(variable.isAlteration() === true) {
						__ks_export_1.classVariables[name] = variable.export(references, mode);
					}
				}
				for(var name in this._instanceMethods) {
					var methods = this._instanceMethods[name];
					var exportedMethods = KSHelper.mapArray(methods, function(method) {
						return method.export(references, mode);
					}, function(method) {
						return (method.isAlteration() === true) && (method.isExportable() === true);
					});
					if(exportedMethods.length > 0) {
						__ks_export_1.instanceMethods[name] = exportedMethods;
					}
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					var exportedMethods = KSHelper.mapArray(methods, function(method) {
						return method.export(references, mode);
					}, function(method) {
						return (method.isAlteration() === true) && (method.isExportable() === true);
					});
					if(exportedMethods.length > 0) {
						__ks_export_1.classMethods[name] = exportedMethods;
					}
				}
			}
			else {
				__ks_export_1 = (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Class;
					d.abstract = that._abstract;
					d.alien = that._alien;
					d.hybrid = that._hybrid;
					d.sealed = that._sealed;
					d.exhaustive = exhaustive;
					d.init = that._init;
					d.constructors = KSHelper.mapArray(that._constructors, function(__ks_constructor_1) {
						return __ks_constructor_1.export(references, mode);
					});
					d.destructors = that._destructors;
					d.instanceVariables = new Dictionary();
					d.classVariables = new Dictionary();
					d.instanceMethods = new Dictionary();
					d.classMethods = new Dictionary();
					return d;
				})(this);
				for(var name in this._instanceVariables) {
					var variable = this._instanceVariables[name];
					__ks_export_1.instanceVariables[name] = variable.export(references, mode);
				}
				for(var name in this._classVariables) {
					var variable = this._classVariables[name];
					__ks_export_1.classVariables[name] = variable.export(references, mode);
				}
				for(var name in this._instanceMethods) {
					var methods = this._instanceMethods[name];
					var m = KSHelper.mapArray(methods, function(method) {
						return method.export(references, mode);
					}, function(method) {
						return method.isExportable();
					});
					if(m.length !== 0) {
						__ks_export_1.instanceMethods[name] = m;
					}
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_export_1.classMethods[name] = KSHelper.mapArray(methods, function(method) {
						return method.export(references, mode);
					}, function(method) {
						return method.isExportable();
					});
				}
				if(this._abstract) {
					__ks_export_1.abstractMethods = new Dictionary();
					for(var name in this._abstractMethods) {
						var methods = this._abstractMethods[name];
						__ks_export_1.abstractMethods[name] = KSHelper.mapArray(methods, function(method) {
							return method.export(references, mode);
						}, function(method) {
							return method.isExportable();
						});
					}
				}
				if(this._extending) {
					__ks_export_1.extends = this._extends.metaReference(references, mode);
				}
			}
			if(exhaustive === true) {
				var exhaustiveness = new Dictionary();
				var notEmpty = false;
				if(this._exhaustiveness.constructor === false) {
					exhaustiveness.constructor = false;
					notEmpty = true;
				}
				if(!__ks_Dictionary._cm_isEmpty(this._exhaustiveness.classMethods)) {
					exhaustiveness.classMethods = this._exhaustiveness.classMethods;
					notEmpty = true;
				}
				if(!__ks_Dictionary._cm_isEmpty(this._exhaustiveness.instanceMethods)) {
					exhaustiveness.instanceMethods = this._exhaustiveness.instanceMethods;
					notEmpty = true;
				}
				if(notEmpty) {
					__ks_export_1.exhaustiveness = exhaustiveness;
				}
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagAbstract_0: function() {
			this._abstract = true;
		},
		flagAbstract: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagAbstract_0.apply(this);
			}
			else if(Type.prototype.flagAbstract) {
				return Type.prototype.flagAbstract.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			if(this._exported && (this._explicitlyExported || !explicitly)) {
				return this;
			}
			this._exported = true;
			this._explicitlyExported = explicitly;
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.flagExported(false);
			}
			for(var __ks_0 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_0];
				variable.type().flagExported(false);
			}
			for(var __ks_0 in this._classVariables) {
				var variable = this._classVariables[__ks_0];
				variable.type().flagExported(false);
			}
			for(var __ks_0 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_0];
				if(KSType.isArray(methods)) {
					for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
						method = methods[__ks_1];
						method.flagExported(false);
					}
				}
			}
			for(var __ks_0 in this._classMethods) {
				var methods = this._classMethods[__ks_0];
				if(KSType.isArray(methods)) {
					for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
						method = methods[__ks_1];
						method.flagExported(false);
					}
				}
			}
			if(this._extending) {
				this._extends.flagExported(explicitly);
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_hasExportableAlteration_0: function() {
			if(KSType.isValue(this._alterationReference)) {
				return (this._alterationReference._referenceIndex !== -1) || (this._alterationReference.hasExportableAlteration() === true);
			}
			else {
				return false;
			}
		},
		hasExportableAlteration: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasExportableAlteration_0.apply(this);
			}
			else if(Type.prototype.hasExportableAlteration) {
				return Type.prototype.hasExportableAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_extends_0: function() {
			return this._extends;
		},
		__ks_func_extends_1: function(__ks_extends_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_extends_1 === void 0) {
				__ks_extends_1 = null;
			}
			else if(__ks_extends_1 !== null && !KSType.isInstance(__ks_extends_1, NamedType)) {
				throw new TypeError("'extends' is not of type 'NamedType?'");
			}
			this._extends = __ks_extends_1;
			this._extending = true;
			var type = this._extends.type();
			if((type.isAlien() === true) || (type.isHybrid() === true)) {
				this._hybrid = true;
			}
		},
		extends: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_extends_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_extends_1.apply(this, arguments);
			}
			else if(Type.prototype.extends) {
				return Type.prototype.extends.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_filterAbstractMethods_0: function(abstractMethods) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(abstractMethods === void 0 || abstractMethods === null) {
				throw new TypeError("'abstractMethods' is not nullable");
			}
			if(this._extending) {
				this._extends.type().filterAbstractMethods(abstractMethods);
			}
			if(this._abstract) {
				for(var name in this._abstractMethods) {
					var methods = this._abstractMethods[name];
					if(!KSType.isArray(abstractMethods[name])) {
						abstractMethods[name] = [];
					}
					__ks_Array._im_append(abstractMethods[name], methods);
				}
			}
			var matchables = [];
			var method, index;
			for(var name in abstractMethods) {
				var methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(var __ks_0 = 0; index >= __ks_0; --index) {
						method = methods[index];
						if(method.isMatched(this._instanceMethods[name], MatchingMode.Signature) === true) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
		},
		filterAbstractMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_filterAbstractMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.filterAbstractMethods) {
				return Type.prototype.filterAbstractMethods.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagPredefined_0: function() {
			this._predefined = true;
		},
		flagPredefined: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagPredefined_0.apply(this);
			}
			else if(Type.prototype.flagPredefined) {
				return Type.prototype.flagPredefined.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagSealed_0: function() {
			this._sealed = true;
			this._seal = (function() {
				var d = new Dictionary();
				d.constructors = false;
				d.instanceMethods = new Dictionary();
				d.classMethods = new Dictionary();
				return d;
			})();
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_getAbstractMethod_0: function(name, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(KSType.isArray(this._abstractMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(method.matchArguments(__ks_arguments_1) === true) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().getAbstractMethod(name, __ks_arguments_1);
			}
			else {
				return null;
			}
		},
		__ks_func_getAbstractMethod_1: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(KSType.isArray(this._abstractMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(type.isMatching(method, MatchingMode.Signature) === true) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().getAbstractMethod(name, type);
			}
			else {
				return null;
			}
		},
		getAbstractMethod: function() {
			if(arguments.length === 2) {
				if(KSType.isArray(arguments[1])) {
					return ClassType.prototype.__ks_func_getAbstractMethod_0.apply(this, arguments);
				}
				else {
					return ClassType.prototype.__ks_func_getAbstractMethod_1.apply(this, arguments);
				}
			}
			else if(Type.prototype.getAbstractMethod) {
				return Type.prototype.getAbstractMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getClassAssessment_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(!KSType.isArray(this._classMethods[name])) {
				if(this._extending) {
					return this._extends.type().getClassAssessment(name);
				}
				else {
					return null;
				}
			}
			if(!KSType.isDictionary(this._classAssessments[name])) {
				var methods = [].concat(this._classMethods[name]);
				var that = this;
				while(that.isExtending() === true) {
					that = that.extends().type();
					var m = that.listClassMethods(name);
					if(KSType.isValue(m)) {
						for(var __ks_0 = 0, __ks_1 = m.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = m[__ks_0];
							method.pushTo(methods);
						}
					}
				}
				this._classAssessments[name] = Router.assess(methods, false);
			}
			return this._classAssessments[name];
		},
		getClassAssessment: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getClassAssessment_0.apply(this, arguments);
			}
			else if(Type.prototype.getClassAssessment) {
				return Type.prototype.getClassAssessment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getClassProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._scope.reference("Function");
			}
			else {
				return KSType.isValue(this._classVariables[name]) ? this._classVariables[name] : Type.Any;
			}
		},
		getClassProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getClassProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getClassProperty) {
				return Type.prototype.getClassProperty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getHierarchy_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._extending) {
				var __ks_class_1 = this.extends();
				var hierarchy = [name, __ks_class_1.name()];
				while(__ks_class_1.type().isExtending() === true) {
					hierarchy.push((__ks_class_1 = __ks_class_1.type().extends()).name());
				}
				return hierarchy;
			}
			else {
				return [name];
			}
		},
		getHierarchy: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getHierarchy_0.apply(this, arguments);
			}
			else if(Type.prototype.getHierarchy) {
				return Type.prototype.getHierarchy.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getInstanceAssessment_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(!KSType.isArray(this._instanceMethods[name])) {
				if(this._extending) {
					return this._extends.type().getInstanceAssessment(name);
				}
				else {
					return null;
				}
			}
			if(!KSType.isDictionary(this._instanceAssessments[name])) {
				var methods = [].concat(this._instanceMethods[name]);
				var that = this;
				while(that.isExtending() === true) {
					that = that.extends().type();
					var m = that.listInstanceMethods(name);
					if(KSType.isValue(m)) {
						for(var __ks_0 = 0, __ks_1 = m.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = m[__ks_0];
							method.pushTo(methods);
						}
					}
				}
				this._instanceAssessments[name] = Router.assess(methods, false);
			}
			return this._instanceAssessments[name];
		},
		getInstanceAssessment: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceAssessment_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceAssessment) {
				return Type.prototype.getInstanceAssessment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getInstanceMethod_0: function(name, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.matchArguments(__ks_arguments_1) === true) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().getInstanceMethod(name, __ks_arguments_1);
			}
			else {
				return null;
			}
		},
		getInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_getInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceMethod) {
				return Type.prototype.getInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getInstanceProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				if(this._instanceMethods[name].length === 1) {
					return this._instanceMethods[name][0];
				}
				else {
					return new ClassMethodSetType(this._scope, this._instanceMethods[name]);
				}
			}
			else if(KSType.isInstance(this._instanceVariables[name], ClassVariableType)) {
				return this._instanceVariables[name];
			}
			else if(this._extending) {
				return this._extends.type().getInstanceProperty(name);
			}
			return null;
		},
		getInstanceProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceProperty) {
				return Type.prototype.getInstanceProperty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getInstanceVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isValue(this._instanceVariables[name])) {
				return this._instanceVariables[name];
			}
			else if(this._extending) {
				return this._extends.type().getInstanceVariable(name);
			}
			return null;
		},
		getInstanceVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceVariable) {
				return Type.prototype.getInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.getClassProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_getPropertyGetter_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if((method.min() === 0) && (method.max() === 0)) {
						return method.returnType();
					}
				}
			}
			else if(this._extending) {
				return this._extends.type().getPropertyGetter(name);
			}
			return null;
		},
		getPropertyGetter: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getPropertyGetter_0.apply(this, arguments);
			}
			else if(Type.prototype.getPropertyGetter) {
				return Type.prototype.getPropertyGetter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getPropertySetter_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if((method.min() === 1) && (method.max() === 1)) {
						return method.parameter(0).type();
					}
				}
			}
			else if(this._extending) {
				return this._extends.type().getPropertySetter(name);
			}
			return null;
		},
		getPropertySetter: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getPropertySetter_0.apply(this, arguments);
			}
			else if(Type.prototype.getPropertySetter) {
				return Type.prototype.getPropertySetter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasAbstractMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._abstractMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasAbstractMethod(name);
			}
			else {
				return false;
			}
		},
		__ks_func_hasAbstractMethod_1: function(name, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(KSType.isArray(this._abstractMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(method.matchArguments(__ks_arguments_1) === true) {
						return true;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().hasAbstractMethod(name, __ks_arguments_1);
			}
			else {
				return false;
			}
		},
		hasAbstractMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasAbstractMethod_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_hasAbstractMethod_1.apply(this, arguments);
			}
			else if(Type.prototype.hasAbstractMethod) {
				return Type.prototype.hasAbstractMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasClassMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasClassMethod(name);
			}
			else {
				return false;
			}
		},
		hasClassMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasClassMethod) {
				return Type.prototype.hasClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasClassVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isInstance(this._classVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasClassVariable(name);
			}
			else {
				return false;
			}
		},
		hasClassVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasClassVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.hasClassVariable) {
				return Type.prototype.hasClassVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasConstructors_0: function() {
			return this._constructors.length !== 0;
		},
		hasConstructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasConstructors_0.apply(this);
			}
			else if(Type.prototype.hasConstructors) {
				return Type.prototype.hasConstructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDestructors_0: function() {
			return this._destructors !== 0;
		},
		hasDestructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasDestructors_0.apply(this);
			}
			else if(Type.prototype.hasDestructors) {
				return Type.prototype.hasDestructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasInstanceMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasInstanceMethod(name);
			}
			else {
				return false;
			}
		},
		hasInstanceMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasInstanceMethod) {
				return Type.prototype.hasInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasInstanceVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isInstance(this._instanceVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasInstanceVariable(name);
			}
			else {
				return false;
			}
		},
		hasInstanceVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.hasInstanceVariable) {
				return Type.prototype.hasInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMatchingClassMethod_0: function(name, type, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._classMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._classMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						return true;
					}
				}
			}
			return false;
		},
		hasMatchingClassMethod: function() {
			if(arguments.length === 3) {
				return ClassType.prototype.__ks_func_hasMatchingClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasMatchingClassMethod) {
				return Type.prototype.hasMatchingClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMatchingConstructor_0: function(type, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this._constructors.length !== 0) {
				for(var __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					if(__ks_constructor_1.isMatching(type, mode) === true) {
						return true;
					}
				}
			}
			return false;
		},
		hasMatchingConstructor: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_hasMatchingConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.hasMatchingConstructor) {
				return Type.prototype.hasMatchingConstructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMatchingInstanceMethod_0: function(name, type, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						return true;
					}
				}
			}
			if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						return true;
					}
				}
			}
			return false;
		},
		hasMatchingInstanceMethod: function() {
			if(arguments.length === 3) {
				return ClassType.prototype.__ks_func_hasMatchingInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasMatchingInstanceMethod) {
				return Type.prototype.hasMatchingInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasSealedConstructors_0: function() {
			return KSType.isValue(this._seal) ? this._seal.constructors : null;
		},
		hasSealedConstructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasSealedConstructors_0.apply(this);
			}
			else if(Type.prototype.hasSealedConstructors) {
				return Type.prototype.hasSealedConstructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			return this._init;
		},
		__ks_func_init_1: function(init) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(init === void 0 || init === null) {
				throw new TypeError("'init' is not nullable");
			}
			else if(!KSType.isNumber(init)) {
				throw new TypeError("'init' is not of type 'Number'");
			}
			this._init = init;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_init_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_init_1.apply(this, arguments);
			}
			else if(Type.prototype.init) {
				return Type.prototype.init.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			return this._abstract;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Type.prototype.isAbstract) {
				return Type.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isAsyncClassMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._classMethods[name][0].isAsync();
			}
			else if(this._extending) {
				return this._extends.type().isAsyncClassMethod(name);
			}
			else {
				return null;
			}
		},
		isAsyncClassMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isAsyncClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.isAsyncClassMethod) {
				return Type.prototype.isAsyncClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAsyncInstanceMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return this._instanceMethods[name][0].isAsync();
			}
			if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				return this._abstractMethods[name][0].isAsync();
			}
			if(this._extending) {
				return this._extends.type().isAsyncInstanceMethod(name);
			}
			return null;
		},
		isAsyncInstanceMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isAsyncInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.isAsyncInstanceMethod) {
				return Type.prototype.isAsyncInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isClass_0: function() {
			return true;
		},
		isClass: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isClass_0.apply(this);
			}
			return Type.prototype.isClass.apply(this, arguments);
		},
		__ks_func_isConstructor_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "constructor";
		},
		isConstructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.isConstructor) {
				return Type.prototype.isConstructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDestructor_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "destructor";
		},
		isDestructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isDestructor_0.apply(this, arguments);
			}
			else if(Type.prototype.isDestructor) {
				return Type.prototype.isDestructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExhaustive_0: function() {
			if(this._exhaustive === true) {
				return true;
			}
			if(this._alteration) {
				return this._alterationReference.isExhaustive();
			}
			if(this._extending) {
				return this._extends.isExhaustive();
			}
			else {
				return Type.prototype.isExhaustive.apply(this, []);
			}
		},
		isExhaustive: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExhaustive_0.apply(this);
			}
			return Type.prototype.isExhaustive.apply(this, arguments);
		},
		__ks_func_isExhaustiveConstructor_0: function() {
			if(this._exhaustiveness.constructor === false) {
				return false;
			}
			else {
				return true;
			}
		},
		__ks_func_isExhaustiveConstructor_1: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (this.isExhaustive(node) === true) && (this.isExhaustiveConstructor() === true);
		},
		isExhaustiveConstructor: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExhaustiveConstructor_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isExhaustiveConstructor_1.apply(this, arguments);
			}
			else if(Type.prototype.isExhaustiveConstructor) {
				return Type.prototype.isExhaustiveConstructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExhaustiveClassMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._exhaustiveness.classMethods[name] === false) {
				return false;
			}
			else if(this._extending) {
				return this._extends.type().isExhaustiveClassMethod(name);
			}
			else {
				return true;
			}
		},
		__ks_func_isExhaustiveClassMethod_1: function(name, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (this.isExhaustive(node) === true) && (this.isExhaustiveClassMethod(name) === true);
		},
		isExhaustiveClassMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isExhaustiveClassMethod_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_isExhaustiveClassMethod_1.apply(this, arguments);
			}
			else if(Type.prototype.isExhaustiveClassMethod) {
				return Type.prototype.isExhaustiveClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExhaustiveInstanceMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._exhaustiveness.instanceMethods[name] === false) {
				return false;
			}
			else if(this._extending) {
				return this._extends.type().isExhaustiveInstanceMethod(name);
			}
			else {
				return true;
			}
		},
		__ks_func_isExhaustiveInstanceMethod_1: function(name, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (this.isExhaustive(node) === true) && (this.isExhaustiveInstanceMethod(name) === true);
		},
		isExhaustiveInstanceMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isExhaustiveInstanceMethod_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_isExhaustiveInstanceMethod_1.apply(this, arguments);
			}
			else if(Type.prototype.isExhaustiveInstanceMethod) {
				return Type.prototype.isExhaustiveInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExplicitlyExported_0: function() {
			return this._explicitlyExported;
		},
		isExplicitlyExported: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExplicitlyExported_0.apply(this);
			}
			return Type.prototype.isExplicitlyExported.apply(this, arguments);
		},
		__ks_func_isExtendable_0: function() {
			return true;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isExtending_0: function() {
			return this._extending;
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Type.prototype.isExtending) {
				return Type.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return this._sealed;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isHybrid_0: function() {
			return this._hybrid;
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isHybrid_0.apply(this);
			}
			return Type.prototype.isHybrid.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, ClassType)) {
				throw new TypeError("'target' is not of type 'ClassType'");
			}
			if(this.equals(target)) {
				return true;
			}
			else if(this._extending) {
				return this._extends.type().isInstanceOf(target);
			}
			else {
				return false;
			}
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ClassType)) {
				throw new TypeError("'value' is not of type 'ClassType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this === value) {
				return true;
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return false;
			}
			for(var name in value._instanceVariables) {
				var variable = value._instanceVariables[name];
				if(!(KSType.isValue(this._instanceVariables[name]) ? this._instanceVariables[name].isMatching(variable, mode) === true : false)) {
					return false;
				}
			}
			for(var name in value._classVariables) {
				var variable = value._classVariables[name];
				if(!(KSType.isValue(this._classVariables[name]) ? this._classVariables[name].isMatching(variable, mode) === true : false)) {
					return false;
				}
			}
			for(var name in value._instanceMethods) {
				var methods = value._instanceMethods[name];
				if(!KSType.isArray(this._instanceMethods[name])) {
					return false;
				}
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(!(method.isMatched(this._instanceMethods[name], MatchingMode.Signature) === true)) {
						return false;
					}
				}
			}
			for(var name in value._classMethods) {
				var methods = value._classMethods[name];
				if(!KSType.isArray(this._classMethods[name])) {
					return false;
				}
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(!(method.isMatched(this._classMethods[name], MatchingMode.Signature) === true)) {
						return false;
					}
				}
			}
			return true;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, NamedType)) {
				throw new TypeError("'value' is not of type 'NamedType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return this.isMatching(value.type(), mode);
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], ClassType)) {
					return ClassType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], NamedType)) {
					return ClassType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return type.isClass();
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			return Type.prototype.isMergeable.apply(this, arguments);
		},
		__ks_func_isPredefined_0: function() {
			return this._predefined;
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isPredefined_0.apply(this);
			}
			return Type.prototype.isPredefined.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_listClassMethods_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._classMethods[name];
			}
			return null;
		},
		listClassMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_listClassMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.listClassMethods) {
				return Type.prototype.listClassMethods.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listConstructors_0: function() {
			return this._constructors;
		},
		listConstructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_listConstructors_0.apply(this);
			}
			else if(Type.prototype.listConstructors) {
				return Type.prototype.listConstructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listInstanceMethods_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return this._instanceMethods[name];
			}
			return null;
		},
		listInstanceMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_listInstanceMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.listInstanceMethods) {
				return Type.prototype.listInstanceMethods.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listMatchingConstructors_0: function(type, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			var results = [];
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_constructor_1 = this._constructors[__ks_0];
				if(__ks_constructor_1.isMatching(type, mode) === true) {
					results.push(__ks_constructor_1);
				}
			}
			return results;
		},
		listMatchingConstructors: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_listMatchingConstructors_0.apply(this, arguments);
			}
			else if(Type.prototype.listMatchingConstructors) {
				return Type.prototype.listMatchingConstructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listMatchingInstanceMethods_0: function(name, type, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			var results = [];
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						results.push(method);
					}
				}
			}
			if(this._abstract && KSType.isArray(this._abstractMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._abstractMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._abstractMethods[name][__ks_0];
					if(method.isMatching(type, mode) === true) {
						results.push(method);
					}
				}
			}
			return results;
		},
		listMatchingInstanceMethods: function() {
			if(arguments.length === 3) {
				return ClassType.prototype.__ks_func_listMatchingInstanceMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.listMatchingInstanceMethods) {
				return Type.prototype.listMatchingInstanceMethods.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listMissingAbstractMethods_0: function() {
			if(!this._extending) {
				return [];
			}
			var abstractMethods = new Dictionary();
			this._extends.type().filterAbstractMethods(abstractMethods);
			var matchables = [];
			var method, index;
			for(var name in abstractMethods) {
				var methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(var __ks_0 = 0; index >= __ks_0; --index) {
						method = methods[index];
						if(method.isMatched(this._instanceMethods[name], MatchingMode.Signature) === true) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
			return abstractMethods;
		},
		listMissingAbstractMethods: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_listMissingAbstractMethods_0.apply(this);
			}
			else if(Type.prototype.listMissingAbstractMethods) {
				return Type.prototype.listMissingAbstractMethods.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1, Type)) {
				throw new TypeError("'arguments' is not of type 'Array<Type>'");
			}
			if(this._constructors.length === 0) {
				if(this._extending) {
					return this._extends.type().matchArguments(__ks_arguments_1);
				}
				else {
					return this._alien || (__ks_arguments_1.length === 0);
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._constructors.length, __ks_constructor_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_constructor_1 = this._constructors[__ks_0];
					if(__ks_constructor_1.matchArguments(__ks_arguments_1) === true) {
						return true;
					}
				}
				return false;
			}
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArguments) {
				return Type.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchInstanceWith_0: function(object, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			else if(!KSType.isInstance(object, DictionaryType)) {
				throw new TypeError("'object' is not of type 'DictionaryType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			for(var name in object._properties) {
				var property = object._properties[name];
				if(KSType.isValue(this._instanceVariables[name]) ? this._instanceVariables[name].isMatching(property, MatchingMode.Signature) === true : false) {
				}
				else if(KSType.isArray(this._instanceMethods[name])) {
					var nf = true;
					for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1 && nf; ++__ks_0) {
						method = this._instanceMethods[name][__ks_0];
						if(method.isMatching(property, MatchingMode.Signature) === true) {
							nf = false;
						}
					}
					if(nf) {
						return false;
					}
				}
				else {
					return false;
				}
			}
			return true;
		},
		matchInstanceWith: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_matchInstanceWith_0.apply(this, arguments);
			}
			else if(Type.prototype.matchInstanceWith) {
				return Type.prototype.matchInstanceWith.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_metaReference_0: function(references, name, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._predefined) {
				return name;
			}
			else {
				return [this.toMetadata(references, mode), name];
			}
		},
		metaReference: function() {
			if(arguments.length === 3) {
				return ClassType.prototype.__ks_func_metaReference_0.apply(this, arguments);
			}
			else if(Type.prototype.metaReference) {
				return Type.prototype.metaReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_overwriteConstructor_0: function(type, methods) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			__ks_Array._im_remove.apply(null, [this._constructors].concat(methods));
			type.overwrite(KSHelper.mapArray(methods, function(method) {
				return (function() {
					var d = new Dictionary();
					d.id = method.identifier();
					d.export = !(method.isAlteration() === true);
					return d;
				})();
			}));
			return this.addConstructor(type);
		},
		overwriteConstructor: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_overwriteConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.overwriteConstructor) {
				return Type.prototype.overwriteConstructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_overwriteInstanceMethod_0: function(name, type, methods) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			__ks_Array._im_remove.apply(null, [this._instanceMethods[name]].concat(methods));
			type.overwrite(KSHelper.mapArray(methods, function(method) {
				return (function() {
					var d = new Dictionary();
					d.id = method.identifier();
					d.export = !(method.isAlteration() === true);
					return d;
				})();
			}));
			return this.addInstanceMethod(name, type);
		},
		overwriteInstanceMethod: function() {
			if(arguments.length === 3) {
				return ClassType.prototype.__ks_func_overwriteInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.overwriteInstanceMethod) {
				return Type.prototype.overwriteInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return AnyType.NullableUnexplicit;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAlterationReference_0: function(alterationReference) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(alterationReference === void 0) {
				alterationReference = null;
			}
			else if(alterationReference !== null && !KSType.isInstance(alterationReference, ClassType)) {
				throw new TypeError("'alterationReference' is not of type 'ClassType?'");
			}
			this._alterationReference = alterationReference;
			this._alteration = true;
		},
		setAlterationReference: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_setAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.setAlterationReference) {
				return Type.prototype.setAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAlterationReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._referenceIndex !== -1) {
				return (function(that) {
					var d = new Dictionary();
					d.reference = that._referenceIndex;
					return d;
				})(this);
			}
			else if(KSType.isValue(this._alterationReference)) {
				return this._alterationReference.toAlterationReference(references, mode);
			}
			else {
				return this.toReference(references, mode);
			}
		},
		toAlterationReference: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.toAlterationReference) {
				return Type.prototype.toAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._alteration && !this._explicitlyExported) {
				return this._alterationReference.toReference(references, mode);
			}
			else {
				return Type.prototype.toReference.apply(this, [references, mode]);
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassVariableType = KSHelper.class({
		$name: "ClassVariableType",
		$extends: Type,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				var type;
				if(KSType.isValue(data.type)) {
					type = new ClassVariableType(scope, Type.fromAST(data.type, node));
				}
				else {
					type = new ClassVariableType(scope, AnyType.NullableUnexplicit);
				}
				if(KSType.isValue(data.modifiers)) {
					for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
						modifier = data.modifiers[__ks_0];
						if(KSHelper.valueOf(modifier.kind) === ModifierKind.Internal.value) {
							type.access(Accessibility.Internal);
						}
						else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
							type.access(Accessibility.Private);
						}
						else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
							type.access(Accessibility.Protected);
						}
					}
				}
				return type;
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassVariableType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return Type.fromAST.apply(null, arguments);
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassVariableType(scope, Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node));
				type._access = data.access;
				type._initiatable = data.initiatable;
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassVariableType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
			this._alteration = false;
			this._initiatable = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ClassVariableType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassVariableType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_discardVariable_0: function() {
			return this._type;
		},
		discardVariable: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_discardVariable_0.apply(this);
			}
			return Type.prototype.discardVariable.apply(this, arguments);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.isEnumMember(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassVariableType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(Type.prototype.access) {
				return Type.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var data = (function(that) {
				var d = new Dictionary();
				d.access = that._access;
				d.type = that._type.toReference(references, mode);
				return d;
			})(this);
			if(this._sealed) {
				data.sealed = true;
				if(this._initiatable) {
					data.initiatable = true;
				}
			}
			return data;
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(Type.prototype.flagAlteration) {
				return Type.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagInitiatable_0: function() {
			this._initiatable = true;
			return this;
		},
		flagInitiatable: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_flagInitiatable_0.apply(this);
			}
			else if(Type.prototype.flagInitiatable) {
				return Type.prototype.flagInitiatable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isInitiatable_0: function() {
			return this._initiatable;
		},
		isInitiatable: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_isInitiatable_0.apply(this);
			}
			else if(Type.prototype.isInitiatable) {
				return Type.prototype.isInitiatable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ClassVariableType)) {
				throw new TypeError("'value' is not of type 'ClassVariableType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return this._type.isMatching(value.type(), MatchingMode.Exact);
			}
			else {
				return true;
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isUsingGetter_0: function() {
			return this._sealed && this._initiatable;
		},
		isUsingGetter: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_isUsingGetter_0.apply(this);
			}
			else if(Type.prototype.isUsingGetter) {
				return Type.prototype.isUsingGetter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingSetter_0: function() {
			return this._sealed && this._initiatable;
		},
		isUsingSetter: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_isUsingSetter_0.apply(this);
			}
			else if(Type.prototype.isUsingSetter) {
				return Type.prototype.isUsingSetter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toFragments(fragments, node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return this._type.toQuote.apply(this._type, args);
		},
		toQuote: function() {
			return ClassVariableType.prototype.__ks_func_toQuote_0.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		},
		__ks_func_unflagAlteration_0: function() {
			this._alteration = false;
		},
		unflagAlteration: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_unflagAlteration_0.apply(this);
			}
			else if(Type.prototype.unflagAlteration) {
				return Type.prototype.unflagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassMethodType = KSHelper.class({
		$name: "ClassMethodType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				return new ClassMethodType(KSHelper.mapArray(data.parameters, function(parameter) {
					return Type.fromAST(parameter, scope, false, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassMethodType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassMethodType(scope);
				type._identifier = data.id;
				type._access = data.access;
				type._sealed = data.sealed;
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				type._throws = KSHelper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
				});
				type._returnType = Type.fromMetadata(data.returns, metadata, references, alterations, queue, scope, node);
				type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				});
				if(KSType.isValue(data.overwrite)) {
					type._overwrite = KSHelper.mapArray(data.overwrite, function(id) {
						return (function() {
							var d = new Dictionary();
							d.id = id;
							d.export = true;
							return d;
						})();
					});
				}
				type.updateArguments();
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassMethodType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return FunctionType.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
			this._alteration = false;
			this._identifier = -1;
			this._overwrite = null;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassMethodType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.isEnumMember(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function(that) {
				var d = new Dictionary();
				d.id = that._identifier;
				d.access = that._access;
				d.sealed = that._sealed;
				d.async = that._async;
				d.min = that._min;
				d.max = that._max;
				d.parameters = KSHelper.mapArray(that._parameters, function(parameter) {
					return parameter.export(references, mode);
				});
				d.returns = that._returnType.toReference(references, mode);
				d.throws = KSHelper.mapArray(that._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, mode);
				});
				return d;
			})(this);
			if(this._overwrite !== null) {
				var __ks_overwrite_1 = KSHelper.mapArray(this._overwrite, function(data) {
					return data.id;
				}, function(data) {
					return data.export;
				});
				if(__ks_overwrite_1.length !== 0) {
					__ks_export_1.overwrite = __ks_overwrite_1;
				}
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassMethodType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(FunctionType.prototype.flagAlteration) {
				return FunctionType.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_identifier_0: function() {
			return this._identifier;
		},
		__ks_func_identifier_1: function(identifier) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(identifier === void 0 || identifier === null) {
				throw new TypeError("'identifier' is not nullable");
			}
			else if(!KSType.isNumber(identifier)) {
				throw new TypeError("'identifier' is not of type 'Number'");
			}
			this._identifier = identifier;
		},
		identifier: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_identifier_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_identifier_1.apply(this, arguments);
			}
			else if(FunctionType.prototype.identifier) {
				return FunctionType.prototype.identifier.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return FunctionType.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			if(!(FunctionType.prototype.isExportable.apply(this, []) === true)) {
				return false;
			}
			return this._access !== Accessibility.Internal;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return FunctionType.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isMatched_0: function(methods, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			else if(!KSType.isArray(methods, ClassMethodType)) {
				throw new TypeError("'methods' is not of type 'Array<ClassMethodType>'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(method.isMatching(this, mode) === true) {
					return true;
				}
			}
			return false;
		},
		isMatched: function() {
			if(arguments.length === 2) {
				return ClassMethodType.prototype.__ks_func_isMatched_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.isMatched) {
				return FunctionType.prototype.isMatched.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return true;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isMethod_0.apply(this);
			}
			return FunctionType.prototype.isMethod.apply(this, arguments);
		},
		__ks_func_isOverflowing_0: function(methods) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			else if(!KSType.isArray(methods, ClassMethodType)) {
				throw new TypeError("'methods' is not of type 'Array<ClassMethodType>'");
			}
			var mode = MatchingMode(MatchingMode.SimilarParameters | MatchingMode.MissingParameters | MatchingMode.ShiftableParameters | MatchingMode.RequireAllParameters);
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(this.isMatching(method, mode) === true) {
					return false;
				}
			}
			return true;
		},
		isOverflowing: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_isOverflowing_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.isOverflowing) {
				return FunctionType.prototype.isOverflowing.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return FunctionType.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_overwrite_0: function() {
			return this._overwrite;
		},
		__ks_func_overwrite_1: function(__ks_overwrite_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_overwrite_1 === void 0) {
				__ks_overwrite_1 = null;
			}
			else if(__ks_overwrite_1 !== null && !KSType.isArray(__ks_overwrite_1)) {
				throw new TypeError("'overwrite' is not of type 'Array?'");
			}
			this._overwrite = __ks_overwrite_1;
		},
		overwrite: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_overwrite_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_overwrite_1.apply(this, arguments);
			}
			else if(FunctionType.prototype.overwrite) {
				return FunctionType.prototype.overwrite.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					this.async();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Internal.value) {
					this._access = Accessibility.Internal;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
					this._access = Accessibility.Private;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
					this._access = Accessibility.Protected;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
					this._sealed = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		},
		__ks_func_returnType_0: function(returnType) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(returnType === void 0 || returnType === null) {
				throw new TypeError("'returnType' is not nullable");
			}
			else if(!KSType.isInstance(returnType, Type)) {
				throw new TypeError("'returnType' is not of type 'Type'");
			}
			this._returnType = returnType;
		},
		returnType: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_returnType_0.apply(this, arguments);
			}
			return FunctionType.prototype.returnType.apply(this, arguments);
		},
		__ks_func_unflagAlteration_0: function() {
			this._alteration = false;
		},
		unflagAlteration: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_unflagAlteration_0.apply(this);
			}
			else if(FunctionType.prototype.unflagAlteration) {
				return FunctionType.prototype.unflagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassMethodSetType = KSHelper.class({
		$name: "ClassMethodSetType",
		$extends: OverloadedFunctionType,
		__ks_init: function() {
			OverloadedFunctionType.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope, functions) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(functions === void 0 || functions === null) {
				throw new TypeError("'functions' is not nullable");
			}
			else if(!KSType.isArray(functions)) {
				throw new TypeError("'functions' is not of type 'Array'");
			}
			OverloadedFunctionType.prototype.__ks_cons.call(this, [scope]);
			this._functions = functions;
			for(var __ks_0 = 0, __ks_1 = functions.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_function_1 = functions[__ks_0];
				if(__ks_function_1.isAsync() === true) {
					this._async = true;
					break;
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassMethodSetType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isMethod_0: function() {
			return true;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ClassMethodSetType.prototype.__ks_func_isMethod_0.apply(this);
			}
			return OverloadedFunctionType.prototype.isMethod.apply(this, arguments);
		}
	});
	var ClassConstructorType = KSHelper.class({
		$name: "ClassConstructorType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				return new ClassConstructorType(KSHelper.mapArray(data.parameters, function(parameter) {
					return Type.fromAST(parameter, scope, false, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassConstructorType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassConstructorType(scope);
				type._identifier = data.id;
				type._access = data.access;
				type._sealed = data.sealed;
				type._min = data.min;
				type._max = data.max;
				if(data.dependent === true) {
					type._dependent = true;
				}
				type._throws = KSHelper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
				});
				type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				});
				type.updateArguments();
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassConstructorType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return FunctionType.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
			this._alteration = false;
			this._dependent = false;
			this._identifier = -1;
			this._overwrite = null;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassConstructorType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.isEnumMember(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function(that) {
				var d = new Dictionary();
				d.id = that._identifier;
				d.access = that._access;
				d.sealed = that._sealed;
				d.min = that._min;
				d.max = that._max;
				d.parameters = KSHelper.mapArray(that._parameters, function(parameter) {
					return parameter.export(references, mode);
				});
				d.throws = KSHelper.mapArray(that._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, mode);
				});
				return d;
			})(this);
			if(this._dependent) {
				__ks_export_1.dependent = true;
			}
			if(this._overwrite !== null) {
				var __ks_overwrite_1 = KSHelper.mapArray(this._overwrite, function(data) {
					return data.id;
				}, function(data) {
					return data.export;
				});
				if(__ks_overwrite_1.length !== 0) {
					__ks_export_1.overwrite = __ks_overwrite_1;
				}
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassConstructorType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(FunctionType.prototype.flagAlteration) {
				return FunctionType.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagDependent_0: function() {
			this._dependent = true;
			return this;
		},
		flagDependent: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_flagDependent_0.apply(this);
			}
			else if(FunctionType.prototype.flagDependent) {
				return FunctionType.prototype.flagDependent.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_identifier_0: function() {
			return this._identifier;
		},
		__ks_func_identifier_1: function(identifier) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(identifier === void 0 || identifier === null) {
				throw new TypeError("'identifier' is not nullable");
			}
			else if(!KSType.isNumber(identifier)) {
				throw new TypeError("'identifier' is not of type 'Number'");
			}
			this._identifier = identifier;
		},
		identifier: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_identifier_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_identifier_1.apply(this, arguments);
			}
			else if(FunctionType.prototype.identifier) {
				return FunctionType.prototype.identifier.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return FunctionType.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isDependent_0: function() {
			return this._dependent;
		},
		isDependent: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_isDependent_0.apply(this);
			}
			else if(FunctionType.prototype.isDependent) {
				return FunctionType.prototype.isDependent.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isOverwritten_0: function() {
			return this._overwrite !== null;
		},
		isOverwritten: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_isOverwritten_0.apply(this);
			}
			else if(FunctionType.prototype.isOverwritten) {
				return FunctionType.prototype.isOverwritten.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_overwrite_0: function() {
			return this._overwrite;
		},
		__ks_func_overwrite_1: function(__ks_overwrite_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_overwrite_1 === void 0) {
				__ks_overwrite_1 = null;
			}
			else if(__ks_overwrite_1 !== null && !KSType.isArray(__ks_overwrite_1)) {
				throw new TypeError("'overwrite' is not of type 'Array?'");
			}
			this._overwrite = __ks_overwrite_1;
		},
		overwrite: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_overwrite_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_overwrite_1.apply(this, arguments);
			}
			else if(FunctionType.prototype.overwrite) {
				return FunctionType.prototype.overwrite.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					throw new NotImplementedException();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
					this._access = Accessibility.Private;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
					this._access = Accessibility.Protected;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		}
	});
	var ClassDestructorType = KSHelper.class({
		$name: "ClassDestructorType",
		$extends: FunctionType,
		__ks_init_1: function() {
			this._access = Accessibility.Public;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassDestructorType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			FunctionType.prototype.__ks_cons.call(this, [[], data, node]);
			this._min = 1;
			this._max = 1;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDestructorType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.isEnumMember(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassDestructorType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.access = that._access;
				d.throws = KSHelper.mapArray(that._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, mode);
				});
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassDestructorType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Async.value) {
					throw new NotImplementedException();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Private.value) {
					this._access = Accessibility.Private;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Protected.value) {
					this._access = Accessibility.Protected;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassDestructorType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		}
	});
	var EnumTypeKind = KSHelper.enum(String, {
		Flags: "flags",
		Number: "number",
		String: "string"
	});
	var EnumType = KSHelper.class({
		$name: "EnumType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new EnumType(scope, EnumTypeKind.from(data.type));
				type._exhaustive = data.exhaustive;
				type._elements = data.elements;
				type._index = data.index;
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return EnumType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new EnumType(scope, EnumTypeKind.from(data.type));
				type._exhaustive = data.exhaustive;
				type._elements = data.elements;
				type._index = data.index;
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return EnumType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._elements = [];
			this._index = -1;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			EnumType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, kind) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(kind === void 0 || kind === null) {
				kind = EnumTypeKind.Number;
			}
			else if(!KSType.isEnumMember(kind, EnumTypeKind)) {
				throw new TypeError("'kind' is not of type 'EnumTypeKind'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._kind = kind;
			if(this._kind === EnumTypeKind.String) {
				this._type = scope.reference("String");
			}
			else {
				this._type = scope.reference("Number");
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 2) {
				EnumType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_addElement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._elements.push(name);
		},
		addElement: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_addElement_0.apply(this, arguments);
			}
			else if(Type.prototype.addElement) {
				return Type.prototype.addElement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.kind = TypeKind.Enum;
				d.exhaustive = that.isExhaustive();
				d.elements = that._elements;
				d.index = that._index;
				d.type = that._kind;
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasElement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element === name) {
					return true;
				}
			}
			return false;
		},
		hasElement: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_hasElement_0.apply(this, arguments);
			}
			else if(Type.prototype.hasElement) {
				return Type.prototype.hasElement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(name === "value") {
				return this._type;
			}
			else {
				return null;
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "value";
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			return Type.prototype.hasProperty.apply(this, arguments);
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		__ks_func_index_1: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._index = index;
		},
		index: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_index_0.apply(this);
			}
			else if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_index_1.apply(this, arguments);
			}
			else if(Type.prototype.index) {
				return Type.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return true;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_isEnum_0.apply(this);
			}
			return Type.prototype.isEnum.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, EnumType)) {
				throw new TypeError("'value' is not of type 'EnumType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return (mode & MatchingMode.Similar) !== 0;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ReferenceType)) {
				throw new TypeError("'value' is not of type 'ReferenceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Similar) !== 0) {
				return value.name() === "Enum";
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], EnumType)) {
					return EnumType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], ReferenceType)) {
					return EnumType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return type.isEnum();
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			return Type.prototype.isMergeable.apply(this, arguments);
		},
		__ks_func_isNumber_0: function() {
			return this._type.isNumber();
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_isNumber_0.apply(this);
			}
			return Type.prototype.isNumber.apply(this, arguments);
		},
		__ks_func_isString_0: function() {
			return this._type.isString();
		},
		isString: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_isString_0.apply(this);
			}
			return Type.prototype.isString.apply(this, arguments);
		},
		__ks_func_kind_0: function() {
			return this._kind;
		},
		kind: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_kind_0.apply(this);
			}
			else if(Type.prototype.kind) {
				return Type.prototype.kind.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return this._type.matchContentOf(that);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_step_0: function() {
			return ++this._index;
		},
		step: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_step_0.apply(this);
			}
			else if(Type.prototype.step) {
				return Type.prototype.step.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamespaceType = KSHelper.class({
		$name: "NamespaceType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new NamespaceType(scope);
				if(KSType.isValue(data.exhaustive)) {
					type._exhaustive = data.exhaustive;
				}
				if(KSType.isValue(data.namespace)) {
					alterations[data.namespace.reference] = index;
					queue.push(function() {
						var source = references[data.namespace.reference];
						type.copyFrom(source.type());
						for(var name in data.properties) {
							var property = data.properties[name];
							type.addPropertyFromMetadata(name, property, metadata, references, alterations, queue, node);
						}
					});
				}
				else {
					if(data.sealed === true) {
						type.flagSealed();
					}
					queue.push(function() {
						for(var name in data.properties) {
							var property = data.properties[name];
							type.addPropertyFromMetadata(name, property, metadata, references, alterations, queue, node);
						}
					});
				}
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return NamespaceType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._alteration = false;
			this._properties = new Dictionary();
			this._sealProperties = new Dictionary();
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamespaceType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			Type.prototype.__ks_cons.call(this, [new NamespaceScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				NamespaceType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_addProperty_0: function(name, property) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isInstance(property, Type)) {
				throw new TypeError("'property' is not of type 'Type'");
			}
			if(!KSType.isInstance(property, NamespacePropertyType)) {
				property = new NamespacePropertyType(property.scope(), property);
			}
			var variable = new Variable(name, false, false, property.type());
			this._scope.addVariable(name, variable);
			this._properties[name] = property;
			if(this._alteration) {
				property.flagAlteration();
			}
			if(property.type().isSealed() === true) {
				this._sealProperties[name] = true;
			}
			return variable.getDeclaredType();
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.addProperty) {
				return Type.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addPropertyFromAST_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var type = Type.fromAST(data, node);
			var options = Attribute.configure(data, null, AttributeTarget.Property);
			if(options.rules.nonExhaustive === true) {
				type.setExhaustive(false);
			}
			return this.addProperty(data.name.name, type);
		},
		addPropertyFromAST: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_addPropertyFromAST_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromAST) {
				return Type.prototype.addPropertyFromAST.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addPropertyFromMetadata_0: function(name, data, metadata, references, alterations, queue, node) {
			if(arguments.length < 7) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(metadata === void 0 || metadata === null) {
				throw new TypeError("'metadata' is not nullable");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(alterations === void 0 || alterations === null) {
				throw new TypeError("'alterations' is not nullable");
			}
			if(queue === void 0 || queue === null) {
				throw new TypeError("'queue' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var type = Type.fromMetadata(data, metadata, references, alterations, queue, this._scope, node);
			if(type._scope !== this._scope) {
				type._scope = this._scope;
			}
			var variable = new Variable(name, false, false, type);
			this._scope.addVariable(name, variable);
			var property = new NamespacePropertyType(this._scope, variable.getDeclaredType());
			this._properties[name] = property;
			if(data.sealed === true) {
				property.flagSealed();
			}
			if(property.type().isSealed() === true) {
				this._sealProperties[name] = true;
			}
			return variable.getDeclaredType();
		},
		addPropertyFromMetadata: function() {
			if(arguments.length === 7) {
				return NamespaceType.prototype.__ks_func_addPropertyFromMetadata_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromMetadata) {
				return Type.prototype.addPropertyFromMetadata.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			var that = new NamespaceType(this._scope);
			return that.copyFrom(this);
		},
		clone: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_copyFrom_0: function(src) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(src === void 0 || src === null) {
				throw new TypeError("'src' is not nullable");
			}
			else if(!KSType.isInstance(src, NamespaceType)) {
				throw new TypeError("'src' is not of type 'NamespaceType'");
			}
			this._sealed = src._sealed;
			for(var name in src._properties) {
				var property = src._properties[name];
				this._properties[name] = property;
			}
			for(var name in src._sealProperties) {
				var property = src._sealProperties[name];
				this._sealProperties[name] = property;
			}
			if((src.isRequired() === true) || (src.isAlien() === true)) {
				this.setAlterationReference(src);
			}
			return this;
		},
		copyFrom: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_copyFrom_0.apply(this, arguments);
			}
			else if(Type.prototype.copyFrom) {
				return Type.prototype.copyFrom.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._alterationReference)) {
				var __ks_export_1 = (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Namespace;
					d.exhaustive = that.isExhaustive();
					d.namespace = that._alterationReference.toReference(references, mode);
					d.properties = new Dictionary();
					return d;
				})(this);
				for(var name in this._properties) {
					var property = this._properties[name];
					if(property.isAlteration() === true) {
						__ks_export_1.properties[name] = property.toExportOrIndex(references, mode);
					}
				}
				return __ks_export_1;
			}
			else {
				var __ks_export_1 = (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Namespace;
					d.sealed = that._sealed;
					d.exhaustive = that.isExhaustive();
					d.properties = new Dictionary();
					return d;
				})(this);
				for(var name in this._properties) {
					var property = this._properties[name];
					__ks_export_1.properties[name] = property.toExportOrIndex(references, mode);
				}
				return __ks_export_1;
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_0 in this._properties) {
				var value = this._properties[__ks_0];
				value.flagExported(explicitly);
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isInstance(this._properties[name], Type)) {
				return this._properties[name].type();
			}
			else {
				return null;
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isInstance(this._properties[name], Type);
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			return Type.prototype.hasProperty.apply(this, arguments);
		},
		__ks_func_isExhaustive_0: function() {
			if(this._exhaustive === true) {
				return true;
			}
			if(this._alteration) {
				return this._alterationReference.isExhaustive();
			}
			return Type.prototype.isExhaustive.apply(this, []);
		},
		isExhaustive: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isExhaustive_0.apply(this);
			}
			return Type.prototype.isExhaustive.apply(this, arguments);
		},
		__ks_func_isExtendable_0: function() {
			return true;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isFlexible_0: function() {
			return this._sealed;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, NamespaceType)) {
				throw new TypeError("'value' is not of type 'NamespaceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			for(var name in value._properties) {
				var property = value._properties[name];
				if(!(KSType.isValue(this._properties[name]) ? this._properties[name].isMatching(property, mode) === true : false)) {
					return false;
				}
			}
			return true;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNamespace_0: function() {
			return true;
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isNamespace_0.apply(this);
			}
			return Type.prototype.isNamespace.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_isSealedProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._sealed && (this._sealProperties[name] === true);
		},
		isSealedProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_isSealedProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.isSealedProperty) {
				return Type.prototype.isSealedProperty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return KSType.isInstance(that, ReferenceType) && (that.isNamespace() === true);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_setAlterationReference_0: function(alterationReference) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(alterationReference === void 0 || alterationReference === null) {
				throw new TypeError("'alterationReference' is not nullable");
			}
			else if(!KSType.isInstance(alterationReference, NamespaceType)) {
				throw new TypeError("'alterationReference' is not of type 'NamespaceType'");
			}
			this._alterationReference = alterationReference;
			this._alteration = true;
		},
		setAlterationReference: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_setAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.setAlterationReference) {
				return Type.prototype.setAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var name in this._properties) {
				var type = this._properties[name];
				fn(name, type);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamespacePropertyType = KSHelper.class({
		$name: "NamespacePropertyType",
		$extends: Type,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return new NamespacePropertyType(node.scope(), Type.fromAST(data, node));
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return NamespacePropertyType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return Type.fromAST.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._alteration = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamespacePropertyType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamespacePropertyType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1;
			if(KSType.isInstance(this._type, ReferenceType)) {
				__ks_export_1 = this._type.toReference(references, mode);
				if(KSType.isString(__ks_export_1)) {
					__ks_export_1 = (function() {
						var d = new Dictionary();
						d.type = __ks_export_1;
						return d;
					})();
				}
			}
			else {
				__ks_export_1 = this._type.export(references, mode);
			}
			__ks_export_1.sealed = this.isSealed();
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(Type.prototype.flagAlteration) {
				return Type.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			this._type.flagExported(explicitly);
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return NamespacePropertyType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagReferenced_0: function() {
			this._type.flagReferenced();
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			return Type.prototype.flagReferenced.apply(this, arguments);
		},
		__ks_func_flagSealed_0: function() {
			this._type = this._type.flagSealed();
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, NamespacePropertyType)) {
				throw new TypeError("'value' is not of type 'NamespacePropertyType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if((mode & MatchingMode.Exact) !== 0) {
				return this._type.isMatching(value.type(), MatchingMode.Exact);
			}
			else {
				return true;
			}
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._type.isSealed();
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_toExportOrIndex_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._type.isSealable() === true) {
				return this._type.toExportOrIndex(references, mode);
			}
			else if(this._type.referenceIndex() !== -1) {
				return (function(that) {
					var d = new Dictionary();
					d.sealed = that._type.isSealed();
					d.type = that._type.referenceIndex();
					return d;
				})(this);
			}
			else if(this._type.isReferenced() === true) {
				return (function(that) {
					var d = new Dictionary();
					d.sealed = that.isSealed();
					d.type = that._type.toMetadata(references, mode);
					return d;
				})(this);
			}
			else {
				return this.export(references, mode);
			}
		},
		toExportOrIndex: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_toExportOrIndex_0.apply(this, arguments);
			}
			return Type.prototype.toExportOrIndex.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toFragments(fragments, node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return this._type.toQuote.apply(this._type, args);
		},
		toQuote: function() {
			return NamespacePropertyType.prototype.__ks_func_toQuote_0.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var NeverType = KSHelper.class({
		$name: "NeverType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			Type.prototype.__ks_cons.call(this, [null]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NeverType.prototype.__ks_cons_0.apply(this);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return NeverType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return "Never";
		},
		export: function() {
			if(arguments.length === 2) {
				return NeverType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNever_0: function() {
			return true;
		},
		isNever: function() {
			if(arguments.length === 0) {
				return NeverType.prototype.__ks_func_isNever_0.apply(this);
			}
			return Type.prototype.isNever.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Never");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NeverType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "Never";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NeverType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotSupportedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NeverType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NullType = KSHelper.class({
		$name: "NullType",
		$extends: Type,
		__ks_init_1: function() {
			this._explicit = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NullType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			Type.prototype.__ks_cons.call(this, [null]);
		},
		__ks_cons_1: function(explicit) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicit === void 0 || explicit === null) {
				throw new TypeError("'explicit' is not nullable");
			}
			else if(!KSType.isBoolean(explicit)) {
				throw new TypeError("'explicit' is not of type 'Boolean'");
			}
			Type.prototype.__ks_cons.call(this, [null]);
			this._explicit = explicit;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NullType.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 1) {
				NullType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return NullType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return NullType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return Type.Any;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NullType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isExplicit_0: function() {
			return this._explicit;
		},
		isExplicit: function() {
			if(arguments.length === 0) {
				return NullType.prototype.__ks_func_isExplicit_0.apply(this);
			}
			else if(Type.prototype.isExplicit) {
				return Type.prototype.isExplicit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return NullType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.isInstance(target, Type)) {
				throw new TypeError("'target' is not of type 'Type'");
			}
			return true;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return NullType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMorePreciseThan_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return (type.isAny() === true) || (type.isNullable() === true);
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return NullType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, NullType)) {
				throw new TypeError("'value' is not of type 'NullType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return true;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], NullType)) {
					return NullType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], Type)) {
					return NullType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNull_0: function() {
			return true;
		},
		isNull: function() {
			if(arguments.length === 0) {
				return NullType.prototype.__ks_func_isNull_0.apply(this);
			}
			return Type.prototype.isNull.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return true;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return NullType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return type.isNullable();
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return NullType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NullType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "Null";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NullType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return "Null";
		},
		toReference: function() {
			if(arguments.length === 2) {
				return NullType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NullType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	NullType.Explicit = new NullType(true);
	NullType.Unexplicit = new NullType(false);
	var DictionaryType = KSHelper.class({
		$name: "DictionaryType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new DictionaryType(scope);
				if(data.sealed === true) {
					type.flagSealed();
				}
				queue.push(function() {
					for(var name in data.properties) {
						var property = data.properties[name];
						if(KSType.isValue(property.parameters)) {
							type.addProperty(name, FunctionType.fromMetadata(property, metadata, references, alterations, queue, scope, node));
						}
						else {
							type.addProperty(name, Type.fromMetadata(property, metadata, references, alterations, queue, scope, node));
						}
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return DictionaryType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._properties = new Dictionary();
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			DictionaryType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addProperty_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._properties[name] = type;
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return DictionaryType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.addProperty) {
				return Type.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return DictionaryType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function() {
				var d = new Dictionary();
				d.kind = TypeKind.Dictionary;
				return d;
			})();
			if(this._sealed) {
				__ks_export_1.sealed = this._sealed;
			}
			__ks_export_1.properties = new Dictionary();
			for(var name in this._properties) {
				var value = this._properties[name];
				__ks_export_1.properties[name] = value.export(references, mode);
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return DictionaryType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isValue(this._properties[name]) ? this._properties[name] : AnyType.NullableUnexplicit;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return DictionaryType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, DictionaryType)) {
				throw new TypeError("'value' is not of type 'DictionaryType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this === value) {
				return true;
			}
			if(this.isSealed() !== value.isSealed()) {
				return false;
			}
			var nf;
			for(var __ks_0 in value._properties) {
				var property = value._properties[__ks_0];
				nf = true;
				for(var __ks_1 in this._properties) {
					var prop = this._properties[__ks_1];
					if(!(nf)) {
						break;
					}
					if(prop.isMatching(property, mode) === true) {
						nf = false;
					}
				}
				if(nf) {
					return false;
				}
			}
			return true;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], DictionaryType)) {
					return DictionaryType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], Type)) {
					return DictionaryType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return DictionaryType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isDictionary_0: function() {
			return true;
		},
		isDictionary: function() {
			if(arguments.length === 0) {
				return DictionaryType.prototype.__ks_func_isDictionary_0.apply(this);
			}
			return Type.prototype.isDictionary.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return DictionaryType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_parameter_0: function() {
			return AnyType.NullableUnexplicit;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return DictionaryType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return DictionaryType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return DictionaryType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var name in this._properties) {
				var type = this._properties[name];
				fn(name, type);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return DictionaryType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ParameterType = KSHelper.class({
		$name: "ParameterType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node);
				return new ParameterType(scope, data.name, type, data.min, data.max, data.default);
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ParameterType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._name = null;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ParameterType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, type, min, max, __ks_default_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(min === void 0 || min === null) {
				min = 1;
			}
			else if(!KSType.isNumber(min)) {
				throw new TypeError("'min' is not of type 'Number'");
			}
			if(max === void 0 || max === null) {
				max = 1;
			}
			else if(!KSType.isNumber(max)) {
				throw new TypeError("'max' is not of type 'Number'");
			}
			if(__ks_default_1 === void 0 || __ks_default_1 === null) {
				__ks_default_1 = 0;
			}
			else if(!KSType.isNumber(__ks_default_1)) {
				throw new TypeError("'default' is not of type 'Number'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
			this._min = min;
			this._max = max;
			this._default = __ks_default_1;
			if((this._min === 0) && (this._default !== 0)) {
				this._type = this._type.setNullable(true);
			}
		},
		__ks_cons_1: function(scope, name, type, min, max, __ks_default_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(name === void 0) {
				name = null;
			}
			else if(name !== null && !KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String?'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(min === void 0 || min === null) {
				min = 1;
			}
			else if(!KSType.isNumber(min)) {
				throw new TypeError("'min' is not of type 'Number'");
			}
			if(max === void 0 || max === null) {
				max = 1;
			}
			else if(!KSType.isNumber(max)) {
				throw new TypeError("'max' is not of type 'Number'");
			}
			if(__ks_default_1 === void 0 || __ks_default_1 === null) {
				__ks_default_1 = 0;
			}
			else if(!KSType.isNumber(__ks_default_1)) {
				throw new TypeError("'default' is not of type 'Number'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._name = name;
			this._type = type;
			this._min = min;
			this._max = max;
			this._default = __ks_default_1;
			if((this._min === 0) && (this._default !== 0)) {
				this._type = this._type.setNullable(true);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ParameterType.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				if(KSType.isNumber(args[2])) {
					ParameterType.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					ParameterType.prototype.__ks_cons_1.apply(this, args);
				}
			}
			else if(args.length === 4) {
				if(KSType.isString(args[1])) {
					ParameterType.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					ParameterType.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 5) {
				if(KSType.isString(args[1])) {
					ParameterType.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					ParameterType.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 6) {
				ParameterType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			return new ParameterType(this._scope, this._name, this._type, this._min, this._max, this._default);
		},
		clone: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = new Dictionary();
			if(this._name !== null) {
				__ks_export_1.name = this._name;
			}
			__ks_export_1.type = this._type.toReference(references, mode);
			__ks_export_1.min = this._min;
			__ks_export_1.max = this._max;
			__ks_export_1.default = this._default;
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._default !== 0;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(Type.prototype.hasDefaultValue) {
				return Type.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return this._type.isAny();
		},
		isAny: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return this._type.isExportable();
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ParameterType)) {
				throw new TypeError("'value' is not of type 'ParameterType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return this._type.isMatching(value.type(), mode);
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._type.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return this._type.matchContentOf(type);
		},
		__ks_func_matchContentOf_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ParameterType)) {
				throw new TypeError("'type' is not of type 'ParameterType'");
			}
			return this._type.matchContentOf(type.type());
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				if(KSType.isInstance(arguments[0], ParameterType)) {
					return ParameterType.prototype.__ks_func_matchContentOf_1.apply(this, arguments);
				}
				else {
					return ParameterType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
				}
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_matchArgument_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Expression)) {
				throw new TypeError("'value' is not of type 'Expression'");
			}
			value.setCastingEnum(false);
			var type = value.type();
			if(type.matchContentOf(this._type) === true) {
				if((type.isReference() === true) && (type.isEnum() === true) && !(this._type.isEnum() === true) && !(this._type.isAny() === true)) {
					value.setCastingEnum(true);
				}
				return true;
			}
			else {
				return false;
			}
		},
		__ks_func_matchArgument_1: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Parameter)) {
				throw new TypeError("'value' is not of type 'Parameter'");
			}
			return this.matchArgument(value.type());
		},
		__ks_func_matchArgument_2: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			return value.matchContentOf(this._type);
		},
		matchArgument: function() {
			if(arguments.length === 1) {
				if(KSType.isInstance(arguments[0], Expression)) {
					return ParameterType.prototype.__ks_func_matchArgument_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[0], Parameter)) {
					return ParameterType.prototype.__ks_func_matchArgument_1.apply(this, arguments);
				}
				else {
					return ParameterType.prototype.__ks_func_matchArgument_2.apply(this, arguments);
				}
			}
			else if(Type.prototype.matchArgument) {
				return Type.prototype.matchArgument.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_max_0: function() {
			return this._max;
		},
		max: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_max_0.apply(this);
			}
			else if(Type.prototype.max) {
				return Type.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._min;
		},
		min: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_min_0.apply(this);
			}
			else if(Type.prototype.min) {
				return Type.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var fragments = [];
			if(this._name !== null) {
				fragments.push(this._name);
			}
			fragments.push(": ", this._type.toQuote());
			return fragments.join("");
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var StructVarietyKind = KSHelper.enum(String, {
		Array: "array",
		NamedArray: "namedarray",
		Object: "object"
	});
	var StructType = KSHelper.class({
		$name: "StructType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var __ks_0 = data.variety.valueOf();
				if(__ks_0 === StructVarietyKind.Array.value) {
					return ArrayStructType.import(index, data, metadata, references, alterations, queue, scope, node);
				}
				else if(__ks_0 === StructVarietyKind.NamedArray.value) {
					return NamedArrayStructType.import(index, data, metadata, references, alterations, queue, scope, node);
				}
				else {
					return ObjectStructType.import(index, data, metadata, references, alterations, queue, scope, node);
				}
			},
			import: function() {
				if(arguments.length === 8) {
					return StructType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_clone_0: function() {
			NotImplementedException.throw();
		},
		clone: function() {
			if(arguments.length === 0) {
				return StructType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isStruct_0: function() {
			return true;
		},
		isStruct: function() {
			if(arguments.length === 0) {
				return StructType.prototype.__ks_func_isStruct_0.apply(this);
			}
			return Type.prototype.isStruct.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			NotImplementedException.throw();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return StructType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			NotImplementedException.throw();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return StructType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ArrayStructType = KSHelper.class({
		$name: "ArrayStructType",
		$extends: StructType,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var value = new ArrayStructType(scope);
				queue.push(function() {
					var index = 0;
					for(var __ks_0 = 0, __ks_1 = data.fields.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = data.fields[__ks_0];
						value.addField(StructFieldType.fromMetadata(index, null, type, metadata, references, alterations, queue, scope, node));
						++index;
					}
				});
				return value;
			},
			import: function() {
				if(arguments.length === 8) {
					return ArrayStructType.__ks_sttc_import_0.apply(this, arguments);
				}
				return StructType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._fields = [];
		},
		__ks_init: function() {
			StructType.prototype.__ks_init.call(this);
			ArrayStructType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			StructType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addField_0: function(field) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(field === void 0 || field === null) {
				throw new TypeError("'field' is not nullable");
			}
			else if(!KSType.isInstance(field, StructFieldType)) {
				throw new TypeError("'field' is not of type 'StructFieldType'");
			}
			this._fields.push(field);
		},
		addField: function() {
			if(arguments.length === 1) {
				return ArrayStructType.prototype.__ks_func_addField_0.apply(this, arguments);
			}
			else if(StructType.prototype.addField) {
				return StructType.prototype.addField.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function() {
				var d = new Dictionary();
				d.kind = TypeKind.Struct;
				d.variety = StructVarietyKind.Array;
				d.fields = [];
				return d;
			})();
			for(var __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				__ks_export_1.fields.push(field.export(references, mode));
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ArrayStructType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(StructType.prototype.export) {
				return StructType.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isArray_0: function() {
			return true;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return ArrayStructType.prototype.__ks_func_isArray_0.apply(this);
			}
			return StructType.prototype.isArray.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!(KSType.isNumber(name) || KSType.isString(name))) {
				throw new TypeError("'name' is not of type 'Number' or 'String'");
			}
			return this._fields[name];
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ArrayStructType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return StructType.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ArrayStructType)) {
				throw new TypeError("'value' is not of type 'ArrayStructType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return (mode & MatchingMode.Similar) !== 0;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!(KSType.isInstance(value, NamedType) || KSType.isInstance(value, ReferenceType))) {
				throw new TypeError("'value' is not of type 'NamedType' or 'ReferenceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(value.name() === "Struct") {
				return true;
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], ArrayStructType)) {
					return ArrayStructType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else {
					return ArrayStructType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return StructType.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_sortArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			return __ks_arguments_1;
		},
		sortArguments: function() {
			if(arguments.length === 1) {
				return ArrayStructType.prototype.__ks_func_sortArguments_0.apply(this, arguments);
			}
			else if(StructType.prototype.sortArguments) {
				return StructType.prototype.sortArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamedArrayStructType = KSHelper.class({
		$name: "NamedArrayStructType",
		$extends: StructType,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var value = new NamedArrayStructType(scope);
				queue.push(function() {
					var index = 0;
					for(var name in data.fields) {
						var type = data.fields[name];
						value.addField(StructFieldType.fromMetadata(index, name, type, metadata, references, alterations, queue, scope, node));
						++index;
					}
				});
				return value;
			},
			import: function() {
				if(arguments.length === 8) {
					return NamedArrayStructType.__ks_sttc_import_0.apply(this, arguments);
				}
				return StructType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._fields = new Dictionary();
		},
		__ks_init: function() {
			StructType.prototype.__ks_init.call(this);
			NamedArrayStructType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			StructType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addField_0: function(field) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(field === void 0 || field === null) {
				throw new TypeError("'field' is not nullable");
			}
			else if(!KSType.isInstance(field, StructFieldType)) {
				throw new TypeError("'field' is not of type 'StructFieldType'");
			}
			this._fields[field.name()] = field;
		},
		addField: function() {
			if(arguments.length === 1) {
				return NamedArrayStructType.prototype.__ks_func_addField_0.apply(this, arguments);
			}
			else if(StructType.prototype.addField) {
				return StructType.prototype.addField.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function() {
				var d = new Dictionary();
				d.kind = TypeKind.Struct;
				d.variety = StructVarietyKind.NamedArray;
				d.fields = new Dictionary();
				return d;
			})();
			for(var __ks_0 in this._fields) {
				var field = this._fields[__ks_0];
				__ks_export_1.fields[field.name()] = field.export(references, mode);
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return NamedArrayStructType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(StructType.prototype.export) {
				return StructType.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isArray_0: function() {
			return true;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return NamedArrayStructType.prototype.__ks_func_isArray_0.apply(this);
			}
			return StructType.prototype.isArray.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._fields[name];
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamedArrayStructType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return StructType.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ArrayStructType)) {
				throw new TypeError("'value' is not of type 'ArrayStructType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return (mode & MatchingMode.Similar) !== 0;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!(KSType.isInstance(value, NamedType) || KSType.isInstance(value, ReferenceType))) {
				throw new TypeError("'value' is not of type 'NamedType' or 'ReferenceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(value.name() === "Struct") {
				return true;
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], ArrayStructType)) {
					return NamedArrayStructType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else {
					return NamedArrayStructType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return StructType.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_sortArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			NotImplementedException.throw();
		},
		sortArguments: function() {
			if(arguments.length === 1) {
				return NamedArrayStructType.prototype.__ks_func_sortArguments_0.apply(this, arguments);
			}
			else if(StructType.prototype.sortArguments) {
				return StructType.prototype.sortArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ObjectStructType = KSHelper.class({
		$name: "ObjectStructType",
		$extends: StructType,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var value = new ObjectStructType(scope);
				queue.push(function() {
					var index = 0;
					for(var name in data.fields) {
						var type = data.fields[name];
						value.addField(StructFieldType.fromMetadata(index, name, type, metadata, references, alterations, queue, scope, node));
						++index;
					}
				});
				return value;
			},
			import: function() {
				if(arguments.length === 8) {
					return ObjectStructType.__ks_sttc_import_0.apply(this, arguments);
				}
				return StructType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._count = 0;
			this._fields = new Dictionary();
		},
		__ks_init: function() {
			StructType.prototype.__ks_init.call(this);
			ObjectStructType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			StructType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addField_0: function(field) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(field === void 0 || field === null) {
				throw new TypeError("'field' is not nullable");
			}
			else if(!KSType.isInstance(field, StructFieldType)) {
				throw new TypeError("'field' is not of type 'StructFieldType'");
			}
			this._fields[field.name()] = field;
			++this._count;
		},
		addField: function() {
			if(arguments.length === 1) {
				return ObjectStructType.prototype.__ks_func_addField_0.apply(this, arguments);
			}
			else if(StructType.prototype.addField) {
				return StructType.prototype.addField.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var __ks_export_1 = (function() {
				var d = new Dictionary();
				d.kind = TypeKind.Struct;
				d.variety = StructVarietyKind.Object;
				d.fields = new Dictionary();
				return d;
			})();
			for(var __ks_0 in this._fields) {
				var field = this._fields[__ks_0];
				__ks_export_1.fields[field.name()] = field.export(references, mode);
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ObjectStructType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(StructType.prototype.export) {
				return StructType.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDictionary_0: function() {
			return true;
		},
		isDictionary: function() {
			if(arguments.length === 0) {
				return ObjectStructType.prototype.__ks_func_isDictionary_0.apply(this);
			}
			return StructType.prototype.isDictionary.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._fields[name];
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ObjectStructType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return StructType.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, ObjectStructType)) {
				throw new TypeError("'value' is not of type 'ObjectStructType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return (mode & MatchingMode.Similar) !== 0;
		},
		__ks_func_isMatching_1: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!(KSType.isInstance(value, NamedType) || KSType.isInstance(value, ReferenceType))) {
				throw new TypeError("'value' is not of type 'NamedType' or 'ReferenceType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(value.name() === "Struct") {
				return true;
			}
			return false;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[0], ObjectStructType)) {
					return ObjectStructType.prototype.__ks_func_isMatching_0.apply(this, arguments);
				}
				else {
					return ObjectStructType.prototype.__ks_func_isMatching_1.apply(this, arguments);
				}
			}
			return StructType.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_sortArguments_0: function(__ks_arguments_1, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var result = [];
			var nameds = new Dictionary();
			var count = 0;
			for(var __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = __ks_arguments_1[__ks_0];
				if(KSType.isInstance(argument, NamedArgument)) {
					nameds[argument.name()] = argument;
					++count;
				}
			}
			if(count === __ks_arguments_1.length) {
				if(count === this._count) {
					for(var name in this._fields) {
						var field = this._fields[name];
						result.push(nameds[name]);
					}
				}
				else {
					for(var name in this._fields) {
						var field = this._fields[name];
						if(KSType.isValue(nameds[name])) {
							result.push(nameds[name]);
						}
						else if(field.isRequired() === true) {
							NotSupportedException.throw(node);
						}
						else {
							result.push(new Literal("null", node));
						}
					}
				}
			}
			else {
				NotImplementedException.throw(node);
			}
			return result;
		},
		sortArguments: function() {
			if(arguments.length === 2) {
				return ObjectStructType.prototype.__ks_func_sortArguments_0.apply(this, arguments);
			}
			else if(StructType.prototype.sortArguments) {
				return StructType.prototype.sortArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var StructFieldType = KSHelper.class({
		$name: "StructFieldType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(index, name, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 9) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 9)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(name === void 0) {
					name = null;
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				var fieldType = Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node);
				return new StructFieldType(scope, name, index, fieldType, data.required);
			},
			fromMetadata: function() {
				if(arguments.length === 9) {
					return StructFieldType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope, name, index, type, required) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(name === void 0) {
				name = null;
			}
			else if(name !== null && !KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String?'");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(required === void 0 || required === null) {
				throw new TypeError("'required' is not nullable");
			}
			else if(!KSType.isBoolean(required)) {
				throw new TypeError("'required' is not of type 'Boolean'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._name = name;
			this._index = index;
			this._type = type;
			this._required = required;
		},
		__ks_cons: function(args) {
			if(args.length === 5) {
				StructFieldType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			NotImplementedException.throw();
		},
		clone: function() {
			if(arguments.length === 0) {
				return StructFieldType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.required = that._required;
				d.type = that._type.export(references, mode);
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return StructFieldType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		index: function() {
			if(arguments.length === 0) {
				return StructFieldType.prototype.__ks_func_index_0.apply(this);
			}
			else if(Type.prototype.index) {
				return Type.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return StructFieldType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			NotImplementedException.throw();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return StructFieldType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return StructFieldType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			NotImplementedException.throw();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return StructFieldType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return StructFieldType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var ExclusionType = KSHelper.class({
		$name: "ExclusionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ExclusionType(scope, KSHelper.mapArray(data.types, function(item) {
					return Type.fromMetadata(item, metadata, references, alterations, queue, scope, node);
				}));
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ExclusionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ExclusionType(scope);
				queue.push(function() {
					for(var __ks_0 = 0, __ks_1 = data.types.length, item; __ks_0 < __ks_1; ++__ks_0) {
						item = data.types[__ks_0];
						type.addType(Type.fromMetadata(item, metadata, references, alterations, queue, scope, node));
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return ExclusionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope, types) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(types === void 0 || types === null) {
				types = [];
			}
			else if(!KSType.isArray(types)) {
				throw new TypeError("'types' is not of type 'Array'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._types = types;
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 2) {
				ExclusionType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			var that = new ExclusionType(this._scope);
			that._types = this._types;
			return that;
		},
		clone: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.kind = TypeKind.Exclusion;
				d.types = KSHelper.mapArray(that._types, function(type) {
					return type.toReference(references, mode);
				});
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return ExclusionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.flagExported(explicitly);
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return ExclusionType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getMainType_0: function() {
			return this._types[0];
		},
		getMainType: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_getMainType_0.apply(this);
			}
			else if(Type.prototype.getMainType) {
				return Type.prototype.getMainType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExclusion_0: function() {
			return true;
		},
		isExclusion: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_isExclusion_0.apply(this);
			}
			return Type.prototype.isExclusion.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!(type.isExportable() === true)) {
					return false;
				}
			}
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			console.error(value);
			NotImplementedException.throw();
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return ExclusionType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_length_0: function() {
			return this._types.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_length_0.apply(this);
			}
			else if(Type.prototype.length) {
				return Type.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0) {
				value = null;
			}
			else if(value !== null && !KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type?'");
			}
			if(!this._types[0].matchContentOf(value)) {
				return false;
			}
			for(var __ks_0 = 1, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.matchContentOf(value)) {
					return false;
				}
			}
			return true;
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return ExclusionType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExclusionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return KSHelper.mapArray(this._types, function(type) {
				return type.toQuote();
			}).join("^");
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return this.export(references, mode);
		},
		toReference: function() {
			if(arguments.length === 2) {
				return ExclusionType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("(");
			if(this._types[0].isAny() === true) {
				fragments.code("!");
				this._types[1].toTestFragments(fragments, node);
				for(var __ks_0 = 2, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					fragments.code(" && !");
					type.toTestFragments(fragments, node);
				}
			}
			else {
				this._types[0].toTestFragments(fragments, node);
				for(var __ks_0 = 1, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
					type = this._types[__ks_0];
					fragments.code(" && !");
					type.toTestFragments(fragments, node);
				}
			}
			fragments.code(")");
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ExclusionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_types_0: function() {
			return this._types;
		},
		types: function() {
			if(arguments.length === 0) {
				return ExclusionType.prototype.__ks_func_types_0.apply(this);
			}
			else if(Type.prototype.types) {
				return Type.prototype.types.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FusionType = KSHelper.class({
		$name: "FusionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return new FusionType(scope, KSHelper.mapArray(data.types, function(type) {
					return Type.fromMetadata(type, metadata, references, alterations, queue, scope, node);
				}));
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return FusionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._array = false;
			this._nullable = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			FusionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, types) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(types === void 0 || types === null) {
				types = [];
			}
			else if(!KSType.isArray(types)) {
				throw new TypeError("'types' is not of type 'Array'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._types = types;
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.isArray() === true) {
					this._array = true;
				}
				if(type.isNullable() === true) {
					this._nullable = true;
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 2) {
				FusionType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return FusionType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return (function(that) {
				var d = new Dictionary();
				d.kind = TypeKind.Fusion;
				d.types = KSHelper.mapArray(that._types, function(type) {
					return type.toReference(references, mode);
				});
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 2) {
				return FusionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				var property = type.getProperty(name);
				if(KSType.isValue(property)) {
					return property;
				}
			}
			return null;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return FusionType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isArray_0: function() {
			return this._array;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return FusionType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return FusionType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, FusionType)) {
				throw new TypeError("'value' is not of type 'FusionType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(this._types.length !== value._types.length) {
				return false;
			}
			var match = 0;
			for(var __ks_0 = 0, __ks_1 = this._types.length, aType; __ks_0 < __ks_1; ++__ks_0) {
				aType = this._types[__ks_0];
				for(var __ks_2 = 0, __ks_3 = value._types.length, bType; __ks_2 < __ks_3; ++__ks_2) {
					bType = value._types[__ks_2];
					if(aType.isMatching(bType, mode) === true) {
						match++;
						break;
					}
				}
			}
			return match === this._types.length;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return FusionType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return FusionType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_parameter_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.isArray() === true) {
					return type.parameter();
				}
			}
			return AnyType.NullableUnexplicit;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return FusionType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FusionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return FusionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._types.length === 1) {
				return this._types[0];
			}
			else {
				return this;
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return FusionType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var UnionType = KSHelper.class({
		$name: "UnionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new UnionType(scope, KSHelper.mapArray(data.types, function(item) {
					return Type.fromMetadata(item, metadata, references, alterations, queue, scope, node);
				}));
				if(KSType.isValue(data.nullable)) {
					type._nullable = data.nullable;
					type._explicitNullity = true;
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return UnionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new UnionType(scope);
				if(KSType.isValue(data.nullable)) {
					type._nullable = data.nullable;
					type._explicitNullity = true;
				}
				queue.push(function() {
					for(var __ks_0 = 0, __ks_1 = data.types.length, item; __ks_0 < __ks_1; ++__ks_0) {
						item = data.types[__ks_0];
						type.addType(Type.fromMetadata(item, metadata, references, alterations, queue, scope, node));
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return UnionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._any = false;
			this._explicitNullity = false;
			this._nullable = false;
			this._types = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			UnionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			var __ks_i = 0;
			var types;
			if(arguments.length > ++__ks_i && (types = arguments[__ks_i]) !== void 0 && types !== null) {
				if(!KSType.isArray(types)) {
					if(arguments.length - __ks_i < 2) {
						types = [];
						--__ks_i;
					}
					else {
						throw new TypeError("'types' is not of type 'Array'");
					}
				}
			}
			else {
				types = [];
			}
			var explicit;
			if(arguments.length > ++__ks_i && (explicit = arguments[__ks_i]) !== void 0 && explicit !== null) {
				if(!KSType.isBoolean(explicit)) {
					throw new TypeError("'explicit' is not of type 'Boolean'");
				}
			}
			else {
				explicit = true;
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._explicit = explicit;
			for(var __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				if((type.isNull() === true) && ((type.isReference() === true) || (type.isExplicit() === true))) {
					this._nullable = true;
					this._explicitNullity = true;
				}
				else if(type.isAny() === true) {
					this._types = [type];
					this._any = true;
					this._nullable = type.isNullable();
					break;
				}
				else {
					this._types.push(type);
					if(type.isNullable() === true) {
						this._nullable = true;
					}
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 3) {
				UnionType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_addType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._any) {
				if(!this._nullable && (type.isNullable() === true)) {
					this._types[0] = AnyType.NullableUnexplicit;
					this._nullable = true;
				}
			}
			else if(type.isNull() === true) {
				this._nullable = true;
			}
			else if(type.isAny() === true) {
				this._types = [type];
				this._any = true;
				this._nullable = type.isNullable();
			}
			else if(type.isUnion() === true) {
				for(var __ks_0 = 0, __ks_1 = type.discardAlias().types(), __ks_2 = __ks_1.length, __ks_type_1; __ks_0 < __ks_2; ++__ks_0) {
					__ks_type_1 = __ks_1[__ks_0];
					this.addType(__ks_type_1);
				}
				if(!this._nullable && (type.isNullable() === true)) {
					this._nullable = true;
				}
			}
			else {
				var notMatched = true;
				for(var i = 0, __ks_0 = this._types.length, t; i < __ks_0 && notMatched; ++i) {
					t = this._types[i];
					if(t.matchContentOf(type)) {
						notMatched = false;
						if(!t.equals(type)) {
							this._types[i] = type;
							if(!this._nullable && (type.isNullable() === true)) {
								this._nullable = true;
							}
						}
					}
				}
				if(notMatched) {
					this._types.push(type);
					if(!this._nullable && (type.isNullable() === true)) {
						this._nullable = true;
					}
				}
			}
		},
		addType: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_addType_0.apply(this, arguments);
			}
			else if(Type.prototype.addType) {
				return Type.prototype.addType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_canBeBoolean_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeBoolean()) {
					return true;
				}
			}
			return false;
		},
		canBeBoolean: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_canBeBoolean_0.apply(this);
			}
			return Type.prototype.canBeBoolean.apply(this, arguments);
		},
		__ks_func_canBeNumber_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeNumber(any)) {
					return true;
				}
			}
			return false;
		},
		canBeNumber: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return UnionType.prototype.__ks_func_canBeNumber_0.apply(this, arguments);
			}
			return Type.prototype.canBeNumber.apply(this, arguments);
		},
		__ks_func_canBeString_0: function(any) {
			if(any === void 0 || any === null) {
				any = true;
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeString(any)) {
					return true;
				}
			}
			return false;
		},
		canBeString: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return UnionType.prototype.__ks_func_canBeString_0.apply(this, arguments);
			}
			return Type.prototype.canBeString.apply(this, arguments);
		},
		__ks_func_canBeVirtual_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.canBeVirtual(name) === true) {
					return true;
				}
			}
			return false;
		},
		canBeVirtual: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_canBeVirtual_0.apply(this, arguments);
			}
			return Type.prototype.canBeVirtual.apply(this, arguments);
		},
		__ks_func_clone_0: function() {
			var that = new UnionType(this._scope);
			that._any = this._any;
			that._explicit = this._explicit;
			that._explicitNullity = this._explicitNullity;
			that._nullable = this._nullable;
			that._types = this._types;
			return that;
		},
		clone: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._explicitNullity) {
				return (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Union;
					d.nullable = that._nullable;
					d.types = KSHelper.mapArray(that._types, function(type) {
						return type.toReference(references, mode);
					});
					return d;
				})(this);
			}
			else {
				return (function(that) {
					var d = new Dictionary();
					d.kind = TypeKind.Union;
					d.types = KSHelper.mapArray(that._types, function(type) {
						return type.toReference(references, mode);
					});
					return d;
				})(this);
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagExported_0: function(explicitly) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(explicitly === void 0 || explicitly === null) {
				throw new TypeError("'explicitly' is not nullable");
			}
			else if(!KSType.isBoolean(explicitly)) {
				throw new TypeError("'explicitly' is not of type 'Boolean'");
			}
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				type.flagExported(explicitly);
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_flagExported_0.apply(this, arguments);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var types = [];
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				var __ks_2;
				var property = KSType.isValue(__ks_2 = type.getProperty(name)) ? __ks_2 : Type.Any;
				if(!(types.some(function(t) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(t === void 0 || t === null) {
						throw new TypeError("'t' is not nullable");
					}
					return property.matchContentOf(t);
				}) === true)) {
					types.push(property);
				}
			}
			if(types.length === 1) {
				return types[0];
			}
			else {
				return Type.union.apply(Type, [].concat([this._scope], types));
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return Type.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_isExplicit_0: function() {
			return this._explicit;
		},
		isExplicit: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isExplicit_0.apply(this);
			}
			else if(Type.prototype.isExplicit) {
				return Type.prototype.isExplicit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!(type.isExportable() === true)) {
					return false;
				}
			}
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Type.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.isInstanceOf(target) === true) {
					return true;
				}
			}
			return false;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			if(!KSType.isInstance(value, UnionType) || (this._types.length !== value._types.length)) {
				return false;
			}
			var match = 0;
			for(var __ks_0 = 0, __ks_1 = this._types.length, aType; __ks_0 < __ks_1; ++__ks_0) {
				aType = this._types[__ks_0];
				for(var __ks_2 = 0, __ks_3 = value._types.length, bType; __ks_2 < __ks_3; ++__ks_2) {
					bType = value._types[__ks_2];
					if(aType.isMatching(bType, mode) === true) {
						match++;
						break;
					}
				}
			}
			return match === this._types.length;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isMorePreciseThan_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(that.isAny() === true) {
				return true;
			}
			if(KSType.isInstance(that, ReferenceType)) {
				if(!this._nullable && (that.isNullable() === true)) {
					return true;
				}
				that = that.discardAlias();
			}
			if(KSType.isInstance(that, UnionType)) {
				if(!this._nullable && (that.isNullable() === true)) {
					return true;
				}
				return KSOperator.lt(this._types.length, that.types().length);
			}
			return false;
		},
		isMorePreciseThan: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_isMorePreciseThan_0.apply(this, arguments);
			}
			return Type.prototype.isMorePreciseThan.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Type.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isReducible_0: function() {
			return true;
		},
		isReducible: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isReducible_0.apply(this);
			}
			return Type.prototype.isReducible.apply(this, arguments);
		},
		__ks_func_isUnion_0: function() {
			return true;
		},
		isUnion: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isUnion_0.apply(this);
			}
			return Type.prototype.isUnion.apply(this, arguments);
		},
		__ks_func_length_0: function() {
			return this._types.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_length_0.apply(this);
			}
			else if(Type.prototype.length) {
				return Type.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(!type.matchContentOf(that)) {
					return false;
				}
			}
			return true;
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_reduce_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var types = KSHelper.mapArray(this._types, function(t) {
				return t;
			}, function(t) {
				return !t.matchContentOf(type);
			});
			if(types.length === 1) {
				return types[0];
			}
			else {
				return Type.union.apply(Type, [].concat([this._scope], types));
			}
		},
		reduce: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_reduce_0.apply(this, arguments);
			}
			return Type.prototype.reduce.apply(this, arguments);
		},
		__ks_func_setNullable_0: function(nullable) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(this._nullable === nullable) {
				return this;
			}
			else {
				var that = this.clone();
				that._nullable = nullable;
				that._explicitNullity = true;
				return that;
			}
		},
		setNullable: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_setNullable_0.apply(this, arguments);
			}
			return Type.prototype.setNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return KSHelper.mapArray(this._types, function(type) {
				return type.toQuote();
			}).join("|");
		},
		__ks_func_toQuote_1: function(__ks_double_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_double_1 === void 0 || __ks_double_1 === null) {
				throw new TypeError("'double' is not nullable");
			}
			else if(!KSType.isBoolean(__ks_double_1)) {
				throw new TypeError("'double' is not of type 'Boolean'");
			}
			var elements = KSHelper.mapArray(this._types, function(type) {
				return type.toQuote();
			});
			var last = elements.pop();
			if(__ks_double_1) {
				return "\"" + elements.join("\", \"") + "\" or \"" + last + "\"";
			}
			else {
				return "'" + elements.join("', '") + "' or '" + last + "'";
			}
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_toQuote_1.apply(this, arguments);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return this.export(references, mode);
		},
		toReference: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("(");
			for(var i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i !== 0) {
					fragments.code(" || ");
				}
				type.toTestFragments(fragments, node);
			}
			fragments.code(")");
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._types.length === 1) {
				return this._types[0];
			}
			else {
				return this;
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		},
		__ks_func_types_0: function() {
			return this._types;
		},
		types: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_types_0.apply(this);
			}
			else if(Type.prototype.types) {
				return Type.prototype.types.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var VoidType = KSHelper.class({
		$name: "VoidType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			Type.prototype.__ks_cons.call(this, [null]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				VoidType.prototype.__ks_cons_0.apply(this);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			throw new NotSupportedException();
		},
		clone: function() {
			if(arguments.length === 0) {
				return VoidType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(references, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			return "Void";
		},
		export: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatching_0: function(value, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.isInstance(value, VoidType)) {
				throw new TypeError("'value' is not of type 'VoidType'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			return true;
		},
		isMatching: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_isMatching_0.apply(this, arguments);
			}
			return Type.prototype.isMatching.apply(this, arguments);
		},
		__ks_func_isVoid_0: function() {
			return true;
		},
		isVoid: function() {
			if(arguments.length === 0) {
				return VoidType.prototype.__ks_func_isVoid_0.apply(this);
			}
			return Type.prototype.isVoid.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Void");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "Void";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return VoidType.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Type.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotSupportedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	Type.Any = AnyType.Unexplicit;
	Type.Never = new NeverType();
	Type.Null = NullType.Unexplicit;
	Type.Void = new VoidType();
	var Variable = KSHelper.class({
		$name: "Variable",
		$static: {
			__ks_sttc_createPredefinedClass_0: function(name, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				var fn = new ClassConstructorType(scope);
				fn.addParameter(Type.Any, 0, Infinity);
				var type = new ClassType(scope);
				type.flagAlien();
				type.flagPredefined();
				type.flagSealed();
				type.addConstructor(fn);
				return new Variable(name, true, true, type);
			},
			createPredefinedClass: function() {
				if(arguments.length === 2) {
					return Variable.__ks_sttc_createPredefinedClass_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_fromAST_0: function(data, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				var __ks_0 = data.kind.valueOf();
				if(__ks_0 === NodeKind.Identifier.value) {
					return scope.getVariable(data.name);
				}
				else {
					console.error(data);
					throw new NotImplementedException();
				}
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return Variable.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._altereable = false;
			this._declaration = null;
			this._declaredType = AnyType.NullableUnexplicit;
			this._definitive = false;
			this._immutable = true;
			this._new = true;
			this._predefined = false;
			this._realType = Type.Null;
		},
		__ks_init: function() {
			Variable.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function(name, immutable, predefined) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			if(predefined === void 0 || predefined === null) {
				throw new TypeError("'predefined' is not nullable");
			}
			else if(!KSType.isBoolean(predefined)) {
				throw new TypeError("'predefined' is not of type 'Boolean'");
			}
			var __ks_i = 2;
			var declaredType;
			if(arguments.length > ++__ks_i && (declaredType = arguments[__ks_i]) !== void 0) {
				if(declaredType !== null && !KSType.isInstance(declaredType, Type)) {
					if(arguments.length - __ks_i < 2) {
						declaredType = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'declaredType' is not of type 'Type?'");
					}
				}
			}
			else {
				declaredType = null;
			}
			var initialized;
			if(arguments.length > ++__ks_i && (initialized = arguments[__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					throw new TypeError("'initialized' is not of type 'Boolean'");
				}
			}
			else {
				initialized = false;
			}
			this._name = name;
			this._immutable = immutable;
			this._predefined = predefined;
			if(declaredType === null) {
				this._declaredType = Type.toNamedType(this._name, Type.Any);
				if(initialized) {
					this._realType = this._declaredType;
				}
			}
			else {
				this._declaredType = Type.toNamedType(this._name, declaredType);
				if(this._predefined || initialized || !(declaredType.isReference() === true)) {
					this._realType = this._declaredType;
				}
			}
			this._definitive = this._immutable;
			this._secureName = this._name;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				Variable.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length >= 3 && args.length <= 5) {
				Variable.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			var clone = new Variable();
			clone._name = this._name;
			clone._secureName = this._secureName;
			clone._immutable = this._immutable;
			clone._predefined = this._predefined;
			clone._declaredType = this._declaredType;
			clone._realType = this._realType;
			clone._definitive = this._definitive;
			return clone;
		},
		clone: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_clone_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declaration_0: function() {
			return this._declaration;
		},
		__ks_func_declaration_1: function(declaration) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(declaration === void 0) {
				declaration = null;
			}
			else if(declaration !== null && !KSType.isInstance(declaration, Statement)) {
				throw new TypeError("'declaration' is not of type 'Statement?'");
			}
			this._declaration = declaration;
			return this;
		},
		declaration: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_declaration_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Variable.prototype.__ks_func_declaration_1.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagDefinitive_0: function() {
			this._definitive = true;
			return this;
		},
		flagDefinitive: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_flagDefinitive_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDeclaredType_0: function() {
			return this._declaredType;
		},
		getDeclaredType: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_getDeclaredType_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRealType_0: function() {
			return this._realType;
		},
		getRealType: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_getRealType_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSecureName_0: function() {
			return this._secureName;
		},
		getSecureName: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_getSecureName_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDefinitive_0: function() {
			return this._definitive;
		},
		isDefinitive: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isDefinitive_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isImmutable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isPredefined_0: function() {
			return this._predefined;
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isPredefined_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRenamed_0: function() {
			return this._name !== this._secureName;
		},
		isRenamed: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isRenamed_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_name_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepareAlteration_0: function() {
			if(((this._declaredType.isRequired() === true) || (this._declaredType.isAlien() === true)) && !this._altereable) {
				this._declaredType = this._declaredType.clone();
				this._realType = this._declaredType;
				this._altereable = true;
			}
		},
		prepareAlteration: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_prepareAlteration_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_renameAs_0: function(secureName) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(secureName === void 0 || secureName === null) {
				throw new TypeError("'secureName' is not nullable");
			}
			else if(!KSType.isString(secureName)) {
				throw new TypeError("'secureName' is not of type 'String'");
			}
			this._secureName = secureName;
		},
		renameAs: function() {
			if(arguments.length === 1) {
				return Variable.prototype.__ks_func_renameAs_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setDeclaredType_0: function(declaredType) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(declaredType === void 0 || declaredType === null) {
				throw new TypeError("'declaredType' is not nullable");
			}
			else if(!KSType.isInstance(declaredType, Type)) {
				throw new TypeError("'declaredType' is not of type 'Type'");
			}
			this._declaredType = Type.toNamedType(this._name, declaredType);
			if(this._realType !== Type.Null) {
				this._realType = this._declaredType;
			}
			return this;
		},
		setDeclaredType: function() {
			if(arguments.length === 1) {
				return Variable.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setDefinitive_0: function(definitive) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(definitive === void 0 || definitive === null) {
				throw new TypeError("'definitive' is not nullable");
			}
			else if(!KSType.isBoolean(definitive)) {
				throw new TypeError("'definitive' is not of type 'Boolean'");
			}
			this._definitive = definitive;
			return this;
		},
		setDefinitive: function() {
			if(arguments.length === 1) {
				return Variable.prototype.__ks_func_setDefinitive_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setRealType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(type.isMorePreciseThan(this._declaredType)) {
				this._realType = type;
			}
			else {
				this._realType = this._declaredType;
			}
			return this;
		},
		setRealType: function() {
			if(arguments.length === 1) {
				return Variable.prototype.__ks_func_setRealType_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._secureName);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Variable.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var $keywords = (function() {
		var d = new Dictionary();
		d.abstract = true;
		d.arguments = true;
		d.boolean = true;
		d.break = true;
		d.byte = true;
		d.case = true;
		d.catch = true;
		d.char = true;
		d.class = true;
		d.const = true;
		d.constructor = true;
		d.continue = true;
		d.debugger = true;
		d.default = true;
		d.delete = true;
		d.destructor = true;
		d.do = true;
		d.double = true;
		d.else = true;
		d.enum = true;
		d.export = true;
		d.extends = true;
		d.false = true;
		d.finally = true;
		d.float = true;
		d.for = true;
		d.function = true;
		d.goto = true;
		d.if = true;
		d.implements = true;
		d.import = true;
		d.in = true;
		d.instanceof = true;
		d.int = true;
		d.interface = true;
		d.long = true;
		d.namespace = true;
		d.native = true;
		d.never = true;
		d.new = true;
		d.null = true;
		d.override = true;
		d.overwrite = true;
		d.package = true;
		d.private = true;
		d.protected = true;
		d.public = true;
		d.return = true;
		d.sealed = true;
		d.short = true;
		d.static = true;
		d.struct = true;
		d.super = true;
		d.switch = true;
		d.synchronized = true;
		d.this = true;
		d.throw = true;
		d.throws = true;
		d.transient = true;
		d.true = true;
		d.try = true;
		d.typeof = true;
		d.var = true;
		d.void = true;
		d.volatile = true;
		d.while = true;
		d.with = true;
		return d;
	})();
	var ScopeType = KSHelper.enum(Number, {
		Bleeding: 0,
		Block: 1,
		Function: 2,
		Hollow: 3,
		InlineBlock: 4,
		Macro: 5,
		Operation: 6
	});
	var Scope = KSHelper.class({
		$name: "Scope",
		$static: {
			__ks_sttc_isTempName_0: function(name) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				return KSOperator.gt(name.length, 5) && (name.substr(0, 5) === "__ks_");
			},
			isTempName: function() {
				if(arguments.length === 1) {
					return Scope.__ks_sttc_isTempName_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_getLineOffset_0: function() {
			return 0;
		},
		getLineOffset: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_getLineOffset_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasBleedingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.hasDefinedVariable(name);
		},
		hasBleedingVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_hasBleedingVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMacro_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return false;
		},
		hasMacro: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_hasMacro_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return 0;
		},
		line: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_line_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBleeding_0: function() {
			return false;
		},
		isBleeding: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_isBleeding_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInline_0: function() {
			return false;
		},
		isInline: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_isInline_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isPredefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var variable, __ks_0;
			return (KSType.isValue(__ks_0 = this.getVariable(name)) ? (variable = __ks_0, true) : false) && (variable.isPredefined() === true);
		},
		isPredefinedVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_isPredefinedVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BleedingScope = KSHelper.class({
		$name: "BleedingScope",
		$extends: Scope,
		__ks_init_1: function() {
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._variables = new Dictionary();
		},
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
			BleedingScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.isInstance(parent, Scope)) {
				throw new TypeError("'parent' is not of type 'Scope'");
			}
			this._parent = parent;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				BleedingScope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireTempName_0: function(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			else if(!KSType.isBoolean(declare)) {
				throw new TypeError("'declare' is not of type 'Boolean'");
			}
			return this._parent.acquireTempName(declare);
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BleedingScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.acquireTempName) {
				return Scope.prototype.acquireTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireUnusedTempName_0: function() {
			return this._parent.acquireUnusedTempName();
		},
		acquireUnusedTempName: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_acquireUnusedTempName_0.apply(this);
			}
			else if(Scope.prototype.acquireUnusedTempName) {
				return Scope.prototype.acquireUnusedTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_block_0: function() {
			return this._parent.block();
		},
		block: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_block_0.apply(this);
			}
			else if(Scope.prototype.block) {
				return Scope.prototype.block.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_commitTempVariables_0: function(variables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			else if(!KSType.isArray(variables)) {
				throw new TypeError("'variables' is not of type 'Array'");
			}
			return this._parent.commitTempVariables(variables);
		},
		commitTempVariables: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_commitTempVariables_0.apply(this, arguments);
			}
			else if(Scope.prototype.commitTempVariables) {
				return Scope.prototype.commitTempVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			return this._parent.declareVariable(name, scope);
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return BleedingScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.declareVariable) {
				return Scope.prototype.declareVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_define_0: function(name, immutable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var __ks_i = 1;
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 3) {
						type = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type?'");
					}
				}
			}
			else {
				type = null;
			}
			var initialized;
			if(arguments.length > __ks_i + 2 && (initialized = arguments[++__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					if(arguments.length - __ks_i < 2) {
						initialized = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'initialized' is not of type 'Boolean'");
					}
				}
			}
			else {
				initialized = false;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(this.hasDefinedVariable(name)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, false, type, initialized);
			this.defineVariable(variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 5) {
				return BleedingScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Scope.prototype.define) {
				return Scope.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariable_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var name = variable.name();
			if(KSType.isArray(this._variables[name])) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			this._variables[name] = [this._parent.line(), variable];
			var newName = this._parent.declareVariable(name, this);
			if(KSType.isValue(newName)) {
				this._renamedVariables[name] = newName;
				variable.renameAs(newName);
			}
		},
		defineVariable: function() {
			if(arguments.length === 2) {
				return BleedingScope.prototype.__ks_func_defineVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.defineVariable) {
				return Scope.prototype.defineVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getChunkType_0: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			return this._parent.getChunkType(name, line);
		},
		getChunkType: function() {
			if(arguments.length === 2) {
				return BleedingScope.prototype.__ks_func_getChunkType_0.apply(this, arguments);
			}
			else if(Scope.prototype.getChunkType) {
				return Scope.prototype.getChunkType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if(this._parent.isAtLastLine() === true) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					var line = this._parent.line();
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		},
		getDefinedVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_getDefinedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.getDefinedVariable) {
				return Scope.prototype.getDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRawLine_0: function() {
			return this._parent.getRawLine();
		},
		getRawLine: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_getRawLine_0.apply(this);
			}
			else if(Scope.prototype.getRawLine) {
				return Scope.prototype.getRawLine.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRenamedIndex_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : this._parent.getRenamedIndex(name);
		},
		getRenamedIndex: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_getRenamedIndex_0.apply(this, arguments);
			}
			else if(Scope.prototype.getRenamedIndex) {
				return Scope.prototype.getRenamedIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getTempIndex_0: function() {
			return this._parent.getTempIndex();
		},
		getTempIndex: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_getTempIndex_0.apply(this);
			}
			else if(Scope.prototype.getTempIndex) {
				return Scope.prototype.getTempIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this.getVariable(name, this._parent.line());
		},
		__ks_func_getVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var currentLine = this._parent.line();
				var variable = null;
				if((line === -1) || (line > currentLine)) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return this._parent.getVariable(name, -1);
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return this._parent.getVariable(name, line);
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BleedingScope.prototype.__ks_func_getVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.getVariable) {
				return Scope.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isArray(this._variables[name]) || (this._parent.hasDeclaredVariable(name) === true);
		},
		hasDeclaredVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_hasDeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDeclaredVariable) {
				return Scope.prototype.hasDeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.hasDefinedVariable(name, this._parent.line());
		},
		__ks_func_hasDefinedVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var currentLine = this._parent.line();
				var variable = null;
				if((line === -1) || (line > currentLine)) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return false;
		},
		hasDefinedVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_hasDefinedVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BleedingScope.prototype.__ks_func_hasDefinedVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasDefinedVariable) {
				return Scope.prototype.hasDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isArray(this._variables[name]) || (this._parent.hasVariable(name) === true);
		},
		__ks_func_hasVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			return KSType.isArray(this._variables[name]) || (this._parent.hasVariable(name, line) === true);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BleedingScope.prototype.__ks_func_hasVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasVariable) {
				return Scope.prototype.hasVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBleeding_0: function() {
			return true;
		},
		isBleeding: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_isBleeding_0.apply(this);
			}
			return Scope.prototype.isBleeding.apply(this, arguments);
		},
		__ks_func_isInline_0: function() {
			return true;
		},
		isInline: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_isInline_0.apply(this);
			}
			return Scope.prototype.isInline.apply(this, arguments);
		},
		__ks_func_isRedeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		},
		isRedeclaredVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_isRedeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRedeclaredVariable) {
				return Scope.prototype.isRedeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				return KSType.isString(this._renamedVariables[name]);
			}
			else {
				return this._parent.isRenamedVariable(name);
			}
		},
		isRenamedVariable: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_isRenamedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRenamedVariable) {
				return Scope.prototype.isRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return this._parent.line();
		},
		__ks_func_line_1: function(line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			return this._parent.line(line);
		},
		line: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_line_0.apply(this);
			}
			else if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_line_1.apply(this, arguments);
			}
			return Scope.prototype.line.apply(this, arguments);
		},
		__ks_func_module_0: function() {
			return this._parent.module();
		},
		module: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_module_0.apply(this);
			}
			else if(Scope.prototype.module) {
				return Scope.prototype.module.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return BleedingScope.prototype.__ks_func_parent_0.apply(this);
			}
			else if(Scope.prototype.parent) {
				return Scope.prototype.parent.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function(value, nullable, parameters) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(nullable === void 0) {
				nullable = null;
			}
			else if(nullable !== null && !KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean?'");
			}
			if(parameters === void 0) {
				parameters = null;
			}
			else if(parameters !== null && !KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array?'");
			}
			return this._parent.reference(value, nullable, parameters);
		},
		reference: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return BleedingScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reference) {
				return Scope.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.releaseTempName(name);
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.releaseTempName) {
				return Scope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_rename_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			var index = this._parent.getRenamedIndex(name);
			var newName = "__ks_" + name + "_" + ++index;
			this._renamedIndexes[name] = index;
			this._renamedVariables[name] = newName;
			var variable = this.getVariable(name);
			variable.renameAs(newName);
		},
		rename: function() {
			if(arguments.length === 1) {
				return BleedingScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			else if(Scope.prototype.rename) {
				return Scope.prototype.rename.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_resolveReference_0: function(name, nullable, parameters) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			return this._parent.resolveReference(name, nullable, parameters);
		},
		resolveReference: function() {
			if(arguments.length === 3) {
				return BleedingScope.prototype.__ks_func_resolveReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.resolveReference) {
				return Scope.prototype.resolveReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BlockScope = KSHelper.class({
		$name: "BlockScope",
		$extends: Scope,
		__ks_init_1: function() {
			this._chunkTypes = new Dictionary();
			this._declarations = new Dictionary();
			this._macros = new Dictionary();
			this._references = new Dictionary();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._stashes = new Dictionary();
			this._tempDeclarations = [];
			this._tempIndex = -1;
			this._tempNames = new Dictionary();
			this._variables = new Dictionary();
		},
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
			BlockScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.isInstance(parent, Scope)) {
				throw new TypeError("'parent' is not of type 'Scope'");
			}
			Scope.prototype.__ks_cons.call(this, []);
			this._parent = parent;
			this._module = this._parent.module();
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				BlockScope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireTempName_0: function(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			else if(!KSType.isBoolean(declare)) {
				throw new TypeError("'declare' is not of type 'Boolean'");
			}
			var __ks_0;
			for(var name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			var name = "__ks_" + ++this._tempIndex;
			this._tempNames[name] = false;
			if(declare) {
				this._tempDeclarations.push(name);
			}
			return name;
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.acquireTempName) {
				return Scope.prototype.acquireTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireUnusedTempName_0: function() {
			var __ks_0;
			for(var name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		},
		acquireUnusedTempName: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_acquireUnusedTempName_0.apply(this);
			}
			else if(Scope.prototype.acquireUnusedTempName) {
				return Scope.prototype.acquireUnusedTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			else if(!KSType.isInstance(macro, MacroDeclaration)) {
				throw new TypeError("'macro' is not of type 'MacroDeclaration'");
			}
			if(KSType.isArray(this._macros[name])) {
				var type = macro.type();
				var notAdded = true;
				for(var index = 0, __ks_0 = this._macros[name].length, m; index < __ks_0 && notAdded; ++index) {
					m = this._macros[name][index];
					if(m.type().isMatching(type, MatchingMode.Signature) === true) {
						this._macros[name].splice(index, 0, macro);
						notAdded = false;
					}
				}
				if(notAdded) {
					this._macros[name].push(macro);
				}
			}
			else {
				this._macros[name] = [macro];
			}
		},
		addMacro: function() {
			if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_addMacro_0.apply(this, arguments);
			}
			else if(Scope.prototype.addMacro) {
				return Scope.prototype.addMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addStash_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var fn = Array.prototype.slice.call(arguments, 1, arguments.length);
			if(KSType.isValue(this._stashes[name])) {
				this._stashes[name].push(fn);
			}
			else {
				this._stashes[name] = [fn];
			}
		},
		addStash: function() {
			return BlockScope.prototype.__ks_func_addStash_0.apply(this, arguments);
		},
		__ks_func_block_0: function() {
			return this;
		},
		block: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_block_0.apply(this);
			}
			else if(Scope.prototype.block) {
				return Scope.prototype.block.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_commitTempVariables_0: function(variables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			else if(!KSType.isArray(variables)) {
				throw new TypeError("'variables' is not of type 'Array'");
			}
			__ks_Array._im_pushUniq.apply(null, [variables].concat(this._tempDeclarations));
			__ks_Array._im_clear(this._tempDeclarations);
		},
		commitTempVariables: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_commitTempVariables_0.apply(this, arguments);
			}
			else if(Scope.prototype.commitTempVariables) {
				return Scope.prototype.commitTempVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(($keywords[name] === true) || (this._declarations[name] === true)) {
				var newName = this.getNewName(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.declareVariable) {
				return Scope.prototype.declareVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_define_0: function(name, immutable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var __ks_i = 1;
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 3) {
						type = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type?'");
					}
				}
			}
			else {
				type = null;
			}
			var initialized;
			if(arguments.length > __ks_i + 2 && (initialized = arguments[++__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					if(arguments.length - __ks_i < 2) {
						initialized = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'initialized' is not of type 'Boolean'");
					}
				}
			}
			else {
				initialized = false;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(this.hasDefinedVariable(name)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, false, type, initialized);
			this.defineVariable(variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 5) {
				return BlockScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Scope.prototype.define) {
				return Scope.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariable_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var name = variable.name();
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				if(KSType.isInstance(__ks_Array._im_last(variables), Variable)) {
					SyntaxException.throwAlreadyDeclared(name, node);
				}
				variables.push(this.line(), variable);
			}
			else {
				var newName = this.declareVariable(name, this);
				if(KSType.isValue(newName)) {
					this._renamedVariables[name] = newName;
					variable.renameAs(newName);
				}
				this._variables[name] = [this.line(), variable];
			}
		},
		defineVariable: function() {
			if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_defineVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.defineVariable) {
				return Scope.prototype.defineVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getChunkType_0: function(name, line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				line = this.line();
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._chunkTypes[name])) {
				var types = this._chunkTypes[name];
				var type = null;
				if((line === -1) || (line > this.line())) {
					type = __ks_Array._im_last(types);
				}
				else {
					for(var i = 0, __ks_0 = types.length; i < __ks_0 && KSOperator.lte(types[i], line); i += 2) {
						type = types[i + 1];
					}
				}
				if(type !== null) {
					return type;
				}
			}
			return this._parent.getChunkType(name, -1);
		},
		getChunkType: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return BlockScope.prototype.__ks_func_getChunkType_0.apply(this, arguments);
			}
			else if(Scope.prototype.getChunkType) {
				return Scope.prototype.getChunkType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if(this.isAtLastLine() === true) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], this.line()); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		},
		getDefinedVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_getDefinedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.getDefinedVariable) {
				return Scope.prototype.getDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getLineOffset_0: function() {
			return this._module.getLineOffset();
		},
		getLineOffset: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_getLineOffset_0.apply(this);
			}
			return Scope.prototype.getLineOffset.apply(this, arguments);
		},
		__ks_func_getMacro_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(KSHelper.valueOf(data.callee.kind) === NodeKind.Identifier.value) {
				if(KSType.isValue(this._macros[data.callee.name])) {
					for(var __ks_0 = 0, __ks_1 = this._macros[data.callee.name].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[data.callee.name][__ks_0];
						if(macro.matchArguments(data.arguments) === true) {
							return macro;
						}
					}
				}
				else {
					return this._parent.getMacro(data, parent);
				}
				SyntaxException.throwUnmatchedMacro(data.callee.name, parent, data);
			}
			else {
				var path = Generator.generate(data.callee);
				if(KSType.isValue(this._macros[path])) {
					for(var __ks_0 = 0, __ks_1 = this._macros[path].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[path][__ks_0];
						if(macro.matchArguments(data.arguments) === true) {
							return macro;
						}
					}
				}
				else {
					return this._parent.getMacro(data, parent);
				}
				SyntaxException.throwUnmatchedMacro(path, parent, data);
			}
		},
		getMacro: function() {
			if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_getMacro_0.apply(this, arguments);
			}
			else if(Scope.prototype.getMacro) {
				return Scope.prototype.getMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getNewName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
			var newName = "__ks_" + name + "_" + ++index;
			while(this._declarations[newName] === true) {
				newName = "__ks_" + name + "_" + ++index;
			}
			this._renamedIndexes[name] = index;
			return newName;
		},
		getNewName: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_getNewName_0.apply(this, arguments);
			}
			else if(Scope.prototype.getNewName) {
				return Scope.prototype.getNewName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRawLine_0: function() {
			return this._module.getRawLine();
		},
		getRawLine: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_getRawLine_0.apply(this);
			}
			else if(Scope.prototype.getRawLine) {
				return Scope.prototype.getRawLine.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRenamedIndex_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
		},
		getRenamedIndex: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_getRenamedIndex_0.apply(this, arguments);
			}
			else if(Scope.prototype.getRenamedIndex) {
				return Scope.prototype.getRenamedIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getTempIndex_0: function() {
			return this._tempIndex;
		},
		getTempIndex: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_getTempIndex_0.apply(this);
			}
			else if(Scope.prototype.getTempIndex) {
				return Scope.prototype.getTempIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this.getVariable(name, this.line());
		},
		__ks_func_getVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if((line === -1) || (line > this.line())) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return this._parent.getVariable(name, -1);
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return this._parent.getVariable(name, -1);
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_getVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.getVariable) {
				return Scope.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._declarations[name] === true;
		},
		hasDeclaredVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_hasDeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDeclaredVariable) {
				return Scope.prototype.hasDeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.hasDefinedVariable(name, this.line());
		},
		__ks_func_hasDefinedVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if((line === -1) || (line > this.line())) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return false;
		},
		hasDefinedVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_hasDefinedVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_hasDefinedVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasDefinedVariable) {
				return Scope.prototype.hasDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMacro_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.isArray(this._macros[name]) || this._parent.hasMacro(name);
		},
		hasMacro: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_hasMacro_0.apply(this, arguments);
			}
			return Scope.prototype.hasMacro.apply(this, arguments);
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.hasVariable(name, this.line());
		},
		__ks_func_hasVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if((line === -1) || (line > this.line())) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return this._parent.hasVariable(name, -1);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_hasVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasVariable) {
				return Scope.prototype.hasVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAtLastLine_0: function() {
			return this._module.isAtLastLine();
		},
		isAtLastLine: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_isAtLastLine_0.apply(this);
			}
			else if(Scope.prototype.isAtLastLine) {
				return Scope.prototype.isAtLastLine.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		},
		isRedeclaredVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_isRedeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRedeclaredVariable) {
				return Scope.prototype.isRedeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				return KSType.isString(this._renamedVariables[name]);
			}
			else {
				return this._parent.isRenamedVariable(name);
			}
		},
		isRenamedVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_isRenamedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRenamedVariable) {
				return Scope.prototype.isRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return this._module.line();
		},
		__ks_func_line_1: function(line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			return this._module.line(line);
		},
		line: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_line_0.apply(this);
			}
			else if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_line_1.apply(this, arguments);
			}
			return Scope.prototype.line.apply(this, arguments);
		},
		__ks_func_listCompositeMacros_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var regex = new RegExp("^" + name + "\.");
			var list = [];
			for(var n in this._macros) {
				var m = this._macros[n];
				if(regex.test(n) === true) {
					list.push.apply(list, [].concat(m));
				}
			}
			return list;
		},
		listCompositeMacros: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_listCompositeMacros_0.apply(this, arguments);
			}
			else if(Scope.prototype.listCompositeMacros) {
				return Scope.prototype.listCompositeMacros.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listDefinedVariables_0: function() {
			var variables = [];
			for(var __ks_0 in this._variables) {
				var array = this._variables[__ks_0];
				variables.push(array[KSOperator.subtraction(array.length, 1)]);
			}
			return variables;
		},
		listDefinedVariables: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_listDefinedVariables_0.apply(this);
			}
			else if(Scope.prototype.listDefinedVariables) {
				return Scope.prototype.listDefinedVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listMacros_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._macros[name])) {
				return this._macros[name];
			}
			else {
				return this._parent.listMacros(name);
			}
		},
		listMacros: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_listMacros_0.apply(this, arguments);
			}
			else if(Scope.prototype.listMacros) {
				return Scope.prototype.listMacros.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._module;
		},
		module: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_module_0.apply(this);
			}
			else if(Scope.prototype.module) {
				return Scope.prototype.module.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return BlockScope.prototype.__ks_func_parent_0.apply(this);
			}
			else if(Scope.prototype.parent) {
				return Scope.prototype.parent.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_processStash_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var stash = this._stashes[name];
			if(KSType.isValue(stash)) {
				delete this._stashes[name];
				var variable = this.getVariable(name);
				for(var __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					if(fn[0](variable) === true) {
						break;
					}
				}
				variable = this.getVariable(name);
				for(var __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					fn[1](variable);
				}
				return true;
			}
			else {
				return false;
			}
		},
		processStash: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_processStash_0.apply(this, arguments);
			}
			else if(Scope.prototype.processStash) {
				return Scope.prototype.processStash.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reassignReference_0: function(oldName, newName, newScope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(oldName === void 0 || oldName === null) {
				throw new TypeError("'oldName' is not nullable");
			}
			if(newName === void 0 || newName === null) {
				throw new TypeError("'newName' is not nullable");
			}
			if(newScope === void 0 || newScope === null) {
				throw new TypeError("'newScope' is not nullable");
			}
			if(KSType.isValue(this._references[oldName])) {
				this._references[oldName].reassign(newName, newScope);
			}
		},
		reassignReference: function() {
			if(arguments.length === 3) {
				return BlockScope.prototype.__ks_func_reassignReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reassignReference) {
				return Scope.prototype.reassignReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			var __ks_i = 0;
			var nullable;
			if(arguments.length > ++__ks_i && (nullable = arguments[__ks_i]) !== void 0 && nullable !== null) {
				if(!KSType.isBoolean(nullable)) {
					if(arguments.length - __ks_i < 2) {
						nullable = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'nullable' is not of type 'Boolean'");
					}
				}
			}
			else {
				nullable = false;
			}
			var parameters;
			if(arguments.length > ++__ks_i && (parameters = arguments[__ks_i]) !== void 0 && parameters !== null) {
				if(!KSType.isArray(parameters)) {
					throw new TypeError("'parameters' is not of type 'Array'");
				}
			}
			else {
				parameters = [];
			}
			if(KSType.isInstance(value, AnyType)) {
				return this.resolveReference("Any", nullable, parameters);
			}
			else if(KSType.isInstance(value, ClassVariableType)) {
				return this.reference(value.type(), nullable, parameters);
			}
			else if(KSType.isInstance(value, NamedType)) {
				if(value.hasContainer() === true) {
					return value.container().scope().reference(value.name(), nullable, parameters);
				}
				else {
					return this.resolveReference(value.name(), nullable, parameters);
				}
			}
			else if(KSType.isInstance(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isNullable(), parameters);
			}
			else if(KSType.isString(value)) {
				return this.resolveReference(value, nullable, parameters);
			}
			else if(KSType.isInstance(value, Variable)) {
				return this.resolveReference(value.name(), nullable, parameters);
			}
			else {
				console.info(value);
				throw new NotImplementedException();
			}
		},
		reference: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return BlockScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reference) {
				return Scope.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._tempNames[name] = true;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.releaseTempName) {
				return Scope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_removeVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._variables[name])) {
				this._variables[name].push(this.line(), false);
			}
			else {
				this._parent.removeVariable(name);
			}
		},
		removeVariable: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_removeVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.removeVariable) {
				return Scope.prototype.removeVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_rename_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			var index = this.getRenamedIndex(name);
			var newName = "__ks_" + name + "_" + ++index;
			this._renamedIndexes[name] = index;
			this._renamedVariables[name] = newName;
			var variable = this.getVariable(name);
			variable.renameAs(newName);
		},
		__ks_func_rename_1: function(name, newName) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(newName === void 0 || newName === null) {
				throw new TypeError("'newName' is not nullable");
			}
			if(newName !== name) {
				this._renamedVariables[name] = newName;
				var variable = this.getVariable(name);
				variable.renameAs(newName);
			}
		},
		rename: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_rename_1.apply(this, arguments);
			}
			else if(Scope.prototype.rename) {
				return Scope.prototype.rename.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_replaceVariable_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var i = 0;
				while(KSOperator.lte(variables[i + 2], this.line())) {
					i += 2;
				}
				if(KSOperator.lte(variables[i], this.line())) {
					variables[i + 1] = variable;
				}
			}
			else {
				this._variables[name] = [this.line(), variable];
			}
			return variable;
		},
		__ks_func_replaceVariable_1: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable = this.getVariable(name);
			if(variable.isDefinitive() === true) {
				if((type.isNull() === true) && !(variable.getDeclaredType().isNullable() === true)) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
				else if((type.isAny() === true) && !(variable.getDeclaredType().isAny() === true)) {
					if(variable.getRealType().isNull() === true) {
						variable.setRealType(variable.getDeclaredType());
					}
					if(type.isNullable() === true) {
						variable.setRealType(variable.getRealType().setNullable(true));
					}
					return variable;
				}
				else if(!type.matchContentOf(variable.getDeclaredType())) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
			}
			if(!type.equals(variable.getRealType())) {
				if(KSType.isArray(this._variables[name])) {
					variable = variable.setRealType(type);
					this._variables[name].push(this.line(), variable);
				}
				else {
					variable = variable.clone().setRealType(type);
					this._variables[name] = [this.line(), variable];
				}
			}
			return variable;
		},
		replaceVariable: function() {
			if(arguments.length === 2) {
				return BlockScope.prototype.__ks_func_replaceVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return BlockScope.prototype.__ks_func_replaceVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.replaceVariable) {
				return Scope.prototype.replaceVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_resolveReference_0: function(name, nullable, parameters) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			if(KSType.isArray(this._variables[name])) {
				var hash = ReferenceType.toQuote(name, nullable, parameters);
				if(!KSType.isInstance(this._references[hash], ReferenceType)) {
					this._references[hash] = new ReferenceType(this, name, nullable, parameters);
				}
				return this._references[hash];
			}
			else {
				return this._parent.resolveReference(name, nullable, parameters);
			}
		},
		resolveReference: function() {
			if(arguments.length === 3) {
				return BlockScope.prototype.__ks_func_resolveReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.resolveReference) {
				return Scope.prototype.resolveReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setLineOffset_0: function(offset) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(offset === void 0 || offset === null) {
				throw new TypeError("'offset' is not nullable");
			}
			else if(!KSType.isNumber(offset)) {
				throw new TypeError("'offset' is not of type 'Number'");
			}
			return this._module.setLineOffset(offset);
		},
		setLineOffset: function() {
			if(arguments.length === 1) {
				return BlockScope.prototype.__ks_func_setLineOffset_0.apply(this, arguments);
			}
			else if(Scope.prototype.setLineOffset) {
				return Scope.prototype.setLineOffset.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_updateInferable_0: function(name, data, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(data.isVariable === true) {
				this.replaceVariable(name, data.type, node);
			}
			else {
				if(KSType.isArray(this._chunkTypes[name])) {
					this._chunkTypes[name].push(this.line(), data.type);
				}
				else {
					this._chunkTypes[name] = [this.line(), data.type];
				}
			}
		},
		updateInferable: function() {
			if(arguments.length === 3) {
				return BlockScope.prototype.__ks_func_updateInferable_0.apply(this, arguments);
			}
			else if(Scope.prototype.updateInferable) {
				return Scope.prototype.updateInferable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FunctionScope = KSHelper.class({
		$name: "FunctionScope",
		$extends: BlockScope,
		__ks_init_1: function() {
			this._extending = false;
		},
		__ks_init: function() {
			BlockScope.prototype.__ks_init.call(this);
			FunctionScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			BlockScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_flagExtending_0: function() {
			this._extending = true;
		},
		flagExtending: function() {
			if(arguments.length === 0) {
				return FunctionScope.prototype.__ks_func_flagExtending_0.apply(this);
			}
			else if(BlockScope.prototype.flagExtending) {
				return BlockScope.prototype.flagExtending.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if((name === "this") || (this._extending && (name === "super"))) {
				this._declarations[name] = true;
				return null;
			}
			else if(($keywords[name] === true) || (this._declarations[name] === true)) {
				var newName = this.getNewName(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return FunctionScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			return BlockScope.prototype.declareVariable.apply(this, arguments);
		}
	});
	var HollowScope = KSHelper.class({
		$name: "HollowScope",
		$extends: Scope,
		__ks_init_1: function() {
			this._chunkTypes = new Dictionary();
			this._variables = new Dictionary();
		},
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
			HollowScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.isInstance(parent, Scope)) {
				throw new TypeError("'parent' is not of type 'Scope'");
			}
			this._parent = parent;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				HollowScope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireTempName_0: function(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			else if(!KSType.isBoolean(declare)) {
				throw new TypeError("'declare' is not of type 'Boolean'");
			}
			return this._parent.acquireTempName(declare);
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return HollowScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.acquireTempName) {
				return Scope.prototype.acquireTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireUnusedTempName_0: function() {
			return this._parent.acquireUnusedTempName();
		},
		acquireUnusedTempName: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_acquireUnusedTempName_0.apply(this);
			}
			else if(Scope.prototype.acquireUnusedTempName) {
				return Scope.prototype.acquireUnusedTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_commitTempVariables_0: function(variables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			else if(!KSType.isArray(variables)) {
				throw new TypeError("'variables' is not of type 'Array'");
			}
			return this._parent.commitTempVariables(variables);
		},
		commitTempVariables: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_commitTempVariables_0.apply(this, arguments);
			}
			else if(Scope.prototype.commitTempVariables) {
				return Scope.prototype.commitTempVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_block_0: function() {
			return this._parent.block();
		},
		block: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_block_0.apply(this);
			}
			else if(Scope.prototype.block) {
				return Scope.prototype.block.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			return this._parent.declareVariable(name, scope);
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.declareVariable) {
				return Scope.prototype.declareVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_define_0: function(name, immutable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var __ks_i = 1;
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 3) {
						type = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type?'");
					}
				}
			}
			else {
				type = null;
			}
			var initialized;
			if(arguments.length > __ks_i + 2 && (initialized = arguments[++__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					if(arguments.length - __ks_i < 2) {
						initialized = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'initialized' is not of type 'Boolean'");
					}
				}
			}
			else {
				initialized = false;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(this.hasDefinedVariable(name)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, false, type, initialized);
			this.defineVariable(variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 5) {
				return HollowScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Scope.prototype.define) {
				return Scope.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariable_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var name = variable.name();
			this._parent.defineVariable(variable, node);
			this._variables[name] = [this._parent.line(), variable];
		},
		defineVariable: function() {
			if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_defineVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.defineVariable) {
				return Scope.prototype.defineVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getChunkType_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this.getChunkType(name, this.line());
		},
		__ks_func_getChunkType_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._chunkTypes[name])) {
				var types = this._chunkTypes[name];
				var type = null;
				if((line === -1) || (line > this.line())) {
					type = __ks_Array._im_last(types);
				}
				else {
					for(var i = 0, __ks_0 = types.length; i < __ks_0 && KSOperator.lte(types[i], line); i += 2) {
						type = types[i + 1];
					}
				}
				if(type !== null) {
					return type;
				}
			}
			return this._parent.getChunkType(name, -1);
		},
		getChunkType: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_getChunkType_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_getChunkType_1.apply(this, arguments);
			}
			else if(Scope.prototype.getChunkType) {
				return Scope.prototype.getChunkType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if(this._parent.isAtLastLine() === true) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					var line = this._parent.line();
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		},
		getDefinedVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_getDefinedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.getDefinedVariable) {
				return Scope.prototype.getDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getMacro_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			return this._parent.getMacro(data, parent);
		},
		getMacro: function() {
			if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_getMacro_0.apply(this, arguments);
			}
			else if(Scope.prototype.getMacro) {
				return Scope.prototype.getMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRawLine_0: function() {
			return this._parent.getRawLine();
		},
		getRawLine: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_getRawLine_0.apply(this);
			}
			else if(Scope.prototype.getRawLine) {
				return Scope.prototype.getRawLine.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRenamedIndex_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.getRenamedIndex(name);
		},
		getRenamedIndex: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_getRenamedIndex_0.apply(this, arguments);
			}
			else if(Scope.prototype.getRenamedIndex) {
				return Scope.prototype.getRenamedIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getTempIndex_0: function() {
			return this._parent.getTempIndex();
		},
		getTempIndex: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_getTempIndex_0.apply(this);
			}
			else if(Scope.prototype.getTempIndex) {
				return Scope.prototype.getTempIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this.getVariable(name, this._parent.line());
		},
		__ks_func_getVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var currentLine = this._parent.line();
				var variable = null;
				if((line === -1) || (line > currentLine)) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return this._parent.getVariable(name, -1);
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return this._parent.getVariable(name, line);
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_getVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.getVariable) {
				return Scope.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasBleedingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.hasBleedingVariable(name);
		},
		hasBleedingVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_hasBleedingVariable_0.apply(this, arguments);
			}
			return Scope.prototype.hasBleedingVariable.apply(this, arguments);
		},
		__ks_func_hasDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.hasDefinedVariable(name, this.line());
		},
		__ks_func_hasDefinedVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			return this._parent.hasDefinedVariable(name, line);
		},
		hasDefinedVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_hasDefinedVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_hasDefinedVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasDefinedVariable) {
				return Scope.prototype.hasDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.hasDeclaredVariable(name);
		},
		hasDeclaredVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_hasDeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDeclaredVariable) {
				return Scope.prototype.hasDeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMacro_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._parent.hasMacro(name);
		},
		hasMacro: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_hasMacro_0.apply(this, arguments);
			}
			return Scope.prototype.hasMacro.apply(this, arguments);
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.hasVariable(name);
		},
		__ks_func_hasVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			return this._parent.hasVariable(name, line);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_hasVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasVariable) {
				return Scope.prototype.hasVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBleeding_0: function() {
			return true;
		},
		isBleeding: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_isBleeding_0.apply(this);
			}
			return Scope.prototype.isBleeding.apply(this, arguments);
		},
		__ks_func_isInline_0: function() {
			return true;
		},
		isInline: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_isInline_0.apply(this);
			}
			return Scope.prototype.isInline.apply(this, arguments);
		},
		__ks_func_isRedeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		},
		isRedeclaredVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_isRedeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRedeclaredVariable) {
				return Scope.prototype.isRedeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.isRenamedVariable(name);
		},
		isRenamedVariable: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_isRenamedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRenamedVariable) {
				return Scope.prototype.isRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return this._parent.line();
		},
		__ks_func_line_1: function(line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			return this._parent.line(line);
		},
		line: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_line_0.apply(this);
			}
			else if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_line_1.apply(this, arguments);
			}
			return Scope.prototype.line.apply(this, arguments);
		},
		__ks_func_module_0: function() {
			return this._parent.module();
		},
		module: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_module_0.apply(this);
			}
			else if(Scope.prototype.module) {
				return Scope.prototype.module.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return HollowScope.prototype.__ks_func_parent_0.apply(this);
			}
			else if(Scope.prototype.parent) {
				return Scope.prototype.parent.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function(value, nullable, parameters) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(nullable === void 0) {
				nullable = null;
			}
			else if(nullable !== null && !KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean?'");
			}
			if(parameters === void 0) {
				parameters = null;
			}
			else if(parameters !== null && !KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array?'");
			}
			return this._parent.reference(value, nullable, parameters);
		},
		reference: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return HollowScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reference) {
				return Scope.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._parent.releaseTempName(name);
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return HollowScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.releaseTempName) {
				return Scope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_rename_0: function(name, newName) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(newName === void 0 || newName === null) {
				throw new TypeError("'newName' is not nullable");
			}
			if(newName !== name) {
				var variable = this.getVariable(name).clone();
				variable.renameAs(newName);
				this._variables[name] = [this._parent.line(), variable];
			}
		},
		rename: function() {
			if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			else if(Scope.prototype.rename) {
				return Scope.prototype.rename.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_renameNext_0: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			return this._parent.renameNext(name, line);
		},
		renameNext: function() {
			if(arguments.length === 2) {
				return HollowScope.prototype.__ks_func_renameNext_0.apply(this, arguments);
			}
			else if(Scope.prototype.renameNext) {
				return Scope.prototype.renameNext.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_replaceVariable_0: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable = this.getVariable(name);
			if(variable.isDefinitive() === true) {
				if((type.isNull() === true) && !(variable.getDeclaredType().isNullable() === true)) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
				else if((type.isAny() === true) && !(variable.getDeclaredType().isAny() === true)) {
					if(variable.getRealType().isNull() === true) {
						variable.setRealType(variable.getDeclaredType());
					}
					if(type.isNullable() === true) {
						variable.setRealType(variable.getRealType().setNullable(true));
					}
					return variable;
				}
				else if(!type.matchContentOf(variable.getDeclaredType())) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
			}
			if(!type.equals(variable.getRealType())) {
				if(KSType.isArray(this._variables[name])) {
					variable.setRealType(type);
				}
				else {
					variable = variable.clone().setRealType(type);
					this._variables[name] = [this._parent.line(), variable];
				}
			}
			return variable;
		},
		replaceVariable: function() {
			if(arguments.length === 3) {
				return HollowScope.prototype.__ks_func_replaceVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.replaceVariable) {
				return Scope.prototype.replaceVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_resolveReference_0: function(name, nullable, parameters) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			return this._parent.resolveReference(name, nullable, parameters);
		},
		resolveReference: function() {
			if(arguments.length === 3) {
				return HollowScope.prototype.__ks_func_resolveReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.resolveReference) {
				return Scope.prototype.resolveReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_updateInferable_0: function(name, data, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(data.isVariable === true) {
				this.replaceVariable(name, data.type, node);
			}
			else {
				if(KSType.isArray(this._chunkTypes[name])) {
					this._chunkTypes[name].push(this.line(), data.type);
				}
				else {
					this._chunkTypes[name] = [this.line(), data.type];
				}
			}
		},
		updateInferable: function() {
			if(arguments.length === 3) {
				return HollowScope.prototype.__ks_func_updateInferable_0.apply(this, arguments);
			}
			else if(Scope.prototype.updateInferable) {
				return Scope.prototype.updateInferable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var InlineBlockScope = KSHelper.class({
		$name: "InlineBlockScope",
		$extends: BlockScope,
		__ks_init_1: function() {
			this._tempParentNames = new Dictionary();
			this._upatedInferables = new Dictionary();
		},
		__ks_init: function() {
			BlockScope.prototype.__ks_init.call(this);
			InlineBlockScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			BlockScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireTempName_0: function(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			else if(!KSType.isBoolean(declare)) {
				throw new TypeError("'declare' is not of type 'Boolean'");
			}
			var name = this.acquireUnusedTempName();
			if(KSType.isValue(name)) {
				return name;
			}
			if(this._tempIndex === -1) {
				this._tempIndex = this._parent.getTempIndex();
			}
			var __ks_name_1 = "__ks_" + ++this._tempIndex;
			this._tempNames[__ks_name_1] = false;
			if(declare) {
				this._tempDeclarations.push(__ks_name_1);
			}
			return __ks_name_1;
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return InlineBlockScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			return BlockScope.prototype.acquireTempName.apply(this, arguments);
		},
		__ks_func_acquireUnusedTempName_0: function() {
			var __ks_0;
			for(var name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			var name = this.parent().acquireUnusedTempName();
			if(KSType.isValue(name)) {
				this._tempParentNames[name] = true;
				return name;
			}
			return null;
		},
		acquireUnusedTempName: function() {
			if(arguments.length === 0) {
				return InlineBlockScope.prototype.__ks_func_acquireUnusedTempName_0.apply(this);
			}
			return BlockScope.prototype.acquireUnusedTempName.apply(this, arguments);
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(($keywords[name] === true) || ((this._declarations[name] === true) && KSType.isArray(this._variables[name])) || (scope.isBleeding() && this.hasBleedingVariable(name))) {
				var newName = this.getNewName(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return InlineBlockScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			return BlockScope.prototype.declareVariable.apply(this, arguments);
		},
		__ks_func_getNewName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var index = this.getRenamedIndex(name);
			var newName = "__ks_" + name + "_" + ++index;
			while(this.hasRenamedVariable(newName)) {
				newName = "__ks_" + name + "_" + ++index;
			}
			this._renamedIndexes[name] = index;
			return newName;
		},
		getNewName: function() {
			if(arguments.length === 1) {
				return InlineBlockScope.prototype.__ks_func_getNewName_0.apply(this, arguments);
			}
			return BlockScope.prototype.getNewName.apply(this, arguments);
		},
		__ks_func_getRenamedIndex_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : this._parent.getRenamedIndex(name);
		},
		getRenamedIndex: function() {
			if(arguments.length === 1) {
				return InlineBlockScope.prototype.__ks_func_getRenamedIndex_0.apply(this, arguments);
			}
			return BlockScope.prototype.getRenamedIndex.apply(this, arguments);
		},
		__ks_func_getTempIndex_0: function() {
			if(this._tempIndex === -1) {
				this._tempIndex = this._parent.getTempIndex();
			}
			return this._tempIndex;
		},
		getTempIndex: function() {
			if(arguments.length === 0) {
				return InlineBlockScope.prototype.__ks_func_getTempIndex_0.apply(this);
			}
			return BlockScope.prototype.getTempIndex.apply(this, arguments);
		},
		__ks_func_hasBleedingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return BlockScope.prototype.hasBleedingVariable.apply(this, [name]) || this._parent.hasBleedingVariable(name);
		},
		hasBleedingVariable: function() {
			if(arguments.length === 1) {
				return InlineBlockScope.prototype.__ks_func_hasBleedingVariable_0.apply(this, arguments);
			}
			return BlockScope.prototype.hasBleedingVariable.apply(this, arguments);
		},
		__ks_func_hasRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var parent = this;
			do {
				if(parent.hasDeclaredVariable(name)) {
					return true;
				}
				parent = parent.parent();
			}
			while(parent.isInline())
			return parent.hasDeclaredVariable(name);
		},
		hasRenamedVariable: function() {
			if(arguments.length === 1) {
				return InlineBlockScope.prototype.__ks_func_hasRenamedVariable_0.apply(this, arguments);
			}
			else if(BlockScope.prototype.hasRenamedVariable) {
				return BlockScope.prototype.hasRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInline_0: function() {
			return true;
		},
		isInline: function() {
			if(arguments.length === 0) {
				return InlineBlockScope.prototype.__ks_func_isInline_0.apply(this);
			}
			return BlockScope.prototype.isInline.apply(this, arguments);
		},
		__ks_func_listUpdatedInferables_0: function() {
			return this._upatedInferables;
		},
		listUpdatedInferables: function() {
			if(arguments.length === 0) {
				return InlineBlockScope.prototype.__ks_func_listUpdatedInferables_0.apply(this);
			}
			else if(BlockScope.prototype.listUpdatedInferables) {
				return BlockScope.prototype.listUpdatedInferables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._tempParentNames[name] === true) {
				this.parent().releaseTempName(name);
				this._tempParentNames[name] = false;
			}
			else {
				this._tempNames[name] = true;
			}
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return InlineBlockScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			return BlockScope.prototype.releaseTempName.apply(this, arguments);
		},
		__ks_func_rename_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			var parent = this._parent;
			var nf = !(parent.hasDeclaredVariable(name) === true);
			while(nf && parent.isInline()) {
				parent = parent.parent();
				nf = !(parent.hasDeclaredVariable(name) === true);
			}
			if(!nf) {
				this._renamedIndexes[name] = parent.getRenamedIndex(name);
			}
			var newName = this.declareVariable(name, this);
			this._renamedVariables[name] = newName;
			this._declarations[newName] = true;
			var variable = this.getVariable(name);
			variable.renameAs(newName);
			return newName;
		},
		rename: function() {
			if(arguments.length === 1) {
				return InlineBlockScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			return BlockScope.prototype.rename.apply(this, arguments);
		},
		__ks_func_renameNext_0: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return;
			}
			var newName = this.declareVariable(name, this);
			this._renamedVariables[name] = newName;
			this._declarations[newName] = true;
			var variables = this._variables[name];
			var i = 0;
			while((i < variables.length) && KSOperator.lt(variables[i], line)) {
				i += 2;
			}
			var variable = variables[i + 1];
			variable.renameAs(newName);
		},
		renameNext: function() {
			if(arguments.length === 2) {
				return InlineBlockScope.prototype.__ks_func_renameNext_0.apply(this, arguments);
			}
			else if(BlockScope.prototype.renameNext) {
				return BlockScope.prototype.renameNext.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_replaceVariable_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			variable = BlockScope.prototype.replaceVariable.apply(this, [name, variable]);
			if(this._declarations[name] !== true) {
				this._upatedInferables[name] = (function() {
					var d = new Dictionary();
					d.isVariable = true;
					d.type = variable.getRealType();
					return d;
				})();
			}
			return variable;
		},
		__ks_func_replaceVariable_1: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable = BlockScope.prototype.replaceVariable.apply(this, [name, type, node]);
			if(this._declarations[name] !== true) {
				this._upatedInferables[name] = (function() {
					var d = new Dictionary();
					d.isVariable = true;
					d.type = variable.getRealType();
					return d;
				})();
			}
			return variable;
		},
		replaceVariable: function() {
			if(arguments.length === 2) {
				return InlineBlockScope.prototype.__ks_func_replaceVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return InlineBlockScope.prototype.__ks_func_replaceVariable_1.apply(this, arguments);
			}
			return BlockScope.prototype.replaceVariable.apply(this, arguments);
		}
	});
	var LaxInlineBlockScope = KSHelper.class({
		$name: "LaxInlineBlockScope",
		$extends: InlineBlockScope,
		__ks_init: function() {
			InlineBlockScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			InlineBlockScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(($keywords[name] === true) || this.hasRenamedVariable(name)) {
				var newName = this.getNewName(name);
				if(!KSType.isInstance(this._variables[name], Variable)) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return LaxInlineBlockScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			return InlineBlockScope.prototype.declareVariable.apply(this, arguments);
		},
		__ks_func_isBleeding_0: function() {
			return true;
		},
		isBleeding: function() {
			if(arguments.length === 0) {
				return LaxInlineBlockScope.prototype.__ks_func_isBleeding_0.apply(this);
			}
			return InlineBlockScope.prototype.isBleeding.apply(this, arguments);
		}
	});
	var ImportScope = KSHelper.class({
		$name: "ImportScope",
		$extends: BlockScope,
		__ks_init: function() {
			BlockScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BlockScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addVariable_0: function(name, variable, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0) {
				node = null;
			}
			if(this.hasDefinedVariable(name)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			if(($keywords[name] === true) || KSType.isNumber(this._renamedIndexes[name])) {
				var newName = this.getNewName(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				this._renamedVariables[name] = newName;
				variable.renameAs(newName);
			}
			else {
				this._declarations[name] = true;
			}
			this._variables[name] = [this.line(), variable];
		},
		addVariable: function() {
			if(arguments.length === 3) {
				return ImportScope.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			else if(BlockScope.prototype.addVariable) {
				return BlockScope.prototype.addVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var MacroScope = KSHelper.class({
		$name: "MacroScope",
		$extends: Scope,
		__ks_init_1: function() {
			this._matchingTypes = new Dictionary();
			this._predefined = new Dictionary();
			this._references = new Dictionary();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._variables = new Dictionary();
		},
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
			MacroScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			Scope.prototype.__ks_cons.call(this, []);
			this._predefined.__Array = Variable.createPredefinedClass("Array", this);
			this._predefined.__Boolean = Variable.createPredefinedClass("Boolean", this);
			this._predefined.__Class = Variable.createPredefinedClass("Class", this);
			this._predefined.__Date = Variable.createPredefinedClass("Date", this);
			this._predefined.__Dictionary = Variable.createPredefinedClass("Dictionary", this);
			this._predefined.__Enum = Variable.createPredefinedClass("Enum", this);
			this._predefined.__Error = Variable.createPredefinedClass("Error", this);
			this._predefined.__Function = Variable.createPredefinedClass("Function", this);
			this._predefined.__Namespace = Variable.createPredefinedClass("Namespace", this);
			this._predefined.__Number = Variable.createPredefinedClass("Number", this);
			this._predefined.__String = Variable.createPredefinedClass("String", this);
			this._predefined.__Struct = Variable.createPredefinedClass("Struct", this);
			this._predefined.__RegExp = Variable.createPredefinedClass("RegExp", this);
			this._predefined.__false = new Variable("false", true, true, this.reference("Boolean"));
			this._predefined.__null = new Variable("null", true, true, Type.Null);
			this._predefined.__true = new Variable("true", true, true, this.reference("Boolean"));
			this._predefined.__Infinity = new Variable("Infinity", true, true, this.reference("Number"));
			this._predefined.__Math = new Variable("Math", true, true, this.reference("Dictionary"));
			this._predefined.__NaN = new Variable("NaN", true, true, this.reference("Number"));
			this._predefined.__Object = new Variable("Object", true, true, new AliasType(this, new ExclusionType(this, [AnyType.Explicit, this.reference("Array"), this.reference("Boolean"), this.reference("Dictionary"), this.reference("Enum"), this.reference("Function"), this.reference("Namespace"), this.reference("Number"), this.reference("String"), this.reference("Struct")])));
			this._predefined.__Primitive = new Variable("Primitive", true, true, new AliasType(this, new UnionType(this, [this.reference("Boolean"), this.reference("Number"), this.reference("String")])));
			this._predefined.__Expression = Variable.createPredefinedClass("Expression", this);
			this._predefined.__Identifier = Variable.createPredefinedClass("Identifier", this);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				MacroScope.prototype.__ks_cons_0.apply(this);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireTempName_0: function(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			else if(!KSType.isBoolean(declare)) {
				throw new TypeError("'declare' is not of type 'Boolean'");
			}
			throw new NotSupportedException();
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return MacroScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.acquireTempName) {
				return Scope.prototype.acquireTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_block_0: function() {
			return this;
		},
		block: function() {
			if(arguments.length === 0) {
				return MacroScope.prototype.__ks_func_block_0.apply(this);
			}
			else if(Scope.prototype.block) {
				return Scope.prototype.block.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(($keywords[name] === true) || KSType.isNumber(this._renamedIndexes[name])) {
				var index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(KSType.isInstance(this._variables[newName], Variable)) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				return newName;
			}
			else {
				return null;
			}
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return MacroScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.declareVariable) {
				return Scope.prototype.declareVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_define_0: function(name, immutable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var __ks_i = 1;
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 3) {
						type = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type?'");
					}
				}
			}
			else {
				type = null;
			}
			var initialized;
			if(arguments.length > __ks_i + 2 && (initialized = arguments[++__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					if(arguments.length - __ks_i < 2) {
						initialized = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'initialized' is not of type 'Boolean'");
					}
				}
			}
			else {
				initialized = false;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(KSType.isInstance(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, false, type, initialized);
			this.defineVariable(variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 5) {
				return MacroScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Scope.prototype.define) {
				return Scope.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariable_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var name = variable.name();
			if(KSType.isInstance(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			this._variables[name] = variable;
			var newName = this.declareVariable(name, this);
			if(KSType.isValue(newName)) {
				this._renamedVariables[name] = newName;
				variable.renameAs(newName);
			}
		},
		defineVariable: function() {
			if(arguments.length === 2) {
				return MacroScope.prototype.__ks_func_defineVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.defineVariable) {
				return Scope.prototype.defineVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isInstance(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else {
				return null;
			}
		},
		getDefinedVariable: function() {
			if(arguments.length === 1) {
				return MacroScope.prototype.__ks_func_getDefinedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.getDefinedVariable) {
				return Scope.prototype.getDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRenamedIndex_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
		},
		getRenamedIndex: function() {
			if(arguments.length === 1) {
				return MacroScope.prototype.__ks_func_getRenamedIndex_0.apply(this, arguments);
			}
			else if(Scope.prototype.getRenamedIndex) {
				return Scope.prototype.getRenamedIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name, line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				line = -1;
			}
			if(KSType.isInstance(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else if(KSType.isInstance(this._predefined["__" + name], Variable)) {
				return this._predefined["__" + name];
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.getVariable) {
				return Scope.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isInstance(this._variables[name], Variable);
		},
		hasDeclaredVariable: function() {
			if(arguments.length === 1) {
				return MacroScope.prototype.__ks_func_hasDeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDeclaredVariable) {
				return Scope.prototype.hasDeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isInstance(this._variables[name], Variable);
		},
		hasDefinedVariable: function() {
			if(arguments.length === 1) {
				return MacroScope.prototype.__ks_func_hasDefinedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDefinedVariable) {
				return Scope.prototype.hasDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasVariable_0: function(name, line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				line = -1;
			}
			return KSType.isInstance(this._variables[name], Variable);
		},
		hasVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasVariable) {
				return Scope.prototype.hasVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatchingType_0: function(a, b, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(a === void 0 || a === null) {
				throw new TypeError("'a' is not nullable");
			}
			else if(!KSType.isInstance(a, Type)) {
				throw new TypeError("'a' is not of type 'Type'");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.isInstance(b, Type)) {
				throw new TypeError("'b' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			var hash = a.toQuote();
			var matches = this._matchingTypes[hash];
			if(KSType.isValue(matches)) {
				for(var i = 0, __ks_0 = matches.length, type; i < __ks_0; i += 2) {
					type = matches[i];
					if(type === b) {
						return matches[i + 1];
					}
				}
			}
			else {
				this._matchingTypes[hash] = [];
			}
			this._matchingTypes[hash].push(b, false);
			var index = this._matchingTypes[hash].length;
			var match = a.isMatching(b, mode);
			this._matchingTypes[hash][index - 1] = match;
			return match;
		},
		isMatchingType: function() {
			if(arguments.length === 3) {
				return MacroScope.prototype.__ks_func_isMatchingType_0.apply(this, arguments);
			}
			else if(Scope.prototype.isMatchingType) {
				return Scope.prototype.isMatchingType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			var __ks_i = 0;
			var nullable;
			if(arguments.length > ++__ks_i && (nullable = arguments[__ks_i]) !== void 0 && nullable !== null) {
				if(!KSType.isBoolean(nullable)) {
					if(arguments.length - __ks_i < 2) {
						nullable = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'nullable' is not of type 'Boolean'");
					}
				}
			}
			else {
				nullable = false;
			}
			var parameters;
			if(arguments.length > ++__ks_i && (parameters = arguments[__ks_i]) !== void 0 && parameters !== null) {
				if(!KSType.isArray(parameters)) {
					throw new TypeError("'parameters' is not of type 'Array'");
				}
			}
			else {
				parameters = [];
			}
			if(KSType.isInstance(value, AnyType)) {
				return this.resolveReference("Any", nullable, parameters);
			}
			else if(KSType.isInstance(value, ClassVariableType)) {
				return this.reference(value.type(), nullable, parameters);
			}
			else if(KSType.isInstance(value, NamedType)) {
				if(value.hasContainer() === true) {
					return value.container().scope().reference(value.name(), nullable, parameters);
				}
				else {
					return this.resolveReference(value.name(), nullable, parameters);
				}
			}
			else if(KSType.isInstance(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isNullable(), parameters);
			}
			else if(KSType.isString(value)) {
				return this.resolveReference(value, nullable, parameters);
			}
			else if(KSType.isInstance(value, Variable)) {
				return this.resolveReference(value.name(), nullable, parameters);
			}
			else {
				console.info(value);
				throw new NotImplementedException();
			}
		},
		reference: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return MacroScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reference) {
				return Scope.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_resolveReference_0: function(name, nullable, parameters) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			var hash = ReferenceType.toQuote(name, nullable, parameters);
			if(!KSType.isInstance(this._references[hash], ReferenceType)) {
				this._references[hash] = new ReferenceType(this, name, nullable, parameters);
			}
			return this._references[hash];
		},
		resolveReference: function() {
			if(arguments.length === 3) {
				return MacroScope.prototype.__ks_func_resolveReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.resolveReference) {
				return Scope.prototype.resolveReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamespaceScope = KSHelper.class({
		$name: "NamespaceScope",
		$extends: BlockScope,
		__ks_init: function() {
			BlockScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BlockScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addVariable_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if($keywords[name] === true) {
				var newName = this.getNewName(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				this._renamedVariables[name] = newName;
				variable.renameAs(newName);
			}
			else {
				this._declarations[name] = true;
			}
			this._variables[name] = [this.line(), variable];
		},
		addVariable: function() {
			if(arguments.length === 2) {
				return NamespaceScope.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			else if(BlockScope.prototype.addVariable) {
				return BlockScope.prototype.addVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ModuleScope = KSHelper.class({
		$name: "ModuleScope",
		$extends: Scope,
		__ks_init_1: function() {
			this._chunkTypes = new Dictionary();
			this._declarations = new Dictionary();
			this._lastLine = false;
			this._line = 0;
			this._lineOffset = 0;
			this._macros = new Dictionary();
			this._matchingTypes = new Dictionary();
			this._predefined = new Dictionary();
			this._references = new Dictionary();
			this._renamedIndexes = new Dictionary();
			this._renamedVariables = new Dictionary();
			this._stashes = new Dictionary();
			this._tempDeclarations = [];
			this._tempIndex = -1;
			this._tempNames = new Dictionary();
			this._variables = new Dictionary();
		},
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
			ModuleScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			Scope.prototype.__ks_cons.call(this, []);
			this._predefined.__Array = Variable.createPredefinedClass("Array", this);
			this._predefined.__Boolean = Variable.createPredefinedClass("Boolean", this);
			this._predefined.__Class = Variable.createPredefinedClass("Class", this);
			this._predefined.__Date = Variable.createPredefinedClass("Date", this);
			this._predefined.__Dictionary = Variable.createPredefinedClass("Dictionary", this);
			this._predefined.__Enum = Variable.createPredefinedClass("Enum", this);
			this._predefined.__Error = Variable.createPredefinedClass("Error", this);
			this._predefined.__Function = Variable.createPredefinedClass("Function", this);
			this._predefined.__Namespace = Variable.createPredefinedClass("Namespace", this);
			this._predefined.__Number = Variable.createPredefinedClass("Number", this);
			this._predefined.__String = Variable.createPredefinedClass("String", this);
			this._predefined.__Struct = Variable.createPredefinedClass("Struct", this);
			this._predefined.__RegExp = Variable.createPredefinedClass("RegExp", this);
			this._predefined.__false = new Variable("false", true, true, this.reference("Boolean"));
			this._predefined.__null = new Variable("null", true, true, Type.Null);
			this._predefined.__true = new Variable("true", true, true, this.reference("Boolean"));
			this._predefined.__Infinity = new Variable("Infinity", true, true, this.reference("Number"));
			this._predefined.__Math = new Variable("Math", true, true, this.reference("Dictionary"));
			this._predefined.__NaN = new Variable("NaN", true, true, this.reference("Number"));
			this._predefined.__Object = new Variable("Object", true, true, new AliasType(this, new ExclusionType(this, [AnyType.Explicit, this.reference("Array"), this.reference("Boolean"), this.reference("Dictionary"), this.reference("Enum"), this.reference("Function"), this.reference("Namespace"), this.reference("Number"), this.reference("String"), this.reference("Struct")])));
			this._predefined.__Primitive = new Variable("Primitive", true, true, new AliasType(this, new UnionType(this, [this.reference("Boolean"), this.reference("Number"), this.reference("String")])));
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				ModuleScope.prototype.__ks_cons_0.apply(this);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireTempName_0: function(declare) {
			if(declare === void 0 || declare === null) {
				declare = true;
			}
			else if(!KSType.isBoolean(declare)) {
				throw new TypeError("'declare' is not of type 'Boolean'");
			}
			var __ks_0;
			for(var name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			var name = "__ks_" + ++this._tempIndex;
			this._tempNames[name] = false;
			if(declare) {
				this._tempDeclarations.push(name);
			}
			return name;
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ModuleScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.acquireTempName) {
				return Scope.prototype.acquireTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireUnusedTempName_0: function() {
			var __ks_0;
			for(var name in this._tempNames) {
				if(this._tempNames[name] === true) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		},
		acquireUnusedTempName: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_acquireUnusedTempName_0.apply(this);
			}
			else if(Scope.prototype.acquireUnusedTempName) {
				return Scope.prototype.acquireUnusedTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			else if(!KSType.isInstance(macro, MacroDeclaration)) {
				throw new TypeError("'macro' is not of type 'MacroDeclaration'");
			}
			if(KSType.isArray(this._macros[name])) {
				var type = macro.type();
				var notAdded = true;
				for(var index = 0, __ks_0 = this._macros[name].length, m; index < __ks_0 && notAdded; ++index) {
					m = this._macros[name][index];
					if(m.type().isMatching(type, MatchingMode.Signature) === true) {
						this._macros[name].splice(index, 0, macro);
						notAdded = false;
					}
				}
				if(notAdded) {
					this._macros[name].push(macro);
				}
			}
			else {
				this._macros[name] = [macro];
			}
		},
		addMacro: function() {
			if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_addMacro_0.apply(this, arguments);
			}
			else if(Scope.prototype.addMacro) {
				return Scope.prototype.addMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addStash_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var fn = Array.prototype.slice.call(arguments, 1, arguments.length);
			if(KSType.isValue(this._stashes[name])) {
				this._stashes[name].push(fn);
			}
			else {
				this._stashes[name] = [fn];
			}
		},
		addStash: function() {
			return ModuleScope.prototype.__ks_func_addStash_0.apply(this, arguments);
		},
		__ks_func_block_0: function() {
			return this;
		},
		block: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_block_0.apply(this);
			}
			else if(Scope.prototype.block) {
				return Scope.prototype.block.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_commitTempVariables_0: function(variables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			else if(!KSType.isArray(variables)) {
				throw new TypeError("'variables' is not of type 'Array'");
			}
			__ks_Array._im_pushUniq.apply(null, [variables].concat(this._tempDeclarations));
			__ks_Array._im_clear(this._tempDeclarations);
		},
		commitTempVariables: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_commitTempVariables_0.apply(this, arguments);
			}
			else if(Scope.prototype.commitTempVariables) {
				return Scope.prototype.commitTempVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_declareVariable_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(($keywords[name] === true) || ((this._declarations[name] === true) && KSType.isArray(this._variables[name]))) {
				var newName = this.getNewName(name);
				if(!KSType.isArray(this._variables[name])) {
					this._declarations[newName] = true;
				}
				return newName;
			}
			else {
				this._declarations[name] = true;
				return null;
			}
		},
		declareVariable: function() {
			if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_declareVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.declareVariable) {
				return Scope.prototype.declareVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_define_0: function(name, immutable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var __ks_i = 1;
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 3) {
						type = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type?'");
					}
				}
			}
			else {
				type = null;
			}
			var initialized;
			if(arguments.length > __ks_i + 2 && (initialized = arguments[++__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					if(arguments.length - __ks_i < 2) {
						initialized = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'initialized' is not of type 'Boolean'");
					}
				}
			}
			else {
				initialized = false;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(this.hasDefinedVariable(name)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, false, type, initialized);
			if(KSType.isInstance(node, Statement)) {
				variable.declaration(node);
			}
			this.defineVariable(variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 5) {
				return ModuleScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Scope.prototype.define) {
				return Scope.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariable_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var name = variable.name();
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				if(KSType.isInstance(__ks_Array._im_last(variables), Variable)) {
					SyntaxException.throwAlreadyDeclared(name, node);
				}
				variables.push(this._line, variable);
			}
			else {
				var newName = this.declareVariable(name, this);
				if(KSType.isValue(newName)) {
					this._renamedVariables[name] = newName;
					variable.renameAs(newName);
				}
				this._variables[name] = [this._line, variable];
			}
		},
		defineVariable: function() {
			if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_defineVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.defineVariable) {
				return Scope.prototype.defineVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getChunkType_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this.getChunkType(name, this._line);
		},
		__ks_func_getChunkType_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._chunkTypes[name])) {
				var types = this._chunkTypes[name];
				var type = null;
				if((line === -1) || (line > this._line)) {
					type = __ks_Array._im_last(types);
				}
				else {
					for(var i = 0, __ks_0 = types.length; i < __ks_0 && KSOperator.lte(types[i], line); i += 2) {
						type = types[i + 1];
					}
				}
				if(type !== null) {
					return type;
				}
			}
			return null;
		},
		getChunkType: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getChunkType_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_getChunkType_1.apply(this, arguments);
			}
			else if(Scope.prototype.getChunkType) {
				return Scope.prototype.getChunkType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if(this._lastLine) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], this._line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			return null;
		},
		getDefinedVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getDefinedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.getDefinedVariable) {
				return Scope.prototype.getDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getLineOffset_0: function() {
			return this._lineOffset;
		},
		getLineOffset: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_getLineOffset_0.apply(this);
			}
			return Scope.prototype.getLineOffset.apply(this, arguments);
		},
		__ks_func_getMacro_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(KSHelper.valueOf(data.callee.kind) === NodeKind.Identifier.value) {
				if(KSType.isValue(this._macros[data.callee.name])) {
					for(var __ks_0 = 0, __ks_1 = this._macros[data.callee.name].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[data.callee.name][__ks_0];
						if(macro.matchArguments(data.arguments) === true) {
							return macro;
						}
					}
				}
				SyntaxException.throwUnmatchedMacro(data.callee.name, parent, data);
			}
			else {
				var path = Generator.generate(data.callee);
				if(KSType.isValue(this._macros[path])) {
					for(var __ks_0 = 0, __ks_1 = this._macros[path].length, macro; __ks_0 < __ks_1; ++__ks_0) {
						macro = this._macros[path][__ks_0];
						if(macro.matchArguments(data.arguments) === true) {
							return macro;
						}
					}
				}
				SyntaxException.throwUnmatchedMacro(path, parent, data);
			}
		},
		getMacro: function() {
			if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_getMacro_0.apply(this, arguments);
			}
			else if(Scope.prototype.getMacro) {
				return Scope.prototype.getMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getNewName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
			var newName = "__ks_" + name + "_" + ++index;
			while(this._declarations[newName] === true) {
				newName = "__ks_" + name + "_" + ++index;
			}
			this._renamedIndexes[name] = index;
			return newName;
		},
		getNewName: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getNewName_0.apply(this, arguments);
			}
			else if(Scope.prototype.getNewName) {
				return Scope.prototype.getNewName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getPredefined_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isValue(this._predefined["__" + name])) {
				return this._predefined["__" + name].getDeclaredType();
			}
			else {
				return null;
			}
		},
		getPredefined: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getPredefined_0.apply(this, arguments);
			}
			else if(Scope.prototype.getPredefined) {
				return Scope.prototype.getPredefined.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRawLine_0: function() {
			return this._line - this._lineOffset;
		},
		getRawLine: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_getRawLine_0.apply(this);
			}
			else if(Scope.prototype.getRawLine) {
				return Scope.prototype.getRawLine.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRenamedIndex_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
		},
		getRenamedIndex: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getRenamedIndex_0.apply(this, arguments);
			}
			else if(Scope.prototype.getRenamedIndex) {
				return Scope.prototype.getRenamedIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getTempIndex_0: function() {
			return this._tempIndex;
		},
		getTempIndex: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_getTempIndex_0.apply(this);
			}
			else if(Scope.prototype.getTempIndex) {
				return Scope.prototype.getTempIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this.getVariable(name, this._line);
		},
		__ks_func_getVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(!KSType.isArray(this._variables[name]) && KSType.isString($types[name])) {
				name = $types[name];
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if((line === -1) || (line > this._line)) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable === false) {
					return null;
				}
				else if(variable !== null) {
					return variable;
				}
			}
			if(KSType.isInstance(this._predefined["__" + name], Variable)) {
				return this._predefined["__" + name];
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_getVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.getVariable) {
				return Scope.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._declarations[name] === true;
		},
		hasDeclaredVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_hasDeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDeclaredVariable) {
				return Scope.prototype.hasDeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.hasDefinedVariable(name, this._line);
		},
		__ks_func_hasDefinedVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if((line === -1) || (line > this._line)) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return false;
		},
		hasDefinedVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_hasDefinedVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_hasDefinedVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasDefinedVariable) {
				return Scope.prototype.hasDefinedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefinedVariableBefore_0: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				return KSOperator.lt(this._variables[name][0], line);
			}
			return false;
		},
		hasDefinedVariableBefore: function() {
			if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_hasDefinedVariableBefore_0.apply(this, arguments);
			}
			else if(Scope.prototype.hasDefinedVariableBefore) {
				return Scope.prototype.hasDefinedVariableBefore.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasMacro_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.isArray(this._macros[name]);
		},
		hasMacro: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_hasMacro_0.apply(this, arguments);
			}
			return Scope.prototype.hasMacro.apply(this, arguments);
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.hasVariable(name, this._line);
		},
		__ks_func_hasVariable_1: function(name, line) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var variable = null;
				if((line === -1) || (line > this._line)) {
					variable = __ks_Array._im_last(variables);
				}
				else {
					for(var i = 0, __ks_0 = variables.length; i < __ks_0 && KSOperator.lte(variables[i], line); i += 2) {
						variable = variables[i + 1];
					}
				}
				if(variable !== null) {
					return variable !== false;
				}
			}
			return KSType.isInstance(this._predefined["__" + name], Variable);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_hasVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.hasVariable) {
				return Scope.prototype.hasVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAtLastLine_0: function() {
			return this._lastLine;
		},
		isAtLastLine: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_isAtLastLine_0.apply(this);
			}
			else if(Scope.prototype.isAtLastLine) {
				return Scope.prototype.isAtLastLine.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatchingType_0: function(a, b, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(a === void 0 || a === null) {
				throw new TypeError("'a' is not nullable");
			}
			else if(!KSType.isInstance(a, Type)) {
				throw new TypeError("'a' is not of type 'Type'");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.isInstance(b, Type)) {
				throw new TypeError("'b' is not of type 'Type'");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			else if(!KSType.isEnumMember(mode, MatchingMode)) {
				throw new TypeError("'mode' is not of type 'MatchingMode'");
			}
			var hash = a.toQuote();
			var matches = this._matchingTypes[hash];
			if(KSType.isValue(matches)) {
				for(var i = 0, __ks_0 = matches.length, type; i < __ks_0; i += 2) {
					type = matches[i];
					if(type === b) {
						return matches[i + 1];
					}
				}
			}
			else {
				this._matchingTypes[hash] = [];
			}
			this._matchingTypes[hash].push(b, false);
			var index = this._matchingTypes[hash].length;
			var match = a.isMatching(b, mode);
			this._matchingTypes[hash][index - 1] = match;
			return match;
		},
		isMatchingType: function() {
			if(arguments.length === 3) {
				return ModuleScope.prototype.__ks_func_isMatchingType_0.apply(this, arguments);
			}
			else if(Scope.prototype.isMatchingType) {
				return Scope.prototype.isMatchingType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclaredVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._variables[name])) {
				return this._variables[name].length !== 2;
			}
			else {
				return false;
			}
		},
		isRedeclaredVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_isRedeclaredVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRedeclaredVariable) {
				return Scope.prototype.isRedeclaredVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isString(this._renamedVariables[name]);
		},
		isRenamedVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_isRenamedVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.isRenamedVariable) {
				return Scope.prototype.isRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return this._line;
		},
		__ks_func_line_1: function(line) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(line === void 0 || line === null) {
				throw new TypeError("'line' is not nullable");
			}
			else if(!KSType.isNumber(line)) {
				throw new TypeError("'line' is not of type 'Number'");
			}
			this._line = line + this._lineOffset;
		},
		line: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_line_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_line_1.apply(this, arguments);
			}
			return Scope.prototype.line.apply(this, arguments);
		},
		__ks_func_listCompositeMacros_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var regex = new RegExp("^" + name + "\.");
			var list = [];
			for(var n in this._macros) {
				var m = this._macros[n];
				if(regex.test(n) === true) {
					list.push.apply(list, [].concat(m));
				}
			}
			return list;
		},
		listCompositeMacros: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_listCompositeMacros_0.apply(this, arguments);
			}
			else if(Scope.prototype.listCompositeMacros) {
				return Scope.prototype.listCompositeMacros.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listDefinedVariables_0: function() {
			var variables = [];
			for(var __ks_0 in this._variables) {
				var array = this._variables[__ks_0];
				variables.push(array[KSOperator.subtraction(array.length, 1)]);
			}
			return variables;
		},
		listDefinedVariables: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_listDefinedVariables_0.apply(this);
			}
			else if(Scope.prototype.listDefinedVariables) {
				return Scope.prototype.listDefinedVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listMacros_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._macros[name])) {
				return this._macros[name];
			}
			else {
				return [];
			}
		},
		listMacros: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_listMacros_0.apply(this, arguments);
			}
			else if(Scope.prototype.listMacros) {
				return Scope.prototype.listMacros.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this;
		},
		module: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_module_0.apply(this);
			}
			else if(Scope.prototype.module) {
				return Scope.prototype.module.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_processStash_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var stash = this._stashes[name];
			if(KSType.isValue(stash)) {
				delete this._stashes[name];
				var variable = this.getVariable(name);
				for(var __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					if(fn[0](variable) === true) {
						break;
					}
				}
				variable = this.getVariable(name);
				for(var __ks_0 = 0, __ks_1 = stash.length, fn; __ks_0 < __ks_1; ++__ks_0) {
					fn = stash[__ks_0];
					fn[1](variable);
				}
				return true;
			}
			else {
				return false;
			}
		},
		processStash: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_processStash_0.apply(this, arguments);
			}
			else if(Scope.prototype.processStash) {
				return Scope.prototype.processStash.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reassignReference_0: function(oldName, newName, newScope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(oldName === void 0 || oldName === null) {
				throw new TypeError("'oldName' is not nullable");
			}
			if(newName === void 0 || newName === null) {
				throw new TypeError("'newName' is not nullable");
			}
			if(newScope === void 0 || newScope === null) {
				throw new TypeError("'newScope' is not nullable");
			}
			if(KSType.isValue(this._references[oldName])) {
				this._references[oldName].reassign(newName, newScope);
			}
		},
		reassignReference: function() {
			if(arguments.length === 3) {
				return ModuleScope.prototype.__ks_func_reassignReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reassignReference) {
				return Scope.prototype.reassignReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			var __ks_i = 0;
			var nullable;
			if(arguments.length > ++__ks_i && (nullable = arguments[__ks_i]) !== void 0 && nullable !== null) {
				if(!KSType.isBoolean(nullable)) {
					if(arguments.length - __ks_i < 2) {
						nullable = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'nullable' is not of type 'Boolean'");
					}
				}
			}
			else {
				nullable = false;
			}
			var parameters;
			if(arguments.length > ++__ks_i && (parameters = arguments[__ks_i]) !== void 0 && parameters !== null) {
				if(!KSType.isArray(parameters)) {
					throw new TypeError("'parameters' is not of type 'Array'");
				}
			}
			else {
				parameters = [];
			}
			if(KSType.isInstance(value, AnyType)) {
				return this.resolveReference("Any", nullable, parameters);
			}
			else if(KSType.isInstance(value, ClassVariableType)) {
				return this.reference(value.type(), nullable, parameters);
			}
			else if(KSType.isInstance(value, NamedType)) {
				if(value.hasContainer() === true) {
					return value.container().scope().reference(value.name(), nullable, parameters);
				}
				else {
					return this.resolveReference(value.name(), nullable, parameters);
				}
			}
			else if(KSType.isInstance(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isNullable(), parameters);
			}
			else if(KSType.isString(value)) {
				return this.resolveReference(value, nullable, parameters);
			}
			else if(KSType.isInstance(value, Variable)) {
				return this.resolveReference(value.name(), nullable, parameters);
			}
			else {
				console.info(value);
				throw new NotImplementedException();
			}
		},
		reference: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return ModuleScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			else if(Scope.prototype.reference) {
				return Scope.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._tempNames[name] = true;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(Scope.prototype.releaseTempName) {
				return Scope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_removeVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._variables[name])) {
				this._variables[name].push(this._line, false);
			}
		},
		removeVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_removeVariable_0.apply(this, arguments);
			}
			else if(Scope.prototype.removeVariable) {
				return Scope.prototype.removeVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_replaceVariable_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(KSType.isArray(this._variables[name])) {
				var variables = this._variables[name];
				var l = variables.length;
				var i = 0;
				while(((i + 2) < l) && KSOperator.lte(variables[i + 2], this._line)) {
					i += 2;
				}
				if(KSOperator.lte(variables[i], this._line)) {
					variables[i + 1] = variable;
				}
			}
			else {
				this._variables[name] = [this._line, variable];
			}
			return variable;
		},
		__ks_func_replaceVariable_1: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable = this.getVariable(name);
			if(variable.isDefinitive() === true) {
				if((type.isNull() === true) && !(variable.getDeclaredType().isNullable() === true)) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
				else if((type.isAny() === true) && !(variable.getDeclaredType().isAny() === true)) {
					if(variable.getRealType().isNull() === true) {
						variable.setRealType(variable.getDeclaredType());
					}
					if(type.isNullable() === true) {
						variable.setRealType(variable.getRealType().setNullable(true));
					}
					return variable;
				}
				else if(!type.matchContentOf(variable.getDeclaredType())) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
			}
			if(!type.equals(variable.getRealType())) {
				if(KSType.isArray(this._variables[name])) {
					variable.setRealType(type);
				}
				else {
					variable = variable.clone().setRealType(type);
					this._variables[name] = [this._line, variable];
				}
			}
			return variable;
		},
		replaceVariable: function() {
			if(arguments.length === 2) {
				return ModuleScope.prototype.__ks_func_replaceVariable_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return ModuleScope.prototype.__ks_func_replaceVariable_1.apply(this, arguments);
			}
			else if(Scope.prototype.replaceVariable) {
				return Scope.prototype.replaceVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_resolveReference_0: function(name, nullable, parameters) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(nullable === void 0 || nullable === null) {
				throw new TypeError("'nullable' is not nullable");
			}
			else if(!KSType.isBoolean(nullable)) {
				throw new TypeError("'nullable' is not of type 'Boolean'");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			var hash = ReferenceType.toQuote(name, nullable, parameters);
			if(!KSType.isInstance(this._references[hash], ReferenceType)) {
				this._references[hash] = new ReferenceType(this, name, nullable, parameters);
			}
			return this._references[hash];
		},
		resolveReference: function() {
			if(arguments.length === 3) {
				return ModuleScope.prototype.__ks_func_resolveReference_0.apply(this, arguments);
			}
			else if(Scope.prototype.resolveReference) {
				return Scope.prototype.resolveReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setLineOffset_0: function(lineOffset) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(lineOffset === void 0 || lineOffset === null) {
				throw new TypeError("'lineOffset' is not nullable");
			}
			else if(!KSType.isNumber(lineOffset)) {
				throw new TypeError("'lineOffset' is not of type 'Number'");
			}
			this._lineOffset = lineOffset;
		},
		setLineOffset: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_setLineOffset_0.apply(this, arguments);
			}
			else if(Scope.prototype.setLineOffset) {
				return Scope.prototype.setLineOffset.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_updateInferable_0: function(name, data, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(data.isVariable === true) {
				this.replaceVariable(name, data.type, node);
			}
			else {
				if(KSType.isArray(this._chunkTypes[name])) {
					this._chunkTypes.push(this._line, data.type);
				}
				else {
					this._chunkTypes[name] = [this._line, data.type];
				}
			}
		},
		updateInferable: function() {
			if(arguments.length === 3) {
				return ModuleScope.prototype.__ks_func_updateInferable_0.apply(this, arguments);
			}
			else if(Scope.prototype.updateInferable) {
				return Scope.prototype.updateInferable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var OperationScope = KSHelper.class({
		$name: "OperationScope",
		$extends: InlineBlockScope,
		__ks_init: function() {
			InlineBlockScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			InlineBlockScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_block_0: function() {
			return this._parent.block();
		},
		block: function() {
			if(arguments.length === 0) {
				return OperationScope.prototype.__ks_func_block_0.apply(this);
			}
			return InlineBlockScope.prototype.block.apply(this, arguments);
		},
		__ks_func_define_0: function(name, immutable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var __ks_i = 1;
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 3) {
						type = null;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type?'");
					}
				}
			}
			else {
				type = null;
			}
			var initialized;
			if(arguments.length > __ks_i + 2 && (initialized = arguments[++__ks_i]) !== void 0 && initialized !== null) {
				if(!KSType.isBoolean(initialized)) {
					if(arguments.length - __ks_i < 2) {
						initialized = false;
						--__ks_i;
					}
					else {
						throw new TypeError("'initialized' is not of type 'Boolean'");
					}
				}
			}
			else {
				initialized = false;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			return this._parent.define(name, immutable, type, initialized, node);
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 5) {
				return OperationScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			return InlineBlockScope.prototype.define.apply(this, arguments);
		},
		__ks_func_replaceVariable_0: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable = this.getVariable(name);
			if(variable.isDefinitive() === true) {
				if((type.isNull() === true) && !(variable.getDeclaredType().isNullable() === true)) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
				else if((type.isAny() === true) && !(variable.getDeclaredType().isAny() === true)) {
					if(variable.getRealType().isNull() === true) {
						variable.setRealType(variable.getDeclaredType());
					}
					if(type.isNullable() === true) {
						variable.setRealType(variable.getRealType().setNullable(true));
					}
					return variable;
				}
				else if(!type.matchContentOf(variable.getDeclaredType())) {
					TypeException.throwInvalidAssignement(name, variable.getDeclaredType(), type, node);
				}
			}
			if(!type.equals(variable.getRealType())) {
				if(KSType.isArray(this._variables[name])) {
					variable.setRealType(type);
				}
				else {
					variable = variable.clone().setRealType(type);
					this._variables[name] = [this.line(), variable];
				}
			}
			return variable;
		},
		replaceVariable: function() {
			if(arguments.length === 3) {
				return OperationScope.prototype.__ks_func_replaceVariable_0.apply(this, arguments);
			}
			return InlineBlockScope.prototype.replaceVariable.apply(this, arguments);
		}
	});
	var Module = KSHelper.class({
		$name: "Module",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._aliens = new Dictionary();
			this._binary = false;
			this._dynamicRequirements = [];
			this._exports = new Dictionary();
			this._exportedMacros = new Dictionary();
			this._flags = new Dictionary();
			this._hashes = new Dictionary();
			this._imports = new Dictionary();
			this._includeModules = new Dictionary();
			this._includePaths = new Dictionary();
			this._metadata = null;
			this._references = new Dictionary();
			this._register = false;
			this._requirements = [];
			this._requirementByNames = new Dictionary();
		},
		__ks_init: function() {
			Module.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, compiler, file) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(compiler === void 0 || compiler === null) {
				throw new TypeError("'compiler' is not nullable");
			}
			else if(!KSType.isInstance(compiler, Compiler)) {
				throw new TypeError("'compiler' is not of type 'Compiler'");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			this._compiler = compiler;
			this._file = file;
			this._data = this.parse(data, file);
			this._directory = path.dirname(file);
			this._options = Attribute.configure(this._data, this._compiler._options, AttributeTarget.Global, true);
			for(var __ks_0 = 0, __ks_1 = this._data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
				attr = this._data.attributes[__ks_0];
				if((KSHelper.valueOf(attr.declaration.kind) === NodeKind.Identifier.value) && (attr.declaration.name === "bin")) {
					this._binary = true;
				}
			}
			if(KSType.isString(this._compiler._options.output)) {
				this._output = this._compiler._options.output;
				if(KSType.isArray(this._compiler._options.rewire)) {
					this._rewire = this._compiler._options.rewire;
				}
				else {
					this._rewire = [];
				}
			}
			else {
				this._output = null;
			}
			this._hashes["."] = this._compiler.sha256(file, data);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				Module.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_addAlien_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._aliens[name] = type;
		},
		addAlien: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addAlien_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addHash_0: function(file, hash) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(hash === void 0 || hash === null) {
				throw new TypeError("'hash' is not nullable");
			}
			this._hashes[path.relative(this._directory, file)] = hash;
		},
		addHash: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHash_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addHashes_0: function(file, hashes) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(hashes === void 0 || hashes === null) {
				throw new TypeError("'hashes' is not nullable");
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					this._hashes[path.relative(this._directory, file)] = hash;
				}
				else {
					this._hashes[path.relative(this._directory, path.join(root, name))] = hash;
				}
			}
		},
		addHashes: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHashes_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addInclude_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(!KSType.isString(this._includePaths[path])) {
				this._includePaths[path] = true;
			}
		},
		__ks_func_addInclude_1: function(path, modulePath, moduleVersion) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(modulePath === void 0 || modulePath === null) {
				throw new TypeError("'modulePath' is not nullable");
			}
			if(moduleVersion === void 0 || moduleVersion === null) {
				throw new TypeError("'moduleVersion' is not nullable");
			}
			if((this._includePaths[path] === true) || !KSType.isString(this._includePaths[path])) {
				this._includePaths[path] = modulePath;
			}
			if(KSType.isDictionary(this._includeModules[modulePath])) {
				__ks_Array._im_pushUniq(this._includeModules[modulePath].paths, path);
				__ks_Array._im_pushUniq(this._includeModules[modulePath].versions, moduleVersion);
			}
			else {
				this._includeModules[modulePath] = (function() {
					var d = new Dictionary();
					d.paths = [path];
					d.versions = [moduleVersion];
					return d;
				})();
			}
		},
		addInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_addInclude_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return Module.prototype.__ks_func_addInclude_1.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addReference_0: function(key, code) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			if(this._references[key] === true) {
				this._references[key].push(code);
			}
			else {
				this._references[key] = [code];
			}
			return this;
		},
		addReference: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addRequirement_0: function(requirement) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(requirement === void 0 || requirement === null) {
				throw new TypeError("'requirement' is not nullable");
			}
			else if(!KSType.isInstance(requirement, Requirement)) {
				throw new TypeError("'requirement' is not of type 'Requirement'");
			}
			this._requirements.push(requirement);
			this._requirementByNames[requirement.name()] = requirement;
			if(KSType.isInstance(requirement, DynamicRequirement)) {
				this._dynamicRequirements.push(requirement);
			}
			if(requirement.isAlien() === true) {
				this.addAlien(requirement.name(), requirement.type());
			}
		},
		addRequirement: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_addRequirement_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compile_0: function() {
			this._body = new ModuleBlock(this._data, this);
			this._body.analyse();
			this._body.prepare();
			this._body.translate();
			for(var name in this._exports) {
				var __ks_export_1 = this._exports[name];
				if(!(__ks_export_1.type.isExportable() === true)) {
					ReferenceException.throwNotExportable(name, this._body);
				}
			}
		},
		compile: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compile_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compiler_0: function() {
			return this._compiler;
		},
		compiler: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compiler_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_directory_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(name, identifier) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(identifier === void 0 || identifier === null) {
				throw new TypeError("'identifier' is not nullable");
			}
			else if(!KSType.isInstance(identifier, IdentifierLiteral)) {
				throw new TypeError("'identifier' is not of type 'IdentifierLiteral'");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			var type = identifier.getDeclaredType();
			this._exports[name] = (function() {
				var d = new Dictionary();
				d.type = type;
				d.variable = identifier;
				return d;
			})();
			type.flagExported(true).flagReferenced();
		},
		__ks_func_export_1: function(name, expression) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			else if(!(KSType.isInstance(expression, Expression) || KSType.isInstance(expression, ExportProperty))) {
				throw new TypeError("'expression' is not of type 'Expression' or 'ExportProperty'");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			var type = expression.type();
			this._exports[name] = (function() {
				var d = new Dictionary();
				d.type = type;
				d.variable = expression;
				return d;
			})();
			type.flagExported(true).flagReferenced();
		},
		__ks_func_export_2: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			var type = variable.getDeclaredType();
			this._exports[name] = (function() {
				var d = new Dictionary();
				d.type = type;
				d.variable = variable;
				return d;
			})();
			type.flagExported(false).flagReferenced();
		},
		export: function() {
			if(arguments.length === 2) {
				if(KSType.isInstance(arguments[1], IdentifierLiteral)) {
					return Module.prototype.__ks_func_export_0.apply(this, arguments);
				}
				else if(KSType.isInstance(arguments[1], Variable)) {
					return Module.prototype.__ks_func_export_2.apply(this, arguments);
				}
				else {
					return Module.prototype.__ks_func_export_1.apply(this, arguments);
				}
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_exportMacro_0: function(name, data) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			else if(!KSType.isString(data)) {
				throw new TypeError("'data' is not of type 'String'");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			if(KSType.isArray(this._exportedMacros[name])) {
				this._exportedMacros[name].push(data);
			}
			else {
				this._exportedMacros[name] = [data];
			}
		},
		__ks_func_exportMacro_1: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			else if(!KSType.isInstance(macro, MacroDeclaration)) {
				throw new TypeError("'macro' is not of type 'MacroDeclaration'");
			}
			this._body.exportMacro(name, macro);
		},
		exportMacro: function() {
			if(arguments.length === 2) {
				if(KSType.isString(arguments[1])) {
					return Module.prototype.__ks_func_exportMacro_0.apply(this, arguments);
				}
				else {
					return Module.prototype.__ks_func_exportMacro_1.apply(this, arguments);
				}
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_file_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flag_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._flags[name] = true;
		},
		flag: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_flag_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagRegister_0: function() {
			this._register = true;
		},
		flagRegister: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_flagRegister_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getRequirement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._requirementByNames[name];
		},
		getRequirement: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_getRequirement_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasInclude_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			return (this._includePaths[path] === true) || KSType.isString(this._includePaths[path]);
		},
		hasInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_hasInclude_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_import_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._imports[name] = true;
		},
		import: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_import_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBinary_0: function() {
			return this._binary;
		},
		isBinary: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_isBinary_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUpToDate_0: function(file, target, data) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var hashes;
			try {
				hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
			}
			catch(__ks_0) {
				return null;
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					if(this._compiler.sha256(file, data) !== hash) {
						return null;
					}
				}
				else {
					if(this._compiler.sha256(path.join(root, name)) !== hash) {
						return null;
					}
				}
			}
			return hashes;
		},
		isUpToDate: function() {
			if(arguments.length === 3) {
				return Module.prototype.__ks_func_isUpToDate_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listIncludeVersions_0: function(path, modulePath) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(modulePath === void 0 || modulePath === null) {
				throw new TypeError("'modulePath' is not nullable");
			}
			if(KSType.isDictionary(this._includeModules[modulePath])) {
				return this._includeModules[modulePath].versions;
			}
			else if(this._includePaths[path] === true) {
				return [""];
			}
			else {
				return null;
			}
		},
		listIncludeVersions: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_listIncludeVersions_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listReferences_0: function(key) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(this._references[key] === true) {
				var references = this._references[key];
				this._references[key] = null;
				return references;
			}
			else {
				return null;
			}
		},
		listReferences: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_listReferences_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parse_0: function(data, file) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			try {
				return Parser.parse(data);
			}
			catch(error) {
				error.message = KSHelper.concatString(error.message, " (file \"" + file + "\")");
				error.fileName = file;
				throw error;
			}
		},
		parse: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_parse_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var x = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(!KSType.isValue(x) || !KSType.isValue(this._output)) {
				return name;
			}
			var output = null;
			for(var __ks_0 = 0, __ks_1 = this._rewire.length, rewire; __ks_0 < __ks_1; ++__ks_0) {
				rewire = this._rewire[__ks_0];
				if(rewire.input === x) {
					output = path.relative(this._output, rewire.output);
					break;
				}
			}
			if(!KSType.isValue(output)) {
				output = path.relative(this._output, x);
			}
			if(output[0] !== ".") {
				output = KSHelper.concatString("./", output);
			}
			return output;
		},
		path: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_path_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._body.scope();
		},
		scope: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._hashes;
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function() {
			var fragments = new FragmentBuilder(0);
			if(this._options.header === true) {
				fragments.comment("// Generated by kaoscript " + metadata.version);
			}
			if((this._register === true) && (this._compiler._options.register === true)) {
				fragments.line("require(\"kaoscript/register\")");
			}
			var mark = fragments.mark();
			if(this._binary) {
				this._body.toFragments(fragments);
			}
			else {
				if(KSOperator.gt(this._dynamicRequirements.length, 0)) {
					var ctrl = fragments.newControl().code("function __ks_require(");
					for(var index = 0, __ks_0 = this._dynamicRequirements.length, requirement; index < __ks_0; ++index) {
						requirement = this._dynamicRequirements[index];
						if(index !== 0) {
							ctrl.code($comma);
						}
						requirement.toParameterFragments(ctrl);
					}
					ctrl.code(")").step();
					ctrl.line("var req = []");
					for(var __ks_0 = 0, __ks_1 = this._dynamicRequirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
						requirement = this._dynamicRequirements[__ks_0];
						requirement.toAltFragments(ctrl);
					}
					ctrl.line("return req");
					ctrl.done();
				}
				var line = fragments.newLine().code("module.exports = function(");
				for(var index = 0, __ks_0 = this._requirements.length, requirement; index < __ks_0; ++index) {
					requirement = this._requirements[index];
					if(index !== 0) {
						line.code($comma);
					}
					requirement.toParameterFragments(line);
				}
				line.code(")");
				var block = line.newBlock();
				if(KSOperator.gt(this._dynamicRequirements.length, 0)) {
					if(this._options.format.destructuring === "es5") {
						var __ks_line_1 = block.newLine().code("var __ks__ = __ks_require(");
						for(var index = 0, __ks_0 = this._dynamicRequirements.length, requirement; index < __ks_0; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_1.code($comma);
							}
							requirement.toParameterFragments(__ks_line_1);
						}
						__ks_line_1.code(")").done();
						__ks_line_1 = block.newLine().code("var ");
						var i = -1;
						for(var index = 0, __ks_0 = this._dynamicRequirements.length, requirement; index < __ks_0; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_1.code($comma);
							}
							i = requirement.toAssignmentFragments(__ks_line_1, i);
						}
						__ks_line_1.done();
					}
					else {
						var __ks_line_1 = block.newLine().code("var [");
						for(var index = 0, __ks_0 = this._dynamicRequirements.length, requirement; index < __ks_0; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_1.code($comma);
							}
							requirement.toNameFragments(__ks_line_1);
						}
						__ks_line_1.code("] = __ks_require(");
						for(var index = 0, __ks_0 = this._dynamicRequirements.length, requirement; index < __ks_0; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_1.code($comma);
							}
							requirement.toParameterFragments(__ks_line_1);
						}
						__ks_line_1.code(")").done();
					}
				}
				this._body.toFragments(block);
				var exportCount = 0;
				for(var __ks_0 in this._exports) {
					var __ks_export_1 = this._exports[__ks_0];
					if(!(__ks_export_1.type.isAlias() === true)) {
						++exportCount;
					}
				}
				if(exportCount !== 0) {
					var __ks_line_1 = block.newLine().code("return ");
					var object = __ks_line_1.newObject();
					var type;
					for(var name in this._exports) {
						var __ks_export_1 = this._exports[name];
						type = __ks_export_1.type;
						if(!(type.isAlias() === true)) {
							if(!(type.isVirtual() === true)) {
								object.newLine().code(name + ": ").compile(__ks_export_1.variable).done();
							}
							if(!KSType.isInstance(type, ReferenceType)) {
								if((type.isSealed() === true) && (type.isExtendable() === true)) {
									object.line("__ks_" + name + ": " + type.getSealedName());
								}
							}
						}
					}
					object.done();
					__ks_line_1.done();
				}
				block.done();
				line.done();
			}
			var dictionary = $runtime.dictionary(this);
			var helper = $runtime.helper(this);
			var initFlag = $runtime.initFlag(this);
			var operator = $runtime.operator(this);
			var type = $runtime.type(this);
			var hasDictionary = (this._flags.Dictionary === true) && !(this._imports[dictionary] === true);
			var hasHelper = (this._flags.Helper === true) && !(this._imports[helper] === true);
			var hasInitFlag = this._flags.initFlag === true;
			var hasOperator = (this._flags.Operator === true) && !(this._imports[operator] === true);
			var hasType = (this._flags.Type === true) && !(this._imports[type] === true);
			if(hasHelper || hasType) {
				for(var __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					if(requirement.name() === helper) {
						hasHelper = false;
					}
					else if(requirement.name() === type) {
						hasType = false;
					}
				}
			}
			var packages = new Dictionary();
			if(hasDictionary) {
				if(!KSType.isValue(packages[this._options.runtime.dictionary.package])) {
					packages[this._options.runtime.dictionary.package] = [];
				}
				packages[this._options.runtime.dictionary.package].push((function(that) {
					var d = new Dictionary();
					d.name = dictionary;
					d.options = that._options.runtime.dictionary;
					return d;
				})(this));
			}
			if(hasHelper) {
				if(!KSType.isValue(packages[this._options.runtime.helper.package])) {
					packages[this._options.runtime.helper.package] = [];
				}
				packages[this._options.runtime.helper.package].push((function(that) {
					var d = new Dictionary();
					d.name = helper;
					d.options = that._options.runtime.helper;
					return d;
				})(this));
			}
			if(hasInitFlag) {
				if(!KSType.isValue(packages[this._options.runtime.initFlag.package])) {
					packages[this._options.runtime.initFlag.package] = [];
				}
				packages[this._options.runtime.initFlag.package].push((function(that) {
					var d = new Dictionary();
					d.name = initFlag;
					d.options = that._options.runtime.initFlag;
					return d;
				})(this));
			}
			if(hasOperator) {
				if(!KSType.isValue(packages[this._options.runtime.operator.package])) {
					packages[this._options.runtime.operator.package] = [];
				}
				packages[this._options.runtime.operator.package].push((function(that) {
					var d = new Dictionary();
					d.name = operator;
					d.options = that._options.runtime.operator;
					return d;
				})(this));
			}
			if(hasType) {
				if(!KSType.isValue(packages[this._options.runtime.type.package])) {
					packages[this._options.runtime.type.package] = [];
				}
				packages[this._options.runtime.type.package].push((function(that) {
					var d = new Dictionary();
					d.name = type;
					d.options = that._options.runtime.type;
					return d;
				})(this));
			}
			for(var name in packages) {
				var __ks_package_1 = packages[name];
				if(__ks_package_1.length === 1) {
					mark.line("var " + __ks_package_1[0].name + " = require(\"" + __ks_package_1[0].options.package + "\")." + __ks_package_1[0].options.member);
				}
				else if(this._options.format.destructuring === "es5") {
					mark.line("var __ks__ = require(\"" + name + "\")");
					var line = mark.newLine().code("var ");
					for(var index = 0, __ks_0 = __ks_package_1.length, item; index < __ks_0; ++index) {
						item = __ks_package_1[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.code("" + item.name + " = __ks__." + item.options.member);
					}
					line.done();
				}
				else {
					var line = mark.newLine().code("var {");
					for(var index = 0, __ks_0 = __ks_package_1.length, item; index < __ks_0; ++index) {
						item = __ks_package_1[index];
						if(index !== 0) {
							line.code(", ");
						}
						if(item.name === item.options.member) {
							line.code(item.name);
						}
						else {
							line.code("" + item.options.member + ": " + item.name);
						}
					}
					line.code("} = require(\"" + name + "\")");
					line.done();
				}
			}
			return fragments.toArray();
		},
		toFragments: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toFragments_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			if(this._metadata === null) {
				this._metadata = (function() {
					var d = new Dictionary();
					d.aliens = [];
					d.requirements = [];
					d.exports = [];
					d.references = [];
					d.macros = [];
					return d;
				})();
				for(var __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					this._metadata.requirements.push(requirement.type().toMetadata(this._metadata.references, ExportMode.IgnoreAlteration), requirement.name(), requirement.isRequired());
				}
				for(var name in this._aliens) {
					var type = this._aliens[name];
					this._metadata.aliens.push(type.toMetadata(this._metadata.references, ExportMode.IgnoreAlteration), name);
				}
				for(var name in this._exports) {
					var __ks_export_1 = this._exports[name];
					this._metadata.exports.push(__ks_export_1.type.toMetadata(this._metadata.references, ExportMode.Default), name);
				}
				for(var name in this._exportedMacros) {
					var datas = this._exportedMacros[name];
					this._metadata.macros.push(name, datas);
				}
			}
			return this._metadata;
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ModuleBlock = KSHelper.class({
		$name: "ModuleBlock",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._attributeDatas = new Dictionary();
			this._statements = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ModuleBlock.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, module) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._module = module;
			this._options = module._options;
			this._scope = new ModuleScope();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ModuleBlock.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.body[__ks_0];
				this._scope.line(statement.start.line);
				var __ks_statement_1 = $compile.statement(statement, this);
				if(KSType.isValue(__ks_statement_1)) {
					this._statements.push(__ks_statement_1);
					__ks_statement_1.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			var recipient = this.recipient();
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					this._scope.line(statement.line());
					statement.export(recipient);
				}
			}
			var type;
			for(var name in this._module._exports) {
				var data = this._module._exports[name];
				if(KSType.isInstance(data.variable, Variable)) {
					type = data.variable.getRealType();
				}
				else {
					type = data.variable.type();
				}
				if((type.isNull() === true) && !(data.type.isNullable() === true)) {
					TypeException.throwUnexpectedExportType(name, data.type, type, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._module.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_directory_0.apply(this);
			}
			return AbstractNode.prototype.directory.apply(this, arguments);
		},
		__ks_func_exportMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._module.exportMacro(name, macro.toMetadata());
		},
		exportMacro: function() {
			if(arguments.length === 2) {
				return ModuleBlock.prototype.__ks_func_exportMacro_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.exportMacro) {
				return AbstractNode.prototype.exportMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._module.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_file_0.apply(this);
			}
			return AbstractNode.prototype.file.apply(this, arguments);
		},
		__ks_func_getAttributeData_0: function(key) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			else if(!KSType.isEnumMember(key, AttributeData)) {
				throw new TypeError("'key' is not of type 'AttributeData'");
			}
			return this._attributeDatas[key];
		},
		getAttributeData: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_getAttributeData_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.getAttributeData) {
				return AbstractNode.prototype.getAttributeData.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._module.isBinary();
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return AbstractNode.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_includePath_0: function() {
			return null;
		},
		includePath: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_includePath_0.apply(this);
			}
			else if(AbstractNode.prototype.includePath) {
				return AbstractNode.prototype.includePath.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._module;
		},
		module: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_module_0.apply(this);
			}
			return AbstractNode.prototype.module.apply(this, arguments);
		},
		__ks_func_publishMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._scope.addMacro(name, macro);
		},
		publishMacro: function() {
			if(arguments.length === 2) {
				return ModuleBlock.prototype.__ks_func_publishMacro_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.publishMacro) {
				return AbstractNode.prototype.publishMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._scope.addMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return ModuleBlock.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.registerMacro) {
				return AbstractNode.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_recipient_0: function() {
			return this._module;
		},
		recipient: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(AbstractNode.prototype.recipient) {
				return AbstractNode.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAttributeData_0: function(key, data) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			else if(!KSType.isEnumMember(key, AttributeData)) {
				throw new TypeError("'key' is not of type 'AttributeData'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._attributeDatas[key] = data;
		},
		setAttributeData: function() {
			if(arguments.length === 2) {
				return ModuleBlock.prototype.__ks_func_setAttributeData_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setAttributeData) {
				return AbstractNode.prototype.setAttributeData.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_target_0: function() {
			return this._options.target;
		},
		target: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_target_0.apply(this);
			}
			else if(AbstractNode.prototype.target) {
				return AbstractNode.prototype.target.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var index = -1;
			var item;
			for(var i = 0, __ks_0 = this._statements.length, statement; i < __ks_0 && (index === -1); ++i) {
				statement = this._statements[i];
				var __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(this._statements.slice(index + 1));
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var Statement = KSHelper.class({
		$name: "Statement",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._afterwards = [];
			this._assignments = [];
			this._attributeDatas = new Dictionary();
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Statement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = parent.scope();
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement);
			this._line = data.start.line;
		},
		__ks_cons_1: function(data, parent, scope, kind) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			else if(!KSType.isEnumMember(kind, ScopeType)) {
				throw new TypeError("'kind' is not of type 'ScopeType'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, scope, kind]);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement);
			this._line = data.start.line;
		},
		__ks_cons: function(args) {
			if(args.length === 2 || args.length === 3) {
				Statement.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				Statement.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_addAssignments_0: function(variables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			__ks_Array._im_pushUniq.apply(null, [this._assignments].concat(variables));
		},
		addAssignments: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_addAssignments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.addAssignments) {
				return AbstractNode.prototype.addAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_afterward_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._afterwards.push(node);
		},
		afterward: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_afterward_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.afterward) {
				return AbstractNode.prototype.afterward.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_assignTempVariables_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			scope.commitTempVariables(this._assignments);
		},
		assignTempVariables: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_assignTempVariables_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.assignTempVariables) {
				return AbstractNode.prototype.assignTempVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_assignments_0: function() {
			return this._assignments;
		},
		assignments: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_assignments_0.apply(this);
			}
			else if(AbstractNode.prototype.assignments) {
				return AbstractNode.prototype.assignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.checkReturnType) {
				return AbstractNode.prototype.checkReturnType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariables_0: function(left, scope, expression, leftMost) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(left === void 0 || left === null) {
				throw new TypeError("'left' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(expression === void 0) {
				expression = null;
			}
			if(leftMost === void 0 || leftMost === null) {
				leftMost = false;
			}
			for(var __ks_0 = 0, __ks_1 = left.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				var variable = scope.getVariable(name);
				if(KSType.isValue(variable)) {
					if(variable.isImmutable() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
				else if(this._options.rules.noUndefined === true) {
					ReferenceException.throwNotDefined(name, this);
				}
				else {
					this._assignments.push(name);
					this._scope.define(name, false, this);
				}
			}
		},
		defineVariables: function() {
			if(arguments.length >= 2 && arguments.length <= 4) {
				return Statement.prototype.__ks_func_defineVariables_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.defineVariables) {
				return AbstractNode.prototype.defineVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getAttributeData_0: function(key) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			else if(!KSType.isEnumMember(key, AttributeData)) {
				throw new TypeError("'key' is not of type 'AttributeData'");
			}
			return this._attributeDatas[key];
		},
		getAttributeData: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_getAttributeData_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.getAttributeData) {
				return AbstractNode.prototype.getAttributeData.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_includePath_0: function() {
			return this._parent.includePath();
		},
		includePath: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_includePath_0.apply(this);
			}
			else if(AbstractNode.prototype.includePath) {
				return AbstractNode.prototype.includePath.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isCascade_0: function() {
			return false;
		},
		isCascade: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isCascade_0.apply(this);
			}
			else if(AbstractNode.prototype.isCascade) {
				return AbstractNode.prototype.isCascade.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return false;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(AbstractNode.prototype.isExit) {
				return AbstractNode.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return false;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isExportable_0.apply(this);
			}
			else if(AbstractNode.prototype.isExportable) {
				return AbstractNode.prototype.isExportable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isJumpable_0: function() {
			return false;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			else if(AbstractNode.prototype.isJumpable) {
				return AbstractNode.prototype.isJumpable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isLoop_0: function() {
			return false;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isLoop_0.apply(this);
			}
			else if(AbstractNode.prototype.isLoop) {
				return AbstractNode.prototype.isLoop.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isUsingVariable) {
				return AbstractNode.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return this._line;
		},
		line: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_line_0.apply(this);
			}
			else if(AbstractNode.prototype.line) {
				return AbstractNode.prototype.line.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAttributeData_0: function(key, data) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			else if(!KSType.isEnumMember(key, AttributeData)) {
				throw new TypeError("'key' is not of type 'AttributeData'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._attributeDatas[key] = data;
		},
		setAttributeData: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_setAttributeData_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setAttributeData) {
				return AbstractNode.prototype.setAttributeData.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this;
		},
		statement: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_target_0: function() {
			return this._options.target;
		},
		target: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_target_0.apply(this);
			}
			else if(AbstractNode.prototype.target) {
				return AbstractNode.prototype.target.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toDeclarationFragments_0: function(variables, fragments) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(variables.length !== 0) {
				fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), variables.join(", "))).done();
			}
		},
		toDeclarationFragments: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_toDeclarationFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toDeclarationFragments) {
				return AbstractNode.prototype.toDeclarationFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var variables = this.assignments();
			if(variables.length !== 0) {
				fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), variables.join(", "))).done();
			}
			var r, __ks_0;
			if(KSType.isValue(__ks_0 = this.toStatementFragments(fragments, mode)) ? (r = __ks_0, true) : false) {
				r.afterwards = this._afterwards;
				return r;
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
					afterward = this._afterwards[__ks_0];
					afterward.toAfterwardFragments(fragments);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BreakStatement = KSHelper.class({
		$name: "BreakStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var parent = this._parent;
			if(!(parent.isJumpable() === true)) {
				SyntaxException.throwIllegalStatement("break", this);
			}
			while(!(parent.isLoop() === true)) {
				parent = parent.parent();
				if(!(KSType.isValue(parent) ? parent.isJumpable() === true : false)) {
					SyntaxException.throwIllegalStatement("break", this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.line("break", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return BreakStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var HelperTypeKind = KSHelper.enum(Number, {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	});
	var TypeStatus = KSHelper.enum(Number, {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	});
	var ClassDeclaration = KSHelper.class({
		$name: "ClassDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_callMethod_0: function(node, variable, fnName, argName, retCode, fragments, method, index) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(fnName === void 0 || fnName === null) {
					throw new TypeError("'fnName' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(retCode === void 0 || retCode === null) {
					throw new TypeError("'retCode' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if((method.max() === 0) && !(method.isAsync() === true)) {
					fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this)");
				}
				else {
					fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this, ", argName, ")");
				}
			},
			callMethod: function() {
				if(arguments.length === 8) {
					return ClassDeclaration.__ks_sttc_callMethod_0.apply(this, arguments);
				}
				else if(Statement.callMethod) {
					return Statement.callMethod.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_isAssigningAlias_0: function(data, name, __ks_constructor_1, extending) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_constructor_1 === void 0 || __ks_constructor_1 === null) {
					throw new TypeError("'constructor' is not nullable");
				}
				if(extending === void 0 || extending === null) {
					throw new TypeError("'extending' is not nullable");
				}
				if(KSType.isArray(data)) {
					for(var __ks_0 = 0, __ks_1 = data.length, d; __ks_0 < __ks_1; ++__ks_0) {
						d = data[__ks_0];
						if(ClassDeclaration.isAssigningAlias(d, name, __ks_constructor_1, extending) === true) {
							return true;
						}
					}
				}
				else {
					var __ks_0 = data.kind.valueOf();
					if(__ks_0 === NodeKind.BinaryExpression.value) {
						if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.Assignment.value) {
							if((KSHelper.valueOf(data.left.kind) === NodeKind.ThisExpression.value) && (data.left.name.name === name)) {
								return true;
							}
							else if((KSHelper.valueOf(data.left.kind) === NodeKind.MemberExpression.value) && (KSHelper.valueOf(data.left.object.kind) === NodeKind.Identifier.value) && (data.left.object.name === "this") && (KSHelper.valueOf(data.left.property.kind) === NodeKind.Identifier.value) && ((data.left.property.name === name) || (data.left.property.name === ("_" + name)))) {
								return true;
							}
						}
					}
					else if(__ks_0 === NodeKind.CallExpression.value) {
						if((__ks_constructor_1 === true) && (KSHelper.valueOf(data.callee.kind) === NodeKind.Identifier.value)) {
							if((data.callee.name === "this") || ((extending === true) && (data.callee.name === "super"))) {
								for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
									arg = data.arguments[__ks_1];
									if((KSHelper.valueOf(arg.kind) === NodeKind.Identifier.value) && (arg.name === name)) {
										return true;
									}
								}
							}
						}
					}
					else if(__ks_0 === NodeKind.ReturnStatement.value) {
						return ClassDeclaration.isAssigningAlias(data.value, name, __ks_constructor_1, extending);
					}
				}
				return false;
			},
			isAssigningAlias: function() {
				if(arguments.length === 4) {
					return ClassDeclaration.__ks_sttc_isAssigningAlias_0.apply(this, arguments);
				}
				else if(Statement.isAssigningAlias) {
					return Statement.isAssigningAlias.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toWrongDoingFragments_0: function(block, ctrl, argName, async, returns) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(block === void 0 || block === null) {
					throw new TypeError("'block' is not nullable");
				}
				if(ctrl === void 0) {
					ctrl = null;
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(async === void 0 || async === null) {
					throw new TypeError("'async' is not nullable");
				}
				if(returns === void 0 || returns === null) {
					throw new TypeError("'returns' is not nullable");
				}
				if(ctrl === null) {
					if(async === true) {
						throw new NotImplementedException();
					}
					else {
						block.newControl().code("if(" + argName + ".length !== 0)").step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
					}
				}
				else {
					if(async === true) {
						ctrl.step().code("else").step();
						ctrl.line("let __ks_cb, __ks_error = new SyntaxError(\"Wrong number of arguments\")");
						ctrl.newControl().code("if(" + argName + ".length > 0 && Type.isFunction((__ks_cb = " + argName + "[" + argName + ".length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
						ctrl.done();
					}
					else if(returns === true) {
						ctrl.done();
						block.line("throw new SyntaxError(\"Wrong number of arguments\")");
					}
					else {
						ctrl.step().code("else").step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
					}
				}
			},
			toWrongDoingFragments: function() {
				if(arguments.length === 5) {
					return ClassDeclaration.__ks_sttc_toWrongDoingFragments_0.apply(this, arguments);
				}
				else if(Statement.toWrongDoingFragments) {
					return Statement.toWrongDoingFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._abstractMethods = new Dictionary();
			this._classMethods = new Dictionary();
			this._classVariables = new Dictionary();
			this._constructors = [];
			this._destructor = null;
			this._es5 = false;
			this._extending = false;
			this._extendingAlien = false;
			this._forcefullyRebinded = false;
			this._hybrid = false;
			this._instanceMethods = new Dictionary();
			this._instanceVariables = new Dictionary();
			this._macros = new Dictionary();
			this._references = new Dictionary();
			this._sealed = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._constructorScope = this.newScope(this._scope, ScopeType.Function);
			this._destructorScope = this.newScope(this._scope, ScopeType.Function);
			this._instanceVariableScope = this.newScope(this._scope, ScopeType.Function);
			this._es5 = this._options.format.classes === "es5";
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ClassDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._class = new ClassType(this._scope);
			this._type = new NamedType(this._name, this._class);
			this._variable = this._scope.define(this._name, true, this._type, this);
			var thisVariable = this._constructorScope.define("this", true, this._scope.reference(this._name), true, this);
			thisVariable.replaceCall = (function(data, __ks_arguments_1) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				return new CallThisConstructorSubstitude(data, __ks_arguments_1, this._type);
			}).bind(this);
			this._destructorScope.define("this", true, this._scope.reference(this._name), true, this);
			this._destructorScope.rename("this", "that");
			this._instanceVariableScope.define("this", true, this._scope.reference(this._name), true, this);
			if(KSType.isValue(this._data.extends)) {
				this._extending = true;
				var name = "";
				var member = this._data.extends;
				while(KSHelper.valueOf(member.kind) === NodeKind.MemberExpression.value) {
					name = ("." + member.property.name) + name;
					member = member.object;
				}
				this._extendsName = ("" + member.name) + name;
			}
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					this._abstract = true;
					this._class.flagAbstract();
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
					this._sealed = true;
					this._class.flagSealed();
				}
			}
			var declaration;
			for(var __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				var __ks_2 = data.kind.valueOf();
				if(__ks_2 === NodeKind.CommentBlock.value) {
				}
				else if(__ks_2 === NodeKind.CommentLine.value) {
				}
				else if(__ks_2 === NodeKind.FieldDeclaration.value) {
					declaration = new ClassVariableDeclaration(data, this);
					declaration.analyse();
				}
				else if(__ks_2 === NodeKind.MacroDeclaration.value) {
					var name = data.name.name;
					declaration = new MacroDeclaration(data, this, null);
					if(KSType.isArray(this._macros[name])) {
						this._macros[name].push(declaration);
					}
					else {
						this._macros[name] = [declaration];
					}
				}
				else if(__ks_2 === NodeKind.MethodDeclaration.value) {
					if(this._class.isConstructor(data.name.name) === true) {
						declaration = new ClassConstructorDeclaration(data, this);
					}
					else if(this._class.isDestructor(data.name.name) === true) {
						declaration = new ClassDestructorDeclaration(data, this);
					}
					else {
						declaration = new ClassMethodDeclaration(data, this);
					}
					declaration.analyse();
				}
				else {
					throw new NotSupportedException("Unknow kind " + data.kind, this);
				}
			}
			if(this.hasInits() === true) {
				this._class.init(1);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._extending) {
				this._constructorScope.flagExtending();
				this._instanceVariableScope.flagExtending();
				var __ks_0;
				if(KSType.isValue(__ks_0 = Type.fromAST(this._data.extends, this)) ? (this._extendsType = __ks_0, false) : true) {
					ReferenceException.throwNotDefined(this._extendsName, this);
				}
				else if(!KSType.isInstance(this._extendsType.discardName(), ClassType)) {
					TypeException.throwNotClass(this._extendsName, this);
				}
				this._class.extends(this._extendsType);
				this._hybrid = this._class.isHybrid();
				var superType = this._scope.reference(this._extendsName);
				var superVariable = this._constructorScope.define("super", true, superType, true, this);
				if(this._hybrid && !this._es5) {
					var thisVariable = this._constructorScope.getVariable("this");
					thisVariable.replaceCall = (function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallHybridThisConstructorES6Substitude(data, __ks_arguments_1, this._type);
					}).bind(this);
					superVariable.replaceCall = (function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallHybridSuperConstructorES6Substitude(data, __ks_arguments_1, this._type);
					}).bind(this);
				}
				else {
					if(this._es5) {
						superVariable.replaceCall = (function(data, __ks_arguments_1) {
							if(arguments.length < 2) {
								throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(data === void 0 || data === null) {
								throw new TypeError("'data' is not nullable");
							}
							if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
								throw new TypeError("'arguments' is not nullable");
							}
							return new CallSuperConstructorES5Substitude(data, __ks_arguments_1, this._type);
						}).bind(this);
					}
					else {
						superVariable.replaceCall = (function(data, __ks_arguments_1) {
							if(arguments.length < 2) {
								throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(data === void 0 || data === null) {
								throw new TypeError("'data' is not nullable");
							}
							if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
								throw new TypeError("'arguments' is not nullable");
							}
							return new CallSuperConstructorSubstitude(data, __ks_arguments_1, this._type);
						}).bind(this);
					}
				}
				this._instanceVariableScope.define("super", true, superType, true, this);
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				var __ks_0;
				var async = (KSType.isValue(this._extendsType) && KSType.isValue(__ks_0 = this._extendsType.type().isAsyncClassMethod(name))) ? __ks_0 : methods[0].type().isAsync();
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					if(async !== method.type().isAsync()) {
						SyntaxException.throwInvalidSyncMethods(this._name, name, this);
					}
					if(this._class.hasMatchingClassMethod(name, method.type(), MatchingMode.ExactParameters) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._class.addClassMethod(name, method.type());
				}
			}
			for(var name in this._instanceVariables) {
				var variable = this._instanceVariables[name];
				variable.prepare();
				this._class.addInstanceVariable(name, variable.type());
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				var __ks_0;
				var async = (KSType.isValue(this._extendsType) && KSType.isValue(__ks_0 = this._extendsType.type().isAsyncInstanceMethod(name))) ? __ks_0 : methods[0].type().isAsync();
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					if(async !== method.type().isAsync()) {
						SyntaxException.throwInvalidSyncMethods(this._name, name, this);
					}
					if(this._class.hasMatchingInstanceMethod(name, method.type(), MatchingMode.ExactParameters) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._class.addInstanceMethod(name, method.type());
				}
			}
			for(var name in this._abstractMethods) {
				var methods = this._abstractMethods[name];
				var __ks_0;
				var async = (KSType.isValue(this._extendsType) && KSType.isValue(__ks_0 = this._extendsType.type().isAsyncInstanceMethod(name))) ? __ks_0 : methods[0].type().isAsync();
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					if(async !== method.type().isAsync()) {
						SyntaxException.throwInvalidSyncMethods(this._name, name, this);
					}
					if(this._class.hasMatchingInstanceMethod(name, method.type(), MatchingMode.ExactParameters) === true) {
						SyntaxException.throwIdenticalMethod(name, method);
					}
					this._class.addAbstractMethod(name, method.type());
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.prepare();
				if(this._class.hasMatchingConstructor(method.type(), MatchingMode.ExactParameters) === true) {
					SyntaxException.throwIdenticalConstructor(method);
				}
				this._class.addConstructor(method.type());
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.prepare();
				this._class.addDestructor();
			}
			for(var name in this._classVariables) {
				var variable = this._classVariables[name];
				variable.prepare();
				this._class.addClassVariable(name, variable.type());
			}
			var notImplemented;
			if(this._extending && !this._abstract && !__ks_Dictionary._cm_isEmpty(notImplemented = this._class.listMissingAbstractMethods())) {
				SyntaxException.throwMissingAbstractMethods(this._name, notImplemented, this);
			}
			for(var __ks_0 in this._macros) {
				var macros = this._macros[__ks_0];
				for(var __ks_1 = 0, __ks_2 = macros.length, macro; __ks_1 < __ks_2; ++__ks_1) {
					macro = macros[__ks_1];
					macro.export(this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 in this._classVariables) {
				var variable = this._classVariables[__ks_0];
				variable.translate();
			}
			for(var __ks_0 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_0];
				variable.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.translate();
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.translate();
			}
			for(var __ks_0 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			for(var __ks_0 in this._abstractMethods) {
				var methods = this._abstractMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			for(var __ks_0 in this._classMethods) {
				var methods = this._classMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addReference_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.isInstance(type, AnyType)) {
			}
			else if(KSType.isInstance(type, ReferenceType)) {
				var name = type.name();
				if(name === "Any") {
				}
				else if(!KSType.isValue(this._references[name])) {
					var variable, __ks_0;
					if($typeofs[name] === true) {
						this._references[name] = (function() {
							var d = new Dictionary();
							d.status = TypeStatus.Native;
							d.type = type;
							return d;
						})();
					}
					else if(KSType.isValue(__ks_0 = this._scope.getVariable(name)) ? (variable = __ks_0, true) : false) {
						this._references[name] = (function() {
							var d = new Dictionary();
							d.status = TypeStatus.Referenced;
							d.type = type;
							d.variable = variable;
							return d;
						})();
					}
					else {
						this._references[name] = (function() {
							var d = new Dictionary();
							d.status = TypeStatus.Unreferenced;
							d.type = type;
							return d;
						})();
					}
				}
			}
			else if(KSType.isInstance(type, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = type.types(), __ks_2 = __ks_1.length, __ks_type_1; __ks_0 < __ks_2; ++__ks_0) {
					__ks_type_1 = __ks_1[__ks_0];
					this.addReference(__ks_type_1, node);
				}
			}
			else if(KSType.isInstance(type, ClassVariableType)) {
				this.addReference(type.type(), node);
			}
			else {
				console.error(type);
				throw new NotImplementedException(this);
			}
		},
		addReference: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			else if(Statement.prototype.addReference) {
				return Statement.prototype.addReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_exportMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._parent.exportMacro(this._name + "." + name, macro);
		},
		exportMacro: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_exportMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.exportMacro) {
				return Statement.prototype.exportMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_extends_0: function() {
			return this._extendsType;
		},
		extends: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_extends_0.apply(this);
			}
			else if(Statement.prototype.extends) {
				return Statement.prototype.extends.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagForcefullyRebinded_0: function() {
			this._forcefullyRebinded = true;
		},
		flagForcefullyRebinded: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_flagForcefullyRebinded_0.apply(this);
			}
			else if(Statement.prototype.flagForcefullyRebinded) {
				return Statement.prototype.flagForcefullyRebinded.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasConstructors_0: function() {
			return this._constructors.length !== 0;
		},
		hasConstructors: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_hasConstructors_0.apply(this);
			}
			else if(Statement.prototype.hasConstructors) {
				return Statement.prototype.hasConstructors.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasInits_0: function() {
			for(var __ks_0 in this._instanceVariables) {
				var field = this._instanceVariables[__ks_0];
				if(field.hasDefaultValue() === true) {
					return true;
				}
			}
			return false;
		},
		hasInits: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_hasInits_0.apply(this);
			}
			else if(Statement.prototype.hasInits) {
				return Statement.prototype.hasInits.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExtending_0: function() {
			return this._extending;
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Statement.prototype.isExtending) {
				return Statement.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isHybrid_0: function() {
			return this._hybrid;
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_isHybrid_0.apply(this);
			}
			else if(Statement.prototype.isHybrid) {
				return Statement.prototype.isHybrid.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newInstanceMethodScope_0: function(method) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.isInstance(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			var scope = this.newScope(this._scope, ScopeType.Function);
			scope.define("this", true, this._scope.reference(this._name), true, this);
			if(this._extending) {
				scope.flagExtending();
				scope.define("super", true, this._scope.reference(this._extendsName), true, this);
			}
			return scope;
		},
		newInstanceMethodScope: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_newInstanceMethodScope_0.apply(this, arguments);
			}
			else if(Statement.prototype.newInstanceMethodScope) {
				return Statement.prototype.newInstanceMethodScope.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._scope.addMacro(name, macro);
			this._parent.registerMacro(this._name + "." + name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toContinousES5Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			this.module().flag("Helper");
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", $runtime.helper(this), ".class(");
			var clazz = line.newObject();
			clazz.line(KSHelper.concatString("$name: ", $quote(this._name)));
			if(KSType.isValue(this._data.version)) {
				clazz.line("$version: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]");
			}
			if(this._extending) {
				clazz.line("$extends: ", this._extendsName);
			}
			var m = [];
			var ctrl;
			if(KSType.isValue(this._destructor) || !__ks_Dictionary._cm_isEmpty(this._classMethods)) {
				ctrl = clazz.newLine().code("$static: ").newObject();
				if(KSType.isValue(this._destructor)) {
					this._destructor.toFragments(ctrl, Mode.None);
					ClassDestructorDeclaration.toRouterFragments(this, ctrl, this._type);
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_Array._im_clear(m);
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						method.toFragments(ctrl, Mode.None);
						m.push(method.type());
					}
					var overflow = false;
					if(this._extending) {
						var __ks_methods_1 = this._extendsType.type().listClassMethods(name);
						if(KSType.isValue(__ks_methods_1)) {
							for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = __ks_methods_1[__ks_0];
								if(method.isOverflowing(m) === true) {
									overflow = true;
									break;
								}
							}
						}
					}
					ClassMethodDeclaration.toClassSwitchFragments(this, ctrl.newControl(), this._type, m, overflow, name, function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code(name + ": function()").step();
					}, function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
					});
				}
				ctrl.done();
			}
			if(!this._extending || (this._extendsType.isSealedAlien() === true)) {
				clazz.newControl().code("$create: function()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)");
			}
			if(this.hasInits() === true) {
				ctrl = clazz.newControl().code("__ks_init_1: function()").step();
				for(var __ks_0 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl = clazz.newControl().code("__ks_init: function()").step();
				if(this._extending && !(this._extendsType.isSealedAlien() === true)) {
					ctrl.line(this._extendsName + ".prototype.__ks_init.call(this)");
				}
				ctrl.line(this._name + ".prototype.__ks_init_1.call(this)");
			}
			else {
				if(this._extending) {
					if(this._extendsType.isSealedAlien() === true) {
						clazz.newControl().code("__ks_init: function()").step();
					}
					else {
						clazz.newControl().code("__ks_init: function()").step().line(this._extendsName + ".prototype.__ks_init.call(this)");
					}
				}
				else {
					clazz.newControl().code("__ks_init: function()").step();
				}
			}
			__ks_Array._im_clear(m);
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toRouterFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons: function(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + ": function()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
				});
			}
			clazz.done();
			line.code(")").done();
		},
		toContinousES5Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toContinousES5Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toContinousES5Fragments) {
				return Statement.prototype.toContinousES5Fragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toContinousES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var root = fragments;
			var breakable = true;
			if(this._forcefullyRebinded) {
				root = fragments.newLine().code("var " + this._name + " = ");
				breakable = false;
			}
			var clazz = root.newControl(null, breakable, breakable).code("class ", this._name);
			if(this._extending) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			var ctrl;
			if(!this._extending) {
				clazz.newControl().code("constructor()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)").done();
			}
			if(this.hasInits() === true) {
				ctrl = clazz.newControl().code("__ks_init_1()").step();
				for(var __ks_0 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl.done();
				ctrl = clazz.newControl().code("__ks_init()").step();
				if(this._extending && !(this._extendsType.isSealedAlien() === true)) {
					ctrl.line(this._extendsName + ".prototype.__ks_init.call(this)");
				}
				ctrl.line(this._name + ".prototype.__ks_init_1.call(this)");
				ctrl.done();
			}
			else {
				if(this._extending) {
					clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").done();
				}
				else {
					clazz.newControl().code("__ks_init()").step().done();
				}
			}
			var m = [];
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toRouterFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				fragments.done();
			});
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toRouterFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listClassMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
			if(this._forcefullyRebinded) {
				root.done();
			}
		},
		toContinousES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toContinousES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toContinousES6Fragments) {
				return Statement.prototype.toContinousES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toHybridES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name, " extends ", this._extendsName).step();
			var m = [];
			var ctrl;
			if(this._constructors.length === 0) {
				ctrl = clazz.newControl().code("constructor()").step().line("super(...arguments)");
				if(this._extendsType.isSealedAlien() === true) {
					ctrl.line("this.constructor.prototype.__ks_init()");
				}
				ctrl.done();
			}
			else if(this._constructors.length === 1) {
				this._constructors[0].toHybridConstructorFragments(clazz);
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._constructors[__ks_0];
					method.toFragments(ctrl, Mode.None);
					m.push(method.type());
				}
				var line = ctrl.newLine().code("const __ks_cons = (__ks_arguments) =>");
				var assessment = Router.assess(m, false);
				Router.toFragments(assessment, line.newBlock(), "__ks_arguments", false, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments;
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				}, function(fragments, method, index) {
					if(arguments.length < 3) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(method === void 0 || method === null) {
						throw new TypeError("'method' is not nullable");
					}
					if(index === void 0 || index === null) {
						throw new TypeError("'index' is not nullable");
					}
					fragments.line("__ks_cons_" + index + "(__ks_arguments)");
				}, ClassDeclaration.toWrongDoingFragments, this);
				line.done();
				ctrl.line("__ks_cons(arguments)").done();
			}
			if(this.hasInits() === true) {
				ctrl = clazz.newControl().code("__ks_init_1()").step();
				for(var __ks_0 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl.done();
				if(this._extendsType.isSealedAlien() === true) {
					clazz.newControl().code("__ks_init()").step().line(this._name + ".prototype.__ks_init_1.call(this)").done();
				}
				else {
					clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").line(this._name + ".prototype.__ks_init_1.call(this)").done();
				}
			}
			else if(this._extendsType.isSealedAlien() === true) {
				clazz.newControl().code("__ks_init()").step().done();
			}
			else {
				clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").done();
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toRouterFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listClassMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toHybridES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toHybridES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toHybridES6Fragments) {
				return Statement.prototype.toHybridES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toSealedES5Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			this.module().flag("Helper");
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", $runtime.helper(this), ".class(");
			var clazz = line.newObject();
			clazz.line(KSHelper.concatString("$name: ", $quote(this._name)));
			if(KSType.isValue(this._data.version)) {
				clazz.line("$version: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]");
			}
			if(this._extending) {
				clazz.line("$extends: ", this._extendsName);
			}
			var m = [];
			var ctrl;
			if(KSType.isValue(this._destructor) || !__ks_Dictionary._cm_isEmpty(this._classMethods)) {
				ctrl = clazz.newLine().code("$static: ").newObject();
				if(KSType.isValue(this._destructor)) {
					this._destructor.toFragments(ctrl, Mode.None);
					ClassDestructorDeclaration.toRouterFragments(this, ctrl, this._type);
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_Array._im_clear(m);
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						method.toFragments(ctrl, Mode.None);
						m.push(method.type());
					}
					var overflow = false;
					if(this._extending) {
						var __ks_methods_1 = this._extendsType.type().listClassMethods(name);
						if(KSType.isValue(__ks_methods_1)) {
							for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = __ks_methods_1[__ks_0];
								if(method.isOverflowing(m) === true) {
									overflow = true;
									break;
								}
							}
						}
					}
					ClassMethodDeclaration.toClassSwitchFragments(this, ctrl.newControl(), this._type, m, overflow, name, function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code(name + ": function()").step();
					}, function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
					});
				}
				ctrl.done();
			}
			if(this._extending && !(this._extendsType.isSealedAlien() === true)) {
				ctrl = clazz.newControl().code("__ks_init: function()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this.hasInits() === true) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
			}
			else {
				ctrl = clazz.newControl().code("$create: function()").step();
				if(this.hasInits() === true) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.line("this.__ks_cons(arguments)");
			}
			__ks_Array._im_clear(m);
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toRouterFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons: function(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + ": function()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
				});
			}
			clazz.done();
			line.code(")").done();
		},
		toSealedES5Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toSealedES5Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSealedES5Fragments) {
				return Statement.prototype.toSealedES5Fragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toSealedES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name);
			if(this._extending) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			var ctrl;
			if(this._extending && !(this._extendsType.isSealedAlien() === true)) {
				ctrl = clazz.newControl().code("__ks_init()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this.hasInits() === true) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.done();
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				if(this.hasInits() === true) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.line("this.__ks_cons(arguments)");
				ctrl.done();
			}
			var m = [];
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toRouterFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				fragments.done();
			});
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toRouterFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listInstanceMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				var overflow = false;
				if(this._extending) {
					var __ks_methods_1 = this._extendsType.type().listClassMethods(name);
					if(KSType.isValue(__ks_methods_1)) {
						for(var __ks_0 = 0, __ks_1 = __ks_methods_1.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = __ks_methods_1[__ks_0];
							if(method.isOverflowing(m) === true) {
								overflow = true;
								break;
							}
						}
					}
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, overflow, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toSealedES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toSealedES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSealedES6Fragments) {
				return Statement.prototype.toSealedES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._sealed) {
				if(this._es5) {
					this.toSealedES5Fragments(fragments);
				}
				else {
					this.toSealedES6Fragments(fragments);
				}
			}
			else {
				if(this._es5) {
					this.toContinousES5Fragments(fragments);
				}
				else if(this._hybrid) {
					this.toHybridES6Fragments(fragments);
				}
				else {
					this.toContinousES6Fragments(fragments);
				}
			}
			for(var __ks_0 in this._classVariables) {
				var variable = this._classVariables[__ks_0];
				variable.toFragments(fragments);
			}
			if(!this._es5 && KSType.isValue(this._data.version)) {
				var line = fragments.newLine();
				line.code("Object.defineProperty(" + this._name + ", 'version', ").newObject().line("value: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]").done();
				line.code(")").done();
			}
			var references, __ks_0;
			if(KSType.isValue(__ks_0 = this.module().listReferences(this._name)) ? (references = __ks_0, true) : false) {
				for(var __ks_0 = 0, __ks_1 = references.length, ref; __ks_0 < __ks_1; ++__ks_0) {
					ref = references[__ks_0];
					fragments.line(ref);
				}
			}
			if(this._sealed) {
				fragments.line("var " + this._type.getSealedName() + " = {}");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_updateMethodScope_0: function(method) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			if(this._extending) {
				var variable = method.scope().getVariable("super").setDeclaredType(this._scope.reference(this._extendsName));
				if(this._es5) {
					variable.replaceCall = (function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperMethodES5Substitude(data, __ks_arguments_1, method, this._type);
					}).bind(this);
					variable.replaceMemberCall = (function(property, __ks_arguments_1, node) {
						if(arguments.length < 3) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(property === void 0 || property === null) {
							throw new TypeError("'property' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						return new MemberSuperMethodES5Substitude(property, __ks_arguments_1, this._type, node);
					}).bind(this);
				}
				else {
					variable.replaceCall = (function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperMethodES6Substitude(data, __ks_arguments_1, method, this._type);
					}).bind(this);
				}
			}
		},
		updateMethodScope: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_updateMethodScope_0.apply(this, arguments);
			}
			else if(Statement.prototype.updateMethodScope) {
				return Statement.prototype.updateMethodScope.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._name, this._type);
		},
		walk: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallThisConstructorSubstitude = KSHelper.class({
		$name: "CallThisConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallThisConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallThisConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.path() + ".prototype.__ks_cons.call(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallThisConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallThisConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallHybridThisConstructorES6Substitude = KSHelper.class({
		$name: "CallHybridThisConstructorES6Substitude",
		$extends: CallThisConstructorSubstitude,
		__ks_init: function() {
			CallThisConstructorSubstitude.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallThisConstructorSubstitude.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("__ks_cons([");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallHybridThisConstructorES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return CallThisConstructorSubstitude.prototype.toFragments.apply(this, arguments);
		}
	});
	var CallSuperConstructorSubstitude = KSHelper.class({
		$name: "CallSuperConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallSuperConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.type().extends().path() + ".prototype.__ks_cons.call(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallSuperConstructorES5Substitude = KSHelper.class({
		$name: "CallSuperConstructorES5Substitude",
		$extends: CallSuperConstructorSubstitude,
		__ks_init: function() {
			CallSuperConstructorSubstitude.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallSuperConstructorSubstitude.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._class.type().extends().isAlien() === true) {
				if(this._arguments.length === 0) {
					fragments.code("(1");
				}
				else {
					throw new NotSupportedException();
				}
			}
			else {
				fragments.code("" + this._class.type().extends().path() + ".prototype.__ks_cons.call(this, [");
				for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperConstructorES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return CallSuperConstructorSubstitude.prototype.toFragments.apply(this, arguments);
		}
	});
	var CallHybridSuperConstructorES6Substitude = KSHelper.class({
		$name: "CallHybridSuperConstructorES6Substitude",
		$extends: CallSuperConstructorSubstitude,
		__ks_init: function() {
			CallSuperConstructorSubstitude.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallSuperConstructorSubstitude.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("super(");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallHybridSuperConstructorES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return CallSuperConstructorSubstitude.prototype.toFragments.apply(this, arguments);
		}
	});
	var CallSuperMethodES5Substitude = KSHelper.class({
		$name: "CallSuperMethodES5Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, method, __ks_class_1) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.isInstance(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSuperMethodES5Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.type().extends().path() + ".prototype." + this._method.name() + ".apply(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._method.type().returnType();
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallSuperMethodES6Substitude = KSHelper.class({
		$name: "CallSuperMethodES6Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, method, __ks_class_1) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.isInstance(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSuperMethodES6Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("super." + this._method.name() + "(");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._method.type().returnType();
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var MemberSuperMethodES5Substitude = KSHelper.class({
		$name: "MemberSuperMethodES5Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(property, __ks_arguments_1, __ks_class_1, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isString(property)) {
				throw new TypeError("'property' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._property = property;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
			var superClass = this._class.type().extends().type();
			var __ks_property_1 = superClass.getInstanceProperty(this._property);
			if(KSType.isValue(__ks_property_1)) {
			}
			else if(!((superClass.isAlien() === true) || (superClass.isHybrid() === true))) {
				ReferenceException.throwNotDefinedProperty(this._property, node);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				MemberSuperMethodES5Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberSuperMethodES5Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.discardName().extends().name() + ".prototype." + this._property + ".apply(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberSuperMethodES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassMethodDeclaration = KSHelper.class({
		$name: "ClassMethodDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toClassSwitchFragments_0: function(node, fragments, variable, methods, overflow, name, header, footer) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(overflow === void 0 || overflow === null) {
					throw new TypeError("'overflow' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var assessment = Router.assess(methods, false, overflow);
				if(variable.type().isExtending() === true) {
					return Router.toFragments(assessment, fragments, "arguments", true, header, footer, KSHelper.vcurry(ClassDeclaration.callMethod, null, node, variable, "__ks_sttc_" + name + "_", "arguments", "return "), function(block, ctrl, argName, async, returns) {
						if(arguments.length < 5) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
						}
						if(block === void 0 || block === null) {
							throw new TypeError("'block' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(argName === void 0 || argName === null) {
							throw new TypeError("'argName' is not nullable");
						}
						if(async === void 0 || async === null) {
							throw new TypeError("'async' is not nullable");
						}
						if(returns === void 0 || returns === null) {
							throw new TypeError("'returns' is not nullable");
						}
						var __ks_extends_1 = variable.type().extends();
						var parent = __ks_extends_1.name();
						if(__ks_extends_1.type().hasClassMethod(name) === true) {
							ctrl.done();
							block.line("return " + parent + "." + name + ".apply(null, arguments)");
						}
						else {
							ctrl.step().code("else if(" + parent + "." + name + ")").step().line("return " + parent + "." + name + ".apply(null, arguments)").done();
							block.line("throw new SyntaxError(\"Wrong number of arguments\")");
						}
					}, node);
				}
				else {
					return Router.toFragments(assessment, fragments, "arguments", true, header, footer, KSHelper.vcurry(ClassDeclaration.callMethod, null, node, variable, "__ks_sttc_" + name + "_", "arguments", "return "), ClassDeclaration.toWrongDoingFragments, node);
				}
			},
			toClassSwitchFragments: function() {
				if(arguments.length === 8) {
					return ClassMethodDeclaration.__ks_sttc_toClassSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toClassSwitchFragments) {
					return Statement.toClassSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toInstanceSwitchFragments_0: function(node, fragments, variable, methods, overflow, name, header, footer) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(overflow === void 0 || overflow === null) {
					throw new TypeError("'overflow' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var assessment = Router.assess(methods, false, overflow);
				if(variable.type().isExtending() === true) {
					return Router.toFragments(assessment, fragments, "arguments", true, header, footer, KSHelper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_func_" + name + "_", "arguments", "return "), function(block, ctrl, argName, async, returns) {
						if(arguments.length < 5) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
						}
						if(block === void 0 || block === null) {
							throw new TypeError("'block' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(argName === void 0 || argName === null) {
							throw new TypeError("'argName' is not nullable");
						}
						if(async === void 0 || async === null) {
							throw new TypeError("'async' is not nullable");
						}
						if(returns === void 0 || returns === null) {
							throw new TypeError("'returns' is not nullable");
						}
						var __ks_extends_1 = variable.type().extends();
						var parent = __ks_extends_1.name();
						if(__ks_extends_1.type().hasInstanceMethod(name) === true) {
							ctrl.done();
							block.line("return " + parent + ".prototype." + name + ".apply(this, arguments)");
						}
						else {
							ctrl.step().code("else if(" + parent + ".prototype." + name + ")").step().line("return " + parent + ".prototype." + name + ".apply(this, arguments)").done();
							block.line("throw new SyntaxError(\"Wrong number of arguments\")");
						}
					}, node);
				}
				else {
					return Router.toFragments(assessment, fragments, "arguments", true, header, footer, KSHelper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_func_" + name + "_", "arguments", "return "), ClassDeclaration.toWrongDoingFragments, node);
				}
			},
			toInstanceSwitchFragments: function() {
				if(arguments.length === 8) {
					return ClassMethodDeclaration.__ks_sttc_toInstanceSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toInstanceSwitchFragments) {
					return Statement.toInstanceSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._aliases = [];
			this._analysed = false;
			this._awaiting = false;
			this._exit = false;
			this._instance = true;
			this._override = false;
			this._returnNull = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newInstanceMethodScope(this)]);
			this._name = data.name.name;
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					this._abstract = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Override.value) {
					this._override = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Static.value) {
					this._instance = false;
				}
			}
			if(this._instance) {
				if(this._abstract) {
					if(parent._abstract === true) {
						if(KSType.isArray(parent._abstractMethods[this._name])) {
							parent._abstractMethods[this._name].push(this);
						}
						else {
							parent._abstractMethods[this._name] = [this];
						}
					}
					else {
						SyntaxException.throwNotAbstractClass(parent._name, this._name, parent);
					}
				}
				else {
					if(KSType.isArray(parent._instanceMethods[this._name])) {
						this._internalName = "__ks_func_" + this._name + "_" + parent._instanceMethods[this._name].length;
						parent._instanceMethods[this._name].push(this);
					}
					else {
						this._internalName = "__ks_func_" + this._name + "_0";
						parent._instanceMethods[this._name] = [this];
					}
				}
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.throwReservedClassMethod(this._name, parent);
			}
			else {
				if(KSType.isArray(parent._classMethods[this._name])) {
					this._internalName = "__ks_sttc_" + this._name + "_" + parent._classMethods[this._name].length;
					parent._classMethods[this._name].push(this);
				}
				else {
					this._internalName = "__ks_sttc_" + this._name + "_0";
					parent._classMethods[this._name] = [this];
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parent.addReference(Type.fromAST(parameter.type, this._scope, false, this), this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			if(KSType.isValue(this._data.body)) {
				this._returnNull = (KSHelper.valueOf(this._data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(this._data.body.kind) === NodeKind.UnlessStatement.value);
			}
			this._block = $compile.block($ast.body(this._data), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._analysed) {
				this._parent.updateMethodScope(this);
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					parameter.prepare();
				}
				if(this._override) {
					if(!(this._parent.isExtending() === true)) {
						SyntaxException.throwNoSuitableOverride(this._parent.type(), this._name, this._parameters, this);
					}
					var superclass = this._parent.extends().type();
					var __ks_method_1;
					var method = superclass.getInstanceMethod(this._name, this._parameters);
					if(KSType.isValue(method)) {
						this._type = method.type();
						var parameters = this._type.parameters();
						for(var index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
							parameter = this._parameters[index];
							parameter.type(parameters[index]);
						}
					}
					else if(KSType.isValue((__ks_method_1 = superclass.getAbstractMethod(this._name, this._parameters)))) {
						this._type = __ks_method_1.type();
						var parameters = this._type.parameters();
						for(var index = 0, __ks_0 = this._parameters.length, parameter; index < __ks_0; ++index) {
							parameter = this._parameters[index];
							parameter.type(parameters[index]);
						}
					}
					else {
						SyntaxException.throwNoSuitableOverride(this._parent.extends(), this._name, this._parameters, this);
					}
				}
				else {
					var __ks_arguments_1 = KSHelper.mapArray(this._parameters, function(parameter) {
						return parameter.type();
					});
					this._type = new ClassMethodType(__ks_arguments_1, this._data, this);
					if(this._parent.isExtending() === true) {
						var superclass = this._parent.extends().type();
						var __ks_0;
						var method = KSType.isValue(__ks_0 = superclass.getInstanceMethod(this._name, this._parameters)) ? __ks_0 : superclass.getAbstractMethod(this._name, this._type);
						if(KSType.isValue(method)) {
							if(KSType.isValue(this._data.type)) {
								if(!(this._type.returnType().isInstanceOf(method.returnType()) === true)) {
									SyntaxException.throwInvalidMethodReturn(this._parent.name(), this._name, this);
								}
							}
							else {
								this._type.returnType(method.returnType());
							}
						}
					}
				}
				this._analysed = true;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._block.analyse(this._aliases);
			this._block.analyse();
			if(!this._abstract) {
				this._block.type(this._type.returnType());
			}
			this._block.prepare();
			this._block.translate();
			this._awaiting = this._block.isAwait();
			this._exit = this._block.isExit();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.isInstance(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!(ClassDeclaration.isAssigningAlias(this._block.statements(), statement.name(), false, false) === true)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ClassMethodDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			return this._abstract;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ClassMethodDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return this._instance;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_length_0: function() {
			return this._parameters.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_length_0.apply(this);
			}
			else if(Statement.prototype.length) {
				return Statement.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5 === true) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				if(!this._instance) {
					ctrl.code("static ");
				}
				ctrl.code(this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			if(this._awaiting) {
				throw new NotImplementedException(this);
			}
			else {
				ctrl.compile(this._block);
				if(!this._exit) {
					if(this._type.isAsync() === true) {
						ctrl.line("__ks_cb()");
					}
					else if(this._returnNull) {
						ctrl.line("return null");
					}
				}
			}
			if(!(this._parent._es5 === true)) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._analysed) {
				return this._type;
			}
			else {
				this.prepare();
				return this._type;
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassConstructorDeclaration = KSHelper.class({
		$name: "ClassConstructorDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toRouterFragments_0: function(node, fragments, variable, methods, header, footer) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var assessment = Router.assess(methods, false);
				if(node.isExtending() === true) {
					return Router.toFragments(assessment, fragments, "args", false, header, footer, KSHelper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_cons_", "args", ""), function(block, ctrl, argName, async, returns) {
						if(arguments.length < 5) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
						}
						if(block === void 0 || block === null) {
							throw new TypeError("'block' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(argName === void 0 || argName === null) {
							throw new TypeError("'argName' is not nullable");
						}
						if(async === void 0 || async === null) {
							throw new TypeError("'async' is not nullable");
						}
						if(returns === void 0 || returns === null) {
							throw new TypeError("'returns' is not nullable");
						}
						if(variable.type().hasConstructors() === true) {
							ctrl.step().code("else").step().line("throw new SyntaxError(\"Wrong number of arguments\")").done();
						}
						else {
							var constructorName = (variable.type().extends().isSealedAlien() === true) ? "constructor" : "__ks_cons";
							block.line("" + variable.type().extends().path() + ".prototype." + constructorName + ".call(this, args)");
						}
					}, node);
				}
				else {
					return Router.toFragments(assessment, fragments, "args", false, header, footer, KSHelper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_cons_", "args", ""), ClassDeclaration.toWrongDoingFragments, node);
				}
			},
			toRouterFragments: function() {
				if(arguments.length === 6) {
					return ClassConstructorDeclaration.__ks_sttc_toRouterFragments_0.apply(this, arguments);
				}
				else if(Statement.toRouterFragments) {
					return Statement.toRouterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._aliases = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassConstructorDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope(parent._constructorScope, ScopeType.Block)]);
			this._internalName = "__ks_cons_" + parent._constructors.length;
			parent._constructors.push(this);
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parent.addReference(Type.fromAST(parameter.type, this._scope, false, this), this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassConstructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			this._block = $compile.block($ast.body(this._data), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new ClassConstructorType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			var index = 1;
			if(this._block.isEmpty() === true) {
				if(this._parent._extending === true) {
					this.addCallToParentConstructor();
					index = 0;
				}
			}
			else if(((index = this.getConstructorIndex(this._block.statements())) === -1) && (this._parent._extending === true)) {
				SyntaxException.throwNoSuperCall(this);
			}
			if(this._aliases.length === 0) {
				this._block.analyse();
			}
			else {
				this._block.analyse(0, index);
				this._block.analyse(this._aliases);
				this._block.analyse(index + 1);
			}
			this._block.prepare();
			this._block.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.isInstance(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!(ClassDeclaration.isAssigningAlias(this._block.statements(), statement.name(), true, this._parent._extending) === true)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addCallToParentConstructor_0: function() {
			var extendedType = this._parent.extends().type();
			if(extendedType.matchArguments([]) === true) {
				if((extendedType.hasConstructors() === true) || (extendedType.isSealed() === true)) {
					this._block.addStatement((function(that) {
						var d = new Dictionary();
						d.kind = NodeKind.CallExpression;
						d.attributes = [];
						d.modifiers = [];
						d.scope = (function() {
							var d = new Dictionary();
							d.kind = ScopeKind.This;
							return d;
						})();
						d.callee = (function(that) {
							var d = new Dictionary();
							d.kind = NodeKind.Identifier;
							d.name = "super";
							d.start = that._data.start;
							d.end = that._data.start;
							return d;
						})(that);
						d.arguments = [];
						d.start = that._data.start;
						d.end = that._data.start;
						return d;
					})(this));
				}
			}
			else {
				SyntaxException.throwNoSuperCall(this);
			}
		},
		addCallToParentConstructor: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_addCallToParentConstructor_0.apply(this);
			}
			else if(Statement.prototype.addCallToParentConstructor) {
				return Statement.prototype.addCallToParentConstructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getConstructorIndex_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			else if(!KSType.isArray(body)) {
				throw new TypeError("'body' is not of type 'Array'");
			}
			for(var index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(KSHelper.valueOf(statement.kind) === NodeKind.CallExpression.value) {
					if((KSHelper.valueOf(statement.callee.kind) === NodeKind.Identifier.value) && ((statement.callee.name === "this") || (statement.callee.name === "super"))) {
						return index;
					}
				}
				else if(KSHelper.valueOf(statement.kind) === NodeKind.IfStatement.value) {
					if(KSType.isValue(statement.whenFalse) && (this.getConstructorIndex(statement.whenTrue.statements) !== -1) && (this.getConstructorIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		},
		getConstructorIndex: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_getConstructorIndex_0.apply(this, arguments);
			}
			else if(Statement.prototype.getConstructorIndex) {
				return Statement.prototype.getConstructorIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSuperIndex_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			else if(!KSType.isArray(body)) {
				throw new TypeError("'body' is not of type 'Array'");
			}
			for(var index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(KSHelper.valueOf(statement.kind) === NodeKind.CallExpression.value) {
					if((KSHelper.valueOf(statement.callee.kind) === NodeKind.Identifier.value) && (statement.callee.name === "super")) {
						return index;
					}
				}
				else if(KSHelper.valueOf(statement.kind) === NodeKind.IfStatement.value) {
					if(KSType.isValue(statement.whenFalse) && (this.getSuperIndex(statement.whenTrue.statements) !== -1) && (this.getSuperIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		},
		getSuperIndex: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_getSuperIndex_0.apply(this, arguments);
			}
			else if(Statement.prototype.getSuperIndex) {
				return Statement.prototype.getSuperIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					return true;
				}
			}
			return false;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return true;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toHybridConstructorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("constructor(");
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			if(this._parent._extendsType.isSealedAlien() === true) {
				var index = this.getSuperIndex(this._block.statements());
				if(index === -1) {
					ctrl.line("super()");
					ctrl.line("this.constructor.prototype.__ks_init()");
					ctrl.compile(this._block);
				}
				else {
					this._block.toRangeFragments(ctrl, 0, index);
					ctrl.line("this.constructor.prototype.__ks_init()");
					this._block.toRangeFragments(ctrl, KSOperator.addOrConcat(index, 1));
				}
			}
			else {
				ctrl.compile(this._block);
			}
			ctrl.done();
		},
		toHybridConstructorFragments: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_toHybridConstructorFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toHybridConstructorFragments) {
				return Statement.prototype.toHybridConstructorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(!(this._parent._es5 === true) && (this._parent.isHybrid() === true)) {
				var ctrl = fragments.newLine().code("const " + this._internalName + " = (");
				var block = Parameter.toFragments(this, ctrl, ParameterMode.HybridConstructor, function(node) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					return node.code(") =>").newBlock();
				});
				var index = this.getSuperIndex(this._block.statements());
				if(index === -1) {
					block.compile(this._block);
				}
				else {
					this._block.toRangeFragments(block, 0, index);
					if(this._parent.extends().isSealed() === true) {
						block.line("this.__ks_init()");
					}
					this._block.toRangeFragments(block, KSOperator.addOrConcat(index, 1));
				}
				block.done();
				ctrl.done();
			}
			else {
				var ctrl = fragments.newControl();
				if(this._parent._es5 === true) {
					ctrl.code(this._internalName + ": function(");
				}
				else {
					ctrl.code(this._internalName + "(");
				}
				Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					return node.code(")").step();
				});
				ctrl.compile(this._block);
				if(!(this._parent._es5 === true)) {
					ctrl.done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassConstructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassDestructorDeclaration = KSHelper.class({
		$name: "ClassDestructorDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toRouterFragments_0: function(node, fragments, variable) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				var ctrl = fragments.newControl();
				if(node._es5 === true) {
					ctrl.code("__ks_destroy: function(that)");
				}
				else {
					ctrl.code("static __ks_destroy(that)");
				}
				ctrl.step();
				if(node._extending === true) {
					ctrl.line("" + node._extendsName + ".__ks_destroy(that)");
				}
				for(var i = 0, __ks_0 = variable.type().destructors(); i < __ks_0; ++i) {
					ctrl.line("" + node._name + ".__ks_destroy_" + i + "(that)");
				}
				if(!(node._es5 === true)) {
					ctrl.done();
				}
			},
			toRouterFragments: function() {
				if(arguments.length === 3) {
					return ClassDestructorDeclaration.__ks_sttc_toRouterFragments_0.apply(this, arguments);
				}
				else if(Statement.toRouterFragments) {
					return Statement.toRouterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope(parent._destructorScope, ScopeType.Block)]);
			this._internalName = "__ks_destroy_0";
			parent._destructor = this;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDestructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var parameter = new Parameter((function() {
				var d = new Dictionary();
				d.kind = NodeKind.Parameter;
				d.modifiers = [];
				d.name = $ast.identifier("that");
				return d;
			})(), this);
			parameter.analyse();
			this._parameters = [parameter];
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._parameters[0].prepare();
			this._type = new ClassDestructorType(this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._block = $compile.block($ast.body(this._data), this);
			this._block.analyse();
			this._block.prepare();
			this._block.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
					return true;
				}
			}
			return false;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInstance_0: function() {
			return false;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return true;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5 === true) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				ctrl.code("static " + this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			ctrl.compile(this._block);
			if(!(this._parent._es5 === true)) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDestructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ClassVariableDeclaration = KSHelper.class({
		$name: "ClassVariableDeclaration",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._instance = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ClassVariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent]);
			this._name = data.name.name;
			var __ks_public_1 = false;
			var alias = false;
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				var __ks_2 = modifier.kind.valueOf();
				if(__ks_2 === ModifierKind.Public.value) {
					__ks_public_1 = true;
				}
				else if(__ks_2 === ModifierKind.Static.value) {
					this._instance = false;
				}
				else if(__ks_2 === ModifierKind.ThisAlias.value) {
					alias = true;
				}
			}
			if(alias && !__ks_public_1) {
				this._name = "_" + this._name;
			}
			if(this._instance) {
				parent._instanceVariables[this._name] = this;
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.throwReservedClassVariable(this._name, parent);
			}
			else {
				parent._classVariables[this._name] = this;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassVariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				if(!this._instance) {
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = ClassVariableType.fromAST(this._data, this);
			this._parent.addReference(this._type, this);
			if(this._parent.isExtending() === true) {
				var type = this._parent._extendsType.type();
				if(this._instance) {
					if(type.hasInstanceVariable(this._name) === true) {
						ReferenceException.throwAlreadyDefinedField(this._name, this);
					}
				}
				else {
					if(type.hasClassVariable(this._name) === true) {
						ReferenceException.throwAlreadyDefinedField(this._name, this);
					}
				}
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					this._defaultValue = $compile.expression(this._data.defaultValue, this, this._parent._instanceVariableScope);
					this._defaultValue.analyse();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
				if(!(this._defaultValue.isMatchingType(this._type.type()) === true)) {
					TypeException.throwInvalidAssignement(this._name, this._type, this._defaultValue.type(), this);
				}
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(AbstractNode.prototype.hasDefaultValue) {
				return AbstractNode.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstance) {
				return AbstractNode.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					fragments.newLine().code("this." + this._name + " = ").compile(this._defaultValue).done();
				}
				else {
					fragments.newLine().code("" + this._parent.name() + "." + this._name + " = ").compile(this._defaultValue).done();
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ClassVariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ContinueStatement = KSHelper.class({
		$name: "ContinueStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var parent = this._parent;
			if(!(parent.isJumpable() === true)) {
				SyntaxException.throwIllegalStatement("continue", this);
			}
			while(!(parent.isLoop() === true)) {
				parent = parent.parent();
				if(!(KSType.isValue(parent) ? parent.isJumpable() === true : false)) {
					SyntaxException.throwIllegalStatement("continue", this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.line("continue", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ContinueStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DestroyStatement = KSHelper.class({
		$name: "DestroyStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._identifier = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			DestroyStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSHelper.valueOf(this._data.variable.kind) === NodeKind.Identifier.value) {
				if(!(this._scope.hasVariable(this._data.variable.name) === true)) {
					ReferenceException.throwNotDefined(this._data.variable.name, this);
				}
				this._identifier = true;
				this._scope.removeVariable(this._data.variable.name);
			}
			else {
				this._expression = $compile.expression(this._data.variable, this);
				this._expression.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._identifier) {
				this._type = this._scope.getVariable(this._data.variable.name, this._scope.line() - 1).getRealType();
			}
			else {
				this._expression.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(!this._identifier) {
				this._expression.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._identifier) {
				var variable = this._scope.getVariable(this._data.variable.name, this._scope.line() - 1);
				var type = this._type.discardReference();
				if((type.isClass() === true) && (type.type().hasDestructors() === true)) {
					fragments.newLine().code(type.path(), ".__ks_destroy(").compile(variable).code(")").done();
				}
				fragments.newLine().compile(variable).code(" = void 0").done();
			}
			else {
				fragments.newLine().code("delete ").compile(this._expression).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DestroyStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DiscloseDeclaration = KSHelper.class({
		$name: "DiscloseDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DiscloseDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var variable = this._scope.getVariable(this._data.name.name);
			if(!KSType.isValue(variable)) {
				ReferenceException.throwNotDefined(this._data.name.name, this);
			}
			if(!KSType.isInstance(variable.getDeclaredType(), NamedType)) {
				TypeException.throwNotClass(this._data.name.name, this);
			}
			if(!(variable.getDeclaredType().isAlien() === true)) {
				TypeException.throwNotAlien(this._data.name.name, this);
			}
			variable.prepareAlteration();
			var type = variable.getDeclaredType().type();
			type.setExhaustive(true);
			if(this._options.rules.nonExhaustive === true) {
				type.setExhaustive(false);
			}
			for(var __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				type.addPropertyFromAST(data, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DiscloseDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return DiscloseDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DiscloseDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DoUntilStatement = KSHelper.class({
		$name: "DoUntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.block(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return DoUntilStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DoUntilStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(!(").compileBoolean(this._condition).code("))").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoUntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DoWhileStatement = KSHelper.class({
		$name: "DoWhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._body = $compile.block(this._data.body, this);
			this._body.analyse();
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._body.translate();
			this._condition.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return DoWhileStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DoWhileStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(").compileBoolean(this._condition).code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoWhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var EnumDeclaration = KSHelper.class({
		$name: "EnumDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._composites = [];
			this._new = true;
			this._values = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			EnumDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._name)) ? (this._variable = __ks_0, true) : false) {
				this._new = false;
			}
			else {
				var type = Type.fromAST(this._data.type, this);
				if(type.isString() === true) {
					this._enum = new EnumType(this._scope, EnumTypeKind.String);
				}
				else if(KSType.isValue(this._data.attributes)) {
					var nf = true;
					for(var __ks_0 = 0, __ks_1 = this._data.attributes.length, attr; __ks_0 < __ks_1 && nf; ++__ks_0) {
						attr = this._data.attributes[__ks_0];
						if((KSHelper.valueOf(attr.kind) === NodeKind.AttributeDeclaration.value) && (KSHelper.valueOf(attr.declaration.kind) === NodeKind.Identifier.value) && (attr.declaration.name === "flags")) {
							nf = false;
							this._enum = new EnumType(this._scope, EnumTypeKind.Flags);
						}
					}
					if(nf) {
						this._enum = new EnumType(this._scope);
					}
				}
				else {
					this._enum = new EnumType(this._scope);
				}
				this._type = new NamedType(this._name, this._enum);
				this._variable = this._scope.define(this._name, true, this._type, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._new) {
				this._type = this._variable.getRealType();
				this._enum = this._type.type();
			}
			var __ks_0 = this._enum.kind().valueOf();
			if(__ks_0 === EnumTypeKind.Flags.value) {
				for(var __ks_1 = 0, __ks_2 = this._data.members.length, data; __ks_1 < __ks_2; ++__ks_1) {
					data = this._data.members[__ks_1];
					if(KSType.isValue(data.value)) {
						if((KSHelper.valueOf(data.value.kind) === NodeKind.BinaryExpression.value) && ((KSHelper.valueOf(data.value.operator.kind) === BinaryOperatorKind.BitwiseOr.value) || (KSHelper.valueOf(data.value.operator.kind) === BinaryOperatorKind.Addition.value))) {
							this._composites.push((function() {
								var d = new Dictionary();
								d.name = data.name.name;
								d.components = [data.value.left, data.value.right];
								return d;
							})());
							this._enum.addElement(data.name.name);
						}
						else if((KSHelper.valueOf(data.value.kind) === NodeKind.PolyadicExpression.value) && ((KSHelper.valueOf(data.value.operator.kind) === BinaryOperatorKind.BitwiseOr.value) || (KSHelper.valueOf(data.value.operator.kind) === BinaryOperatorKind.Addition.value))) {
							this._composites.push((function() {
								var d = new Dictionary();
								d.name = data.name.name;
								d.components = data.value.operands;
								return d;
							})());
							this._enum.addElement(data.name.name);
						}
						else {
							if(KSHelper.valueOf(data.value.kind) === NodeKind.NumericExpression.value) {
								if(KSOperator.gt(data.value.value, 53)) {
									SyntaxException.throwEnumOverflow(this._name, this);
								}
								this._enum.index(data.value.value);
							}
							else {
								throw new NotSupportedException(this);
							}
							this._values.push((function(that) {
								var d = new Dictionary();
								d.name = data.name.name;
								d.value = KSOperator.lte(that._enum.index(), 0) ? 0 : Math.pow(2, KSOperator.subtraction(that._enum.index(), 1));
								return d;
							})(this));
							this._enum.addElement(data.name.name);
						}
					}
					else {
						if(KSOperator.gt(this._enum.step(), 53)) {
							SyntaxException.throwEnumOverflow(this._name, this);
						}
						this._values.push((function(that) {
							var d = new Dictionary();
							d.name = data.name.name;
							d.value = KSOperator.lte(that._enum.index(), 0) ? 0 : Math.pow(2, KSOperator.subtraction(that._enum.index(), 1));
							return d;
						})(this));
						this._enum.addElement(data.name.name);
					}
				}
			}
			else if(__ks_0 === EnumTypeKind.String.value) {
				var value;
				for(var __ks_1 = 0, __ks_2 = this._data.members.length, data; __ks_1 < __ks_2; ++__ks_1) {
					data = this._data.members[__ks_1];
					if(KSType.isValue(data.value)) {
						if(KSHelper.valueOf(data.value.kind) === NodeKind.Literal.value) {
							value = $quote(data.value.value);
						}
						else {
							throw new NotSupportedException(this);
						}
					}
					else {
						value = $quote(data.name.name.toLowerCase());
					}
					this._values.push((function() {
						var d = new Dictionary();
						d.name = data.name.name;
						d.value = value;
						return d;
					})());
					this._enum.addElement(data.name.name);
				}
			}
			else if(__ks_0 === EnumTypeKind.Number.value) {
				for(var __ks_1 = 0, __ks_2 = this._data.members.length, data; __ks_1 < __ks_2; ++__ks_1) {
					data = this._data.members[__ks_1];
					if(KSType.isValue(data.value)) {
						if(KSHelper.valueOf(data.value.kind) === NodeKind.NumericExpression.value) {
							this._enum.index(data.value.value);
						}
						else {
							throw new NotSupportedException(this);
						}
					}
					else {
						this._enum.step();
					}
					this._values.push((function(that) {
						var d = new Dictionary();
						d.name = data.name.name;
						d.value = that._enum.index();
						return d;
					})(this));
					this._enum.addElement(data.name.name);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return EnumDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._new) {
				var line = fragments.newLine().code($runtime.scope(this), this._name, $equals, $runtime.helper(this), ".enum(");
				if(this._type.isString() === true) {
					line.code("String, ");
				}
				else {
					line.code("Number, ");
				}
				var object = line.newObject();
				for(var __ks_0 = 0, __ks_1 = this._values.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._values[__ks_0];
					object.line(member.name, ": ", member.value);
				}
				object.done();
				line.code(")").done();
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._values.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._values[__ks_0];
					fragments.line(this._name, ".", member.name, $equals, this._name, "(", member.value, ")");
				}
			}
			if(this._composites.length > 0) {
				for(var __ks_0 = 0, __ks_1 = this._composites.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._composites[__ks_0];
					var line = fragments.newLine().code(this._name, ".", member.name, " = ", this._name, "(");
					for(var i = 0, __ks_2 = member.components.length, value; i < __ks_2; ++i) {
						value = member.components[i];
						if(i > 0) {
							line.code(" | ");
						}
						line.code(this._name, ".", value.name);
					}
					line.code(")").done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return EnumDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExportDeclaration = KSHelper.class({
		$name: "ExportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarations = [];
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var statement;
			if(this._parent.includePath() === null) {
				for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					var __ks_2 = declaration.kind.valueOf();
					if(__ks_2 === NodeKind.ExportDeclarationSpecifier.value) {
						statement = $compile.statement(declaration.declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportExclusionSpecifier.value) {
						statement = new ExportExclusionSpecifier(declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportNamedSpecifier.value) {
						statement = new ExportNamedSpecifier(declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportPropertiesSpecifier.value) {
						statement = new ExportPropertiesSpecifier(declaration, this);
					}
					else if(__ks_2 === NodeKind.ExportWildcardSpecifier.value) {
						statement = new ExportWildcardSpecifier(declaration, this);
					}
					else {
						console.info(declaration);
						throw new NotImplementedException(this);
					}
					statement.analyse();
					this._statements.push(statement);
					this._declarations.push(statement);
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					if(KSHelper.valueOf(declaration.kind) === NodeKind.ExportDeclarationSpecifier.value) {
						this._statements.push(statement = $compile.statement(declaration.declaration, this));
						statement.analyse();
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._declarations[__ks_0];
				declaration.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Statement.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_exportMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._parent.exportMacro(name, macro);
		},
		exportMacro: function() {
			if(arguments.length === 2) {
				return ExportDeclaration.prototype.__ks_func_exportMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.exportMacro) {
				return Statement.prototype.exportMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._parent.publishMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return ExportDeclaration.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, Mode.None);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ExportDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExportExclusionSpecifier = KSHelper.class({
		$name: "ExportExclusionSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportExclusionSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportExclusionSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportExclusionSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			var exclusions = KSHelper.mapArray(this._data.exclusions, function(exclusion) {
				return exclusion.name;
			});
			for(var __ks_0 = 0, __ks_1 = this._parent.parent().scope().listDefinedVariables(), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2; ++__ks_0) {
				variable = __ks_1[__ks_0];
				if(exclusions.indexOf(variable.name()) === -1) {
					recipient.export(variable.name(), variable);
				}
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportExclusionSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportExclusionSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExportNamedSpecifier = KSHelper.class({
		$name: "ExportNamedSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportNamedSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression = $compile.expression(this._data.local, this._parent);
			this._expression.analyse();
			if(this._expression.isMacro() === true) {
				for(var __ks_0 = 0, __ks_1 = this._scope.listMacros(this._expression.name()), __ks_2 = __ks_1.length, macro; __ks_0 < __ks_2; ++__ks_0) {
					macro = __ks_1[__ks_0];
					this._parent.registerMacro(this._data.exported.name, macro);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportNamedSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportNamedSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._expression.prepare();
			if(this._expression.isMacro() === true) {
				for(var __ks_0 = 0, __ks_1 = this._scope.listMacros(this._expression.name()), __ks_2 = __ks_1.length, macro; __ks_0 < __ks_2; ++__ks_0) {
					macro = __ks_1[__ks_0];
					macro.export(recipient, this._data.exported.name);
				}
			}
			else {
				recipient.export(this._data.exported.name, this._expression);
				var type = this._expression.type();
				if((type.isClass() === true) || (type.isNamespace() === true)) {
					var regex = new RegExp("^" + this._expression.name());
					for(var __ks_0 = 0, __ks_1 = this._scope.listCompositeMacros(this._expression.name()), __ks_2 = __ks_1.length, macro; __ks_0 < __ks_2; ++__ks_0) {
						macro = __ks_1[__ks_0];
						macro.export(recipient, macro.name().replace(regex, this._data.exported.name));
					}
				}
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportNamedSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportNamedSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(!(this._expression.isMacro() === true)) {
				fn(this._data.exported.name, this._expression.type());
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ExportNamedSpecifier.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExportPropertiesSpecifier = KSHelper.class({
		$name: "ExportPropertiesSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportPropertiesSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._object = $compile.expression(this._data.object, this._parent);
			this._object.analyse();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportPropertiesSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportPropertiesSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._object.prepare();
			for(var __ks_0 = 0, __ks_1 = this._data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._data.properties[__ks_0];
				recipient.export(property.exported.name, new ExportProperty(this._object, property.local.name));
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportPropertiesSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportPropertiesSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExportWildcardSpecifier = KSHelper.class({
		$name: "ExportWildcardSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportWildcardSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression = $compile.expression(this._data.local, this._parent);
			this._expression.analyse();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportWildcardSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportWildcardSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._expression.prepare();
			this._expression.type().walk((function(name, __ks_0) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				recipient.export(name, new ExportProperty(this._expression, name));
			}).bind(this));
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportWildcardSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportWildcardSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExportProperty = KSHelper.class({
		$name: "ExportProperty",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(object, property) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isString(property)) {
				throw new TypeError("'property' is not of type 'String'");
			}
			this._object = object;
			this._property = property;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ExportProperty.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._object).code("." + this._property);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportProperty.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._object.type().getProperty(this._property);
		},
		type: function() {
			if(arguments.length === 0) {
				return ExportProperty.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExpressionStatement = KSHelper.class({
		$name: "ExpressionStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._declaration = false;
			this._ignorable = false;
			this._variable = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExpressionStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data, this);
			this._expression.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var __ks_0 = this._expression.inferTypes(new Dictionary());
			for(var name in __ks_0) {
				var data = __ks_0[name];
				this._scope.updateInferable(name, data, this);
			}
			this._ignorable = this._expression.isIgnorable();
			if(!this._ignorable) {
				this._expression.acquireReusable(false);
				this._expression.releaseReusable();
			}
			this.assignTempVariables(this._scope);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariables_0: function(left, scope, expression, leftMost) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(left === void 0 || left === null) {
				throw new TypeError("'left' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(leftMost === void 0 || leftMost === null) {
				throw new TypeError("'leftMost' is not nullable");
			}
			var assignments = [];
			var variable = null;
			var variables = left.listAssignments([]);
			var declaration = variables.length !== 0;
			for(var __ks_0 = 0, __ks_1 = variables.length, name; __ks_0 < __ks_1; ++__ks_0) {
				name = variables[__ks_0];
				var __ks_variable_1 = scope.getVariable(name);
				if(KSType.isValue(__ks_variable_1)) {
					if(__ks_variable_1.isImmutable() === true) {
						ReferenceException.throwImmutable(name, this);
					}
					declaration = false;
				}
				else if(this._options.rules.noUndefined === true) {
					ReferenceException.throwNotDefined(name, this);
				}
				else {
					assignments.push(name);
					this._scope.define(name, false, this);
				}
			}
			if(declaration && (this._expression.isDeclarable() === true)) {
				this._declaration = true;
				if(leftMost === true) {
					left.setAssignment(AssignmentType.Declaration);
				}
				else {
					this._assignments.push.apply(this._assignments, assignments);
				}
			}
			else {
				this._assignments.push.apply(this._assignments, assignments);
			}
		},
		defineVariables: function() {
			if(arguments.length === 4) {
				return ExpressionStatement.prototype.__ks_func_defineVariables_0.apply(this, arguments);
			}
			return Statement.prototype.defineVariables.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return this._expression.hasExceptions();
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(Statement.prototype.hasExceptions) {
				return Statement.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._expression.isAwait();
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._expression.isExit();
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._expression.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ExpressionStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._expression.toFragments(line, Mode.None);
			statements.unshift(this);
			item(statements);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._ignorable) {
				return;
			}
			if(this._expression.isAwaiting() === true) {
				return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else if(this._expression.isDeclarable() === true) {
				if(this._assignments.length !== 0) {
					fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), this._assignments.join(", "))).done();
				}
				var line = fragments.newLine();
				if(this._declaration) {
					line.code($runtime.scope(this));
				}
				if(KSType.isValue(this._expression.toAssignmentFragments)) {
					this._expression.toAssignmentFragments(line);
				}
				else {
					this._expression.toFragments(line, Mode.None);
				}
				line.done();
			}
			else {
				if(this._assignments.length !== 0) {
					fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), this._assignments.join(", "))).done();
				}
				if(KSType.isValue(this._expression.toStatementFragments)) {
					this._expression.toStatementFragments(fragments, Mode.None);
				}
				else {
					fragments.newLine().compile(this._expression, Mode.None).done();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
				afterward = this._afterwards[__ks_0];
				afterward.toAfterwardFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var FallthroughStatement = KSHelper.class({
		$name: "FallthroughStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var parent = this._parent;
			if(!(parent.isJumpable() === true)) {
				SyntaxException.throwIllegalStatement("fallthrough", this);
			}
			while(!KSType.isInstance(parent, SwitchStatement)) {
				parent = parent.parent();
				if(!(KSType.isValue(parent) ? parent.isJumpable() === true : false)) {
					SyntaxException.throwIllegalStatement("fallthrough", this);
				}
			}
			this._switch = parent;
			this._switch.flagUsingFallthrough();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FallthroughStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FallthroughStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FallthroughStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this._switch.toFallthroughFragments(fragments);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FallthroughStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ForFromStatement = KSHelper.class({
		$name: "ForFromStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._conditionalTempVariables = [];
			this._declaration = false;
			this._declared = false;
			this._immutable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForFromStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var rename = false;
			var variable = this._scope.getVariable(this._data.variable.name);
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			this._declared = this._declaration || (variable === null);
			if(this._declared) {
				this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			}
			else {
				this._bindingScope = this._scope;
			}
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._from = $compile.expression(this._data.from, this, this._scope);
			this._from.analyse();
			if(this._from.isUsingVariable(this._data.variable.name) === true) {
				if(this._declared) {
					rename = true;
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
				}
			}
			if(KSType.isValue(this._data.til)) {
				this._til = $compile.expression(this._data.til, this, this._scope);
				this._til.analyse();
				if(this._til.isUsingVariable(this._data.variable.name) === true) {
					if(this._declared) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			else {
				this._to = $compile.expression(this._data.to, this, this._scope);
				this._to.analyse();
				if(this._to.isUsingVariable(this._data.variable.name) === true) {
					if(this._declared) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this, this._scope);
				this._by.analyse();
				if(this._by.isUsingVariable(this._data.variable.name) === true) {
					if(this._declared) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			if(this._declared) {
				this._bindingScope.define(this._data.variable.name, this._immutable, this._bindingScope.reference("Number"), true, this);
				if(rename) {
					this._bindingScope.rename(this._data.variable.name);
				}
			}
			else if(variable.isImmutable() === true) {
				ReferenceException.throwImmutable(this._data.variable.name, this);
			}
			this._variable = $compile.expression(this._data.variable, this, this._bindingScope);
			this._variable.analyse();
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._declared) {
				this._bindingScope.replaceVariable(this._data.variable.name, this._bindingScope.reference("Number"), this);
			}
			this._variable.prepare();
			this._from.prepare();
			if(KSType.isValue(this._til)) {
				this._til.prepare();
				if(this._til.isComposite() === true) {
					this._boundName = this._bindingScope.acquireTempName(!this._declared);
				}
			}
			else {
				this._to.prepare();
				if(this._to.isComposite() === true) {
					this._boundName = this._bindingScope.acquireTempName(!this._declared);
				}
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite() === true) {
					this._byName = this._bindingScope.acquireTempName(!this._declared);
				}
			}
			this.assignTempVariables(this._bindingScope);
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._until, this);
				}
				this.assignTempVariables(this._bodyScope);
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._while, this);
				}
				this.assignTempVariables(this._bodyScope);
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._when, this);
				}
				this._bodyScope.commitTempVariables(this._conditionalTempVariables);
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._bindingScope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._bindingScope.releaseTempName(this._byName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._variable.translate();
			this._from.translate();
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else {
				this._to.translate();
			}
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return ForFromStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._from.isUsingVariable(name) === true) || (KSType.isValue(this._til) ? this._til.isUsingVariable(name) === true : false) || (KSType.isValue(this._to) ? this._to.isUsingVariable(name) === true : false) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ForFromStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._declared) {
				ctrl.code($runtime.scope(this));
			}
			ctrl.compile(this._variable).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code($comma, this._boundName, $equals).compile(KSType.isValue(this._til) ? this._til : this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			ctrl.compile(this._variable);
			var desc = ((KSType.isValue(this._data.by) ? KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value : false) && KSOperator.lt(this._data.by.value, 0)) || ((KSHelper.valueOf(this._data.from.kind) === NodeKind.NumericExpression.value) && (((KSType.isValue(this._data.to) ? KSHelper.valueOf(this._data.to.kind) === NodeKind.NumericExpression.value : false) && KSOperator.gt(this._data.from.value, this._data.to.value)) || ((KSType.isValue(this._data.til) ? KSHelper.valueOf(this._data.til.kind) === NodeKind.NumericExpression.value : false) && KSOperator.gt(this._data.from.value, this._data.til.value))));
			if(KSType.isValue(this._data.til)) {
				if(desc) {
					ctrl.code(" > ");
				}
				else {
					ctrl.code(" < ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._til);
			}
			else {
				if(desc) {
					ctrl.code(" >= ");
				}
				else {
					ctrl.code(" <= ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._to);
			}
			if(KSType.isValue(this._until)) {
				ctrl.code(" && !(").compileBoolean(this._until).code(")");
			}
			else if(KSType.isValue(this._while)) {
				ctrl.code(" && ").wrapBoolean(this._while);
			}
			ctrl.code("; ");
			if(KSType.isValue(this._data.by)) {
				if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._variable);
					}
					else if(this._data.by.value === -1) {
						ctrl.code("--").compile(this._variable);
					}
					else if(KSOperator.gte(this._data.by.value, 0)) {
						ctrl.compile(this._variable).code(" += ").compile(this._by);
					}
					else {
						ctrl.compile(this._variable).code(" -= ", KSOperator.negative(this._data.by.value));
					}
				}
				else {
					ctrl.compile(this._variable).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else if(desc) {
				ctrl.code("--").compile(this._variable);
			}
			else {
				ctrl.code("++").compile(this._variable);
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._data.when)) {
				this.toDeclarationFragments(this._conditionalTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForFromStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ForInStatement = KSHelper.class({
		$name: "ForInStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._bindingValue = null;
			this._conditionalTempVariables = [];
			this._declaration = false;
			this._declared = false;
			this._declaredVariables = [];
			this._declareIndex = false;
			this._declareValue = false;
			this._descending = false;
			this._fromDesc = false;
			this._immutable = false;
			this._index = null;
			this._loopTempVariables = [];
			this._useBreak = false;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForInStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Descending.value) {
					this._descending = true;
				}
			}
			if(KSType.isValue(this._data.index)) {
				var variable = this._bindingScope.getVariable(this._data.index.name);
				if(this._declaration || (variable === null)) {
					this._bindingScope.define(this._data.index.name, this._immutable, this._bindingScope.reference("Number"), true, this);
					this._declareIndex = true;
				}
				else if(variable.isImmutable() === true) {
					ReferenceException.throwImmutable(this._data.index.name, this);
				}
				this._index = $compile.expression(this._data.index, this, this._bindingScope);
				this._index.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this, this._bindingScope);
				this._value.setAssignment(AssignmentType.Expression);
				this._value.analyse();
				for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					var variable = this._scope.getVariable(name);
					if(this._declaration || (variable === null)) {
						this._declareValue = true;
						this._declaredVariables.push(this._bindingScope.define(name, this._immutable, AnyType.NullableUnexplicit, true, this));
					}
					else if(variable.isImmutable() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
			}
			var variables = [];
			this._expression = $compile.expression(this._data.expression, this, this._scope);
			this._expression.analyse();
			this.checkForRenamedVariables(this._expression, variables);
			if(KSType.isValue(this._data.from)) {
				this._from = $compile.expression(this._data.from, this, this._scope);
				this._from.analyse();
				this.checkForRenamedVariables(this._from, variables);
			}
			if(KSType.isValue(this._data.til)) {
				this._til = $compile.expression(this._data.til, this, this._scope);
				this._til.analyse();
				this.checkForRenamedVariables(this._til, variables);
			}
			else if(KSType.isValue(this._data.to)) {
				this._to = $compile.expression(this._data.to, this, this._scope);
				this._to.analyse();
				this.checkForRenamedVariables(this._to, variables);
			}
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this, this._scope);
				this._by.analyse();
				this.checkForRenamedVariables(this._by, variables);
			}
			for(var __ks_0 = 0, __ks_1 = variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = variables[__ks_0];
				this._bindingScope.rename(variable);
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
				this.checkForBreak(this._until);
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
				this.checkForBreak(this._while);
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
			this._fromDesc = (KSType.isValue(this._data.by) ? KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value : false) && KSOperator.lt(this._data.by.value, 0);
			if(this._descending && this._fromDesc) {
				this._descending = this._fromDesc = false;
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var type = this._expression.type();
			if(!((type.isAny() === true) || (type.isArray() === true))) {
				TypeException.throwInvalidForInExpression(this);
			}
			if(this._value !== null) {
				var parameterType = type.parameter();
				var valueType = Type.fromAST(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				var realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				if(this._declareValue) {
					this._value.type(realType, this._bindingScope, this);
				}
				else {
					if(KSType.isInstance(this._value, IdentifierLiteral)) {
						this._bindingScope.replaceVariable(this._value.name(), realType, this);
					}
					else {
						for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
							name = __ks_1[__ks_0];
							this._bindingScope.replaceVariable(name, realType.getProperty(name), this);
						}
					}
				}
			}
			if(this._index !== null) {
				if(!this._declareIndex) {
					this._bindingScope.replaceVariable(this._data.index.name, this._bindingScope.reference("Number"), this);
				}
				this._index.prepare();
			}
			else {
				this._indexName = this._bindingScope.acquireTempName(false);
			}
			if(this._expression.isLooseComposite() === true) {
				this._expressionName = this._bindingScope.acquireTempName(false);
			}
			this._boundName = this._bindingScope.acquireTempName(false);
			if((this._options.format.destructuring === "es5") && !KSType.isInstance(this._value, IdentifierLiteral)) {
				this._bindingValue = new TempMemberExpression(KSType.isValue(this._expressionName) ? this._expressionName : this._expression, KSType.isValue(this._indexName) ? this._indexName : this._index, true, this, this._bindingScope);
				this._bindingValue.acquireReusable(true);
			}
			if(KSType.isValue(this._from)) {
				this._from.prepare();
			}
			if(KSType.isValue(this._til)) {
				this._til.prepare();
			}
			else if(KSType.isValue(this._to)) {
				this._to.prepare();
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite() === true) {
					this._byName = this._bindingScope.acquireTempName(false);
				}
			}
			this.assignTempVariables(this._bindingScope);
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._until, this);
				}
				if(this._useBreak) {
					this._bodyScope.commitTempVariables(this._loopTempVariables);
				}
				else {
					this.assignTempVariables(this._bodyScope);
				}
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._while, this);
				}
				if(this._useBreak) {
					this._bodyScope.commitTempVariables(this._loopTempVariables);
				}
				else {
					this.assignTempVariables(this._bodyScope);
				}
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._when, this);
				}
				this._when.acquireReusable(false);
				this._when.releaseReusable();
				this._bodyScope.commitTempVariables(this._conditionalTempVariables);
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this._bindingScope.releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._indexName)) {
				this._bindingScope.releaseTempName(this._indexName);
			}
			this._bindingScope.releaseTempName(this._boundName);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._from)) {
				this._from.translate();
			}
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else if(KSType.isValue(this._to)) {
				this._to.translate();
			}
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkForBreak_0: function(expression) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(!this._useBreak && (this._value !== null)) {
				for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2 && !(this._useBreak); ++__ks_0) {
					variable = __ks_1[__ks_0];
					if(expression.isUsingVariable(variable) === true) {
						this._useBreak = true;
					}
				}
			}
		},
		checkForBreak: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_checkForBreak_0.apply(this, arguments);
			}
			else if(Statement.prototype.checkForBreak) {
				return Statement.prototype.checkForBreak.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkForRenamedVariables_0: function(expression, variables) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			else if(!KSType.isArray(variables)) {
				throw new TypeError("'variables' is not of type 'Array'");
			}
			if((this._index !== null) && (expression.isUsingVariable(this._data.index.name) === true)) {
				if(this._declareIndex) {
					__ks_Array._im_pushUniq(variables, this._data.index.name);
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.index.name, this);
				}
			}
			if(this._value !== null) {
				for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2; ++__ks_0) {
					variable = __ks_1[__ks_0];
					if(expression.isUsingVariable(variable) === true) {
						if(this._declareValue) {
							__ks_Array._im_pushUniq(variables, variable);
						}
						else {
							SyntaxException.throwAlreadyDeclared(variable, this);
						}
					}
				}
			}
		},
		checkForRenamedVariables: function() {
			if(arguments.length === 2) {
				return ForInStatement.prototype.__ks_func_checkForRenamedVariables_0.apply(this, arguments);
			}
			else if(Statement.prototype.checkForRenamedVariables) {
				return Statement.prototype.checkForRenamedVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._expression.isUsingVariable(name) === true) || (KSType.isValue(this._from) ? this._from.isUsingVariable(name) === true : false) || (KSType.isValue(this._til) ? this._til.isUsingVariable(name) === true : false) || (KSType.isValue(this._to) ? this._to.isUsingVariable(name) === true : false) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toBoundFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._descending) {
				if(KSType.isValue(this._from)) {
					if(KSType.isInstance(this._from, NumberLiteral) && KSOperator.lt(this._from.value(), 0)) {
						fragments.code("Math.max(0, ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + KSOperator.negative(this._from.value()) + ")");
					}
					else {
						fragments.compile(this._from);
					}
				}
				else {
					fragments.code("0");
				}
			}
			else {
				if(KSType.isValue(this._til)) {
					if(this._fromDesc) {
						fragments.compile(this._til);
					}
					else {
						if(KSType.isInstance(this._til, NumberLiteral) && KSOperator.lt(this._til.value(), 0)) {
							fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + KSOperator.negative(this._til.value()));
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._til).code(")");
						}
					}
				}
				else if(KSType.isValue(this._to)) {
					if(this._fromDesc) {
						fragments.compile(this._to);
					}
					else {
						if(KSType.isInstance(this._to, NumberLiteral)) {
							if(KSOperator.lt(this._to.value(), 0)) {
								fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + (KSOperator.negative(this._to.value()) - 1));
							}
							else {
								fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, " + KSOperator.addOrConcat(this._to.value(), 1) + ")");
							}
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._to).code(" + 1)");
						}
					}
				}
				else {
					if(this._fromDesc) {
						fragments.code("0");
					}
					else {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length");
					}
				}
			}
		},
		toBoundFragments: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_toBoundFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toBoundFragments) {
				return Statement.prototype.toBoundFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFromFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._descending) {
				if(KSType.isValue(this._til)) {
					if(KSType.isInstance(this._til, NumberLiteral) && KSOperator.lt(this._til.value(), 0)) {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + (KSOperator.negative(this._til.value()) + 1));
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._til).code(") - 1");
					}
				}
				else if(KSType.isValue(this._to)) {
					if(KSType.isInstance(this._to, NumberLiteral)) {
						if(KSOperator.lt(this._to.value(), 0)) {
							fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + KSOperator.negative(this._to.value()));
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1, " + this._to.value() + ")");
						}
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1, ").compile(this._to).code(")");
					}
				}
				else {
					fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1");
				}
			}
			else {
				if(this._fromDesc) {
					if(KSType.isValue(this._from)) {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1, ").compile(this._from).code(")");
					}
					else {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1");
					}
				}
				else {
					if(KSType.isValue(this._from)) {
						if(KSType.isInstance(this._from, NumberLiteral) && KSOperator.lt(this._from.value(), 0)) {
							fragments.code("Math.max(0, ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + KSOperator.negative(this._from.value()) + ")");
						}
						else {
							fragments.compile(this._from);
						}
					}
					else {
						fragments.code("0");
					}
				}
			}
		},
		toFromFragments: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_toFromFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toFromFragments) {
				return Statement.prototype.toFromFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl;
			if((this._index !== null) && !this._declaration && !this._declareIndex) {
				var line = fragments.newLine().compile(this._index).code($equals);
				this.toFromFragments(line);
				line.done();
				ctrl = fragments.newControl().code("for(", $runtime.scope(this));
			}
			else {
				ctrl = fragments.newControl().code("for(", $runtime.scope(this)).compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code($equals);
				this.toFromFragments(ctrl);
				ctrl.code($comma);
			}
			if(KSType.isValue(this._expressionName)) {
				ctrl.code(this._expressionName, $equals).compile(this._expression).code($comma);
			}
			ctrl.code(this._boundName, $equals);
			this.toBoundFragments(ctrl);
			if(this._declareValue) {
				for(var __ks_0 = 0, __ks_1 = this._declaredVariables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
					variable = this._declaredVariables[__ks_0];
					ctrl.code($comma).compile(variable);
				}
			}
			ctrl.code("; ");
			if(this._descending || this._fromDesc) {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" >= " + this._boundName);
			}
			else {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" < " + this._boundName);
			}
			if(!this._useBreak) {
				if(KSType.isValue(this._until)) {
					ctrl.code(" && !(").compileBoolean(this._until).code(")");
				}
				else if(KSType.isValue(this._while)) {
					ctrl.code(" && ").wrapBoolean(this._while);
				}
			}
			ctrl.code("; ");
			if(this._descending || this._fromDesc) {
				if(KSType.isValue(this._data.by)) {
					if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
						if(Math.abs(this._data.by.value) === 1) {
							ctrl.code("--").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
						}
						else {
							ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" -= ", Math.abs(this._data.by.value));
						}
					}
					else {
						ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" -= ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
					}
				}
				else {
					ctrl.code("--").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
				}
			}
			else {
				if(KSType.isValue(this._data.by)) {
					if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
						if(Math.abs(this._data.by.value) === 1) {
							ctrl.code("++").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
						}
						else {
							ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" += ", Math.abs(this._data.by.value));
						}
					}
					else {
						ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
					}
				}
				else {
					ctrl.code("++").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
				}
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._value)) {
				if(this._bindingValue === null) {
					ctrl.newLine().compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code("]").done();
				}
				else {
					var line = ctrl.newLine();
					this._value.toAssignmentFragments(line, this._bindingValue);
					line.done();
				}
				if(this._useBreak) {
					if(KSType.isValue(this._until)) {
						this.toDeclarationFragments(this._loopTempVariables, ctrl);
						ctrl.newControl().code("if(").compileBoolean(this._until).code(")").step().line("break").done();
					}
					else if(KSType.isValue(this._while)) {
						this.toDeclarationFragments(this._loopTempVariables, ctrl);
						ctrl.newControl().code("if(!(").compileBoolean(this._while).code("))").step().line("break").done();
					}
				}
			}
			if(KSType.isValue(this._when)) {
				this.toDeclarationFragments(this._conditionalTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForInStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ForOfStatement = KSHelper.class({
		$name: "ForOfStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._bindingValue = null;
			this._bleeding = false;
			this._conditionalTempVariables = [];
			this._declaration = false;
			this._defineKey = false;
			this._defineValue = false;
			this._key = null;
			this._immutable = false;
			this._loopTempVariables = [];
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForOfStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			if(KSType.isValue(this._data.key)) {
				var keyVariable = this._scope.getVariable(this._data.key.name);
				if(this._declaration || (keyVariable === null)) {
					this._bindingScope.define(this._data.key.name, this._immutable, this._bindingScope.reference("String"), true, this);
					this._defineKey = true;
				}
				else if(keyVariable.isImmutable() === true) {
					ReferenceException.throwImmutable(this._data.key.name, this);
				}
				this._key = $compile.expression(this._data.key, this, this._bindingScope);
				this._key.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this, this._bindingScope);
				this._value.setAssignment(AssignmentType.Expression);
				this._value.analyse();
				for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					var variable = this._bindingScope.getVariable(name);
					if(this._declaration || (variable === null)) {
						this._defineValue = true;
						this._bindingScope.define(name, this._immutable, AnyType.NullableUnexplicit, true, this);
					}
					else if(variable.isImmutable() === true) {
						ReferenceException.throwImmutable(name, this);
					}
				}
			}
			var variables = [];
			this._expression = $compile.expression(this._data.expression, this, this._scope);
			this._expression.analyse();
			this.checkForRenamedVariables(this._expression, variables);
			for(var __ks_0 = 0, __ks_1 = variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = variables[__ks_0];
				this._bindingScope.rename(variable);
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var type = this._expression.type();
			if(!((type.isAny() === true) || (type.isDictionary() === true) || (type.isObject() === true))) {
				TypeException.throwInvalidForOfExpression(this);
			}
			if(this._expression.isLooseComposite() === true) {
				this._expressionName = this._bindingScope.acquireTempName(false);
				this._bleeding = this._bindingScope.isBleeding();
			}
			if(this._value !== null) {
				var parameterType = type.parameter();
				var valueType = Type.fromAST(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				var realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				if(this._defineValue) {
					this._value.type(realType, this._bindingScope, this);
				}
				else {
					if(KSType.isInstance(this._value, IdentifierLiteral)) {
						this._bindingScope.replaceVariable(this._value.name(), realType, this);
					}
					else {
						for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
							name = __ks_1[__ks_0];
							this._bindingScope.replaceVariable(name, realType.getProperty(name), this);
						}
					}
				}
			}
			if(this._key !== null) {
				if(!this._defineKey) {
					this._bindingScope.replaceVariable(this._data.key.name, this._bindingScope.reference("String"), this);
				}
				this._key.prepare();
			}
			else {
				this._keyName = this._bindingScope.acquireTempName(false);
			}
			if((this._options.format.destructuring === "es5") && !KSType.isInstance(this._value, IdentifierLiteral)) {
				this._bindingValue = new TempMemberExpression(KSType.isValue(this._expressionName) ? this._expressionName : this._expression, KSType.isValue(this._key) ? this._key : this._keyName, true, this, this._bindingScope);
				this._bindingValue.acquireReusable(true);
			}
			this.assignTempVariables(this._bindingScope);
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._until, this);
				}
				this._bodyScope.commitTempVariables(this._loopTempVariables);
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._while, this);
				}
				this._bodyScope.commitTempVariables(this._loopTempVariables);
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._when, this);
				}
				this._bodyScope.commitTempVariables(this._conditionalTempVariables);
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this._bindingScope.releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._keyName)) {
				this._bindingScope.releaseTempName(this._keyName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkForRenamedVariables_0: function(expression, variables) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			else if(!KSType.isArray(variables)) {
				throw new TypeError("'variables' is not of type 'Array'");
			}
			if((this._key !== null) && (expression.isUsingVariable(this._data.key.name) === true)) {
				if(this._defineKey) {
					__ks_Array._im_pushUniq(variables, this._data.key.name);
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.key.name, this);
				}
			}
			if(this._value !== null) {
				for(var __ks_0 = 0, __ks_1 = this._value.listAssignments([]), __ks_2 = __ks_1.length, variable; __ks_0 < __ks_2; ++__ks_0) {
					variable = __ks_1[__ks_0];
					if(expression.isUsingVariable(variable) === true) {
						if(this._defineValue) {
							__ks_Array._im_pushUniq(variables, variable);
						}
						else {
							SyntaxException.throwAlreadyDeclared(variable, this);
						}
					}
				}
			}
		},
		checkForRenamedVariables: function() {
			if(arguments.length === 2) {
				return ForOfStatement.prototype.__ks_func_checkForRenamedVariables_0.apply(this, arguments);
			}
			else if(Statement.prototype.checkForRenamedVariables) {
				return Statement.prototype.checkForRenamedVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return ForOfStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._expression.isUsingVariable(name) === true) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ForOfStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._expressionName)) {
				if(this._bleeding) {
					fragments.newLine().code($runtime.scope(this), this._expressionName, $equals).compile(this._expression).done();
					this.toLoopFragments(fragments, mode);
				}
				else {
					var block = fragments.newBlock();
					block.newLine().code($runtime.scope(this), this._expressionName, $equals).compile(this._expression).done();
					this.toLoopFragments(block, mode);
					block.done();
				}
			}
			else {
				this.toLoopFragments(fragments, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForOfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toLoopFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._key !== null) {
				if(this._declaration || this._defineKey) {
					if(this._options.format.variables === "es5") {
						ctrl.code("var ");
					}
					else if(this._immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				ctrl.compile(this._key);
			}
			else {
				ctrl.code($runtime.scope(this), this._keyName);
			}
			ctrl.code(" in ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(")").step();
			if(this._value !== null) {
				var line = ctrl.newLine();
				if(this._declaration || this._defineValue) {
					if(this._options.format.variables === "es5") {
						line.code("var ");
					}
					else if(this._immutable) {
						line.code("const ");
					}
					else {
						line.code("let ");
					}
				}
				if(this._bindingValue === null) {
					line.compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._key) ? this._key : this._keyName).code("]");
				}
				else {
					this._value.toAssignmentFragments(line, this._bindingValue);
				}
				line.done();
			}
			if(KSType.isValue(this._until)) {
				this.toDeclarationFragments(this._loopTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._until).code(")").step().line("break").done();
			}
			else if(KSType.isValue(this._while)) {
				this.toDeclarationFragments(this._loopTempVariables, ctrl);
				ctrl.newControl().code("if(!(").compileBoolean(this._while).code("))").step().line("break").done();
			}
			if(KSType.isValue(this._when)) {
				this.toDeclarationFragments(this._conditionalTempVariables, ctrl);
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toLoopFragments: function() {
			if(arguments.length === 2) {
				return ForOfStatement.prototype.__ks_func_toLoopFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toLoopFragments) {
				return Statement.prototype.toLoopFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ForRangeStatement = KSHelper.class({
		$name: "ForRangeStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._declaration = false;
			this._defineVariable = false;
			this._immutable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForRangeStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Declarative.value) {
					this._declaration = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
				}
			}
			var variable = this._scope.getVariable(this._data.value.name);
			if(this._declaration || (variable === null)) {
				this._bindingScope.define(this._data.value.name, this._immutable, this._bindingScope.reference("Number"), true, this);
				this._defineVariable = true;
			}
			else if(variable.isImmutable() === true) {
				ReferenceException.throwImmutable(this._data.value.name, this);
			}
			this._value = $compile.expression(this._data.value, this, this._bindingScope);
			this._value.analyse();
			this._from = $compile.expression(this._data.from, this, this._scope);
			this._from.analyse();
			this._to = $compile.expression(this._data.to, this, this._scope);
			this._to.analyse();
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this, this._scope);
				this._by.analyse();
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this, this._bodyScope);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this, this._bodyScope);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this, this._bodyScope);
				this._when.analyse();
			}
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._defineVariable) {
				this._bindingScope.replaceVariable(this._data.value.name, this._bindingScope.reference("Number"), this);
			}
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(this._to.isComposite() === true) {
				this._boundName = this._bindingScope.acquireTempName();
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite() === true) {
					this._byName = this._bindingScope.acquireTempName();
				}
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
				if(!(this._until.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._until, this);
				}
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
				if(!(this._while.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._while, this);
				}
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				if(!(this._when.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._when, this);
				}
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._bindingScope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._bindingScope.releaseTempName(this._byName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return ForRangeStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false) || (KSType.isValue(this._until) ? this._until.isUsingVariable(name) === true : false) || (KSType.isValue(this._while) ? this._while.isUsingVariable(name) === true : false) || (KSType.isValue(this._when) ? this._when.isUsingVariable(name) === true : false) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ForRangeStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._defineVariable) {
				ctrl.code($runtime.scope(this));
			}
			ctrl.compile(this._value).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code(this._boundName, $equals).compile(this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ").compile(this._value).code(" <= ").compile(KSType.isValue(this._boundName) ? this._boundName : this._to);
			if(KSType.isValue(this._until)) {
				ctrl.code(" && !(").compileBoolean(this._until).code(")");
			}
			else if(KSType.isValue(this._while)) {
				ctrl.code(" && ").wrapBoolean(this._while);
			}
			ctrl.code("; ");
			if(KSType.isValue(this._data.by)) {
				if(KSHelper.valueOf(this._data.by.kind) === NodeKind.NumericExpression.value) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._value);
					}
					else {
						ctrl.compile(this._value).code(" += ").compile(this._by);
					}
				}
				else {
					ctrl.compile(this._value).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else {
				ctrl.code("++").compile(this._value);
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._when)) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForRangeStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var $function = (function() {
		var d = new Dictionary();
		d.surround = function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var parent = node._parent;
			while(KSType.isValue(parent) && !(KSType.isInstance(parent, ClassMethodDeclaration) || KSType.isInstance(parent, ImplementClassMethodDeclaration))) {
				parent = parent.parent();
			}
			if(KSType.isValue(parent) ? parent._instance === true : false) {
				if($function.useThisVariable(node._data.body, node) === true) {
					if(node._options.format.functions === "es5") {
						return (function() {
							var d = new Dictionary();
							d.arrow = false;
							d.beforeParameters = "" + $runtime.helper(node) + ".vcurry(function(";
							d.afterParameters = ")";
							d.footer = ", this)";
							return d;
						})();
					}
					else {
						return (function() {
							var d = new Dictionary();
							d.arrow = true;
							d.beforeParameters = "(";
							d.afterParameters = ") =>";
							d.footer = "";
							return d;
						})();
					}
				}
				else {
					return (function() {
						var d = new Dictionary();
						d.arrow = false;
						d.beforeParameters = "function(";
						d.afterParameters = ")";
						d.footer = "";
						return d;
					})();
				}
			}
			else {
				return (function() {
					var d = new Dictionary();
					d.arrow = false;
					d.beforeParameters = "function(";
					d.afterParameters = ")";
					d.footer = "";
					return d;
				})();
			}
		};
		d.useThisVariable = function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === NodeKind.ArrayExpression.value) {
				for(var __ks_1 = 0, __ks_2 = data.values.length, value; __ks_1 < __ks_2; ++__ks_1) {
					value = data.values[__ks_1];
					if($function.useThisVariable(value, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.BinaryExpression.value) {
				if(($function.useThisVariable(data.left, node) === true) || ($function.useThisVariable(data.right, node) === true)) {
					return true;
				}
			}
			else if(__ks_0 === NodeKind.Block.value) {
				for(var __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = data.statements[__ks_1];
					if($function.useThisVariable(statement, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.CallExpression.value) {
				if($function.useThisVariable(data.callee, node) === true) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
					arg = data.arguments[__ks_1];
					if($function.useThisVariable(arg, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.ComparisonExpression.value) {
				for(var __ks_1 = 0, __ks_2 = data.values.length, operand; __ks_1 < __ks_2; __ks_1 += 2) {
					operand = data.values[__ks_1];
					if($function.useThisVariable(operand, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.CreateExpression.value) {
				if($function.useThisVariable(data.class, node) === true) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
					arg = data.arguments[__ks_1];
					if($function.useThisVariable(arg, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.EnumExpression.value) {
				return false;
			}
			else if(__ks_0 === NodeKind.Identifier.value) {
				return data.name === "this";
			}
			else if(__ks_0 === NodeKind.IfStatement.value) {
				if(($function.useThisVariable(data.condition, node) === true) || ($function.useThisVariable(data.whenTrue, node) === true)) {
					return true;
				}
				if(KSType.isValue(data.whenFalse) && ($function.useThisVariable(data.whenFalse, node) === true)) {
					return true;
				}
			}
			else if(__ks_0 === NodeKind.Literal.value) {
				return false;
			}
			else if(__ks_0 === NodeKind.MemberExpression.value) {
				return $function.useThisVariable(data.object, node);
			}
			else if(__ks_0 === NodeKind.NumericExpression.value) {
				return false;
			}
			else if(__ks_0 === NodeKind.ObjectExpression.value) {
				for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					if($function.useThisVariable(property.value, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.PolyadicExpression.value) {
				for(var __ks_1 = 0, __ks_2 = data.operands.length, operand; __ks_1 < __ks_2; ++__ks_1) {
					operand = data.operands[__ks_1];
					if($function.useThisVariable(operand, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.ReturnStatement.value) {
				return $function.useThisVariable(data.value, node);
			}
			else if(__ks_0 === NodeKind.TemplateExpression.value) {
				for(var __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
					element = data.elements[__ks_1];
					if($function.useThisVariable(element, node) === true) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.ThisExpression.value) {
				return true;
			}
			else if(__ks_0 === NodeKind.ThrowStatement.value) {
				return $function.useThisVariable(data.value, node);
			}
			else if(__ks_0 === NodeKind.UnaryExpression.value) {
				return $function.useThisVariable(data.argument, node);
			}
			else if(__ks_0 === NodeKind.VariableDeclaration.value) {
				return KSType.isValue(data.init) && ($function.useThisVariable(data.init, node) === true);
			}
			else {
				throw new NotImplementedException("Unknow kind " + data.kind, node);
			}
			return false;
		};
		return d;
	})();
	var FunctionDeclaration = KSHelper.class({
		$name: "FunctionDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._extended = false;
			this._main = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			FunctionDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getDefinedVariable(this._name)) ? (this._variable = __ks_0, true) : false) {
				if(KSType.isInstance(this._variable, FunctionVariable)) {
					var declarator = new FunctionDeclarator(this._variable, this._data, this);
					declarator.analyse();
				}
				else {
					this._scope.addStash(this._name, (function(variable) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var type = variable.getRealType();
						if(type.isFunction() === true) {
							this._main = true;
							this._extended = true;
							this._variable = new FunctionVariable(this._scope, this._name, true);
							this._variable.getRealType().addFunction(type);
							this._scope.replaceVariable(this._name, this._variable);
							this._oldVariableName = this._scope.getNewName(this._name);
						}
						else {
							SyntaxException.throwNotOverloadableFunction(this._name, this);
						}
						return true;
					}).bind(this), (function(variable) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						this._variable = variable;
						var declarator = new FunctionDeclarator(this._variable, this._data, this);
						declarator.analyse();
					}).bind(this));
				}
			}
			else {
				this._main = true;
				this._variable = new FunctionVariable(this._scope, this._name, false);
				this._scope.defineVariable(this._variable, this);
				var declarator = new FunctionDeclarator(this._variable, this._data, this);
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._main || (this._scope.processStash(this._name) === true)) {
				this._variable.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._main) {
				this._variable.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return FunctionDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(!this._main) {
				return;
			}
			if(this._extended) {
				fragments.line($const(this), this._oldVariableName, $equals, this._name);
				var assessment = Router.assess(KSHelper.mapArray(this._variable._declarators, function(declarator) {
					return declarator.type();
				}), true);
				Router.toFragments(assessment, fragments.newLine(), "arguments", false, (function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("function " + this._name + "()").newBlock();
				}).bind(this), function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.done();
				}, (function(fragments, method, index) {
					if(arguments.length < 3) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(method === void 0 || method === null) {
						throw new TypeError("'method' is not nullable");
					}
					if(index === void 0 || index === null) {
						throw new TypeError("'index' is not nullable");
					}
					var declarator = this._variable.getDeclarator(index);
					declarator.toRouterFragments(fragments, (function(fragments, wrongdoing, data) {
						if(arguments.length < 3) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(wrongdoing === void 0 || wrongdoing === null) {
							throw new TypeError("'wrongdoing' is not nullable");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(this._options.format.spreads === "es5") {
							fragments.line("return " + this._oldVariableName + ".apply(null, arguments)");
						}
						else {
							fragments.line("return " + this._oldVariableName + "(...arguments)");
						}
					}).bind(this));
					return false;
				}).bind(this), (function(block, ctrl, async, returns) {
					if(arguments.length < 4) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
					}
					if(block === void 0 || block === null) {
						throw new TypeError("'block' is not nullable");
					}
					if(ctrl === void 0 || ctrl === null) {
						throw new TypeError("'ctrl' is not nullable");
					}
					if(async === void 0 || async === null) {
						throw new TypeError("'async' is not nullable");
					}
					if(returns === void 0 || returns === null) {
						throw new TypeError("'returns' is not nullable");
					}
					if(this._options.format.spreads === "es5") {
						ctrl.step().code("else").step().line("return " + this._oldVariableName + ".apply(null, arguments)").done();
					}
					else {
						ctrl.step().code("else").step().line("return " + this._oldVariableName + "(...arguments)").done();
					}
				}).bind(this), this).done();
			}
			else if(this._variable.length() === 1) {
				this._variable.getDeclarator(0).toStatementFragments(fragments, this._name, mode);
			}
			else {
				var assessment = this.type().assessment();
				if(assessment.flattenable === true) {
					Router.toFragments(assessment, fragments.newLine(), "arguments", false, (function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code("function " + this._name + "()").newBlock();
					}).bind(this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}, (function(fragments, method, index) {
						if(arguments.length < 3) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(method === void 0 || method === null) {
							throw new TypeError("'method' is not nullable");
						}
						if(index === void 0 || index === null) {
							throw new TypeError("'index' is not nullable");
						}
						var declarator = this._variable.getDeclarator(index);
						declarator.toRouterFragments(fragments, Parameter.toWrongDoingFragments);
						return declarator.isExit();
					}).bind(this), ClassDeclaration.toWrongDoingFragments, this).done();
				}
				else {
					this._variable.toStatementFragments(fragments, mode);
					Router.toFragments(assessment, fragments.newLine(), "arguments", false, (function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code("function " + this._name + "()").newBlock();
					}).bind(this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}, (function(fragments, method, index) {
						if(arguments.length < 3) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(method === void 0 || method === null) {
							throw new TypeError("'method' is not nullable");
						}
						if(index === void 0 || index === null) {
							throw new TypeError("'index' is not nullable");
						}
						var name = this._variable.getDeclaratorName(index);
						if(this._options.format.spreads === "es5") {
							fragments.line("return " + name + ".apply(null, arguments)");
						}
						else {
							fragments.line("return " + name + "(...arguments)");
						}
						return false;
					}).bind(this), ClassDeclaration.toWrongDoingFragments, this).done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._variable.getDeclaredType();
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(this._main) {
				fn(this._name, this._variable.getDeclaredType());
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return FunctionDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FunctionDeclarator = KSHelper.class({
		$name: "FunctionDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
			this._parameters = [];
			this._returnNull = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			FunctionDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(variable, data, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, FunctionVariable)) {
				throw new TypeError("'variable' is not of type 'FunctionVariable'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, parent.scope(), ScopeType.Function]);
			this._variable = variable;
			variable.addDeclarator(this);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._offset = this._scope.module().getLineOffset();
			this._scope.define("this", true, Type.Any, this);
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._scope.module().setLineOffset(this._offset);
			this._scope.line(this._data.start.line);
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new FunctionType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._scope.module().setLineOffset(this._offset);
			this._scope.line(this._data.start.line);
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._returnNull = (KSHelper.valueOf(this._data.body.kind) === NodeKind.IfStatement.value) || (KSHelper.valueOf(this._data.body.kind) === NodeKind.UnlessStatement.value);
			this._block = $compile.block($ast.body(this._data), this);
			this._block.analyse();
			this._block.type(this._type.returnType()).prepare();
			this._block.translate();
			this._awaiting = this._block.isAwait();
			this._exit = this._block.isExit();
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._awaiting;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(AbstractNode.prototype.isExit) {
				return AbstractNode.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return FunctionDeclarator.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return AbstractNode.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstanceMethod) {
				return AbstractNode.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isJumpable_0: function() {
			return false;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_isJumpable_0.apply(this);
			}
			else if(AbstractNode.prototype.isJumpable) {
				return AbstractNode.prototype.isJumpable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(AbstractNode.prototype.parameters) {
				return AbstractNode.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			var ctrl = block.newControl().code("if(__ks_e)").step().line("__ks_cb(__ks_e)").step().code("else").step();
			var index = -1;
			var item;
			for(var i = 0, __ks_0 = statements.length, statement; i < __ks_0 && (index === -1); ++i) {
				statement = statements[i];
				var __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return FunctionDeclarator.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAwaitExpressionFragments) {
				return AbstractNode.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toRouterFragments_0: function(fragments, wrongdoer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			Parameter.toFragments(this, fragments, ParameterMode.OverloadedFunction, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments;
			}, wrongdoer);
			fragments.compile(this._block, Mode.None);
			if(!this._exit) {
				if(!this._awaiting && (this._type.isAsync() === true)) {
					fragments.line("__ks_cb()");
				}
				else if(this._returnNull) {
					fragments.line("return null");
				}
			}
		},
		toRouterFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclarator.prototype.__ks_func_toRouterFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toRouterFragments) {
				return AbstractNode.prototype.toRouterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, name, mode) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("function " + name + "(");
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(")").step();
			});
			ctrl.compile(this._block, Mode.None);
			if(!this._exit) {
				if(!this._awaiting && (this._type.isAsync() === true)) {
					ctrl.line("__ks_cb()");
				}
				else if(this._returnNull) {
					ctrl.line("return null");
				}
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 3) {
				return FunctionDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FunctionVariable = KSHelper.class({
		$name: "FunctionVariable",
		$extends: Variable,
		__ks_init_1: function() {
			this._async = false;
			this._extended = false;
			this._declarators = [];
		},
		__ks_init: function() {
			Variable.prototype.__ks_init.call(this);
			FunctionVariable.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, name, extended) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(extended === void 0 || extended === null) {
				throw new TypeError("'extended' is not nullable");
			}
			else if(!KSType.isBoolean(extended)) {
				throw new TypeError("'extended' is not of type 'Boolean'");
			}
			Variable.prototype.__ks_cons.call(this, [name, true, false, new OverloadedFunctionType(scope)]);
			this._extended = extended;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionVariable.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_prepare_0: function() {
			if(this._extended) {
				var type;
				for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
					declarator = this._declarators[__ks_0];
					declarator.prepare();
					type = declarator.type();
					if(type.isAsync() !== this._async) {
						SyntaxException.throwMixedOverloadedFunction(declarator);
					}
					else if(this._declaredType.hasFunction(type) === true) {
						SyntaxException.throwIdenticalFunction(this._name, declarator);
					}
					this._declaredType.addFunction(type);
				}
			}
			else if(this._declarators.length === 1) {
				this._declarators[0].prepare();
				this.setDeclaredType(this._declarators[0].type());
			}
			else {
				var declarator = this._declarators[0];
				declarator.prepare();
				var type = declarator.type();
				this._declaredType.addFunction(type);
				var async = type.isAsync();
				for(var __ks_0 = 1, __ks_1 = this._declarators.length; __ks_0 < __ks_1; ++__ks_0) {
					declarator = this._declarators[__ks_0];
					declarator.prepare();
					type = declarator.type();
					if(type.isAsync() !== async) {
						SyntaxException.throwMixedOverloadedFunction(declarator);
					}
					else if(this._declaredType.hasFunction(type) === true) {
						SyntaxException.throwIdenticalFunction(this._name, declarator);
					}
					this._declaredType.addFunction(type);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionVariable.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Variable.prototype.prepare) {
				return Variable.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionVariable.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Variable.prototype.translate) {
				return Variable.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addDeclarator_0: function(declarator) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(declarator === void 0 || declarator === null) {
				throw new TypeError("'declarator' is not nullable");
			}
			else if(!KSType.isInstance(declarator, FunctionDeclarator)) {
				throw new TypeError("'declarator' is not of type 'FunctionDeclarator'");
			}
			this._declarators.push(declarator);
		},
		addDeclarator: function() {
			if(arguments.length === 1) {
				return FunctionVariable.prototype.__ks_func_addDeclarator_0.apply(this, arguments);
			}
			else if(Variable.prototype.addDeclarator) {
				return Variable.prototype.addDeclarator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDeclarator_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			return this._declarators[index];
		},
		getDeclarator: function() {
			if(arguments.length === 1) {
				return FunctionVariable.prototype.__ks_func_getDeclarator_0.apply(this, arguments);
			}
			else if(Variable.prototype.getDeclarator) {
				return Variable.prototype.getDeclarator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDeclaratorName_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			return "__ks_" + this._name + "_" + index;
		},
		getDeclaratorName: function() {
			if(arguments.length === 1) {
				return FunctionVariable.prototype.__ks_func_getDeclaratorName_0.apply(this, arguments);
			}
			else if(Variable.prototype.getDeclaratorName) {
				return Variable.prototype.getDeclaratorName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_length_0: function() {
			return this._declarators.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return FunctionVariable.prototype.__ks_func_length_0.apply(this);
			}
			else if(Variable.prototype.length) {
				return Variable.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
				declarator = this._declarators[index];
				declarator.toStatementFragments(fragments, "__ks_" + this._name + "_" + index, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FunctionVariable.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Variable.prototype.toStatementFragments) {
				return Variable.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var IfStatement = KSHelper.class({
		$name: "IfStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._cascade = false;
			this._declared = false;
			this._whenFalseExpression = null;
			this._whenFalseScope = null;
			this._whenTrueExpression = null;
			this._whenTrueScope = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IfStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSHelper.valueOf(this._data.condition.kind) === NodeKind.VariableDeclaration.value) {
				this._declared = true;
				this._bindingScope = this.newScope(this._scope, ScopeType.Bleeding);
				this._variable = new VariableDeclaration(this._data.condition, this, this._bindingScope, this._scope);
				this._variable.analyse();
				this._whenTrueScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			}
			else {
				this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
				this._whenTrueScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
				this._condition = $compile.expression(this._data.condition, this, this._bindingScope);
				this._condition.analyse();
			}
			this._scope.line(this._data.whenTrue.start.line);
			this._whenTrueExpression = $compile.block(this._data.whenTrue, this, this._whenTrueScope);
			this._whenTrueExpression.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				this._whenFalseScope = this.newScope(this._scope, ScopeType.InlineBlock);
				this._scope.line(this._data.whenFalse.start.line);
				if(KSHelper.valueOf(this._data.whenFalse.kind) === NodeKind.IfStatement.value) {
					this._whenFalseExpression = $compile.statement(this._data.whenFalse, this, this._whenFalseScope);
					this._whenFalseExpression.setCascade(true);
					this._whenFalseExpression.analyse();
				}
				else {
					this._whenFalseExpression = $compile.block(this._data.whenFalse, this, this._whenFalseScope);
					this._whenFalseExpression.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._declared) {
				this._variable.prepare();
				var variable = this._variable.getIdentifierVariable();
				if(KSType.isValue(variable)) {
					variable.setRealType(variable.getRealType().setNullable(false));
				}
			}
			else {
				this._condition.prepare();
				if(!(this._condition.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._condition, this);
				}
				var __ks_0 = this._condition.inferWhenTrueTypes(new Dictionary());
				for(var name in __ks_0) {
					var data = __ks_0[name];
					this._whenTrueScope.updateInferable(name, data, this);
				}
				if(this._whenFalseExpression !== null) {
					var __ks_0 = this._condition.inferWhenFalseTypes(new Dictionary());
					for(var name in __ks_0) {
						var data = __ks_0[name];
						this._whenFalseScope.updateInferable(name, data, this);
					}
				}
				this._condition.acquireReusable(false);
				this._condition.releaseReusable();
			}
			this.assignTempVariables(this._bindingScope);
			this._scope.line(this._data.whenTrue.start.line);
			this._whenTrueExpression.prepare();
			if(this._whenFalseExpression === null) {
				this._scope.line(this._data.end.line);
				if(!this._declared) {
					if(this._whenTrueExpression.isExit() === true) {
						var __ks_0 = this._condition.inferWhenFalseTypes(new Dictionary());
						for(var name in __ks_0) {
							var data = __ks_0[name];
							this._scope.updateInferable(name, data, this);
						}
					}
					else {
						var conditionInferables = this._condition.inferWhenFalseTypes(new Dictionary());
						var trueInferables = this._whenTrueScope.listUpdatedInferables();
						var __ks_0;
						for(var name in trueInferables) {
							if(KSType.isValue(conditionInferables[name])) {
								var conditionType = conditionInferables[name].type;
								var trueType = trueInferables[name].type;
								if(trueType.equals(conditionType) === true) {
									this._scope.updateInferable(name, trueInferables[name], this);
								}
								else {
									this._scope.updateInferable(name, (function(that) {
										var d = new Dictionary();
										d.isVariable = trueInferables[name].isVariable;
										d.type = Type.union(that._scope, trueType, conditionType);
										return d;
									})(this), this);
								}
							}
						}
					}
				}
			}
			else {
				if(!this._declared) {
					var __ks_0 = this._condition.inferWhenFalseTypes(new Dictionary());
					for(var name in __ks_0) {
						var data = __ks_0[name];
						this._whenFalseScope.updateInferable(name, data, this);
					}
				}
				this._scope.line(this._data.whenFalse.start.line);
				this._whenFalseExpression.prepare();
				this._scope.line(this._data.end.line);
				if(this._whenTrueExpression.isExit() === true) {
					var __ks_0 = this._whenFalseScope.listUpdatedInferables();
					for(var name in __ks_0) {
						var data = __ks_0[name];
						this._scope.updateInferable(name, data, this);
					}
				}
				else if(this._whenFalseExpression.isExit() === true) {
					var __ks_0 = this._whenTrueScope.listUpdatedInferables();
					for(var name in __ks_0) {
						var data = __ks_0[name];
						this._scope.updateInferable(name, data, this);
					}
				}
				else {
					var trueInferables = this._whenTrueScope.listUpdatedInferables();
					var falseInferables = this._whenFalseScope.listUpdatedInferables();
					var __ks_0;
					for(var name in trueInferables) {
						if(KSType.isValue(falseInferables[name])) {
							var trueType = trueInferables[name].type;
							var falseType = falseInferables[name].type;
							if(trueType.equals(falseType) === true) {
								this._scope.updateInferable(name, trueInferables[name], this);
							}
							else {
								this._scope.updateInferable(name, (function(that) {
									var d = new Dictionary();
									d.isVariable = trueInferables[name].isVariable;
									d.type = Type.union(that._scope, trueType, falseType);
									return d;
								})(this), this);
							}
						}
					}
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._declared) {
				this._variable.translate();
			}
			else {
				this._condition.translate();
			}
			this._whenTrueExpression.translate();
			KSType.isValue(this._whenFalseExpression) ? this._whenFalseExpression.translate() : null;
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addAssignments_0: function(variables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			if(this._cascade) {
				this._parent.addAssignments(variables);
			}
			else if(this._declared) {
				for(var __ks_0 = 0, __ks_1 = variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
					variable = variables[__ks_0];
					if(!(this._variable.isDeclararingVariable(variable) === true)) {
						__ks_Array._im_pushUniq(this._assignments, variable);
					}
				}
			}
			else {
				__ks_Array._im_pushUniq.apply(null, [this._assignments].concat(variables));
			}
		},
		addAssignments: function() {
			if(arguments.length === 1) {
				return IfStatement.prototype.__ks_func_addAssignments_0.apply(this, arguments);
			}
			return Statement.prototype.addAssignments.apply(this, arguments);
		},
		__ks_func_assignments_0: function() {
			if(KSType.isInstance(this._whenFalseExpression, IfStatement)) {
				return [].concat(this._assignments, this._whenFalseExpression.assignments());
			}
			else {
				return this._assignments;
			}
		},
		assignments: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_assignments_0.apply(this);
			}
			return Statement.prototype.assignments.apply(this, arguments);
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._whenTrueExpression.checkReturnType(type);
			KSType.isValue(this._whenFalseExpression) ? this._whenFalseExpression.checkReturnType(type) : null;
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return IfStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isCascade_0: function() {
			return this._cascade;
		},
		isCascade: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_isCascade_0.apply(this);
			}
			return Statement.prototype.isCascade.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return KSType.isValue(this._whenFalseExpression) && (this._whenTrueExpression.isExit() === true) && (this._whenFalseExpression.isExit() === true);
		},
		isExit: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._declared) {
				if(this._variable.isUsingVariable(name) === true) {
					return true;
				}
			}
			else {
				if(this._condition.isUsingVariable(name) === true) {
					return true;
				}
			}
			if(this._whenTrueExpression.isUsingVariable(name) === true) {
				return true;
			}
			return (this._whenFalseExpression !== null) && (this._whenFalseExpression.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return IfStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_setCascade_0: function(cascade) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(cascade === void 0 || cascade === null) {
				throw new TypeError("'cascade' is not nullable");
			}
			else if(!KSType.isBoolean(cascade)) {
				throw new TypeError("'cascade' is not of type 'Boolean'");
			}
			this._cascade = cascade;
		},
		setCascade: function() {
			if(arguments.length === 1) {
				return IfStatement.prototype.__ks_func_setCascade_0.apply(this, arguments);
			}
			else if(Statement.prototype.setCascade) {
				return Statement.prototype.setCascade.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._declared) {
				fragments.compile(this._variable);
				var ctrl = fragments.newControl();
				this.toIfFragments(ctrl, mode);
				ctrl.done();
			}
			else {
				var ctrl = fragments.newControl();
				this.toIfFragments(ctrl, mode);
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toIfFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("if(");
			if(this._declared) {
				if(this._cascade) {
					var first = true;
					this._variable.walk((function(name) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(name === void 0 || name === null) {
							throw new TypeError("'name' is not nullable");
						}
						if(first) {
							fragments.code(KSHelper.concatString($runtime.type(this), ".isValue(("));
							this._variable.toInlineFragments(fragments, mode);
							fragments.code("))");
							first = false;
						}
						else {
							fragments.code(KSHelper.concatString(" && ", $runtime.type(this), ".isValue("), name, ")");
						}
					}).bind(this));
				}
				else {
					var first = true;
					this._variable.walk((function(name) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(name === void 0 || name === null) {
							throw new TypeError("'name' is not nullable");
						}
						if(first) {
							first = false;
						}
						else {
							fragments.code(" && ");
						}
						fragments.code(KSHelper.concatString($runtime.type(this), ".isValue("), name, ")");
					}).bind(this));
				}
			}
			else {
				fragments.compileBoolean(this._condition);
			}
			fragments.code(")").step();
			fragments.compile(this._whenTrueExpression, mode);
			if(KSType.isValue(this._whenFalseExpression)) {
				if(KSType.isInstance(this._whenFalseExpression, IfStatement)) {
					fragments.step().code("else ");
					this._whenFalseExpression.toIfFragments(fragments, mode);
				}
				else {
					fragments.step().code("else").step();
					fragments.compile(this._whenFalseExpression, mode);
				}
			}
		},
		toIfFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toIfFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toIfFragments) {
				return Statement.prototype.toIfFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImplementDeclaration = KSHelper.class({
		$name: "ImplementDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._properties = [];
			this._sharingProperties = new Dictionary();
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._data.variable.name)) ? (this._variable = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(this._data.variable.name, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepareAlteration();
			this._type = this._variable.getDeclaredType();
			if(!KSType.isInstance(this._type, NamedType)) {
				TypeException.throwImplInvalidType(this);
			}
			var type = this._type.type();
			if(KSType.isInstance(type, ClassType)) {
				for(var __ks_0 = 0, __ks_1 = this._data.properties.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.properties[__ks_0];
					var property;
					var __ks_2 = data.kind.valueOf();
					if(__ks_2 === NodeKind.FieldDeclaration.value) {
						property = new ImplementClassFieldDeclaration(data, this, this._type);
					}
					else if(__ks_2 === NodeKind.MethodDeclaration.value) {
						if(type.isConstructor(data.name.name) === true) {
							property = new ImplementClassConstructorDeclaration(data, this, this._type);
						}
						else if(type.isDestructor(data.name.name) === true) {
							NotImplementedException.throw(this);
						}
						else {
							property = new ImplementClassMethodDeclaration(data, this, this._type);
						}
					}
					else {
						throw new NotSupportedException("Unexpected kind " + data.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else if(KSType.isInstance(type, NamespaceType)) {
				for(var __ks_0 = 0, __ks_1 = this._data.properties.length, data; __ks_0 < __ks_1; ++__ks_0) {
					data = this._data.properties[__ks_0];
					var property;
					var __ks_2 = data.kind.valueOf();
					if(__ks_2 === NodeKind.FieldDeclaration.value) {
						property = new ImplementNamespaceVariableDeclaration(data, this, this._type);
					}
					else if(__ks_2 === NodeKind.MethodDeclaration.value) {
						property = new ImplementNamespaceFunctionDeclaration(data, this, this._type);
					}
					else {
						throw new NotSupportedException("Unexpected kind " + data.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else {
				TypeException.throwImplInvalidType(this);
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.prepare();
				var name = property.getSharedName();
				if(KSType.isValue(name)) {
					this._sharingProperties[name] = property;
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.toFragments(fragments, Mode.None);
			}
			for(var __ks_0 in this._sharingProperties) {
				var property = this._sharingProperties[__ks_0];
				property.toSharedFragments(fragments);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImplementClassFieldDeclaration = KSHelper.class({
		$name: "ImplementClassFieldDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._init = 0;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassFieldDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._variable = variable;
			this._class = this._variable.type();
			this._classRef = this._scope.reference(this._variable);
			this._name = this._internalName = data.name.name;
			var __ks_private_1 = false;
			var alias = false;
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				var __ks_2 = modifier.kind.valueOf();
				if(__ks_2 === ModifierKind.Private.value) {
					__ks_private_1 = true;
				}
				else if(__ks_2 === ModifierKind.Static.value) {
					this._instance = false;
				}
				else if(__ks_2 === ModifierKind.ThisAlias.value) {
					alias = true;
				}
			}
			if(__ks_private_1) {
				if(alias) {
					this._internalName = "_" + this._name;
				}
				else if(this._name[0] === "_") {
					this._name = this._name.substr(1);
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassFieldDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = ClassVariableType.fromAST(this._data, this);
			this._type.flagAlteration();
			if(this._class.isSealed() === true) {
				this._type.flagSealed();
				if(this._hasDefaultValue) {
					this._type.flagInitiatable();
				}
			}
			if(this._instance) {
				this._class.addInstanceVariable(this._internalName, this._type);
			}
			else {
				this._class.addClassVariable(this._internalName, this._type);
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					this._init = this._class.init() + 1;
					if(!(this._class.isSealed() === true)) {
						this._class.init(this._init);
					}
				}
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return (this._hasDefaultValue && this._instance) ? "__ks_init" : null;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._hasDefaultValue) {
				if(this._class.isSealed() === true) {
					if(this._instance) {
						var line, block, ctrl;
						line = fragments.newLine();
						line.code("" + this._variable.getSealedName() + ".__ks_init_" + this._init + " = function(that)");
						block = line.newBlock();
						block.newLine().code("that." + this._internalName + " = ").compile(this._defaultValue).done();
						block.done();
						line.done();
						line = fragments.newLine();
						line.code("" + this._variable.getSealedName() + ".__ks_get_" + this._name + " = function(that)");
						block = line.newBlock();
						ctrl = block.newControl();
						ctrl.code("if(!that[" + $runtime.initFlag(this) + "])").step();
						ctrl.line("" + this._variable.getSealedName() + ".__ks_init(that)");
						ctrl.done();
						block.line("return that." + this._internalName);
						block.done();
						line.done();
						line = fragments.newLine();
						line.code("" + this._variable.getSealedName() + ".__ks_set_" + this._name + " = function(that, value)");
						block = line.newBlock();
						ctrl = block.newControl();
						ctrl.code("if(!that[" + $runtime.initFlag(this) + "])").step();
						ctrl.line("" + this._variable.getSealedName() + ".__ks_init(that)");
						ctrl.done();
						block.line("that." + this._internalName + " = value");
						block.done();
						line.done();
					}
					else {
						fragments.newLine().code("" + this._variable.getSealedName() + "." + this._internalName + " = ").compile(this._defaultValue).done();
					}
				}
				else {
					if(this._instance) {
						var line = fragments.newLine();
						line.code("" + this._variable.name() + ".prototype.__ks_init_" + this._init + " = function()");
						var block = line.newBlock();
						block.newLine().code("this." + this._internalName + " = ").compile(this._defaultValue).done();
						block.done();
						line.done();
					}
					else {
						fragments.newLine().code("" + this._variable.name() + "." + this._internalName + " = ").compile(this._defaultValue).done();
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_toSharedFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._class.isSealed() === true) {
				var line = fragments.newLine();
				line.code("" + this._variable.getSealedName() + ".__ks_init = function(that)");
				var block = line.newBlock();
				for(var i = 1; i <= this._init; ++i) {
					block.line("" + this._variable.getSealedName() + ".__ks_init_" + i + "(that)");
				}
				block.line("that[" + $runtime.initFlag(this) + "] = true");
				block.done();
				line.done();
			}
			else {
				var line = fragments.newLine();
				line.code("" + this._variable.name() + ".prototype.__ks_init = function()");
				var block = line.newBlock();
				for(var i = 1; i <= this._init; ++i) {
					block.line("" + this._variable.name() + ".prototype.__ks_init_" + i + ".call(this)");
				}
				block.done();
				line.done();
			}
		},
		toSharedFragments: function() {
			if(arguments.length === 1) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_toSharedFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSharedFragments) {
				return Statement.prototype.toSharedFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImplementClassMethodDeclaration = KSHelper.class({
		$name: "ImplementClassMethodDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._aliases = [];
			this._instance = true;
			this._override = false;
			this._overwrite = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.scope(), ScopeType.Function]);
			this._variable = variable;
			this._class = this._variable.type();
			this._classRef = this._scope.reference(this._variable);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.line(this._data.start.line);
			this._name = this._data.name.name;
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Override.value) {
					this._override = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Overwrite.value) {
					this._overwrite = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Static.value) {
					this._instance = false;
				}
			}
			this._this = this._scope.define("this", true, this._classRef, true, this);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			this._block = $compile.block($ast.body(this._data), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._scope.line(this._data.start.line);
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new ClassMethodType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
			this._type.flagAlteration();
			if(this._class.isSealed() === true) {
				this._type.flagSealed();
			}
			if(this._instance) {
				if(this._override) {
					var methods = this._class.listMatchingInstanceMethods(this._name, this._type, MatchingMode.ShiftableParameters);
					if(methods.length === 0) {
						this._override = false;
						this._internalName = "__ks_func_" + this._name + "_" + this._class.addInstanceMethod(this._name, this._type);
					}
					else {
						this._internalName = "__ks_func_" + this._name + "_" + methods[0].identifier();
					}
				}
				else if(this._overwrite) {
					if(!(this._class.isSealed() === true)) {
						SyntaxException.throwNotSealedOverwrite(this);
					}
					var methods = this._class.listMatchingInstanceMethods(this._name, this._type, MatchingMode(MatchingMode.SimilarParameters | MatchingMode.ShiftableParameters));
					if(methods.length === 0) {
						SyntaxException.throwNoSuitableOverwrite(this._classRef, this._name, this._type, this);
					}
					this._class.overwriteInstanceMethod(this._name, this._type, methods);
					this._internalName = "__ks_func_" + this._name + "_" + this._type.identifier();
					var type = Type.union.apply(Type, [].concat([this._scope], methods));
					var variable = this._scope.define("precursor", true, type, this);
					variable.replaceCall = (function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallOverwrittenMethodSubstitude(data, __ks_arguments_1, this._name, type);
					}).bind(this);
				}
				else {
					if(this._class.hasMatchingInstanceMethod(this._name, this._type, MatchingMode.ExactParameters) === true) {
						SyntaxException.throwDuplicateMethod(this._name, this);
					}
					else {
						this._internalName = "__ks_func_" + this._name + "_" + this._class.addInstanceMethod(this._name, this._type);
					}
				}
			}
			else {
				if(this._override) {
					NotImplementedException.throw(this);
				}
				else if(this._overwrite) {
					if(!(this._class.isSealed() === true)) {
						NotImplementedException.throw(this);
					}
					var methods = this._class.listMatchingClassMethods(this._name, this._type, MatchingMode.ShiftableParameters);
					if(methods.length === 0) {
						SyntaxException.throwNoSuitableOverwrite(this._classRef, this._name, this._type, this);
					}
					this._class.overwriteClassMethod(this._name, this._type, methods);
					this._internalName = "__ks_sttc_" + this._name + "_" + this._type.identifier();
					var type = Type.union.apply(Type, [].concat([this._scope], methods));
					var variable = this._scope.define("precursor", true, type, this);
					variable.replaceCall = (function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallOverwrittenMethodSubstitude(data, __ks_arguments_1, this._name, type);
					}).bind(this);
				}
				else {
					if(this._class.hasMatchingClassMethod(this._name, this._type, MatchingMode.ExactParameters) === true) {
						SyntaxException.throwDuplicateMethod(this._name, this);
					}
					else {
						this._internalName = "__ks_sttc_" + this._name + "_" + this._class.addClassMethod(this._name, this._type);
					}
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._block.analyse(this._aliases);
			this._block.analyse();
			this._block.type(this._type.returnType()).prepare();
			this._block.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.isInstance(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!(ClassDeclaration.isAssigningAlias(this._block.statements(), statement.name(), false, false) === true)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_class_0: function() {
			return this._variable;
		},
		class: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_class_0.apply(this);
			}
			else if(Statement.prototype.class) {
				return Statement.prototype.class.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return this._override ? null : this._instance ? "_im_" + this._name : "_cm_" + this._name;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return this._instance;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toSharedFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._override) {
				return;
			}
			if(this._instance) {
				if(this._class.isSealed() === true) {
					var assessment = Router.assess(this._class.listInstanceMethods(this._name), false);
					Router.toFragments(assessment, fragments.newLine(), "args", true, (function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						var block = fragments.code("" + this._variable.getSealedName() + "._im_" + this._name + " = function(that)").newBlock();
						block.line("var args = Array.prototype.slice.call(arguments, 1, arguments.length)");
						return block;
					}).bind(this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}, (function(fragments, method) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(method === void 0 || method === null) {
							throw new TypeError("'method' is not nullable");
						}
						if(method.max() === 0) {
							if(method.isSealed() === true) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_func_" + this._name + "_" + method.identifier() + ".apply(that)");
							}
							else {
								fragments.line("return " + this._variable.name() + ".prototype.__ks_func_" + this._name + "_" + method.identifier() + ".apply(that)");
							}
						}
						else {
							if(method.isSealed() === true) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_func_" + this._name + "_" + method.identifier() + ".apply(that, args)");
							}
							else {
								fragments.line("return " + this._variable.name() + ".prototype.__ks_func_" + this._name + "_" + method.identifier() + ".apply(that, args)");
							}
						}
					}).bind(this), ClassDeclaration.toWrongDoingFragments, this).done();
				}
				else {
					ClassMethodDeclaration.toInstanceSwitchFragments(this, fragments.newLine(), this._variable, this._class.listInstanceMethods(this._name), false, this._name, (function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code("" + this._variable.name() + ".prototype." + this._name + " = function()").newBlock();
					}).bind(this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}).done();
				}
			}
			else {
				if(this._class.isSealed() === true) {
					var assessment = Router.assess(this._class.listClassMethods(this._name), false);
					Router.toFragments(assessment, fragments.newLine(), "args", true, (function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						var block = fragments.code("" + this._variable.getSealedName() + "._cm_" + this._name + " = function()").newBlock();
						block.line("var args = Array.prototype.slice.call(arguments)");
						return block;
					}).bind(this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}, (function(fragments, method) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(method === void 0 || method === null) {
							throw new TypeError("'method' is not nullable");
						}
						if(method.max() === 0) {
							if(method.isSealed() === true) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_sttc_" + this._name + "_" + method.identifier() + "()");
							}
							else {
								fragments.line("return " + this._variable.name() + ".__ks_sttc_" + this._name + "_" + method.identifier() + "()");
							}
						}
						else {
							if(method.isSealed() === true) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_sttc_" + this._name + "_" + method.identifier() + ".apply(null, args)");
							}
							else {
								fragments.line("return " + this._variable.name() + ".__ks_sttc_" + this._name + "_" + method.identifier() + ".apply(null, args)");
							}
						}
					}).bind(this), ClassDeclaration.toWrongDoingFragments, this).done();
				}
				else {
					ClassMethodDeclaration.toClassSwitchFragments(this, fragments.newLine(), this._variable, this._class.listClassMethods(this._name), false, this._name, (function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code("" + this._variable.name() + "." + this._name + " = function()").newBlock();
					}).bind(this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}).done();
				}
			}
		},
		toSharedFragments: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_toSharedFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSharedFragments) {
				return Statement.prototype.toSharedFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine();
			if(this._class.isSealed() === true) {
				line.code("" + this._variable.getSealedName() + "." + this._internalName + " = function(");
			}
			else {
				if(this._instance) {
					line.code("" + this._variable.name() + ".prototype." + this._internalName + " = function(");
				}
				else {
					line.code("" + this._variable.name() + "." + this._internalName + " = function(");
				}
			}
			var block = Parameter.toFragments(this, line, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				line.code(")");
				return line.newBlock();
			});
			block.compile(this._block);
			block.done();
			line.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImplementClassConstructorDeclaration = KSHelper.class({
		$name: "ImplementClassConstructorDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._dependent = false;
			this._overwrite = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassConstructorDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.scope(), ScopeType.Function]);
			this._variable = variable;
			this._class = this._variable.type();
			this._classRef = this._scope.reference(this._variable);
			if(this._class.isHybrid() === true) {
				NotSupportedException.throw(this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassConstructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.line(this._data.start.line);
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Overwrite.value) {
					this._overwrite = true;
				}
			}
			this._this = this._scope.define("this", true, this._classRef, true, this);
			var body = $ast.body(this._data);
			if((this._class.isSealed() === true) && (this.getConstructorIndex($ast.block(body).statements) !== -1)) {
				this._scope.rename("this", "that");
				this._this.replaceCall = (function(data, __ks_arguments_1) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(data === void 0 || data === null) {
						throw new TypeError("'data' is not nullable");
					}
					if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
						throw new TypeError("'arguments' is not nullable");
					}
					return new CallSealedConstructorSubstitude(data, __ks_arguments_1, this._variable);
				}).bind(this);
				this._dependent = true;
			}
			else if(this._overwrite) {
				this._scope.rename("this", "that");
				this._this.replaceCall = (function(data, __ks_arguments_1) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(data === void 0 || data === null) {
						throw new TypeError("'data' is not nullable");
					}
					if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
						throw new TypeError("'arguments' is not nullable");
					}
					return new CallSealedConstructorSubstitude(data, __ks_arguments_1, this._variable);
				}).bind(this);
			}
			else {
				this._this.replaceCall = (function(data, __ks_arguments_1) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(data === void 0 || data === null) {
						throw new TypeError("'data' is not nullable");
					}
					if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
						throw new TypeError("'arguments' is not nullable");
					}
					return new CallThisConstructorSubstitude(data, __ks_arguments_1, this._variable);
				}).bind(this);
			}
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			this._block = $compile.block(body, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._scope.line(this._data.start.line);
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new ClassConstructorType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
			this._type.flagAlteration();
			if(this._class.isSealed() === true) {
				this._type.flagSealed();
			}
			if(this._dependent) {
				this._type.flagDependent();
			}
			if(this._overwrite) {
				if(!(this._class.isSealed() === true)) {
					SyntaxException.throwNotSealedOverwrite(this);
				}
				var methods = this._class.listMatchingConstructors(this._type, MatchingMode(MatchingMode.SimilarParameters | MatchingMode.ShiftableParameters));
				if(methods.length === 0) {
					SyntaxException.throwNoSuitableOverwrite(this._classRef, "constructor", this._type, this);
				}
				this._class.overwriteConstructor(this._type, methods);
				this._internalName = "__ks_cons_" + this._type.identifier();
				var variable = this._scope.define("precursor", true, this._classRef, this);
				variable.replaceCall = (function(data, __ks_arguments_1) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(data === void 0 || data === null) {
						throw new TypeError("'data' is not nullable");
					}
					if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
						throw new TypeError("'arguments' is not nullable");
					}
					return new CallOverwrittenConstructorSubstitude(data, __ks_arguments_1, this._variable);
				}).bind(this);
			}
			else {
				if(this._class.hasMatchingConstructor(this._type, MatchingMode.ExactParameters) === true) {
					SyntaxException.throwDuplicateConstructor(this);
				}
				else {
					this._internalName = "__ks_cons_" + this._class.addConstructor(this._type);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._block.analyse();
			this._block.prepare();
			this._block.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_class_0: function() {
			return this._variable;
		},
		class: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_class_0.apply(this);
			}
			else if(Statement.prototype.class) {
				return Statement.prototype.class.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return "__ks_cons";
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExtending_0: function() {
			return this._class.isExtending();
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Statement.prototype.isExtending) {
				return Statement.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getConstructorIndex_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			else if(!KSType.isArray(body)) {
				throw new TypeError("'body' is not of type 'Array'");
			}
			for(var index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(KSHelper.valueOf(statement.kind) === NodeKind.CallExpression.value) {
					if((KSHelper.valueOf(statement.callee.kind) === NodeKind.Identifier.value) && ((statement.callee.name === "this") || (statement.callee.name === "super"))) {
						return index;
					}
				}
				else if(KSHelper.valueOf(statement.kind) === NodeKind.IfStatement.value) {
					if(KSType.isValue(statement.whenFalse) && (this.getConstructorIndex(statement.whenTrue.statements) !== -1) && (this.getConstructorIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		},
		getConstructorIndex: function() {
			if(arguments.length === 1) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_getConstructorIndex_0.apply(this, arguments);
			}
			else if(Statement.prototype.getConstructorIndex) {
				return Statement.prototype.getConstructorIndex.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toSharedFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._class.isSealed() === true) {
				var assessment = Router.assess(KSHelper.mapArray(this._class.listConstructors(), function(__ks_constructor_1) {
					return __ks_constructor_1;
				}, function(__ks_constructor_1) {
					return __ks_constructor_1.isSealed();
				}), false);
				var es5 = this._options.format.spreads === "es5";
				var min = Number.MAX_VALUE;
				Router.toFragments(assessment, fragments.newLine(), "arguments", false, (function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("" + this._variable.getSealedName() + ".new = function()").newBlock();
				}).bind(this), function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.done();
				}, (function(fragments, method, index) {
					if(arguments.length < 3) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(method === void 0 || method === null) {
						throw new TypeError("'method' is not nullable");
					}
					if(index === void 0 || index === null) {
						throw new TypeError("'index' is not nullable");
					}
					if((method.isDependent() === true) || (method.isOverwritten() === true)) {
						if(es5) {
							fragments.line("return " + this._variable.getSealedName() + ".__ks_cons_" + method.identifier() + ".apply(null, arguments)");
						}
						else {
							fragments.line("return " + this._variable.getSealedName() + ".__ks_cons_" + method.identifier() + "(...arguments)");
						}
					}
					else {
						fragments.line("return " + this._variable.getSealedName() + ".__ks_cons_" + method.identifier() + ".apply(new " + this._variable.name() + "(), arguments)");
					}
					if(KSOperator.lt(method.min(), min)) {
						min = method.min();
					}
				}).bind(this), (function(block, ctrl) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(block === void 0 || block === null) {
						throw new TypeError("'block' is not nullable");
					}
					if(ctrl === void 0 || ctrl === null) {
						throw new TypeError("'ctrl' is not nullable");
					}
					ctrl.step();
					if(KSOperator.gt(min, 0)) {
						ctrl.code("else if(arguments.length === 0)").step().line("return new " + this._variable.name() + "()").step();
					}
					ctrl.code("else").step();
					if(es5) {
						ctrl.line("return new (Function.prototype.bind.apply(" + this._variable.name() + ", arguments))");
					}
					else {
						ctrl.line("return new " + this._variable.name() + "(...arguments)");
					}
					ctrl.done();
				}).bind(this), this).done();
			}
			else {
				ClassConstructorDeclaration.toRouterFragments(this, fragments.newControl(), this._classRef, this._class.listConstructors(), (function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("" + this._variable.name() + ".prototype.__ks_cons = function(args)").step();
				}).bind(this), function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.done();
				});
			}
		},
		toSharedFragments: function() {
			if(arguments.length === 1) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_toSharedFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSharedFragments) {
				return Statement.prototype.toSharedFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine();
			if(this._class.isSealed() === true) {
				line.code("" + this._variable.getSealedName() + "." + this._internalName + " = function(");
			}
			else {
				line.code("" + this._variable.name() + ".prototype." + this._internalName + " = function(");
			}
			var block = Parameter.toFragments(this, line, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				line.code(")");
				return line.newBlock();
			});
			block.compile(this._block);
			if(this._class.isSealed() === true) {
				block.newLine().code("return ").compile(this._this).done();
			}
			block.done();
			line.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassConstructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImplementNamespaceVariableDeclaration = KSHelper.class({
		$name: "ImplementNamespaceVariableDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._variable = variable;
			this._namespace = this._variable.type();
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementNamespaceVariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data.defaultValue, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			var property = NamespacePropertyType.fromAST(this._data.type, this);
			property.flagAlteration();
			if(this._namespace.isSealed() === true) {
				property.flagSealed();
			}
			this._namespace.addProperty(this._data.name.name, property);
			this._type = property.type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return null;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._namespace.isSealed() === true) {
				fragments.newLine().code(this._variable.getSealedName(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
			else {
				fragments.newLine().code(this._variable.name(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImplementNamespaceFunctionDeclaration = KSHelper.class({
		$name: "ImplementNamespaceFunctionDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._parameters = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementNamespaceFunctionDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.scope(), ScopeType.Block]);
			this._variable = variable;
			this._namespace = this._variable.type();
			this._namespaceRef = this._scope.reference(this._variable);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementNamespaceFunctionDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.parameters[__ks_0];
				var parameter = new Parameter(data, this);
				parameter.analyse();
				this._parameters.push(parameter);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			var property = NamespacePropertyType.fromAST(this._data, this);
			property.flagAlteration();
			if(this._namespace.isSealed() === true) {
				property.flagSealed();
			}
			this._namespace.addProperty(this._data.name.name, property);
			this._type = property.type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._block = $compile.block($ast.body(this._data), this);
			this._block.analyse();
			this._block.type(this._type.returnType()).prepare();
			this._block.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return null;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine();
			if(this._namespace.isSealed() === true) {
				line.code(this._variable.getSealedName());
			}
			else {
				line.code(this._variable.name());
			}
			line.code(".", this._data.name.name, " = function(");
			var block = Parameter.toFragments(this, line, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(")").newBlock();
			});
			block.compile(this._block);
			block.done();
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallOverwrittenMethodSubstitude = KSHelper.class({
		$name: "CallOverwrittenMethodSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, name, type) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._name = name;
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallOverwrittenMethodSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallOverwrittenMethodSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("this." + this._name + "(");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallOverwrittenMethodSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallOverwrittenMethodSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallSealedConstructorSubstitude = KSHelper.class({
		$name: "CallSealedConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallSealedConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSealedConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("var that = " + this._class.getSealedName() + ".new(");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSealedConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSealedConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallOverwrittenConstructorSubstitude = KSHelper.class({
		$name: "CallOverwrittenConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.isInstance(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallOverwrittenConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallOverwrittenConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("var that = new " + this._class.name() + "(");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallOverwrittenConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallOverwrittenConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var $importExts = (function() {
		var d = new Dictionary();
		d.data = (function() {
			var d = new Dictionary();
			d.json = true;
			return d;
		})();
		d.source = (function() {
			var d = new Dictionary();
			d.coffee = true;
			d.js = true;
			d.ks = true;
			d.ts = true;
			return d;
		})();
		return d;
	})();
	var $nodeModules = (function() {
		var d = new Dictionary();
		d.assert = true;
		d.buffer = true;
		d.child_process = true;
		d.cluster = true;
		d.constants = true;
		d.crypto = true;
		d.dgram = true;
		d.dns = true;
		d.domain = true;
		d.events = true;
		d.fs = true;
		d.http = true;
		d.https = true;
		d.module = true;
		d.net = true;
		d.os = true;
		d.path = true;
		d.punycode = true;
		d.querystring = true;
		d.readline = true;
		d.repl = true;
		d.stream = true;
		d.string_decoder = true;
		d.tls = true;
		d.tty = true;
		d.url = true;
		d.util = true;
		d.v8 = true;
		d.vm = true;
		d.zlib = true;
		return d;
	})();
	function $nodeModulesPaths(start) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(start === void 0 || start === null) {
			throw new TypeError("'start' is not nullable");
		}
		start = fs.resolve(start);
		var prefix = "/";
		if(/^([A-Za-z]:)/.test(start) === true) {
			prefix = "";
		}
		else if(/^\\\\/.test(start) === true) {
			prefix = "\\\\";
		}
		var splitRe = (process.platform === "win32") ? /[\/\\]/ : /\/+/;
		var parts = start.split(splitRe);
		var dirs = [];
		for(var i = KSOperator.subtraction(parts.length, 1); i >= 0; --i) {
			if(parts[i] === "node_modules") {
				continue;
			}
			dirs.push(KSHelper.concatString(prefix, path.join(path.join.apply(path, [].concat(parts.slice(0, i + 1))), "node_modules")));
		}
		if(process.platform === "win32") {
			dirs[dirs.length - 1] = dirs[dirs.length - 1].replace(":", ":\\");
		}
		return dirs;
	}
	var Importer = KSHelper.class({
		$name: "Importer",
		$extends: Statement,
		__ks_init_1: function() {
			this._alias = null;
			this._arguments = [];
			this._argumentNames = new Dictionary();
			this._argumentValues = new Dictionary();
			this._count = 0;
			this._hasArguments = true;
			this._imports = new Dictionary();
			this._reusable = false;
			this._sealedVariables = new Dictionary();
			this._variables = new Dictionary();
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			Importer.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var x = this._data.source.value;
			var y = this.directory();
			var metadata;
			if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(x) === true) {
				x = fs.resolve(y, x);
				if(!((this.loadFile(x, null) === true) || (this.loadDirectory(x, null) === true))) {
					IOException.throwNotFoundModule(x, y, this);
				}
			}
			else {
				if(!((this.loadNodeModule(x, y) === true) || (this.loadCoreModule(x) === true))) {
					IOException.throwNotFoundModule(x, y, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Importer.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._isKSFile) {
				var module = this.module();
				var __ks_arguments_1 = new Dictionary();
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					argument.value.prepare();
					argument.type = argument.value.type();
					__ks_arguments_1[argument.name] = argument;
				}
				this._worker.prepare(__ks_arguments_1);
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(argument.required === true) {
						module.addRequirement(new ImportingRequirement(argument.name, argument.type, this));
					}
				}
				var matchables = [];
				for(var name in this._imports) {
					var def = this._imports[name];
					var variable = this._scope.getVariable(def.local);
					if(def.isAlias === true) {
						var type = new NamedContainerType(def.local, new NamespaceType(this._scope));
						for(var i = 1, __ks_0 = this._metadata.exports.length; i < __ks_0; i += 2) {
							var __ks_name_1 = this._metadata.exports[i];
							type.addProperty(__ks_name_1, this._worker.getType(__ks_name_1));
						}
						variable.setDeclaredType(type);
					}
					else {
						if(!(this._worker.hasType(name) === true)) {
							ReferenceException.throwNotDefinedInModule(name, this._data.source.value, this);
						}
						var type = this._worker.getType(name);
						if((def.type !== null) && !(type.isMatching(def.type, MatchingMode.Signature) === true)) {
							TypeException.throwNotCompatibleDefinition(def.local, name, this._data.source.value, this);
						}
						if(def.newVariable === true) {
							variable.setDeclaredType(KSType.isValue(def.type) ? def.type : type);
						}
						else if(!(variable.isPredefined() === true) && !KSType.isNumber(this._argumentValues[def.local])) {
							ReferenceException.throwNotPassed(def.local, this._data.source.value, this);
						}
						else if(type.isMatching(variable.getDeclaredType(), MatchingMode.Signature) === true) {
							var alien = variable.getDeclaredType().isAlien();
							variable.setDeclaredType(KSType.isValue(def.type) ? def.type : type);
							if(alien === true) {
								variable.getDeclaredType().flagAlien();
							}
						}
						else {
							TypeException.throwNotCompatibleArgument(def.local, name, this._data.source.value, this);
						}
						if(type.isNamed() === true) {
							type.name(def.local);
							type.scope().reassignReference(name, def.local, this._scope);
						}
						if(!(type.isAlias() === true)) {
							this._variables[name] = def.local;
							++this._count;
							if(type.isSealed() === true) {
								this._sealedVariables[name] = true;
								++this._count;
							}
						}
					}
				}
				if((this._count !== 0) || (this._alias !== null)) {
					this.module().flagRegister();
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					argument.value.prepare();
					argument.type = argument.value.type();
				}
			}
			if(this._count !== 0) {
				if(this._alias === null) {
					if(this._count > 1) {
						this._reuseName = this._scope.acquireTempName(false);
						this._scope.releaseTempName(this._reuseName);
					}
				}
				else {
					this._reuseName = this._alias;
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Importer.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return Importer.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addArgument_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var argument = (function(that) {
				var d = new Dictionary();
				d.index = that._isKSFile ? null : 0;
				d.isIdentifier = false;
				d.isNamed = false;
				d.required = false;
				d.value = $compile.expression(data.value, that);
				return d;
			})(this);
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifer; __ks_0 < __ks_1; ++__ks_0) {
				modifer = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifer.kind) === ModifierKind.Required.value) {
					argument.required = true;
					break;
				}
			}
			if(argument.required === true) {
				var variable, __ks_0;
				if((KSType.isValue(__ks_0 = this._scope.getVariable(data.value.name)) ? (variable = __ks_0, true) : false) && !(variable.getDeclaredType().isPredefined() === true)) {
					ReferenceException.throwDefined(data.value.name, this);
				}
				argument.isNamed = true;
				argument.name = (KSType.isValue(data.name) && KSType.isValue(data.name.name)) ? data.name.name : data.value.name;
				argument.isIdentifier = true;
				argument.identifier = data.value.name;
				this._argumentNames[argument.name] = this._arguments.length;
				this._argumentValues[data.value.name] = this._arguments.length;
			}
			else if(KSHelper.valueOf(data.value.kind) === NodeKind.Identifier.value) {
				argument.isNamed = true;
				argument.name = (KSType.isValue(data.name) && KSType.isValue(data.name.name)) ? data.name.name : data.value.name;
				argument.isIdentifier = true;
				argument.identifier = data.value.name;
				this._argumentNames[argument.name] = this._arguments.length;
				this._argumentValues[data.value.name] = this._arguments.length;
			}
			else if(KSType.isValue(data.name)) {
				argument.isNamed = true;
				argument.name = data.name.name;
				this._argumentNames[argument.name] = this._arguments.length;
			}
			argument.value.analyse();
			this._arguments.push(argument);
		},
		addArgument: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_addArgument_0.apply(this, arguments);
			}
			else if(Statement.prototype.addArgument) {
				return Statement.prototype.addArgument.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addImport_0: function(imported, local, isAlias, type) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(imported === void 0 || imported === null) {
				throw new TypeError("'imported' is not nullable");
			}
			else if(!KSType.isString(imported)) {
				throw new TypeError("'imported' is not of type 'String'");
			}
			if(local === void 0 || local === null) {
				throw new TypeError("'local' is not nullable");
			}
			else if(!KSType.isString(local)) {
				throw new TypeError("'local' is not of type 'String'");
			}
			if(isAlias === void 0 || isAlias === null) {
				throw new TypeError("'isAlias' is not nullable");
			}
			else if(!KSType.isBoolean(isAlias)) {
				throw new TypeError("'isAlias' is not of type 'Boolean'");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			var variable, __ks_0;
			var newVariable = (KSType.isValue(__ks_0 = this._scope.getVariable(local)) ? (variable = __ks_0, false) : true) || (variable.isPredefined() === true);
			if(newVariable) {
				this._scope.define(local, true, null, true, this);
			}
			else if(this._parent.includePath() !== null) {
				return;
			}
			else if(isAlias) {
				SyntaxException.throwAlreadyDeclared(local, this);
			}
			this.module().import(local);
			this._imports[imported] = (function() {
				var d = new Dictionary();
				d.local = local;
				d.isAlias = isAlias;
				d.newVariable = newVariable;
				d.type = type;
				return d;
			})();
		},
		addImport: function() {
			if(arguments.length >= 3 && arguments.length <= 4) {
				return Importer.prototype.__ks_func_addImport_0.apply(this, arguments);
			}
			else if(Statement.prototype.addImport) {
				return Statement.prototype.addImport.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addVariable_0: function(imported, local, isVariable, type) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(imported === void 0 || imported === null) {
				throw new TypeError("'imported' is not nullable");
			}
			else if(!KSType.isString(imported)) {
				throw new TypeError("'imported' is not of type 'String'");
			}
			if(local === void 0 || local === null) {
				throw new TypeError("'local' is not nullable");
			}
			else if(!KSType.isString(local)) {
				throw new TypeError("'local' is not of type 'String'");
			}
			if(isVariable === void 0 || isVariable === null) {
				throw new TypeError("'isVariable' is not nullable");
			}
			else if(!KSType.isBoolean(isVariable)) {
				throw new TypeError("'isVariable' is not of type 'Boolean'");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			var variable, __ks_0;
			if((KSType.isValue(__ks_0 = this._scope.getVariable(local)) ? (variable = __ks_0, true) : false) && !(variable.isPredefined() === true)) {
				if(this._parent.includePath() !== null) {
					return;
				}
				else if(isVariable) {
					if(!KSType.isNumber(this._argumentValues[local])) {
						ReferenceException.throwNotPassed(local, this._data.source.value, this);
					}
					else if(variable.getDeclared().isMergeable(type) === true) {
						variable.getDeclared().merge(type, this);
					}
					else {
						ReferenceException.throwNotMergeable(local, this._data.source.value, this);
					}
				}
				else {
					SyntaxException.throwAlreadyDeclared(local, this);
				}
			}
			else {
				this._scope.define(local, true, type, true, this);
			}
			this.module().import(local);
			if(isVariable && !KSType.isInstance(type, AliasType)) {
				this._variables[imported] = local;
				++this._count;
			}
		},
		addVariable: function() {
			if(arguments.length === 4) {
				return Importer.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			else if(Statement.prototype.addVariable) {
				return Statement.prototype.addVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadCoreModule_0: function(x) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if($nodeModules[x] === true) {
				return this.loadNodeFile(null, x);
			}
			return false;
		},
		loadCoreModule: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_loadCoreModule_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadCoreModule) {
				return Statement.prototype.loadCoreModule.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadDirectory_0: function(x, moduleName) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if(moduleName === void 0) {
				moduleName = null;
			}
			var pkgfile = path.join(x, "package.json");
			if(fs.isFile(pkgfile) === true) {
				var pkg;
				try {
					pkg = JSON.parse(fs.readFile(pkgfile));
				}
				catch(__ks_0) {
				}
				if(KSType.isValue(pkg)) {
					var metadata;
					if(KSType.isValue(pkg.kaoscript)) {
						var __ks_metadata_1 = KSType.isValue(pkg.kaoscript.metadata) ? path.join(x, pkg.kaoscript.metadata) : null;
						if(KSType.isValue(pkg.kaoscript.main)) {
							if(this.loadKSFile(path.join(x, pkg.kaoscript.main), moduleName, __ks_metadata_1) === true) {
								return true;
							}
						}
						else if(KSType.isValue(__ks_metadata_1)) {
							if(this.loadKSFile(null, KSType.isValue(moduleName) ? moduleName : x, __ks_metadata_1) === true) {
								return true;
							}
						}
					}
					if(KSType.isString(pkg.main) && ((this.loadFile(path.join(x, pkg.main), moduleName) === true) || (this.loadDirectory(path.join(x, pkg.main), moduleName) === true))) {
						return true;
					}
				}
			}
			return this.loadFile(path.join(x, "index"), moduleName);
		},
		loadDirectory: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_loadDirectory_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadDirectory) {
				return Statement.prototype.loadDirectory.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadFile_0: function(x, moduleName) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if(moduleName === void 0) {
				moduleName = null;
			}
			if(fs.isFile(x) === true) {
				if(x.endsWith($extensions.source) === true) {
					return this.loadKSFile(x, moduleName);
				}
				else {
					return this.loadNodeFile(x, moduleName);
				}
			}
			if(fs.isFile(KSOperator.addOrConcat(x, $extensions.source)) === true) {
				return this.loadKSFile(KSOperator.addOrConcat(x, $extensions.source), moduleName);
			}
			else {
				var __ks_0;
				for(var ext in require.extensions) {
					if(fs.isFile(x + ext) === true) {
						return this.loadNodeFile(x, moduleName);
					}
				}
			}
			return false;
		},
		loadFile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_loadFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadFile) {
				return Statement.prototype.loadFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadKSFile_0: function(x, moduleName, metadataPath) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(x === void 0) {
				x = null;
			}
			else if(x !== null && !KSType.isString(x)) {
				throw new TypeError("'x' is not of type 'String?'");
			}
			if(moduleName === void 0) {
				moduleName = null;
			}
			if(metadataPath === void 0) {
				metadataPath = null;
			}
			var module = this.module();
			if(moduleName === null) {
				moduleName = module.path(x, this._data.source.value);
				if((moduleName.slice(KSOperator.negative($extensions.source.length)).toLowerCase() !== $extensions.source) && (path.basename(x) === path.basename(KSOperator.addOrConcat(moduleName, $extensions.source)))) {
					moduleName = KSOperator.addOrConcat(moduleName, $extensions.source);
				}
			}
			var name, alias, variable, hashes;
			if(module.compiler().isInHierarchy(x) === true) {
				SyntaxException.throwLoopingImport(this._data.source.value, this);
			}
			var __ks_0;
			if(KSType.isValue(metadataPath) && (fs.isFile(metadataPath) === true) && (KSType.isValue(__ks_0 = this.readMetadata(metadataPath)) ? (this._metadata = __ks_0, true) : false)) {
			}
			else {
				var source = fs.readFile(x);
				var target = this._options.target;
				var __ks_1;
				if((fs.isFile(getMetadataPath(x, target)) === true) && (fs.isFile(getHashPath(x, target)) === true) && (KSType.isValue(__ks_0 = module.isUpToDate(x, target, source)) ? (hashes = __ks_0, true) : false) && (KSType.isValue(__ks_0 = this.readMetadata(getMetadataPath(x, target))) ? (this._metadata = __ks_0, true) : false)) {
					module.addHashes(x, hashes);
				}
				else {
					var compiler = module.compiler().createServant(x);
					compiler.compile(source);
					compiler.writeFiles();
					this._metadata = compiler.toMetadata();
					hashes = compiler.toHashes();
					module.addHashes(x, hashes);
				}
			}
			this._isKSFile = true;
			this._moduleName = moduleName;
			var autofill = false;
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifer; __ks_0 < __ks_1; ++__ks_0) {
				modifer = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifer.kind) === ModifierKind.Autofill.value) {
					autofill = true;
				}
			}
			this._worker = new ImportWorker(this._metadata, this);
			if(KSType.isValue(this._data.arguments) ? this._data.arguments.length !== 0 : false) {
				for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._data.arguments[__ks_0];
					this.addArgument(argument);
				}
				if(autofill) {
					for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
						var __ks_name_1 = this._metadata.requirements[i + 1];
						if(!KSType.isValue(this._argumentNames[__ks_name_1])) {
							if(this._scope.hasVariable(__ks_name_1) === true) {
								this.addArgument((function() {
									var d = new Dictionary();
									d.modifiers = [];
									d.value = (function() {
										var d = new Dictionary();
										d.kind = NodeKind.Identifier;
										d.name = __ks_name_1;
										return d;
									})();
									return d;
								})());
							}
							else if(this._metadata.requirements[i + 2] === true) {
								SyntaxException.throwMissingRequirement(__ks_name_1, this);
							}
						}
					}
				}
			}
			else if(autofill) {
				for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
					var __ks_name_1 = this._metadata.requirements[i + 1];
					if(this._scope.hasVariable(__ks_name_1) === true) {
						this.addArgument((function() {
							var d = new Dictionary();
							d.modifiers = [];
							d.value = (function() {
								var d = new Dictionary();
								d.kind = NodeKind.Identifier;
								d.name = __ks_name_1;
								return d;
							})();
							return d;
						})());
					}
					else if(this._metadata.requirements[i + 2] === true) {
						SyntaxException.throwMissingRequirement(__ks_name_1, this);
					}
				}
			}
			else {
				for(var i = 1, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
					if(this._metadata.requirements[i + 1] === true) {
						SyntaxException.throwMissingRequirement(this._metadata.requirements[i], this);
					}
				}
			}
			if(this._arguments.length !== 0) {
				var requirements = [];
				for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
					var __ks_name_1 = this._metadata.requirements[i + 1];
					if(KSType.isNumber(this._argumentNames[__ks_name_1])) {
						this._arguments[this._argumentNames[__ks_name_1]].index = this._metadata.requirements[i];
					}
					else {
						requirements.push(this._metadata.requirements.slice(i, i + 3));
					}
				}
				var len = this._arguments.length;
				var nextArgument = 0;
				for(var __ks_0 = 0, __ks_1 = requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = requirements[__ks_0];
					while((nextArgument < len) && (this._arguments[nextArgument].index !== null)) {
						++nextArgument;
					}
					if(nextArgument === len) {
						if(requirement[2] === true) {
							SyntaxException.throwMissingRequirement(requirement[1], this);
						}
					}
					else {
						this._arguments[nextArgument].index = requirement[0];
						this._arguments[nextArgument].name = requirement[1];
					}
				}
				this._arguments.sort(function(a, b) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(a === void 0 || a === null) {
						throw new TypeError("'a' is not nullable");
					}
					if(b === void 0 || b === null) {
						throw new TypeError("'b' is not nullable");
					}
					return KSOperator.subtraction(a.index, b.index);
				});
			}
			var macros = new Dictionary();
			for(var i = 0, __ks_0 = this._metadata.macros.length; i < __ks_0; i += 2) {
				macros[this._metadata.macros[i]] = KSHelper.mapArray(this._metadata.macros[i + 1], function(data) {
					return JSON.parse(Buffer.from(data, "base64").toString("utf8"));
				});
			}
			if(this._data.specifiers.length === 0) {
				for(var i = 1, __ks_0 = this._metadata.exports.length; i < __ks_0; i += 2) {
					name = this._metadata.exports[i];
					this.addImport(name, name, false);
				}
				for(var __ks_name_1 in macros) {
					var datas = macros[__ks_name_1];
					for(var __ks_0 = 0, __ks_1 = datas.length, data; __ks_0 < __ks_1; ++__ks_0) {
						data = datas[__ks_0];
						new MacroDeclaration(data, this, null, __ks_name_1);
					}
				}
			}
			else {
				var __ks_name_1, type;
				for(var __ks_0 = 0, __ks_1 = this._data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
					specifier = this._data.specifiers[__ks_0];
					if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportExclusionSpecifier.value) {
						var exclusions = KSHelper.mapArray(specifier.exclusions, function(exclusion) {
							return exclusion.name;
						});
						for(var i = 1, __ks_2 = this._metadata.exports.length; i < __ks_2; i += 2) {
							if(exclusions.indexOf(this._metadata.exports[i]) === -1) {
								__ks_name_1 = this._metadata.exports[i];
								this.addImport(__ks_name_1, __ks_name_1, false);
							}
						}
						for(var __ks_name_2 in macros) {
							var datas = macros[__ks_name_2];
							if(exclusions.indexOf(__ks_name_2) === -1) {
								for(var __ks_2 = 0, __ks_3 = datas.length, data; __ks_2 < __ks_3; ++__ks_2) {
									data = datas[__ks_2];
									new MacroDeclaration(data, this, null, __ks_name_2);
								}
							}
						}
					}
					else if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportNamespaceSpecifier.value) {
						this._alias = specifier.local.name;
					}
					else {
						var __ks_2 = specifier.imported.kind.valueOf();
						if(__ks_2 === NodeKind.ClassDeclaration.value) {
							__ks_name_1 = specifier.imported.name.name;
							type = Type.fromAST(specifier.imported, this);
						}
						else if(__ks_2 === NodeKind.Identifier.value) {
							__ks_name_1 = specifier.imported.name;
							type = null;
						}
						else if(__ks_2 === NodeKind.VariableDeclarator.value) {
							__ks_name_1 = specifier.imported.name.name;
							type = KSType.isValue(specifier.imported.type) ? Type.fromAST(specifier.imported.type, this) : null;
						}
						else {
							console.info(specifier.imported);
							throw new NotImplementedException();
						}
						if(KSType.isValue(macros[__ks_name_1])) {
							for(var __ks_2 = 0, __ks_3 = macros[__ks_name_1].length, data; __ks_2 < __ks_3; ++__ks_2) {
								data = macros[__ks_name_1][__ks_2];
								new MacroDeclaration(data, this, null, specifier.local.name);
							}
						}
						else {
							this.addImport(__ks_name_1, specifier.local.name, false, type);
						}
					}
				}
				if(this._alias !== null) {
					this.addImport(this._alias, this._alias, true);
				}
			}
			return true;
		},
		loadKSFile: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return Importer.prototype.__ks_func_loadKSFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadKSFile) {
				return Statement.prototype.loadKSFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadNodeFile_0: function(x, moduleName) {
			if(x === void 0) {
				x = null;
			}
			if(moduleName === void 0) {
				moduleName = null;
			}
			var module = this.module();
			var file = null;
			if(moduleName === null) {
				file = moduleName = module.path(x, this._data.source.value);
			}
			if(KSType.isValue(this._data.arguments)) {
				for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._data.arguments[__ks_0];
					if(KSType.isValue(argument.name)) {
						SyntaxException.throwInvalidImportAliasArgument(this);
					}
					else {
						this.addArgument(argument);
					}
				}
			}
			else {
				this._hasArguments = false;
			}
			this._isKSFile = false;
			this._moduleName = moduleName;
			if(this._data.specifiers.length === 0) {
				var parts = this._data.source.value.split("/");
				for(var __ks_0 = parts.length - 1, __ks_1 = 0, part; __ks_0 >= __ks_1 && (this._alias === null); --__ks_0) {
					part = parts[__ks_0];
					if(!(/(?:^\.+$|^@)/.test(part) === true)) {
						var dots = part.split(".");
						var last = KSOperator.subtraction(dots.length, 1);
						if(last === 0) {
							this._alias = dots[0].replace(/[-_]+(.)/g, function(m, l) {
								if(arguments.length < 2) {
									throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
								}
								if(m === void 0 || m === null) {
									throw new TypeError("'m' is not nullable");
								}
								if(l === void 0 || l === null) {
									throw new TypeError("'l' is not nullable");
								}
								return l.toUpperCase();
							});
						}
						else if($importExts.data[dots[last]] === true) {
							this._alias = dots.slice(0, last).join(".").replace(/[-_.]+(.)/g, function(m, l) {
								if(arguments.length < 2) {
									throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
								}
								if(m === void 0 || m === null) {
									throw new TypeError("'m' is not nullable");
								}
								if(l === void 0 || l === null) {
									throw new TypeError("'l' is not nullable");
								}
								return l.toUpperCase();
							});
						}
						else if($importExts.source[dots[last]] === true) {
							this._alias = dots[KSOperator.subtraction(last, 1)].replace(/[-_]+(.)/g, function(m, l) {
								if(arguments.length < 2) {
									throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
								}
								if(m === void 0 || m === null) {
									throw new TypeError("'m' is not nullable");
								}
								if(l === void 0 || l === null) {
									throw new TypeError("'l' is not nullable");
								}
								return l.toUpperCase();
							});
						}
						else {
							this._alias = dots[last].replace(/[-_]+(.)/g, function(m, l) {
								if(arguments.length < 2) {
									throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
								}
								if(m === void 0 || m === null) {
									throw new TypeError("'m' is not nullable");
								}
								if(l === void 0 || l === null) {
									throw new TypeError("'l' is not nullable");
								}
								return l.toUpperCase();
							});
						}
					}
				}
				if(this._alias === null) {
					SyntaxException.throwUnnamedWildcardImport(this);
				}
				this.addVariable(this._alias, this._alias, false, null);
			}
			else {
				var type;
				for(var __ks_0 = 0, __ks_1 = this._data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
					specifier = this._data.specifiers[__ks_0];
					if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportExclusionSpecifier.value) {
						NotSupportedException.throw("JavaScript import doesn't support exclusions", this);
					}
					else if(KSHelper.valueOf(specifier.kind) === NodeKind.ImportNamespaceSpecifier.value) {
						this._alias = specifier.local.name;
						if(KSType.isValue(specifier.specifiers) ? specifier.specifiers.length !== 0 : false) {
							type = new NamespaceType(this._scope);
							for(var __ks_2 = 0, __ks_3 = specifier.specifiers.length, s; __ks_2 < __ks_3; ++__ks_2) {
								s = specifier.specifiers[__ks_2];
								if(KSHelper.valueOf(s.imported.kind) === NodeKind.Identifier.value) {
									type.addProperty(s.local.name, Type.Any);
								}
								else {
									type.addProperty(s.local.name, Type.fromAST(s.imported, this).flagAlien());
								}
							}
							this.addVariable(this._alias, this._alias, false, type);
						}
						else {
							this.addVariable(this._alias, this._alias, false, null);
						}
					}
					else {
						if(KSHelper.valueOf(specifier.imported.kind) === NodeKind.Identifier.value) {
							this.addVariable(specifier.imported.name, specifier.local.name, true, null);
						}
						else {
							type = Type.fromAST(specifier.imported, this).flagAlien();
							this.addVariable(specifier.imported.name.name, specifier.local.name, true, type);
						}
					}
				}
			}
			return true;
		},
		loadNodeFile: function() {
			if(arguments.length >= 0 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_loadNodeFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadNodeFile) {
				return Statement.prototype.loadNodeFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadNodeModule_0: function(x, start) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			var dirs = $nodeModulesPaths(start);
			var file, metadata;
			for(var __ks_0 = 0, __ks_1 = dirs.length, dir; __ks_0 < __ks_1; ++__ks_0) {
				dir = dirs[__ks_0];
				file = path.join(dir, x);
				if((this.loadFile(file, x) === true) || (this.loadDirectory(file, x) === true)) {
					return true;
				}
			}
			return false;
		},
		loadNodeModule: function() {
			if(arguments.length === 2) {
				return Importer.prototype.__ks_func_loadNodeModule_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadNodeModule) {
				return Statement.prototype.loadNodeModule.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_readMetadata_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			try {
				return JSON.parse(fs.readFile(file), function(key, value) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(key === void 0 || key === null) {
						throw new TypeError("'key' is not nullable");
					}
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return ((key === "max") && (value === "Infinity")) ? Infinity : value;
				});
			}
			catch(__ks_0) {
				return null;
			}
		},
		readMetadata: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_readMetadata_0.apply(this, arguments);
			}
			else if(Statement.prototype.readMetadata) {
				return Statement.prototype.readMetadata.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._parent.registerMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return Importer.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toImportFragments_0: function(fragments, destructuring) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(destructuring === void 0 || destructuring === null) {
				destructuring = true;
			}
			if(this._isKSFile) {
				this.toKSFileFragments(fragments, destructuring);
			}
			else {
				this.toNodeFileFragments(fragments, destructuring);
			}
		},
		toImportFragments: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_toImportFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toImportFragments) {
				return Statement.prototype.toImportFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toKSFileFragments_0: function(fragments, destructuring) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(destructuring === void 0 || destructuring === null) {
				throw new TypeError("'destructuring' is not nullable");
			}
			if(this._count === 0) {
				if(this._alias !== null) {
					var line = fragments.newLine().code("var ", this._alias, " = ");
					this.toRequireFragments(line);
					line.done();
				}
				else if(this._arguments.length !== 0) {
					var line = fragments.newLine();
					this.toRequireFragments(line);
					line.done();
				}
			}
			else {
				if(this._alias !== null) {
					var line = fragments.newLine().code("var ", this._reuseName, " = ");
					this.toRequireFragments(line);
					line.done();
				}
				if(this._count === 1) {
					var alias, name;
					for(name in this._variables) {
						alias = this._variables[name];
					}
					var line = fragments.newLine().code("var " + alias + " = ");
					this.toRequireFragments(line);
					line.code("." + name).done();
				}
				else {
					if(!(destructuring === true) || (this._options.format.destructuring === "es5")) {
						var variable;
						if(this._reusable) {
							variable = this._reuseName;
						}
						else {
							var line = fragments.newLine().code("var __ks__ = ");
							this.toRequireFragments(line);
							line.done();
							variable = "__ks__";
						}
						if(destructuring === true) {
							var line = fragments.newLine().code("var ");
							var nf = false;
							for(var name in this._variables) {
								var alias = this._variables[name];
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								if((alias === name) && ($virtuals[name] === true)) {
									line.code("__ks_" + alias + " = " + variable + ".__ks_" + name);
								}
								else {
									line.code("" + alias + " = " + variable + "." + name);
									if(this._sealedVariables[name] === true) {
										line.code(", __ks_" + alias + " = " + variable + ".__ks_" + name);
									}
								}
							}
							line.done();
						}
					}
					else {
						var line = fragments.newLine().code("var {");
						var nf = false;
						for(var name in this._variables) {
							var alias = this._variables[name];
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(alias === name) {
								if($virtuals[name] === true) {
									line.code("__ks_" + name);
								}
								else {
									line.code(name);
									if(this._sealedVariables[name] === true) {
										line.code(", __ks_" + name);
									}
								}
							}
							else {
								line.code(name + ": " + alias);
								if(this._sealedVariables[name] === true) {
									line.code(", __ks_" + name + ": __ks_" + alias);
								}
							}
						}
						line.code("} = ");
						this.toRequireFragments(line);
						line.done();
					}
				}
			}
		},
		toKSFileFragments: function() {
			if(arguments.length === 2) {
				return Importer.prototype.__ks_func_toKSFileFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toKSFileFragments) {
				return Statement.prototype.toKSFileFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNodeFileFragments_0: function(fragments, destructuring) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(destructuring === void 0 || destructuring === null) {
				throw new TypeError("'destructuring' is not nullable");
			}
			if(this._count === 0) {
				if(this._alias !== null) {
					var line = fragments.newLine().code("var ", this._alias, " = ");
					this.toRequireFragments(line);
					line.done();
				}
			}
			else {
				if(this._alias !== null) {
					var line = fragments.newLine().code("var ", this._reuseName, " = ");
					this.toRequireFragments(line);
					line.done();
				}
				var name, alias;
				if(this._count === 1) {
					var __ks_alias_1, __ks_name_1;
					for(__ks_name_1 in this._variables) {
						__ks_alias_1 = this._variables[__ks_name_1];
					}
					var line = fragments.newLine().code("var " + __ks_alias_1 + " = ");
					this.toRequireFragments(line);
					line.code("." + __ks_name_1).done();
				}
				else if(this._count > 0) {
					if(!(destructuring === true) || (this._options.format.destructuring === "es5")) {
						var line = fragments.newLine().code("var __ks__ = ");
						this.toRequireFragments(line);
						line.done();
						if(destructuring === true) {
							line = fragments.newLine().code("var ");
							var nf = false;
							for(var __ks_name_1 in this._variables) {
								var __ks_alias_1 = this._variables[__ks_name_1];
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								line.code("" + __ks_alias_1 + " = __ks__." + __ks_name_1);
							}
							line.done();
						}
					}
					else {
						var line = fragments.newLine().code("var {");
						var nf = false;
						for(var __ks_name_1 in this._variables) {
							var __ks_alias_1 = this._variables[__ks_name_1];
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(__ks_alias_1 === __ks_name_1) {
								line.code(__ks_name_1);
							}
							else {
								line.code(__ks_name_1, ": ", __ks_alias_1);
							}
						}
						line.code("} = ");
						this.toRequireFragments(line);
						line.done();
					}
				}
			}
		},
		toNodeFileFragments: function() {
			if(arguments.length === 2) {
				return Importer.prototype.__ks_func_toNodeFileFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toNodeFileFragments) {
				return Statement.prototype.toNodeFileFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toRequireFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else {
				var modulePath = (this._isKSFile && ($localFileRegex.test(this._moduleName) === true) && (this._parent.includePath() !== null)) ? path.join(path.dirname(this._parent.includePath()), this._moduleName) : this._moduleName;
				fragments.code("require(" + $quote(modulePath) + ")");
				if(this._hasArguments) {
					fragments.code("(");
					var nf = false;
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						if(argument.index !== null) {
							if(nf) {
								fragments.code($comma);
							}
							else {
								nf = true;
							}
							fragments.compile(argument.value);
							if((argument.isIdentifier === true) && (argument.type.isSealed() === true)) {
								fragments.code(", __ks_" + argument.identifier);
							}
						}
					}
					fragments.code(")");
				}
				this._reusable = true;
			}
		},
		toRequireFragments: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_toRequireFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toRequireFragments) {
				return Statement.prototype.toRequireFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImportDeclaration = KSHelper.class({
		$name: "ImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				this._declarators.push(declarator = new ImportDeclarator(declarator, this));
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._parent.registerMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return ImportDeclaration.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toFragments(fragments, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImportDeclarator = KSHelper.class({
		$name: "ImportDeclarator",
		$extends: Importer,
		__ks_init: function() {
			Importer.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Importer.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.toImportFragments(fragments);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Importer.prototype.toStatementFragments) {
				return Importer.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImportWorker = KSHelper.class({
		$name: "ImportWorker",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(metadata, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(metadata === void 0 || metadata === null) {
				throw new TypeError("'metadata' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._metadata = metadata;
			this._node = node;
			this._scope = new ImportScope(node.scope());
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ImportWorker.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_hasType_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._scope.hasDefinedVariable(name);
		},
		hasType: function() {
			if(arguments.length === 1) {
				return ImportWorker.prototype.__ks_func_hasType_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getType_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._scope.getDefinedVariable(name).getDeclaredType();
		},
		getType: function() {
			if(arguments.length === 1) {
				return ImportWorker.prototype.__ks_func_getType_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			var references = [];
			var queue = [];
			var index, name, type, argument;
			if(KSOperator.gt(this._metadata.requirements.length, 0)) {
				var reqReferences = [];
				var alterations = new Dictionary();
				for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
					index = this._metadata.requirements[i];
					type = Type.import(index, this._metadata, reqReferences, alterations, queue, this._scope, this._node);
					reqReferences[index] = Type.toNamedType(this._metadata.requirements[i + 1], type);
				}
				while(queue.length > 0) {
					queue.shift()();
				}
				var matchables = [];
				for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
					name = this._metadata.requirements[i + 1];
					if((KSType.isValue(__ks_arguments_1[name]) ? (argument = __ks_arguments_1[name], true) : false) && !(argument.required === true) && !(reqReferences[this._metadata.requirements[i]].isAny() === true) && !(argument.type.isMatching(reqReferences[this._metadata.requirements[i]], MatchingMode.Signature) === true)) {
						TypeException.throwNotCompatibleArgument(argument.name, name, this._node.data().source.value, this._node);
					}
				}
				for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
					if(KSType.isValue(__ks_arguments_1[this._metadata.requirements[i + 1]]) ? (argument = __ks_arguments_1[this._metadata.requirements[i + 1]], true) : false) {
						if(argument.required === true) {
							argument.type = reqReferences[this._metadata.requirements[i]];
						}
						references[this._metadata.requirements[i]] = argument.type;
					}
				}
			}
			var alterations = new Dictionary();
			for(var i = 0, __ks_0 = this._metadata.aliens.length; i < __ks_0; i += 2) {
				index = this._metadata.aliens[i];
				name = this._metadata.aliens[i + 1];
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				type = references[index] = Type.toNamedType(name, type);
			}
			for(var i = 0, __ks_0 = this._metadata.requirements.length; i < __ks_0; i += 3) {
				index = this._metadata.requirements[i];
				name = this._metadata.requirements[i + 1];
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				references[index] = Type.toNamedType(name, type);
			}
			for(var i = 0, __ks_0 = this._metadata.exports.length; i < __ks_0; i += 2) {
				index = this._metadata.exports[i];
				name = this._metadata.exports[i + 1];
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				type = references[index] = Type.toNamedType(name, type);
				this._scope.addVariable(name, new Variable(name, false, false, type), this._node);
			}
			for(var i = 0, __ks_0 = this._metadata.aliens.length; i < __ks_0; i += 2) {
				index = this._metadata.aliens[i];
				name = this._metadata.aliens[i + 1];
				if(!(this._scope.hasVariable(name) === true)) {
					this._scope.addVariable(name, new Variable(name, false, false, references[index]), this._node);
				}
			}
			var __ks_1;
			for(var __ks_index_1 = 0, __ks_0 = this._metadata.references.length; __ks_index_1 < __ks_0; ++__ks_index_1) {
				if(!KSType.isValue(references[__ks_index_1])) {
					var __ks_type_1 = Type.import(__ks_index_1, this._metadata, references, alterations, queue, this._scope, this._node);
					if(KSType.isInstance(__ks_type_1, AliasType) || KSType.isInstance(__ks_type_1, ClassType) || KSType.isInstance(__ks_type_1, EnumType)) {
						__ks_type_1 = new NamedType(this._scope.acquireTempName(), __ks_type_1);
						this._scope.define(__ks_type_1.name(), true, __ks_type_1, this._node);
					}
					else if(KSType.isInstance(__ks_type_1, NamespaceType)) {
						__ks_type_1 = new NamedContainerType(this._scope.acquireTempName(), __ks_type_1);
						this._scope.define(__ks_type_1.name(), true, __ks_type_1, this._node);
					}
					references[__ks_index_1] = __ks_type_1;
				}
			}
			while(queue.length > 0) {
				queue.shift()();
			}
		},
		prepare: function() {
			if(arguments.length === 1) {
				return ImportWorker.prototype.__ks_func_prepare_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return ImportWorker.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DependencyKind = KSHelper.enum(Number, {
		Extern: 0,
		ExternOrRequire: 1,
		Require: 2,
		RequireOrExtern: 3,
		RequireOrImport: 4
	});
	var DependencyStatement = KSHelper.class({
		$name: "DependencyStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_define_0: function(declaration, kind) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(declaration === void 0 || declaration === null) {
				throw new TypeError("'declaration' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			var scope = this._parent.scope();
			var __ks_0 = declaration.kind.valueOf();
			if(__ks_0 === NodeKind.ClassDeclaration.value) {
				var type = new ClassType(scope);
				var variable = scope.define(declaration.name.name, true, type, this);
				if(KSType.isValue(declaration.extends)) {
					var superVar, __ks_1;
					if(KSType.isValue(__ks_1 = this._scope.getVariable(declaration.extends.name)) ? (superVar = __ks_1, false) : true) {
						ReferenceException.throwNotDefined(declaration.extends.name, this);
					}
					else if(!(superVar.getDeclaredType().isClass() === true)) {
						TypeException.throwNotClass(declaration.extends.name, this);
					}
					type.extends(superVar.getDeclaredType());
				}
				if(kind.valueOf() !== DependencyKind.Extern.value) {
					type.flagRequired();
				}
				if((kind.valueOf() === DependencyKind.Extern.value) || (kind.valueOf() === DependencyKind.ExternOrRequire.value) || (kind.valueOf() === DependencyKind.RequireOrExtern.value)) {
					type = type.flagAlien();
				}
				for(var __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Abstract.value) {
						type.flagAbstract();
					}
					else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
						type.flagSealed();
					}
				}
				if(declaration.members.length !== 0) {
					for(var __ks_1 = 0, __ks_2 = declaration.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
						member = declaration.members[__ks_1];
						type.addPropertyFromAST(member, this);
					}
					type.setExhaustive(true);
				}
				if(this._options.rules.nonExhaustive === true) {
					type.setExhaustive(false);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.EnumDeclaration.value) {
				var __ks_kind_1 = EnumTypeKind.Number;
				if(KSType.isValue(declaration.type)) {
					if(Type.fromAST(declaration.type, this).isString() === true) {
						__ks_kind_1 = EnumTypeKind.String;
					}
				}
				var type = new EnumType(scope, __ks_kind_1);
				var variable = scope.define(declaration.name.name, true, type, this);
				if(__ks_kind_1 !== DependencyKind.Extern) {
					type.flagRequired();
				}
				if((__ks_kind_1 === DependencyKind.Extern) || (__ks_kind_1 === DependencyKind.ExternOrRequire) || (__ks_kind_1 === DependencyKind.RequireOrExtern)) {
					type = type.flagAlien();
				}
				if(declaration.members.length !== 0) {
					for(var __ks_1 = 0, __ks_2 = declaration.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
						member = declaration.members[__ks_1];
						type.addElement(member.name.name);
					}
					type.setExhaustive(true);
				}
				if(this._options.rules.nonExhaustive === true) {
					type.setExhaustive(false);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.FunctionDeclaration.value) {
				var type;
				if(KSType.isValue(declaration.parameters)) {
					var parameters = KSHelper.mapArray(declaration.parameters, KSHelper.vcurry(function(parameter) {
						return Type.fromAST(parameter, this);
					}, this));
					type = new FunctionType(parameters, declaration, this);
					type.setExhaustive(true);
				}
				else {
					type = this.scope().reference("Function");
				}
				var variable = scope.define(declaration.name.name, true, type, true, this);
				if(kind.valueOf() !== DependencyKind.Extern.value) {
					type.flagRequired();
				}
				if((kind.valueOf() === DependencyKind.Extern.value) || (kind.valueOf() === DependencyKind.ExternOrRequire.value) || (kind.valueOf() === DependencyKind.RequireOrExtern.value)) {
					type = type.flagAlien();
				}
				if(this._options.rules.nonExhaustive === true) {
					type.setExhaustive(false);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.NamespaceDeclaration.value) {
				var type = new NamespaceType(scope);
				var variable = scope.define(declaration.name.name, true, type, this);
				if(kind.valueOf() !== DependencyKind.Extern.value) {
					type.flagRequired();
				}
				if((kind.valueOf() === DependencyKind.Extern.value) || (kind.valueOf() === DependencyKind.ExternOrRequire.value) || (kind.valueOf() === DependencyKind.RequireOrExtern.value)) {
					type = type.flagAlien();
				}
				for(var __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value) {
						type.flagSealed();
					}
				}
				if(declaration.statements.length !== 0) {
					for(var __ks_1 = 0, __ks_2 = declaration.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
						statement = declaration.statements[__ks_1];
						type.addPropertyFromAST(statement, this);
					}
					type.setExhaustive(true);
				}
				if(this._options.rules.nonExhaustive === true) {
					type.setExhaustive(false);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.VariableDeclarator.value) {
				var type = Type.fromAST(declaration.type, this);
				var instance = KSType.isInstance(type, ClassType);
				if(KSType.isInstance(type, ReferenceType) && (type.isClass() === true)) {
					type = new ClassType(scope);
				}
				if(declaration.modifiers.some(function(modifier) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(modifier === void 0 || modifier === null) {
						throw new TypeError("'modifier' is not nullable");
					}
					return KSHelper.valueOf(modifier.kind) === ModifierKind.Sealed.value;
				}) === true) {
					if(KSType.isInstance(type, ReferenceType) && (type.isClass() === true)) {
						type = new ClassType(scope);
					}
					else if(!(type.isSealable() === true)) {
						type = new SealableType(scope, type);
					}
					type.flagSealed();
				}
				if((kind.valueOf() === DependencyKind.Extern.value) || (kind.valueOf() === DependencyKind.ExternOrRequire.value) || (kind.valueOf() === DependencyKind.RequireOrExtern.value)) {
					type = type.flagAlien();
				}
				if(instance) {
					type = this._scope.reference(type);
				}
				var variable = scope.define(declaration.name.name, true, type, true, this);
				if(kind.valueOf() !== DependencyKind.Extern.value) {
					type.flagRequired();
				}
				return variable;
			}
			else {
				throw new NotSupportedException("Unexpected kind " + declaration.kind, this);
			}
		},
		define: function() {
			if(arguments.length === 2) {
				return DependencyStatement.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Statement.prototype.define) {
				return Statement.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExternDeclaration = KSHelper.class({
		$name: "ExternDeclaration",
		$extends: DependencyStatement,
		__ks_init_1: function() {
			this._lines = [];
		},
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
			ExternDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			var variable;
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				var __ks_2;
				if((KSType.isValue(__ks_2 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_2, true) : false) && !(variable.isPredefined() === true)) {
					if(KSHelper.valueOf(declaration.kind) === NodeKind.FunctionDeclaration.value) {
						var parameters;
						if(KSType.isValue(declaration.parameters) ? declaration.parameters.length !== 0 : false) {
							parameters = KSHelper.mapArray(declaration.parameters, KSHelper.vcurry(function(parameter) {
								return Type.fromAST(parameter, this);
							}, this));
						}
						else {
							parameters = [new ParameterType(this._scope, Type.Any, 0, Infinity)];
						}
						var type = new FunctionType(parameters, declaration, this);
						if(KSType.isInstance(variable.getDeclaredType(), FunctionType)) {
							var newType = new OverloadedFunctionType(this._scope);
							newType.addFunction(variable.getDeclaredType());
							newType.addFunction(type);
							variable.setDeclaredType(newType);
						}
						else if(KSType.isInstance(variable.getDeclaredType(), OverloadedFunctionType)) {
							variable.getDeclaredType().addFunction(type);
						}
						else {
							SyntaxException.throwAlreadyDeclared(declaration.name.name, this);
						}
					}
					else if(this._parent.includePath() === null) {
						variable = this.define(declaration, DependencyKind.Extern);
						if((variable.getDeclaredType().isSealed() === true) && (variable.getDeclaredType().isExtendable() === true)) {
							this._lines.push("var " + variable.getDeclaredType().getSealedName() + " = {}");
						}
					}
					else {
					}
				}
				else {
					variable = this.define(declaration, DependencyKind.Extern);
					if((variable.getDeclaredType().isSealed() === true) && (variable.getDeclaredType().isExtendable() === true)) {
						this._lines.push("var " + variable.getDeclaredType().getSealedName() + " = {}");
					}
				}
				module.addAlien(variable.name(), variable.getDeclaredType());
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._lines.length, line; __ks_0 < __ks_1; ++__ks_0) {
				line = this._lines[__ks_0];
				fragments.line(line);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RequireDeclaration = KSHelper.class({
		$name: "RequireDeclaration",
		$extends: DependencyStatement,
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			if(module.isBinary() === true) {
				SyntaxException.throwNotBinary("require", this);
			}
			var variable;
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				var __ks_2;
				if(KSType.isValue(__ks_2 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_2, true) : false) {
					if(KSHelper.valueOf(declaration.kind) === NodeKind.FunctionDeclaration.value) {
						var requirement = module.getRequirement(declaration.name.name);
						var parameters;
						if(KSType.isValue(declaration.parameters) ? declaration.parameters.length !== 0 : false) {
							parameters = KSHelper.mapArray(declaration.parameters, KSHelper.vcurry(function(parameter) {
								return Type.fromAST(parameter, this);
							}, this));
						}
						else {
							parameters = [new ParameterType(this._scope, Type.Any, 0, Infinity)];
						}
						var type = new FunctionType(parameters, declaration, this);
						if(KSType.isInstance(variable.getDeclaredType(), FunctionType)) {
							var newType = new OverloadedFunctionType(this._scope);
							newType.addFunction(variable.getDeclaredType());
							newType.addFunction(type);
							variable.setDeclaredType(newType);
							requirement.type(newType);
						}
						else if(KSType.isInstance(variable.getDeclaredType(), OverloadedFunctionType)) {
							variable.getDeclaredType().addFunction(type);
						}
						else {
							SyntaxException.throwAlreadyDeclared(declaration.name.name, this);
						}
					}
					else if(this._parent.includePath() === null) {
						module.addRequirement(new StaticRequirement(declaration, this));
					}
					else {
					}
				}
				else {
					module.addRequirement(new StaticRequirement(declaration, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ExternOrRequireDeclaration = KSHelper.class({
		$name: "ExternOrRequireDeclaration",
		$extends: DependencyStatement,
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			if(module.isBinary() === true) {
				SyntaxException.throwNotBinary("extern|require", this);
			}
			module.flag("Type");
			if(this._parent.includePath() !== null) {
				var variable;
				for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					var __ks_2;
					if(KSType.isValue(__ks_2 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_2, true) : false) {
					}
					else {
						module.addRequirement(new EORDynamicRequirement(declaration, this));
					}
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					module.addRequirement(new EORDynamicRequirement(declaration, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternOrRequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RequireOrExternDeclaration = KSHelper.class({
		$name: "RequireOrExternDeclaration",
		$extends: DependencyStatement,
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			if(module.isBinary() === true) {
				SyntaxException.throwNotBinary("require|extern", this);
			}
			module.flag("Type");
			if(this._parent.includePath() !== null) {
				var variable;
				for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					var __ks_2;
					if(KSType.isValue(__ks_2 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_2, true) : false) {
					}
					else {
						module.addRequirement(new ROEDynamicRequirement(declaration, this));
					}
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
					declaration = this._data.declarations[__ks_0];
					module.addRequirement(new ROEDynamicRequirement(declaration, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RequireOrImportDeclaration = KSHelper.class({
		$name: "RequireOrImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			RequireOrImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this.module().isBinary() === true) {
				SyntaxException.throwNotBinary("require|import", this);
			}
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				this._declarators.push(declarator = new RequireOrImportDeclarator(declarator, this));
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toStatementFragments(fragments, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RequireOrImportDeclarator = KSHelper.class({
		$name: "RequireOrImportDeclarator",
		$extends: Importer,
		__ks_init_1: function() {
			this._printed = false;
			this._requirements = [];
		},
		__ks_init: function() {
			Importer.prototype.__ks_init.call(this);
			RequireOrImportDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Importer.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			Importer.prototype.prepare.apply(this, []);
			var module = this.module();
			if(this._count !== 0) {
				if(this._parent.includePath() === null) {
					var line = this.line();
					for(var __ks_0 in this._variables) {
						var alias = this._variables[__ks_0];
						var variable = this._scope.getVariable(alias);
						if(this._scope.hasDefinedVariableBefore(alias, line) === true) {
							variable.declaration().flagForcefullyRebinded();
						}
						else {
							var requirement = new ROIDynamicRequirement(this._scope.getVariable(alias), this);
							this._requirements.push(requirement);
							module.addRequirement(requirement);
						}
					}
				}
				else {
					throw new NotImplementedException(this);
				}
			}
			if(this._requirements.length > 0) {
				for(var __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					requirement.acquireTempName();
				}
			}
			if(this._alias !== null) {
				throw new NotImplementedException(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			return Importer.prototype.prepare.apply(this, arguments);
		},
		__ks_func_flagForcefullyRebinded_0: function() {
		},
		flagForcefullyRebinded: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclarator.prototype.__ks_func_flagForcefullyRebinded_0.apply(this);
			}
			else if(Importer.prototype.flagForcefullyRebinded) {
				return Importer.prototype.flagForcefullyRebinded.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_metadata_0: function() {
			return this._metadata;
		},
		metadata: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclarator.prototype.__ks_func_metadata_0.apply(this);
			}
			else if(Importer.prototype.metadata) {
				return Importer.prototype.metadata.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._requirements.length === 0) {
				this.toImportFragments(fragments);
			}
			else if(this._requirements.length === 1) {
				var requirement = this._requirements[0];
				var ctrl = fragments.newControl();
				ctrl.code("if(!", $runtime.type(this), ".isValue(", requirement.name(), "))").step();
				this.toImportFragments(ctrl);
				ctrl.done();
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					fragments.line("var " + requirement.tempName() + "_valuable = " + $runtime.type(this) + ".isValue(" + requirement.name() + ")");
				}
				var ctrl = fragments.newControl().code("if(");
				for(var index = 0, __ks_0 = this._requirements.length, requirement; index < __ks_0; ++index) {
					requirement = this._requirements[index];
					if(index !== 0) {
						ctrl.code(" || ");
					}
					ctrl.code("!" + requirement.tempName() + "_valuable");
				}
				ctrl.code(")").step();
				this.toImportFragments(ctrl, false);
				for(var __ks_0 = 0, __ks_1 = this._requirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
					requirement = this._requirements[__ks_0];
					if(requirement.isFlexible() === true) {
						var control = ctrl.newControl().code("if(!" + requirement.tempName() + "_valuable)").step();
						control.line("" + requirement.name() + " = __ks__." + requirement.name());
						control.line("__ks_" + requirement.name() + " = __ks__.__ks_" + requirement.name());
						control.done();
					}
					else {
						ctrl.line("" + requirement.name() + " = " + requirement.tempName() + "_valuable ? " + requirement.name() + " : __ks__." + requirement.name());
					}
				}
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrImportDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Importer.prototype.toStatementFragments) {
				return Importer.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var Requirement = KSHelper.class({
		$name: "Requirement",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			this._name = name;
			this._type = type;
			this._node = node;
			if(this._name === "Dictionary") {
				node.module().flag("Dictionary");
			}
		},
		__ks_cons_1: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [variable.name(), variable.getDeclaredType(), node]);
		},
		__ks_cons_2: function(data, kind, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			else if(!KSType.isEnumMember(kind, DependencyKind)) {
				throw new TypeError("'kind' is not of type 'DependencyKind'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [node.define(data, kind), node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				Requirement.prototype.__ks_cons_1.apply(this, args);
			}
			else if(args.length === 3) {
				if(KSType.isEnumMember(args[1], DependencyKind)) {
					Requirement.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					Requirement.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isAlien_0: function() {
			return false;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_isAlien_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return this._type.isFlexible();
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_isFlexible_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_name_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNameFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._name);
			if(this._type.isFlexible() === true) {
				fragments.code(", __ks_" + this._name);
			}
		},
		toNameFragments: function() {
			if(arguments.length === 1) {
				return Requirement.prototype.__ks_func_toNameFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Requirement.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var StaticRequirement = KSHelper.class({
		$name: "StaticRequirement",
		$extends: Requirement,
		__ks_init: function() {
			Requirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [name, type, node]);
		},
		__ks_cons_1: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [data, DependencyKind.Require, node]);
		},
		__ks_cons_2: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [variable, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				if(KSType.isInstance(args[0], Variable)) {
					StaticRequirement.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					StaticRequirement.prototype.__ks_cons_1.apply(this, args);
				}
			}
			else if(args.length === 3) {
				StaticRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isRequired_0: function() {
			return true;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return StaticRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			else if(Requirement.prototype.isRequired) {
				return Requirement.prototype.isRequired.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return this._name;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return StaticRequirement.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Requirement.prototype.parameter) {
				return Requirement.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._name);
			if(this._type.isFlexible() === true) {
				fragments.code(", __ks_" + this._name);
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return StaticRequirement.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(Requirement.prototype.toParameterFragments) {
				return Requirement.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ImportingRequirement = KSHelper.class({
		$name: "ImportingRequirement",
		$extends: StaticRequirement,
		__ks_init: function() {
			StaticRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, type, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			StaticRequirement.prototype.__ks_cons.call(this, [name, type, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImportingRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isRequired_0: function() {
			return false;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return ImportingRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			return StaticRequirement.prototype.isRequired.apply(this, arguments);
		}
	});
	var DynamicRequirement = KSHelper.class({
		$name: "DynamicRequirement",
		$extends: Requirement,
		__ks_init: function() {
			Requirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [variable, node]);
			this._parameter = this._node.module().scope().acquireTempName(false);
		},
		__ks_cons_1: function(data, kind, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Requirement.prototype.__ks_cons.call(this, [data, kind, node]);
			this._node = node;
			this._parameter = node.module().scope().acquireTempName(false);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				DynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				DynamicRequirement.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isRequired_0: function() {
			return false;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return DynamicRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			else if(Requirement.prototype.isRequired) {
				return Requirement.prototype.isRequired.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return this._parameter;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return DynamicRequirement.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Requirement.prototype.parameter) {
				return Requirement.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, index) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			fragments.code(this._name + " = __ks__[" + ++index + "]");
			if(this._type.isFlexible() === true) {
				fragments.code(", __ks_" + this._name + " = __ks__[" + ++index + "]");
			}
			return index;
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return DynamicRequirement.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Requirement.prototype.toAssignmentFragments) {
				return Requirement.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._parameter);
			if(this._type.isFlexible() === true) {
				fragments.code(", __ks_" + this._parameter);
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return DynamicRequirement.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(Requirement.prototype.toParameterFragments) {
				return Requirement.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var EORDynamicRequirement = KSHelper.class({
		$name: "EORDynamicRequirement",
		$extends: DynamicRequirement,
		__ks_init: function() {
			DynamicRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			DynamicRequirement.prototype.__ks_cons.call(this, [data, DependencyKind.ExternOrRequire, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				EORDynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isAlien_0: function() {
			return true;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return EORDynamicRequirement.prototype.__ks_func_isAlien_0.apply(this);
			}
			return DynamicRequirement.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_toAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(" + $runtime.type(this._node) + ".isValue(" + this._name + "))").step();
			if(this._type.isFlexible() === true) {
				ctrl.line("req.push(" + this._name + ", typeof __ks_" + this._name + " === \"undefined\" ? {} : __ks_" + this._name + ")").step().code("else").step().line("req.push(" + this._parameter + ", __ks_" + this._parameter + ")");
			}
			else {
				ctrl.line("req.push(" + this._name + ")").step().code("else").step().line("req.push(" + this._parameter + ")");
			}
			ctrl.done();
		},
		toAltFragments: function() {
			if(arguments.length === 1) {
				return EORDynamicRequirement.prototype.__ks_func_toAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toAltFragments) {
				return DynamicRequirement.prototype.toAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ROEDynamicRequirement = KSHelper.class({
		$name: "ROEDynamicRequirement",
		$extends: DynamicRequirement,
		__ks_init: function() {
			DynamicRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.isInstance(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			DynamicRequirement.prototype.__ks_cons.call(this, [data, DependencyKind.RequireOrExtern, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ROEDynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isAlien_0: function() {
			return true;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return ROEDynamicRequirement.prototype.__ks_func_isAlien_0.apply(this);
			}
			return DynamicRequirement.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_toAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(" + $runtime.type(this._node) + ".isValue(" + this._parameter + "))").step();
			if(this._type.isFlexible() === true) {
				ctrl.line("req.push(" + this._parameter + ", __ks_" + this._parameter + ")").step().code("else").step().line("req.push(" + this._name + ", typeof __ks_" + this._name + " === \"undefined\" ? {} : __ks_" + this._name + ")");
			}
			else {
				ctrl.line("req.push(" + this._parameter + ")").step().code("else").step().line("req.push(" + this._name + ")");
			}
			ctrl.done();
		},
		toAltFragments: function() {
			if(arguments.length === 1) {
				return ROEDynamicRequirement.prototype.__ks_func_toAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toAltFragments) {
				return DynamicRequirement.prototype.toAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ROIDynamicRequirement = KSHelper.class({
		$name: "ROIDynamicRequirement",
		$extends: StaticRequirement,
		__ks_init: function() {
			StaticRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(variable, importer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(importer === void 0 || importer === null) {
				throw new TypeError("'importer' is not nullable");
			}
			StaticRequirement.prototype.__ks_cons.call(this, [variable, this._importer = importer]);
			variable.getDeclaredType().condense();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ROIDynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireTempName_0: function() {
			this._tempName = this._node.module().scope().acquireTempName(false);
		},
		acquireTempName: function() {
			if(arguments.length === 0) {
				return ROIDynamicRequirement.prototype.__ks_func_acquireTempName_0.apply(this);
			}
			else if(StaticRequirement.prototype.acquireTempName) {
				return StaticRequirement.prototype.acquireTempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRequired_0: function() {
			return false;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return ROIDynamicRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			return StaticRequirement.prototype.isRequired.apply(this, arguments);
		},
		__ks_func_tempName_0: function() {
			return this._tempName;
		},
		tempName: function() {
			if(arguments.length === 0) {
				return ROIDynamicRequirement.prototype.__ks_func_tempName_0.apply(this);
			}
			else if(StaticRequirement.prototype.tempName) {
				return StaticRequirement.prototype.tempName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var $localFileRegex = /^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/;
	var IncludeDeclaration = KSHelper.class({
		$name: "IncludeDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var x;
			for(var __ks_0 = 0, __ks_1 = this._data.files.length, file; __ks_0 < __ks_1; ++__ks_0) {
				file = this._data.files[__ks_0];
				if($localFileRegex.test(file) === true) {
					x = fs.resolve(directory, file);
					if((fs.isFile(x) === true) || (fs.isFile(x = KSOperator.addOrConcat(x, $extensions.source)) === true)) {
						if(this.canLoadLocalFile(x) === true) {
							this.loadLocalFile(x);
						}
					}
					else {
						IOException.throwNotFoundFile(file, directory, this);
					}
				}
				else {
					var modulePath = file;
					var moduleVersion = "";
					var nf = true;
					for(var __ks_2 = 0, __ks_3 = $nodeModulesPaths(directory), __ks_4 = __ks_3.length, dir; __ks_2 < __ks_4 && nf; ++__ks_2) {
						dir = __ks_3[__ks_2];
						x = fs.resolve(dir, file);
						if(fs.isFile(x) === true) {
							nf = false;
						}
						else if(fs.isFile(KSOperator.addOrConcat(x, $extensions.source)) === true) {
							x = KSOperator.addOrConcat(x, $extensions.source);
							modulePath = KSOperator.addOrConcat(modulePath, $extensions.source);
							nf = false;
						}
						else {
							var pkgfile = path.join(x, "package.json");
							if(fs.isFile(pkgfile) === true) {
								var pkg;
								try {
									pkg = JSON.parse(fs.readFile(pkgfile));
								}
								catch(__ks_2) {
								}
								if(KSType.isValue(pkg)) {
									if(KSType.isValue(pkg.kaoscript) && (fs.isFile(path.join(x, pkg.kaoscript.main)) === true)) {
										x = path.join(x, pkg.kaoscript.main);
										modulePath = path.join(modulePath, pkg.kaoscript.main);
										nf = false;
									}
									else if(KSType.isValue(pkg.main)) {
										if(fs.isFile(path.join(x, pkg.main)) === true) {
											x = path.join(x, pkg.main);
											modulePath = path.join(modulePath, pkg.main);
											nf = false;
										}
										else if(fs.isFile(path.join(x, KSOperator.addOrConcat(pkg.main, $extensions.source))) === true) {
											x = path.join(x, KSOperator.addOrConcat(pkg.main, $extensions.source));
											modulePath = path.join(modulePath, KSOperator.addOrConcat(pkg.main, $extensions.source));
											nf = false;
										}
										else if(fs.isFile(path.join(x, pkg.main, KSHelper.concatString("index", $extensions.source))) === true) {
											x = path.join(x, pkg.main, KSHelper.concatString("index", $extensions.source));
											modulePath = path.join(modulePath, pkg.main, KSHelper.concatString("index", $extensions.source));
											nf = false;
										}
									}
									if(!nf) {
										moduleVersion = pkg.version;
									}
								}
							}
							if(nf && (fs.isFile(path.join(x, KSHelper.concatString("index", $extensions.source))) === true)) {
								x = path.join(x, KSHelper.concatString("index", $extensions.source));
								modulePath = path.join(modulePath, KSHelper.concatString("index", $extensions.source));
								nf = false;
							}
						}
					}
					if(nf) {
						IOException.throwNotFoundModule(file, directory, this);
					}
					if(this.canLoadModuleFile(x, file, modulePath, moduleVersion) === true) {
						this.loadModuleFile(x, file, modulePath, moduleVersion);
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_canLoadLocalFile_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return !(this.module().hasInclude(file) === true);
		},
		canLoadLocalFile: function() {
			if(arguments.length === 1) {
				return IncludeDeclaration.prototype.__ks_func_canLoadLocalFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.canLoadLocalFile) {
				return Statement.prototype.canLoadLocalFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_canLoadModuleFile_0: function(file, name, path, version) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(version === void 0 || version === null) {
				throw new TypeError("'version' is not nullable");
			}
			var versions, __ks_0;
			if(KSType.isValue(__ks_0 = this.module().listIncludeVersions(file, path)) ? (versions = __ks_0, true) : false) {
				if(KSOperator.gt(versions.length, 1) || (versions[0] === version)) {
					return false;
				}
				else {
					SyntaxException.throwMismatchedInclude(name, this);
				}
			}
			else {
				return true;
			}
		},
		canLoadModuleFile: function() {
			if(arguments.length === 4) {
				return IncludeDeclaration.prototype.__ks_func_canLoadModuleFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.canLoadModuleFile) {
				return Statement.prototype.canLoadModuleFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return IncludeDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Statement.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_loadLocalFile_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			var module = this.module();
			var data = fs.readFile(path);
			module.addHash(path, module.compiler().sha256(path, data));
			module.addInclude(path);
			try {
				data = module.parse(data, path);
			}
			catch(error) {
				error.filename = path;
				throw error;
			}
			var declarator = new IncludeDeclarator(data, path, this);
			declarator.analyse();
			this._declarators.push(declarator);
		},
		loadLocalFile: function() {
			if(arguments.length === 1) {
				return IncludeDeclaration.prototype.__ks_func_loadLocalFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadLocalFile) {
				return Statement.prototype.loadLocalFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_loadModuleFile_0: function(path, moduleName, modulePath, moduleVersion) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(moduleName === void 0 || moduleName === null) {
				throw new TypeError("'moduleName' is not nullable");
			}
			if(modulePath === void 0 || modulePath === null) {
				throw new TypeError("'modulePath' is not nullable");
			}
			if(moduleVersion === void 0 || moduleVersion === null) {
				throw new TypeError("'moduleVersion' is not nullable");
			}
			var module = this.module();
			var data = fs.readFile(path);
			module.addHash(path, module.compiler().sha256(path, data));
			module.addInclude(path, modulePath, moduleVersion);
			try {
				data = module.parse(data, path);
			}
			catch(error) {
				error.filename = path;
				throw error;
			}
			var declarator = new IncludeDeclarator(data, path, moduleName, this);
			declarator.analyse();
			this._declarators.push(declarator);
		},
		loadModuleFile: function() {
			if(arguments.length === 4) {
				return IncludeDeclaration.prototype.__ks_func_loadModuleFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadModuleFile) {
				return Statement.prototype.loadModuleFile.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			return this._parent.registerMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return IncludeDeclaration.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var IncludeAgainDeclaration = KSHelper.class({
		$name: "IncludeAgainDeclaration",
		$extends: IncludeDeclaration,
		__ks_init: function() {
			IncludeDeclaration.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			IncludeDeclaration.prototype.__ks_cons.call(this, args);
		},
		__ks_func_canLoadLocalFile_0: function() {
			return true;
		},
		canLoadLocalFile: function() {
			return IncludeAgainDeclaration.prototype.__ks_func_canLoadLocalFile_0.apply(this, arguments);
		},
		__ks_func_canLoadModuleFile_0: function() {
			return true;
		},
		canLoadModuleFile: function() {
			return IncludeAgainDeclaration.prototype.__ks_func_canLoadModuleFile_0.apply(this, arguments);
		}
	});
	var IncludeDeclarator = KSHelper.class({
		$name: "IncludeDeclarator",
		$extends: Statement,
		__ks_init_1: function() {
			this._offsetEnd = 0;
			this._offsetStart = 0;
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, file) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			else if(!KSType.isString(file)) {
				throw new TypeError("'file' is not of type 'String'");
			}
			var __ks_i = 1;
			var moduleName;
			if(arguments.length > 3 && (moduleName = arguments[++__ks_i]) !== void 0) {
				if(moduleName !== null && !KSType.isString(moduleName)) {
					throw new TypeError("'moduleName' is not of type 'String?'");
				}
			}
			else {
				moduleName = null;
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._file = file;
			this._directory = path.dirname(file);
			if(moduleName === null) {
				this._includePath = parent.includePath();
			}
			else if((parent.includePath() === null) || !($localFileRegex.test(moduleName) === true)) {
				this._includePath = moduleName;
			}
			else {
				this._includePath = path.join(parent.includePath(), moduleName);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 3 && args.length <= 4) {
				IncludeDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			Attribute.configure(this._data, this.module()._options, AttributeTarget.Global);
			var offset = this._scope.getLineOffset();
			this._offsetStart = this._scope.line();
			this._scope.setLineOffset(this._offsetStart);
			for(var __ks_0 = 0, __ks_1 = this._data.body.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.body[__ks_0];
				this._scope.line(data.start.line);
				var statement = $compile.statement(data, this);
				if(KSType.isValue(statement)) {
					this._statements.push(statement);
					statement.analyse();
				}
			}
			this._scope.line(this._data.end.line);
			this._offsetEnd = (offset + this._scope.line()) - this._offsetStart;
			this._scope.setLineOffset(this._offsetEnd);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._scope.setLineOffset(this._offsetStart);
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			this._scope.setLineOffset(this._offsetEnd);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._scope.setLineOffset(this._offsetStart);
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
			this._scope.setLineOffset(this._offsetEnd);
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_directory_0.apply(this);
			}
			return Statement.prototype.directory.apply(this, arguments);
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					statement.export(recipient);
				}
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return IncludeDeclarator.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_file_0.apply(this);
			}
			return Statement.prototype.file.apply(this, arguments);
		},
		__ks_func_includePath_0: function() {
			return this._includePath;
		},
		includePath: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_includePath_0.apply(this);
			}
			return Statement.prototype.includePath.apply(this, arguments);
		},
		__ks_func_recipient_0: function() {
			return this.module();
		},
		recipient: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(Statement.prototype.recipient) {
				return Statement.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			return this._parent.registerMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return IncludeDeclarator.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var NamespaceDeclaration = KSHelper.class({
		$name: "NamespaceDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._exports = new Dictionary();
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			NamespaceDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, scope, ScopeType.Block]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				NamespaceDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._type = new NamedContainerType(this._name, new NamespaceType(this._scope));
			this._variable = this._scope.parent().define(this._name, true, this._type, this);
			this._statements = [];
			for(var __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._scope.line(statement.start.line);
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExportable() === true) {
					this._scope.line(statement.line());
					statement.export(this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		__ks_func_export_1: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			this._type.addProperty(name, variable.getDeclaredType());
			this._exports[name] = variable;
		},
		export: function() {
			if(arguments.length === 1) {
				return NamespaceDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_export_1.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_exportMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._parent.exportMacro(this._name + "." + name, macro);
		},
		exportMacro: function() {
			if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_exportMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.exportMacro) {
				return Statement.prototype.exportMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_includePath_0: function() {
			return null;
		},
		includePath: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_includePath_0.apply(this);
			}
			return Statement.prototype.includePath.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_publishMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._scope.addMacro(name, macro);
			this._parent.registerMacro(this._name + "." + name, macro);
		},
		publishMacro: function() {
			if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_publishMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.publishMacro) {
				return Statement.prototype.publishMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_recipient_0: function() {
			return this;
		},
		recipient: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(Statement.prototype.recipient) {
				return Statement.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_registerMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			this._scope.addMacro(name, macro);
		},
		registerMacro: function() {
			if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_registerMacro_0.apply(this, arguments);
			}
			else if(Statement.prototype.registerMacro) {
				return Statement.prototype.registerMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toExportFragements_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine().code("return ");
			var object = line.newObject();
			var type;
			for(var name in this._exports) {
				var variable = this._exports[name];
				type = variable.getDeclaredType();
				if(!KSType.isInstance(type, AliasType)) {
					object.newLine().code(name + ": ").compile(variable).done();
					if(!KSType.isInstance(type, ReferenceType) && (type.isSealed() === true)) {
						object.line("__ks_" + name + ": " + type.getSealedName());
					}
				}
			}
			object.done();
			line.done();
		},
		toExportFragements: function() {
			if(arguments.length === 1) {
				return NamespaceDeclaration.prototype.__ks_func_toExportFragements_0.apply(this, arguments);
			}
			else if(Statement.prototype.toExportFragements) {
				return Statement.prototype.toExportFragements.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine().code($runtime.scope(this), this._name, $equals, $runtime.helper(this), ".namespace(function()");
			var block = line.newBlock();
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				block.compile(statement);
			}
			this.toExportFragements(block);
			block.done();
			line.code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ReturnStatement = KSHelper.class({
		$name: "ReturnStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._async = false;
			this._function = null;
			this._exceptions = false;
			this._value = null;
			this._temp = null;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ReturnStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, scope]);
			while(KSType.isValue(parent) && !(KSType.isInstance(parent, AnonymousFunctionExpression) || KSType.isInstance(parent, ArrowFunctionExpression) || KSType.isInstance(parent, FunctionDeclarator) || KSType.isInstance(parent, ClassMethodDeclaration) || KSType.isInstance(parent, ImplementClassMethodDeclaration) || KSType.isInstance(parent, ImplementNamespaceFunctionDeclaration))) {
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ReturnStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
				this._await = this._value.isAwait();
				this._exceptions = this._value.hasExceptions();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._value !== null) {
				this._value.prepare();
				this._value.acquireReusable(false);
				this._value.releaseReusable();
				if(this._afterwards.length !== 0) {
					this._temp = this._scope.acquireTempName(this);
				}
				this.assignTempVariables(this._scope);
				this._type = this._value.type();
			}
			if(KSType.isValue(this._function)) {
				this._async = this._function.type().isAsync();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._value !== null) {
				this._value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(this._value !== null) {
				this._value.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return ReturnStatement.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(Statement.prototype.acquireReusable) {
				return Statement.prototype.acquireReusable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(type.isNever() === true) {
				TypeException.throwUnexpectedReturnedValue(this);
			}
			else if(this._value === null) {
				if(!(type.isVoid() === true)) {
					TypeException.throwExpectedReturnedValue(this);
				}
			}
			else {
				if(type.isVoid() === true) {
					TypeException.throwUnexpectedReturnedValue(this);
				}
				else if(!(this._value.isMatchingType(type) === true)) {
					TypeException.throwUnexpectedReturnType(type, this._value.type(), this);
				}
			}
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return ReturnStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return this._exceptions;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(Statement.prototype.hasExceptions) {
				return Statement.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return true;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._value !== null) && (this._value.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ReturnStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_reference_0: function() {
			return this._temp;
		},
		reference: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_reference_0.apply(this);
			}
			return Statement.prototype.reference.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(this._value !== null) {
				this._value.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(Statement.prototype.releaseReusable) {
				return Statement.prototype.releaseReusable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._value.toFragments(line, Mode.None);
			item([this]);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._value === null) {
				if(this._async) {
					fragments.line("return __ks_cb()");
				}
				else {
					fragments.line("return", this._data);
				}
			}
			else if(this._temp === null) {
				if(this._assignments.length !== 0) {
					fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), this._assignments.join(", "))).done();
				}
				if(this._value.isAwaiting() === true) {
					return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
				}
				else {
					if(this._async) {
						fragments.newLine().code("return __ks_cb(null, ").compile(this._value).code(")").done();
					}
					else {
						fragments.newLine().code("return ").compile(this._value).done();
					}
				}
			}
			else {
				if(this._value.isAwaiting() === true) {
					throw new NotImplementedException(this);
				}
				else {
					__ks_Array._im_remove(this._assignments, this._temp);
					if(this._assignments.length !== 0) {
						fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), this._assignments.join(", "))).done();
					}
					fragments.newLine().code("" + $runtime.scope(this) + this._temp + " = ").compile(this._value).done();
					for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
						afterward = this._afterwards[__ks_0];
						afterward.toAfterwardFragments(fragments);
					}
					if(this._async) {
						fragments.line("return __ks_cb(null, " + this._temp + ")");
					}
					else {
						fragments.line("return " + this._temp);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._value.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var $switch = (function() {
		var d = new Dictionary();
		d.length = function(elements) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(elements === void 0 || elements === null) {
				throw new TypeError("'elements' is not nullable");
			}
			var min = 0;
			var max = 0;
			for(var __ks_0 = 0, __ks_1 = elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = elements[__ks_0];
				if(element.spread === true) {
					max = Infinity;
				}
				else {
					++min;
					++max;
				}
			}
			return (function() {
				var d = new Dictionary();
				d.min = min;
				d.max = max;
				return d;
			})();
		};
		return d;
	})();
	var SwitchStatement = KSHelper.class({
		$name: "SwitchStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._castingEnum = false;
			this._clauses = [];
			this._name = null;
			this._usingFallthrough = false;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			SwitchStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSHelper.valueOf(this._data.expression.kind) !== NodeKind.Identifier.value) {
				this._value = $compile.expression(this._data.expression, this);
				this._value.analyse();
			}
			var clause, condition, name, exp, value;
			for(var index = 0, __ks_0 = this._data.clauses.length, data; index < __ks_0; ++index) {
				data = this._data.clauses[index];
				clause = (function(that) {
					var d = new Dictionary();
					d.hasTest = KSType.isValue(data.filter);
					d.bindings = [];
					d.conditions = [];
					d.scope = that.newScope(that._scope, ScopeType.InlineBlock);
					return d;
				})(this);
				clause.scope.index = index;
				for(var conditionIdx = 0, __ks_1 = data.conditions.length; conditionIdx < __ks_1; ++conditionIdx) {
					condition = data.conditions[conditionIdx];
					if(KSHelper.valueOf(condition.kind) === NodeKind.SwitchConditionArray.value) {
						condition = new SwitchConditionArray(condition, this, clause.scope);
					}
					else if(KSHelper.valueOf(condition.kind) === NodeKind.SwitchConditionEnum.value) {
						throw new NotImplementedException(this);
					}
					else if(KSHelper.valueOf(condition.kind) === NodeKind.SwitchConditionObject.value) {
						throw new NotImplementedException(this);
					}
					else if(KSHelper.valueOf(condition.kind) === NodeKind.SwitchConditionRange.value) {
						condition = new SwitchConditionRange(condition, this, clause.scope);
					}
					else if(KSHelper.valueOf(condition.kind) === NodeKind.SwitchConditionType.value) {
						condition = new SwitchConditionType(condition, this, clause.scope);
					}
					else {
						condition = new SwitchConditionValue(condition, this, clause.scope);
					}
					condition.analyse();
					clause.conditions.push(condition);
				}
				for(var __ks_1 = 0, __ks_2 = data.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
					binding = data.bindings[__ks_1];
					if(KSHelper.valueOf(binding.kind) === NodeKind.ArrayBinding.value) {
						binding = new SwitchBindingArray(binding, this, clause.scope);
						clause.hasTest = true;
					}
					else if(KSHelper.valueOf(binding.kind) === NodeKind.ObjectBinding.value) {
						throw new NotImplementedException(this);
					}
					else if(KSHelper.valueOf(binding.kind) === NodeKind.SwitchTypeCasting.value) {
						binding = new SwitchBindingType(binding, this, clause.scope);
					}
					else {
						binding = new SwitchBindingValue(binding, this, clause.scope);
					}
					binding.analyse();
					clause.bindings.push(binding);
				}
				clause.filter = new SwitchFilter(data, this, clause.scope);
				clause.filter.analyse();
				clause.body = $compile.block(data.body, this, clause.scope);
				clause.body.analyse();
				this._clauses.push(clause);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._value === null) {
				this._valueType = this._scope.getVariable(this._data.expression.name).getRealType();
			}
			else {
				this._value.prepare();
				this._name = this._scope.acquireTempName(false);
				this._valueType = this._value.type();
			}
			var enumValue = this._valueType.isEnum();
			var inferables = new Dictionary();
			var enumConditions = 0;
			var maxConditions = 0;
			for(var index = 0, __ks_0 = this._clauses.length, clause; index < __ks_0; ++index) {
				clause = this._clauses[index];
				var nf = true;
				for(var __ks_1 = 0, __ks_2 = clause.conditions.length, condition; __ks_1 < __ks_2; ++__ks_1) {
					condition = clause.conditions[__ks_1];
					condition.prepare();
					if(condition.isEnum() === true) {
						++enumConditions;
					}
					++maxConditions;
				}
				for(var __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
					binding = clause.bindings[__ks_1];
					binding.prepare();
				}
				clause.filter.prepare();
				clause.body.prepare();
				if(this._usingFallthrough) {
					clause.name = this._scope.acquireTempName(false);
				}
				if(index === 0) {
					var __ks_1 = clause.body.scope().listUpdatedInferables();
					for(var name in __ks_1) {
						var data = __ks_1[name];
						inferables[name] = (function() {
							var d = new Dictionary();
							d.count = 1;
							d.union = false;
							d.data = data;
							return d;
						})();
					}
				}
				else {
					var __ks_1 = clause.body.scope().listUpdatedInferables();
					for(var name in __ks_1) {
						var data = __ks_1[name];
						if(KSType.isValue(inferables[name])) {
							if(inferables[name].union === true) {
								inferables[name].data.type.addType(data.type);
							}
							else if(!(data.type.equals(inferables[name].data.type) === true)) {
								inferables[name].data.type = Type.union(this._scope, inferables[name].data.type, data.type);
								inferables[name].union = inferables[name].data.type.isUnion();
							}
							inferables[name].count++;
						}
					}
				}
			}
			if((enumConditions !== 0) || (enumValue === true)) {
				if((enumValue === true) && (enumConditions === maxConditions)) {
				}
				else {
					for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
						clause = this._clauses[__ks_0];
						for(var __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
							condition = clause.conditions[__ks_2];
							condition.setCastingEnum(true);
						}
					}
					if((enumValue === true) || (this._valueType.isAny() === true)) {
						this._castingEnum = true;
						if(this._name === null) {
							this._name = this._scope.acquireTempName(false);
						}
					}
				}
			}
			for(var name in inferables) {
				var inferable = inferables[name];
				if(inferable.count === this._clauses.length) {
					this._scope.updateInferable(name, inferable.data, this);
				}
			}
			if(this._name !== null) {
				this._scope.releaseTempName(this._name);
			}
			else {
				this._name = this._data.expression.name;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._value !== null) {
				this._value.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(var __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.translate();
				}
				for(var __ks_2 = 0, __ks_3 = clause.bindings.length, binding; __ks_2 < __ks_3; ++__ks_2) {
					binding = clause.bindings[__ks_2];
					binding.translate();
				}
				clause.filter.translate();
				clause.body.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariables_0: function(declarator, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(declarator === void 0 || declarator === null) {
				throw new TypeError("'declarator' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			var alreadyDeclared;
			for(var __ks_0 = 0, __ks_1 = declarator.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				if(scope.hasDefinedVariable(name) === true) {
					SyntaxException.throwAlreadyDeclared(name, this);
				}
				else if(this._options.rules.noUndefined === true) {
					ReferenceException.throwNotDefined(name, this);
				}
				else {
					scope.define(name, false, AnyType.NullableUnexplicit, true, this);
				}
			}
		},
		defineVariables: function() {
			if(arguments.length === 2) {
				return SwitchStatement.prototype.__ks_func_defineVariables_0.apply(this, arguments);
			}
			return Statement.prototype.defineVariables.apply(this, arguments);
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				clause.body.checkReturnType(type);
			}
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return SwitchStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_flagUsingFallthrough_0: function() {
			this._usingFallthrough = true;
			return this;
		},
		flagUsingFallthrough: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_flagUsingFallthrough_0.apply(this);
			}
			else if(Statement.prototype.flagUsingFallthrough) {
				return Statement.prototype.flagUsingFallthrough.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._value.isUsingVariable(name) === true) {
				return true;
			}
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				if(clause.body.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return SwitchStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toFallthroughFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSOperator.lt(this._nextClauseIndex, this._clauses.length)) {
				fragments.line("" + this._clauses[this._nextClauseIndex].name + "()");
			}
		},
		toFallthroughFragments: function() {
			if(arguments.length === 1) {
				return SwitchStatement.prototype.__ks_func_toFallthroughFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toFallthroughFragments) {
				return Statement.prototype.toFallthroughFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._clauses.length === 0) {
				return;
			}
			if(this._value !== null) {
				var line = fragments.newLine().code($runtime.scope(this), this._name, " = ").compile(this._value);
				if(this._castingEnum) {
					if(this._valueType.isEnum() === true) {
						line.code(".value");
					}
					else if(this._valueType.isAny() === true) {
						line.code(".valueOf()");
					}
				}
				line.done();
			}
			else if(this._castingEnum) {
				var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", this._data.expression.name);
				if(this._valueType.isEnum() === true) {
					line.code(".value");
				}
				else if(this._valueType.isAny() === true) {
					line.code(".valueOf()");
				}
				line.done();
			}
			for(var clauseIdx = 0, __ks_0 = this._clauses.length, clause; clauseIdx < __ks_0; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				for(var __ks_1 = 0, __ks_2 = clause.conditions.length, condition; __ks_1 < __ks_2; ++__ks_1) {
					condition = clause.conditions[__ks_1];
					condition.toStatementFragments(fragments);
				}
				clause.filter.toStatementFragments(fragments);
				if(this._usingFallthrough) {
					var line = fragments.newLine().code("" + $runtime.scope(this) + clause.name + " = () =>");
					var block = line.newBlock();
					this._nextClauseIndex = clauseIdx + 1;
					for(var __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
						binding = clause.bindings[__ks_1];
						binding.toFragments(block);
					}
					clause.body.toFragments(block, mode);
					block.done();
					line.done();
				}
			}
			var ctrl = fragments.newControl();
			var we = false;
			for(var clauseIdx = 0, __ks_0 = this._clauses.length, clause; clauseIdx < __ks_0; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				if(clause.conditions.length !== 0) {
					if(we) {
						SyntaxException.throwAfterDefaultClause(this);
					}
					if(clauseIdx !== 0) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					for(var i = 0, __ks_1 = clause.conditions.length, condition; i < __ks_1; ++i) {
						condition = clause.conditions[i];
						if(i !== 0) {
							ctrl.code(" || ");
						}
						condition.toBooleanFragments(ctrl, this._name);
					}
					clause.filter.toBooleanFragments(ctrl, true);
					ctrl.code(")").step();
					if(this._usingFallthrough) {
						ctrl.line("" + clause.name + "()");
					}
					else {
						for(var __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
							binding = clause.bindings[__ks_1];
							binding.toFragments(ctrl);
						}
						clause.body.toFragments(ctrl, mode);
					}
				}
				else if(clause.hasTest === true) {
					if(clauseIdx !== 0) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					clause.filter.toBooleanFragments(ctrl, false);
					ctrl.code(")").step();
					if(this._usingFallthrough) {
						ctrl.line("" + clause.name + "()");
					}
					else {
						for(var __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
							binding = clause.bindings[__ks_1];
							binding.toFragments(ctrl);
						}
						clause.body.toFragments(ctrl, mode);
					}
				}
				else {
					if(clauseIdx !== 0) {
						ctrl.step().code("else");
					}
					else {
						ctrl.code("if(true)");
					}
					we = true;
					ctrl.step();
					if(this._usingFallthrough) {
						ctrl.line("" + clause.name + "()");
					}
					else {
						for(var __ks_1 = 0, __ks_2 = clause.bindings.length, binding; __ks_1 < __ks_2; ++__ks_1) {
							binding = clause.bindings[__ks_1];
							binding.toFragments(ctrl);
						}
						clause.body.toFragments(ctrl, mode);
					}
				}
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return SwitchStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchBindingArray = KSHelper.class({
		$name: "SwitchBindingArray",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._array = $compile.expression(this._data, this);
			this._array.setAssignment(AssignmentType.Expression);
			this._array.analyse();
			this._parent.defineVariables(this._array, this._scope);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._array.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._array.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine();
			line.code($runtime.scope(this));
			this._array.toAssignmentFragments(line, new Literal(this._parent._name, this));
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingArray.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchBindingType = KSHelper.class({
		$name: "SwitchBindingType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.name.name, false, Type.fromAST(this._data.type, this), true, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.line($runtime.scope(this), this._data.name.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchBindingValue = KSHelper.class({
		$name: "SwitchBindingValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.name, false, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.line($runtime.scope(this), this._data.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingValue.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchConditionArray = KSHelper.class({
		$name: "SwitchConditionArray",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._flatten = false;
			this._name = null;
			this._values = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionArray.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._flatten = this._options.format.destructuring === "es5";
			for(var __ks_0 = 0, __ks_1 = this._data.values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._data.values[__ks_0];
				if(KSHelper.valueOf(value.kind) !== NodeKind.OmittedExpression.value) {
					if(KSHelper.valueOf(value.kind) === NodeKind.SwitchConditionRange.value) {
						value = new SwitchConditionRange(value, this);
					}
					else {
						value = new SwitchConditionValue(value, this);
					}
					value.analyse();
					this._values.push(value);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSOperator.gt(this._values.length, 0)) {
				this._name = this._scope.parent().acquireTempName(false);
			}
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return false;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_isEnum_0.apply(this);
			}
			else if(AbstractNode.prototype.isEnum) {
				return AbstractNode.prototype.isEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this.module().flag("Type");
			fragments.code("(", $runtime.typeof("Array", this), "(", name, ")");
			var mm = $switch.length(this._data.values);
			if(mm.min === mm.max) {
				if(KSOperator.neq(mm.min, Infinity)) {
					fragments.code(" && ", name, ".length === ", mm.min);
				}
			}
			else {
				fragments.code(" && ", name, ".length >= ", mm.min);
				if(KSOperator.neq(mm.max, Infinity)) {
					fragments.code(" && ", name, ".length <= ", mm.max);
				}
			}
			if(KSType.isValue(this._name)) {
				fragments.code(" && ", this._name, "(", name, ")");
			}
			fragments.code(")");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionArray.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSOperator.gt(this._values.length, 0)) {
				var line = fragments.newLine();
				if(this._flatten) {
					var name = new Literal("__ks__", this);
					line.code($runtime.scope(this), this._name, " = function(__ks__)");
					var block = line.newBlock();
					block.done();
				}
				else {
					line.code($runtime.scope(this), this._name, " = ([");
					for(var i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
						value = this._data.values[i];
						if(i !== 0) {
							line.code(", ");
						}
						if(KSHelper.valueOf(value.kind) === NodeKind.OmittedExpression.value) {
							if(value.spread === true) {
								line.code("...");
							}
						}
						else {
							line.code("__ks_", i);
						}
					}
					line.code("]) => ");
					var index = 0;
					for(var i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
						value = this._data.values[i];
						if(KSHelper.valueOf(value.kind) !== NodeKind.OmittedExpression.value) {
							if(index !== 0) {
								line.code(" && ");
							}
							this._values[index].toBooleanFragments(line, "__ks_" + i);
							index++;
						}
					}
				}
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionArray.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchConditionRange = KSHelper.class({
		$name: "SwitchConditionRange",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._from = true;
			this._to = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.from)) {
				this._left = $compile.expression(this._data.from, this);
			}
			else {
				this._left = $compile.expression(this._data.then, this);
				this._from = false;
			}
			if(KSType.isValue(this._data.to)) {
				this._right = $compile.expression(this._data.to, this);
			}
			else {
				this._right = $compile.expression(this._data.til, this);
				this._to = false;
			}
			this._left.analyse();
			this._right.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return false;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_isEnum_0.apply(this);
			}
			else if(AbstractNode.prototype.isEnum) {
				return AbstractNode.prototype.isEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name, (this._from === true) ? " >= " : ">").compile(this._left).code(" && ").code(name, (this._to === true) ? " <= " : "<").compile(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionRange.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionRange.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchConditionType = KSHelper.class({
		$name: "SwitchConditionType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = Type.fromAST(this._data.type, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return false;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_isEnum_0.apply(this);
			}
			else if(AbstractNode.prototype.isEnum) {
				return AbstractNode.prototype.isEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._type.toTestFragments(fragments, new Literal(false, this, this._scope, name));
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionType.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionType.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchConditionValue = KSHelper.class({
		$name: "SwitchConditionValue",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._castingEnum = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionValue.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._type = this._value.type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return this._type.isEnum();
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_isEnum_0.apply(this);
			}
			else if(AbstractNode.prototype.isEnum) {
				return AbstractNode.prototype.isEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setCastingEnum_0: function(castingEnum) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(castingEnum === void 0 || castingEnum === null) {
				throw new TypeError("'castingEnum' is not nullable");
			}
			else if(!KSType.isBoolean(castingEnum)) {
				throw new TypeError("'castingEnum' is not of type 'Boolean'");
			}
			this._castingEnum = castingEnum;
		},
		setCastingEnum: function() {
			if(arguments.length === 1) {
				return SwitchConditionValue.prototype.__ks_func_setCastingEnum_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setCastingEnum) {
				return AbstractNode.prototype.setCastingEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name, " === ").compile(this._value);
			if(this._castingEnum) {
				if(this._type.isEnum() === true) {
					fragments.code(".value");
				}
				else if(this._type.isAny() === true) {
					fragments.code(".valueOf()");
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionValue.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionValue.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SwitchFilter = KSHelper.class({
		$name: "SwitchFilter",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._bindings = [];
			this._filter = null;
			this._flatten = false;
			this._name = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchFilter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._flatten = this._options.format.destructuring === "es5";
			if(KSType.isValue(this._data.filter)) {
				if(KSOperator.gt(this._data.bindings.length, 0)) {
					this._name = this._scope.parent().acquireTempName(false);
					for(var __ks_0 = 0, __ks_1 = this._data.bindings.length, data; __ks_0 < __ks_1; ++__ks_0) {
						data = this._data.bindings[__ks_0];
						var binding = $compile.expression(data, this);
						binding.analyse();
						this._bindings.push(binding);
					}
				}
				this._filter = $compile.expression(this._data.filter, this);
				this._filter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._filter !== null) {
				for(var __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
					binding = this._bindings[__ks_0];
					binding.prepare();
				}
				this._filter.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._filter)) {
				for(var __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
					binding = this._bindings[__ks_0];
					binding.translate();
				}
				this._filter.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, nf) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(nf === void 0 || nf === null) {
				throw new TypeError("'nf' is not nullable");
			}
			var mm;
			for(var __ks_0 = 0, __ks_1 = this._data.bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
				binding = this._data.bindings[__ks_0];
				if(KSHelper.valueOf(binding.kind) === NodeKind.ArrayBinding.value) {
					this.module().flag("Type");
					if(nf === true) {
						fragments.code(" && ");
					}
					else {
						nf = true;
					}
					fragments.code($runtime.typeof("Array", this), "(", this._parent._name, ")");
					mm = $switch.length(binding.elements);
					if(mm.min === mm.max) {
						if(KSOperator.neq(mm.min, Infinity)) {
							fragments.code(" && ", this._parent._name, ".length === ", mm.min);
						}
					}
					else {
						fragments.code(" && ", this._parent._name, ".length >= ", mm.min);
						if(KSOperator.neq(mm.max, Infinity)) {
							fragments.code(" && ", this._parent._name, ".length <= ", mm.max);
						}
					}
				}
			}
			if(KSType.isValue(this._name)) {
				if(nf === true) {
					fragments.code(" && ");
				}
				fragments.code(this._name, "(", this._parent._name, ")");
				this._scope.parent().releaseTempName(this._name);
			}
			else if(KSType.isValue(this._filter)) {
				if(nf === true) {
					fragments.code(" && ");
				}
				fragments.compile(this._filter);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchFilter.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._name !== null) {
				var line = fragments.newLine();
				if(this._flatten) {
					var name = new Literal("__ks__", this);
					line.code($runtime.scope(this), this._name, " = function(__ks__)");
					var block = line.newBlock();
					var ln = block.newLine().code($runtime.scope(this));
					var comma = false;
					for(var __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
						binding = this._bindings[__ks_0];
						if(comma) {
							line.code(", ");
						}
						else {
							comma = true;
						}
						binding.toFlatFragments(ln, name);
					}
					ln.done();
					block.newLine().code("return ").compile(this._filter).done();
					block.done();
				}
				else {
					line.code($runtime.scope(this), this._name, " = (");
					for(var i = 0, __ks_0 = this._bindings.length, binding; i < __ks_0; ++i) {
						binding = this._bindings[i];
						if(i !== 0) {
							line.code(", ");
						}
						line.compile(binding);
					}
					line.code(") => ").compile(this._filter);
				}
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchFilter.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ThrowStatement = KSHelper.class({
		$name: "ThrowStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._function = null;
			this._inSource = true;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ThrowStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, scope]);
			var __ks_0;
			do {
				if(KSType.isInstance(parent, AnonymousFunctionExpression) || KSType.isInstance(parent, ArrowFunctionExpression) || KSType.isInstance(parent, FunctionDeclarator) || KSType.isInstance(parent, ClassMethodDeclaration) || KSType.isInstance(parent, ImplementClassMethodDeclaration) || KSType.isInstance(parent, ImplementNamespaceFunctionDeclaration)) {
					this._function = parent;
					this._inSource = false;
					break;
				}
				else if(KSType.isInstance(parent, ClassConstructorDeclaration) || KSType.isInstance(parent, ClassDestructorDeclaration)) {
					this._inSource = false;
					break;
				}
			}
			while(KSType.isValue(__ks_0 = parent.parent()) ? (parent = __ks_0, true) : false)
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ThrowStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			var type, __ks_0;
			if(KSType.isValue(__ks_0 = this._value.type().discardReference()) ? (type = __ks_0, false) : true) {
				TypeException.throwRequireClass(this);
			}
			else if((type.isNamed() === true) && KSType.isInstance(type.type(), ClassType)) {
				Exception.validateReportedError(type, this);
			}
			else if(!(type.isAny() === true)) {
				TypeException.throwRequireClass(this);
			}
			else if(this._inSource && !(this.module().isBinary() === true)) {
				SyntaxException.throwUnreportedError(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return true;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ThrowStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._function) ? this._function.type().isAsync() === true : false) {
				fragments.newLine().code("return __ks_cb(").compile(this._value).code(")").done();
			}
			else {
				fragments.newLine().code("throw ").compile(this._value).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ThrowStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var TryState = KSHelper.enum(Number, {
		Body: 0,
		Catch: 1,
		Finally: 2
	});
	var TryStatement = KSHelper.class({
		$name: "TryStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._catchClause = null;
			this._catchClauses = [];
			this._exit = false;
			this._finalizer = null;
			this._hasCatch = false;
			this._hasFinally = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			TryStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var scope;
			if(KSType.isValue(this._data.catchClauses)) {
				var variable, body, type;
				for(var __ks_0 = 0, __ks_1 = this._data.catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = this._data.catchClauses[__ks_0];
					var __ks_2;
					if(KSType.isValue(__ks_2 = this._scope.getVariable(clause.type.name)) ? (variable = __ks_2, false) : true) {
						ReferenceException.throwNotDefined(clause.type.name, this);
					}
					if(KSType.isValue(clause.binding)) {
						scope = this.newScope(this._scope, ScopeType.InlineBlock);
						scope.define(clause.binding.name, false, Type.Any, this);
					}
					else {
						scope = this._scope;
					}
					body = $compile.block(clause.body, this, scope);
					body.analyse();
					type = $compile.expression(clause.type, this, scope);
					type.analyse();
					this._catchClauses.push((function() {
						var d = new Dictionary();
						d.body = body;
						d.type = type;
						return d;
					})());
				}
			}
			if(KSType.isValue(this._data.catchClause)) {
				if(KSType.isValue(this._data.catchClause.binding)) {
					scope = this.newScope(this._scope, ScopeType.InlineBlock);
					scope.define(this._data.catchClause.binding.name, false, Type.Any, this);
				}
				else {
					scope = this._scope;
				}
				this._catchClause = $compile.block(this._data.catchClause.body, this, scope);
				this._catchClause.analyse();
			}
			this._block = $compile.block($ast.body(this._data), this);
			this._block.analyse();
			this._await = this._block.isAwait();
			if(KSType.isValue(this._data.finalizer)) {
				this._finalizer = $compile.block(this._data.finalizer, this);
				this._finalizer.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._hasCatch = this._catchClauses.length !== 0;
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.prepare();
				clause.type.prepare();
			}
			if(this._catchClause !== null) {
				this._catchClause.prepare();
				this._hasCatch = true;
			}
			this._block.prepare();
			this._exit = (this._block.isExit() === true) && this._hasCatch && (this._catchClause.isExit() === true);
			if(this._finalizer !== null) {
				this._finalizer.prepare();
				this._hasFinally = true;
				if(this._finalizer.isExit() === true) {
					this._exit = true;
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._block.translate();
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.translate();
				clause.type.translate();
			}
			if(KSType.isValue(this._catchClause)) {
				this._catchClause.translate();
			}
			if(KSType.isValue(this._finalizer)) {
				this._finalizer.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._block.checkReturnType(type);
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.translate();
			}
			KSType.isValue(this._catchClause) ? this._catchClause.checkReturnType(type) : null;
			KSType.isValue(this._finalizer) ? this._finalizer.checkReturnType(type) : null;
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_getErrorVarname_0: function() {
			if((this._catchClauses.length === 0) && (KSType.isValue(this._data.catchClause) && KSType.isValue(this._data.catchClause.binding))) {
				return this._data.catchClause.binding.name;
			}
			else {
				return this._scope.acquireTempName(false);
			}
		},
		getErrorVarname: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_getErrorVarname_0.apply(this);
			}
			else if(Statement.prototype.getErrorVarname) {
				return Statement.prototype.getErrorVarname.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			if(this._catchClauses.length > 0) {
				for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = this._catchClauses[__ks_0];
					if(error.matchInheritanceOf(clause.type.type()) === true) {
						return true;
					}
				}
				return false;
			}
			else {
				return true;
			}
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._block.isUsingVariable(name) === true) {
				return true;
			}
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				if(clause.body.isUsingVariable(name) === true) {
					return true;
				}
			}
			if((this._catchClause !== null) && (this._catchClause.isUsingVariable(name) === true)) {
				return true;
			}
			return this._hasFinally && (this._finalizer.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			if(statements.length !== 0) {
				this._continueVarname = this._scope.acquireTempName();
				var line = fragments.newLine().code($runtime.scope(this), this._continueVarname, " = () =>");
				var block = line.newBlock();
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = statements.length, statement; i < __ks_0 && (index === -1); ++i) {
					statement = statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				block.done();
				line.done();
			}
			if(KSType.isValue(this._finalizer)) {
				this._state = TryState.Finally;
				this._finallyVarname = this._scope.acquireTempName();
				var line = fragments.newLine().code($runtime.scope(this), this._finallyVarname, " = () =>");
				line.newBlock().compile(this._finalizer).done();
				line.done();
			}
			if((this._catchClauses.length !== 0) || KSType.isValue(this._catchClause)) {
				this._state = TryState.Catch;
				this._catchVarname = this._scope.acquireTempName();
				var error = this.getErrorVarname();
				var line = fragments.newLine().code($runtime.scope(this), this._catchVarname, " = (" + error + ") =>");
				var block = line.newBlock();
				this.toCatchFragments(block, error);
				this._scope.releaseTempName(error);
				block.done();
				line.done();
			}
			this._state = TryState.Body;
			var ctrl = fragments.newControl().code("try").step();
			ctrl.compile(this._block, Mode.None);
			ctrl.step().code("catch(__ks_e)").step();
			if(KSType.isValue(this._catchVarname)) {
				ctrl.line(this._catchVarname + "(__ks_e)");
			}
			else if(KSType.isValue(this._finallyVarname)) {
				ctrl.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				ctrl.line(this._continueVarname + "()");
			}
			ctrl.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			var ctrl = block.newControl().code("if(__ks_e)").step();
			if(this._state === TryState.Body) {
				if(KSType.isValue(this._catchVarname)) {
					ctrl.line(this._catchVarname + "(__ks_e)");
				}
				else if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Catch) {
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Finally) {
				if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			ctrl.step().code("else").step();
			var statement = statements[KSOperator.subtraction(statements.length, 1)];
			if(this._state === TryState.Body) {
				if(!(statement.hasExceptions() === true) && ((statements.length === 1) || ((statements.length === 2) && KSType.isInstance(statements[0], VariableDeclaration) && (statements[0].isAwait() === true)))) {
					if(statements.length === 2) {
						ctrl.compile(statements[0]);
					}
					ctrl.compile(statement);
					if(!KSType.isInstance(statement, ReturnStatement)) {
						if(KSType.isValue(this._finallyVarname)) {
							ctrl.line(this._finallyVarname + "()");
						}
						else if(KSType.isValue(this._continueVarname)) {
							ctrl.line(this._continueVarname + "()");
						}
					}
				}
				else {
					var returnOutside = KSType.isInstance(statement, ReturnStatement) && (statement.hasExceptions() === true);
					if(returnOutside) {
						statement.toDeclareReusableFragments(ctrl);
					}
					var ctrl2 = ctrl.newControl().code("try").step();
					var index = -1;
					var item;
					for(var i = 0, __ks_0 = KSOperator.subtraction(statements.length, 1); i < __ks_0 && (index === -1); ++i) {
						var __ks_1;
						if(KSType.isValue(__ks_1 = statements[i].toFragments(ctrl2, Mode.None)) ? (item = __ks_1, true) : false) {
							index = i;
						}
					}
					if(index !== -1) {
						item(statements.slice(index + 1));
					}
					else {
						if(returnOutside) {
							statement.toReusableFragments(ctrl2);
						}
						else {
							var __ks_0;
							if(KSType.isValue(__ks_0 = statement.toFragments(ctrl2, Mode.None)) ? (item = __ks_0, true) : false) {
								item([]);
							}
						}
					}
					ctrl2.step().code("catch(__ks_e)").step();
					if(KSType.isValue(this._catchVarname)) {
						ctrl2.line("return " + this._catchVarname + "(__ks_e)");
					}
					ctrl2.done();
					if(!KSType.isValue(item)) {
						if(returnOutside) {
							ctrl.compile(statement);
						}
						else if(!KSType.isInstance(statement, ReturnStatement)) {
							if(KSType.isValue(this._finallyVarname)) {
								ctrl.line(this._finallyVarname + "()");
							}
							else if(KSType.isValue(this._continueVarname)) {
								ctrl.line(this._continueVarname + "()");
							}
						}
					}
				}
			}
			else {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = statements.length; i < __ks_0 && (index === -1); ++i) {
					var __ks_1;
					if(KSType.isValue(__ks_1 = statements[i].toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				if(this._state === TryState.Catch) {
					if(KSType.isValue(this._finallyVarname)) {
						ctrl.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
				else if(this._state === TryState.Finally) {
					if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return TryStatement.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitExpressionFragments) {
				return Statement.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toCatchFragments_0: function(fragments, error) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			var async = false;
			if(this._catchClauses.length !== 0) {
				this.module().flag("Type");
				var ifs = fragments.newControl();
				for(var i = 0, __ks_0 = this._data.catchClauses.length, clause; i < __ks_0; ++i) {
					clause = this._data.catchClauses[i];
					if(i !== 0) {
						ifs.step().code("else ");
					}
					ifs.code("if(", $runtime.type(this), ".isInstance(", error, ", ").compile(this._catchClauses[i].type).code("))").step();
					if(KSType.isValue(clause.binding)) {
						ifs.line($runtime.scope(this), clause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClauses[i].body);
					if(!(this._catchClauses[i].body.isAwait() === true) && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				if(KSType.isValue(this._catchClause)) {
					ifs.step().code("else").step();
					if(KSType.isValue(this._data.catchClause.binding)) {
						ifs.line($runtime.scope(this), this._data.catchClause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClause);
					if(!(this._catchClause.isAwait() === true) && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				else if(KSType.isValue(this._continueVarname)) {
					ifs.step().code("else").step();
					ifs.line(this._continueVarname + "()");
				}
				ifs.done();
			}
			else if(KSType.isValue(this._catchClause)) {
				fragments.compile(this._catchClause);
				if(!(this._catchClause.isAwait() === true)) {
					if(KSType.isValue(this._finallyVarname)) {
						fragments.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						fragments.line(this._continueVarname + "()");
					}
				}
			}
			else if(KSType.isValue(this._finallyVarname)) {
				fragments.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				fragments.line(this._continueVarname + "()");
			}
		},
		toCatchFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toCatchFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toCatchFragments) {
				return Statement.prototype.toCatchFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFinallyFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code("finally").step().compile(this._finalizer);
		},
		toFinallyFragments: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_toFinallyFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toFinallyFragments) {
				return Statement.prototype.toFinallyFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else {
				var ctrl = fragments.newControl().code("try").step();
				ctrl.compile(this._block, Mode.None);
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				ctrl.step();
				var error = this.getErrorVarname();
				if(this._hasCatch) {
					ctrl.code("catch(" + error + ")").step();
					this.toCatchFragments(ctrl, error);
					if(this._hasFinally) {
						ctrl.step();
						this.toFinallyFragments(ctrl);
					}
				}
				else if(this._hasFinally) {
					this.toFinallyFragments(ctrl);
				}
				else {
					ctrl.code("catch(" + error + ")").step();
				}
				this._scope.releaseTempName(error);
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var TypeAliasDeclaration = KSHelper.class({
		$name: "TypeAliasDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._variable = this._scope.define(this._name, true, new AliasType(this._scope, Type.fromAST(this._data.type, this)), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return TypeAliasDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TypeAliasDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var UnlessStatement = KSHelper.class({
		$name: "UnlessStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._whenFalseScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._condition = $compile.expression(this._data.condition, this, this._scope);
			this._condition.analyse();
			this._whenFalseExpression = $compile.block(this._data.whenFalse, this, this._whenFalseScope);
			this._whenFalseExpression.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
			this._whenFalseExpression.prepare();
			if(this._whenFalseExpression.isExit() === true) {
				var __ks_0 = this._condition.inferWhenTrueTypes(new Dictionary());
				for(var name in __ks_0) {
					var data = __ks_0[name];
					this._scope.updateInferable(name, data, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenFalseExpression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._whenFalseExpression.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return UnlessStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._whenFalseExpression.isUsingVariable() === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return UnlessStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().compile(this._whenFalseExpression).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var UntilStatement = KSHelper.class({
		$name: "UntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.block(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			if(!(this._condition.type().canBeBoolean() === true)) {
				TypeException.throwInvalidCondition(this._condition, this);
			}
			this.assignTempVariables(this._scope);
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return UntilStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._body.isUsingVariable() === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return UntilStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("while(!").wrapBoolean(this._condition).code(")").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var VariableDeclaration = KSHelper.class({
		$name: "VariableDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._autotype = false;
			this._await = false;
			this._cascade = false;
			this._declarators = [];
			this._function = null;
			this._hasInit = false;
			this._immutable = false;
			this._rebindable = true;
			this._redeclared = false;
			this._toDeclareAll = true;
			this._type = Type.Null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			VariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = parent.scope();
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, scope]);
			while(KSType.isValue(parent) && !(KSType.isInstance(parent, AnonymousFunctionExpression) || KSType.isInstance(parent, ArrowFunctionExpression) || KSType.isInstance(parent, FunctionDeclarator) || KSType.isInstance(parent, ClassMethodDeclaration) || KSType.isInstance(parent, ImplementClassMethodDeclaration) || KSType.isInstance(parent, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.isInstance(parent, TryStatement)) {
					this._try = parent;
				}
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons_1: function(data, parent, scope, initScope) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(initScope === void 0 || initScope === null) {
				throw new TypeError("'initScope' is not nullable");
			}
			else if(!KSType.isInstance(initScope, Scope)) {
				throw new TypeError("'initScope' is not of type 'Scope'");
			}
			VariableDeclaration.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._initScope = initScope;
			this._cascade = parent.isCascade();
		},
		__ks_cons: function(args) {
			if(args.length === 2 || args.length === 3) {
				VariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				VariableDeclaration.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Immutable.value) {
					this._immutable = true;
					this._rebindable = false;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.AutoTyping.value) {
					this._autotype = true;
				}
			}
			if(KSType.isValue(this._data.init)) {
				this._hasInit = true;
				if(this._immutable) {
					this._rebindable = KSType.isValue(this._initScope);
				}
				if(!KSType.isValue(this._initScope)) {
					this._initScope = this.newScope(this._scope, ScopeType.Hollow);
				}
				var line = this._initScope.getRawLine();
				this._initScope.line(KSOperator.subtraction(line, 1));
				this._init = $compile.expression(this._data.init, this, this._initScope);
				this._init.analyse();
				this._initScope.line(line);
				this._await = this._init.isAwait();
				if(this._await && !KSType.isValue(this._function) && !(this.module().isBinary() === true)) {
					SyntaxException.throwInvalidAwait(this);
				}
			}
			var declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.variables.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.variables[__ks_0];
				var __ks_2 = data.name.kind.valueOf();
				if(__ks_2 === NodeKind.ArrayBinding.value) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else if(__ks_2 === NodeKind.Identifier.value) {
					declarator = new VariableIdentifierDeclarator(data, this);
				}
				else if(__ks_2 === NodeKind.ObjectBinding.value) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else {
					throw new NotImplementedException(this);
				}
				declarator.analyse();
				this._declarators.push(declarator);
			}
			if(this._hasInit && (this._declarators.length === 1)) {
				if(KSType.isInstance(this._declarators[0], VariableIdentifierDeclarator)) {
					this.reference(this._declarators[0].name());
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var declarator = this._declarators[0];
			if(this._hasInit) {
				this._init.prepare();
				this._type = this._init.type();
				if(this._type.isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(this._init, this);
				}
				if(KSType.isInstance(this._parent, IfStatement)) {
					this._type = this._type.setNullable(false);
				}
				if(this._autotype) {
					if(this._type.isNull() === true) {
						declarator.setDeclaredType(AnyType.NullableExplicit);
					}
					else {
						declarator.setDeclaredType(this._type);
					}
					declarator.flagDefinitive();
				}
				else {
					declarator.setRealType(this._type);
				}
				this.assignTempVariables(this._initScope);
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, __ks_declarator_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_declarator_1 = this._declarators[__ks_0];
				__ks_declarator_1.prepare();
				if(__ks_declarator_1.isRedeclared() === true) {
					this._redeclared = true;
				}
			}
			if(this._hasInit) {
				declarator.setRealType(this._type);
				this._init.acquireReusable(declarator.isSplitAssignment());
				this._init.releaseReusable();
				this.statement().assignTempVariables(this._scope);
			}
			else {
				this._type = this._declarators[0].variable().getRealType();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasInit) {
				this._init.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariables_0: function(declarator) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(declarator === void 0 || declarator === null) {
				throw new TypeError("'declarator' is not nullable");
			}
			var alreadyDeclared;
			var assignments = [];
			for(var __ks_0 = 0, __ks_1 = declarator.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				if(this._scope.hasDefinedVariable(name) === true) {
					SyntaxException.throwAlreadyDeclared(name, this);
				}
				alreadyDeclared = this._scope.hasDeclaredVariable(name);
				var variable = this._scope.define(name, this.isImmutable(), null, this);
				if(alreadyDeclared === true) {
					alreadyDeclared = !(variable.isRenamed() === true);
				}
				if(alreadyDeclared === true) {
					this._toDeclareAll = false;
				}
				else {
					assignments.push(variable.getSecureName());
				}
			}
			if(this._cascade) {
				this._parent.addAssignments(assignments);
			}
		},
		defineVariables: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_defineVariables_0.apply(this, arguments);
			}
			return Statement.prototype.defineVariables.apply(this, arguments);
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_hasInit_0: function() {
			return this._hasInit;
		},
		hasInit: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_hasInit_0.apply(this);
			}
			else if(Statement.prototype.hasInit) {
				return Statement.prototype.hasInit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getIdentifierVariable_0: function() {
			if((this._declarators.length === 1) && KSType.isInstance(this._declarators[0], VariableIdentifierDeclarator)) {
				return this._declarators[0]._variable;
			}
			else {
				return null;
			}
		},
		getIdentifierVariable: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_getIdentifierVariable_0.apply(this);
			}
			else if(Statement.prototype.getIdentifierVariable) {
				return Statement.prototype.getIdentifierVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			return this._init;
		},
		init: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_init_0.apply(this);
			}
			else if(Statement.prototype.init) {
				return Statement.prototype.init.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				if(declarator.isDeclararingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Statement.prototype.isDeclararingVariable) {
				return Statement.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDuplicate_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				if(declarator.isDuplicate(scope) === true) {
					return true;
				}
			}
			return false;
		},
		isDuplicate: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_isDuplicate_0.apply(this, arguments);
			}
			else if(Statement.prototype.isDuplicate) {
				return Statement.prototype.isDuplicate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExpectingType_0: function() {
			return this._declarators[0].isStronglyTyped();
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			else if(Statement.prototype.isExpectingType) {
				return Statement.prototype.isExpectingType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Statement.prototype.isImmutable) {
				return Statement.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._hasInit && (this._init.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._init.toFragments(line, Mode.None);
			statements.unshift(this);
			item(statements);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclaration.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var variables = this.assignments();
			if(variables.length !== 0) {
				fragments.newLine().code(KSOperator.addOrConcat($runtime.scope(this), variables.join(", "))).done();
			}
			if(this._hasInit) {
				if(this._init.isAwaiting() === true) {
					return KSHelper.vcurry(this.toAwaitStatementFragments, this, fragments);
				}
				else {
					var declarator = this._declarators[0];
					var line = fragments.newLine();
					if(this._toDeclareAll) {
						if(this._options.format.variables === "es5") {
							line.code("var ");
						}
						else if(this._rebindable || this._redeclared) {
							line.code("let ");
						}
						else {
							line.code("const ");
						}
					}
					declarator.toAssignmentFragments(line, this._init);
					line.done();
				}
			}
			else if(this._toDeclareAll) {
				var line = fragments.newLine();
				if(this._options.format.variables === "es5") {
					line.code("var ");
				}
				else if(this._rebindable || this._redeclared) {
					line.code("let ");
				}
				else {
					line.code("const ");
				}
				for(var index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
					declarator = this._declarators[index];
					if(index !== 0) {
						line.code($comma);
					}
					line.compile(declarator);
				}
				line.done();
			}
			else {
				var line = fragments.newLine();
				for(var index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
					declarator = this._declarators[index];
					if(index !== 0) {
						line.code($comma);
					}
					line.compile(declarator);
				}
				line.code(" = null");
				line.done();
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_toInlineFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._init.isAwaiting() === true) {
				NotImplementedException.throw(this);
			}
			else {
				this._declarators[0].toAssignmentFragments(fragments, this._init);
			}
		},
		toInlineFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclaration.prototype.__ks_func_toInlineFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toInlineFragments) {
				return Statement.prototype.toInlineFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var VariableBindingDeclarator = KSHelper.class({
		$name: "VariableBindingDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._type = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			VariableBindingDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._binding = $compile.expression(this._data.name, this);
			this._binding.setAssignment(AssignmentType.Declaration);
			if(this._parent.isImmutable() === true) {
				this._binding.flagImmutable();
			}
			this._binding.analyse();
			this._parent.defineVariables(this._binding);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._data.type)) {
				this.setDeclaredType(Type.fromAST(this._data.type, this));
			}
			else if(this._parent.isImmutable() === true) {
				this.setDeclaredType(this._parent.type());
			}
			this._binding.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._binding.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._binding.export(recipient);
		},
		export: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagDefinitive_0: function() {
		},
		flagDefinitive: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_flagDefinitive_0.apply(this);
			}
			else if(AbstractNode.prototype.flagDefinitive) {
				return AbstractNode.prototype.flagDefinitive.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._binding.isDeclararingVariable(name);
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isDeclararingVariable) {
				return AbstractNode.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDuplicate_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return false;
		},
		isDuplicate: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_isDuplicate_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isDuplicate) {
				return AbstractNode.prototype.isDuplicate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			return this._binding.isRedeclared();
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(AbstractNode.prototype.isRedeclared) {
				return AbstractNode.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSplitAssignment_0: function() {
			return this._binding.isSplitAssignment();
		},
		isSplitAssignment: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_isSplitAssignment_0.apply(this);
			}
			else if(AbstractNode.prototype.isSplitAssignment) {
				return AbstractNode.prototype.isSplitAssignment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isStronglyTyped_0: function() {
			return true;
		},
		isStronglyTyped: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_isStronglyTyped_0.apply(this);
			}
			else if(AbstractNode.prototype.isStronglyTyped) {
				return AbstractNode.prototype.isStronglyTyped.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setDeclaredType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			this._type = type;
			if(!(this._type.isAny() === true)) {
				if(KSType.isInstance(this._binding, ArrayBinding)) {
					if(!(this._type.isArray() === true)) {
						TypeException.throwInvalidBinding("Array", this);
					}
				}
				else {
					if(!(this._type.isDictionary() === true)) {
						TypeException.throwInvalidBinding("Dictionary", this);
					}
				}
				this._binding.type(this._type);
			}
		},
		setDeclaredType: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setDeclaredType) {
				return AbstractNode.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setRealType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(!(type.isAny() === true)) {
				if(KSType.isInstance(this._binding, ArrayBinding)) {
					if(!(type.isArray() === true)) {
						TypeException.throwInvalidBinding("Array", this);
					}
				}
				else {
					if(!(type.isDictionary() === true)) {
						TypeException.throwInvalidBinding("Dictionary", this);
					}
				}
			}
		},
		setRealType: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_setRealType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setRealType) {
				return AbstractNode.prototype.setRealType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._binding);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableBindingDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			return this._binding.toAssignmentFragments(fragments, value);
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return VariableBindingDeclarator.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAssignmentFragments) {
				return AbstractNode.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			this._binding.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var VariableIdentifierDeclarator = KSHelper.class({
		$name: "VariableIdentifierDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._type = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			VariableIdentifierDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._identifier = new IdentifierLiteral(this._data.name, this, this._scope);
			this._identifier.setAssignment(AssignmentType.Declaration);
			this._identifier.analyse();
			this._parent.defineVariables(this._identifier);
			this._variable = this._identifier.variable();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._data.type)) {
				this._type = Type.fromAST(this._data.type, this);
				if(this._type.isNull() === true) {
					TypeException.throwNullTypeVariable(this._name, this);
				}
				this._variable.setDeclaredType(this._type).flagDefinitive();
			}
			else {
				if(this._parent.isImmutable() === true) {
					this._type = this._variable.getRealType();
				}
				else {
					this._type = AnyType.NullableUnexplicit;
				}
				this._variable.setDeclaredType(this._type).flagDefinitive();
			}
			this._identifier.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._identifier.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagDefinitive_0: function() {
			this._variable.flagDefinitive();
		},
		flagDefinitive: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_flagDefinitive_0.apply(this);
			}
			else if(AbstractNode.prototype.flagDefinitive) {
				return AbstractNode.prototype.flagDefinitive.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDuplicate_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(scope.hasDeclaredVariable(this._name) === true) {
				return true;
			}
			while(scope.isInline() === true) {
				scope = scope.parent();
				if(scope.hasDeclaredVariable(this._name) === true) {
					return true;
				}
			}
			return false;
		},
		isDuplicate: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isDuplicate_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isDuplicate) {
				return AbstractNode.prototype.isDuplicate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._name === name;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isDeclararingVariable) {
				return AbstractNode.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			return this._scope.isRedeclaredVariable(this._name);
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(AbstractNode.prototype.isRedeclared) {
				return AbstractNode.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSplitAssignment_0: function() {
			return false;
		},
		isSplitAssignment: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isSplitAssignment_0.apply(this);
			}
			else if(AbstractNode.prototype.isSplitAssignment) {
				return AbstractNode.prototype.isSplitAssignment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isStronglyTyped_0: function() {
			return KSType.isValue(this._data.type);
		},
		isStronglyTyped: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isStronglyTyped_0.apply(this);
			}
			else if(AbstractNode.prototype.isStronglyTyped) {
				return AbstractNode.prototype.isStronglyTyped.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setDeclaredType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._type === null) {
				this._variable.setDeclaredType(type);
			}
		},
		setDeclaredType: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setDeclaredType) {
				return AbstractNode.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setRealType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._type !== null) {
				if(!type.matchContentOf(this._type)) {
					TypeException.throwInvalidAssignement(this._name, this._type, type, this);
				}
			}
			this._variable.setRealType(type);
		},
		setRealType: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_setRealType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setRealType) {
				return AbstractNode.prototype.setRealType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._identifier);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableIdentifierDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			fragments.compile(this._identifier).code($equals).compile(value);
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return VariableIdentifierDeclarator.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAssignmentFragments) {
				return AbstractNode.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_variable_0: function() {
			return this._variable;
		},
		variable: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_variable_0.apply(this);
			}
			else if(AbstractNode.prototype.variable) {
				return AbstractNode.prototype.variable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._variable.getSecureName(), this._variable.getRealType());
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var WhileStatement = KSHelper.class({
		$name: "WhileStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._body = null;
			this._bodyScope = null;
			this._declared = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			WhileStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSHelper.valueOf(this._data.condition.kind) === NodeKind.VariableDeclaration.value) {
				this._declared = true;
				this._bindingScope = this.newScope(this._scope, ScopeType.Bleeding);
				this._variable = new VariableDeclaration(this._data.condition, this, this._bindingScope, this._scope);
				this._variable.analyse();
				this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			}
			else {
				this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
				this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
				this._condition = $compile.expression(this._data.condition, this, this._bindingScope);
				this._condition.analyse();
			}
			this._scope.line(this._data.body.start.line);
			this._body = $compile.block(this._data.body, this, this._bodyScope);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._declared) {
				this._variable.prepare();
			}
			else {
				this._condition.prepare();
				if(!(this._condition.type().canBeBoolean() === true)) {
					TypeException.throwInvalidCondition(this._condition, this);
				}
				var __ks_0 = this._condition.inferWhenTrueTypes(new Dictionary());
				for(var name in __ks_0) {
					var data = __ks_0[name];
					this._bodyScope.updateInferable(name, data, this);
				}
				this._condition.acquireReusable(false);
				this._condition.releaseReusable();
			}
			this.assignTempVariables(this._scope);
			this._scope.line(this._data.body.start.line);
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._declared) {
				this._variable.translate();
			}
			else {
				this._condition.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._body.checkReturnType(type);
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return WhileStatement.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			return Statement.prototype.checkReturnType.apply(this, arguments);
		},
		__ks_func_isCascade_0: function() {
			return this._declared;
		},
		isCascade: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_isCascade_0.apply(this);
			}
			return Statement.prototype.isCascade.apply(this, arguments);
		},
		__ks_func_isJumpable_0: function() {
			return true;
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_isJumpable_0.apply(this);
			}
			return Statement.prototype.isJumpable.apply(this, arguments);
		},
		__ks_func_isLoop_0: function() {
			return true;
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_isLoop_0.apply(this);
			}
			return Statement.prototype.isLoop.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._declared) {
				if(this._variable.isUsingVariable(name) === true) {
					return true;
				}
			}
			else {
				if(this._condition.isUsingVariable(name) === true) {
					return true;
				}
			}
			return this._body.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return WhileStatement.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Statement.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("while(");
			if(this._declared) {
				var first = true;
				this._variable.walk((function(name) {
					if(arguments.length < 1) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					if(first) {
						ctrl.code(KSHelper.concatString($runtime.type(this), ".isValue("));
						this._variable.toInlineFragments(ctrl, mode);
						ctrl.code(")");
						first = false;
					}
					else {
						ctrl.code(KSHelper.concatString(" && ", $runtime.type(this), ".isValue("), name, ")");
					}
				}).bind(this));
			}
			else {
				ctrl.compileBoolean(this._condition);
			}
			ctrl.code(")").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return WhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var Expression = KSHelper.class({
		$name: "Expression",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._castingEnum = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Expression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.acquireReusable) {
				return AbstractNode.prototype.acquireReusable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDeclaredType_0: function() {
			return this.type();
		},
		getDeclaredType: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_getDeclaredType_0.apply(this);
			}
			else if(AbstractNode.prototype.getDeclaredType) {
				return AbstractNode.prototype.getDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return true;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(AbstractNode.prototype.hasExceptions) {
				return AbstractNode.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.inferTypes) {
				return AbstractNode.prototype.inferTypes.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this.inferTypes(inferables);
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.inferWhenTrueTypes) {
				return AbstractNode.prototype.inferWhenTrueTypes.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this.inferTypes(inferables);
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.inferWhenFalseTypes) {
				return AbstractNode.prototype.inferWhenFalseTypes.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			else if(AbstractNode.prototype.isAssignable) {
				return AbstractNode.prototype.isAssignable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwaiting_0: function() {
			return false;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwaiting) {
				return AbstractNode.prototype.isAwaiting.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isBooleanComputed_0: function() {
			return (this.isComputed() === true) || !(this.type().isBoolean() === true) || (this.type().isNullable() === true);
		},
		isBooleanComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isBooleanComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isBooleanComputed) {
				return AbstractNode.prototype.isBooleanComputed.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return false;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isCallable_0.apply(this);
			}
			else if(AbstractNode.prototype.isCallable) {
				return AbstractNode.prototype.isCallable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return true;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComposite_0.apply(this);
			}
			else if(AbstractNode.prototype.isComposite) {
				return AbstractNode.prototype.isComposite.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isComputed) {
				return AbstractNode.prototype.isComputed.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclarable_0: function() {
			return false;
		},
		isDeclarable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isDeclarable_0.apply(this);
			}
			else if(AbstractNode.prototype.isDeclarable) {
				return AbstractNode.prototype.isDeclarable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return false;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(AbstractNode.prototype.isExit) {
				return AbstractNode.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExpectingType_0: function() {
			return false;
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			else if(AbstractNode.prototype.isExpectingType) {
				return AbstractNode.prototype.isExpectingType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isIgnorable_0: function() {
			return false;
		},
		isIgnorable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isIgnorable_0.apply(this);
			}
			else if(AbstractNode.prototype.isIgnorable) {
				return AbstractNode.prototype.isIgnorable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInferable_0: function() {
			return false;
		},
		isInferable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isInferable_0.apply(this);
			}
			else if(AbstractNode.prototype.isInferable) {
				return AbstractNode.prototype.isInferable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isLooseComposite_0: function() {
			return this.isComposite();
		},
		isLooseComposite: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isLooseComposite_0.apply(this);
			}
			else if(AbstractNode.prototype.isLooseComposite) {
				return AbstractNode.prototype.isLooseComposite.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatchingType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return this.type().matchContentOf(type);
		},
		isMatchingType: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_isMatchingType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isMatchingType) {
				return AbstractNode.prototype.isMatchingType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullable) {
				return AbstractNode.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this.isComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullableComputed) {
				return AbstractNode.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingSetter_0: function() {
			return false;
		},
		isUsingSetter: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isUsingSetter_0.apply(this);
			}
			else if(AbstractNode.prototype.isUsingSetter) {
				return AbstractNode.prototype.isUsingSetter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSplitAssignment_0: function() {
			return false;
		},
		isSplitAssignment: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isSplitAssignment_0.apply(this);
			}
			else if(AbstractNode.prototype.isSplitAssignment) {
				return AbstractNode.prototype.isSplitAssignment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(AbstractNode.prototype.releaseReusable) {
				return AbstractNode.prototype.releaseReusable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isEnumMember(type, AssignmentType)) {
				throw new TypeError("'type' is not of type 'AssignmentType'");
			}
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setAssignment) {
				return AbstractNode.prototype.setAssignment.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setCastingEnum_0: function(castingEnum) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(castingEnum === void 0 || castingEnum === null) {
				throw new TypeError("'castingEnum' is not nullable");
			}
			else if(!KSType.isBoolean(castingEnum)) {
				throw new TypeError("'castingEnum' is not of type 'Boolean'");
			}
			this._castingEnum = castingEnum;
		},
		setCastingEnum: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_setCastingEnum_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setCastingEnum) {
				return AbstractNode.prototype.setCastingEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_statement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var expression = this;
			while(!KSType.isInstance(expression._parent, Statement)) {
				expression = expression._parent;
			}
			return expression._parent;
		},
		statement: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_statement_0.apply(this, arguments);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toArgumentFragments_0: function(fragments, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			this.toFragments(fragments, mode);
			if(this._castingEnum) {
				fragments.code(".value");
			}
		},
		toArgumentFragments: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Expression.prototype.__ks_func_toArgumentFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toArgumentFragments) {
				return AbstractNode.prototype.toArgumentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				mode = Mode.None;
			}
			this.toFragments(fragments, mode);
			if(!(this.type().isBoolean() === true) || (this.type().isNullable() === true)) {
				fragments.code(" === true");
			}
		},
		toBooleanFragments: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Expression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toNullableFragments) {
				return AbstractNode.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toOperandFragments_0: function(fragments, operator, type) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(operator === void 0 || operator === null) {
				throw new TypeError("'operator' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toOperandFragments: function() {
			if(arguments.length === 3) {
				return Expression.prototype.__ks_func_toOperandFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toOperandFragments) {
				return AbstractNode.prototype.toOperandFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotSupportedException();
		},
		__ks_func_toQuote_1: function(__ks_double_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_double_1 === void 0 || __ks_double_1 === null) {
				throw new TypeError("'double' is not nullable");
			}
			else if(!KSType.isBoolean(__ks_double_1)) {
				throw new TypeError("'double' is not of type 'Boolean'");
			}
			if(__ks_double_1) {
				return "\"" + this.toQuote() + "\"";
			}
			else {
				return "'" + this.toQuote() + "'";
			}
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toQuote_1.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toQuote) {
				return AbstractNode.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toReusableFragments) {
				return AbstractNode.prototype.toReusableFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStringFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var type = this.type();
			if((type.isReference() === true) && (type.type().isEnum() === true)) {
				fragments.compile(this).code(".value");
			}
			else {
				fragments.wrap(this);
			}
		},
		toStringFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toStringFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStringFragments) {
				return AbstractNode.prototype.toStringFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return AnyType.NullableUnexplicit;
		},
		type: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var Literal = KSHelper.class({
		$name: "Literal",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(value, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			Expression.prototype.__ks_cons.call(this, [false, parent]);
			this._value = value;
		},
		__ks_cons_1: function(data, parent, scope, value) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				Literal.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				Literal.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return Literal.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._data === true) {
				fragments.code(this._value, this._data);
			}
			else {
				fragments.code(this._value);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Literal.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._value;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Expression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var IdentifierLiteral = KSHelper.class({
		$name: "IdentifierLiteral",
		$extends: Literal,
		__ks_init_1: function() {
			this._assignment = AssignmentType.Neither;
			this._isMacro = false;
			this._isVariable = false;
		},
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
			IdentifierLiteral.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.name]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				IdentifierLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(this._assignment === AssignmentType.Neither) {
				var name;
				if(this._scope.hasVariable(this._value) === true) {
					this._isVariable = true;
					this._line = this._scope.line();
					if(this._value === "Dictionary") {
						this.module().flag("Dictionary");
					}
				}
				else if(this._scope.hasMacro(this._value)) {
					this._isMacro = true;
				}
				else if(KSType.isValue((name = $runtime.getVariable(this._value, this._parent)))) {
					this._value = name;
					this._realType = this._declaredType = Type.Any;
				}
				else {
					ReferenceException.throwNotDefined(this._value, this);
				}
			}
			else {
				this._isVariable = true;
				this._line = this._scope.line();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_analyse_0.apply(this);
			}
			return Literal.prototype.analyse.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			if(this._isVariable) {
				var variable = this._scope.getVariable(this._value, this._line);
				if((this._scope.hasDeclaredVariable(this._value) === true) && !(this._scope.hasDefinedVariable(this._value, this._line) === true)) {
					this._scope.renameNext(this._value, this._line);
				}
				this._declaredType = variable.getDeclaredType();
				this._realType = variable.getRealType();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_prepare_0.apply(this);
			}
			return Literal.prototype.prepare.apply(this, arguments);
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._value, this);
		},
		export: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Literal.prototype.export) {
				return Literal.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDeclaredType_0: function() {
			return this._declaredType;
		},
		getDeclaredType: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_getDeclaredType_0.apply(this);
			}
			return Literal.prototype.getDeclaredType.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Literal.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isDeclarable_0: function() {
			return true;
		},
		isDeclarable: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isDeclarable_0.apply(this);
			}
			return Literal.prototype.isDeclarable.apply(this, arguments);
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._value === name;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Literal.prototype.isDeclararingVariable) {
				return Literal.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExpectingType_0: function() {
			if(this._isVariable) {
				var variable = this._scope.getVariable(this._value, this._line);
				return variable.isDefinitive();
			}
			else {
				return false;
			}
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			return Literal.prototype.isExpectingType.apply(this, arguments);
		},
		__ks_func_isMacro_0: function() {
			return this._isMacro;
		},
		isMacro: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isMacro_0.apply(this);
			}
			else if(Literal.prototype.isMacro) {
				return Literal.prototype.isMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			return this._scope.isRedeclaredVariable(this._value);
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(Literal.prototype.isRedeclared) {
				return Literal.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRenamed_0: function() {
			return this._scope.isRenamedVariable(this._value);
		},
		isRenamed: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isRenamed_0.apply(this);
			}
			else if(Literal.prototype.isRenamed) {
				return Literal.prototype.isRenamed.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInferable_0: function() {
			return true;
		},
		isInferable: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isInferable_0.apply(this);
			}
			return Literal.prototype.isInferable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value === name;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Literal.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			array.push(this.name());
			return array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Literal.prototype.listAssignments) {
				return Literal.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._value;
		},
		name: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_name_0.apply(this);
			}
			else if(Literal.prototype.name) {
				return Literal.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_path_0: function() {
			return this._value;
		},
		path: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_path_0.apply(this);
			}
			else if(Literal.prototype.path) {
				return Literal.prototype.path.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Literal.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._isVariable) {
				fragments.compile(this._scope.getVariable(this._value, this._line));
			}
			else {
				fragments.code(this._value, this._data);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IdentifierLiteral.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Literal.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._realType;
		},
		__ks_func_type_1: function(type, scope, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._isVariable) {
				this._realType = scope.replaceVariable(this.name(), type, node).getRealType();
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 3) {
				return IdentifierLiteral.prototype.__ks_func_type_1.apply(this, arguments);
			}
			return Literal.prototype.type.apply(this, arguments);
		},
		__ks_func_variable_0: function() {
			return this._scope.getVariable(this._value, this._line);
		},
		variable: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_variable_0.apply(this);
			}
			else if(Literal.prototype.variable) {
				return Literal.prototype.variable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(this._isVariable) {
				fn(this._value, this._realType);
			}
			else {
				throw new NotSupportedException();
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Literal.prototype.walk) {
				return Literal.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NumberLiteral = KSHelper.class({
		$name: "NumberLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.value]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				NumberLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return NumberLiteral.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Literal.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return NumberLiteral.prototype.__ks_func_type_0.apply(this);
			}
			return Literal.prototype.type.apply(this, arguments);
		}
	});
	var StringLiteral = KSHelper.class({
		$name: "StringLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, $quote(data.value)]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				StringLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_type_0: function() {
			return this._scope.reference("String");
		},
		type: function() {
			if(arguments.length === 0) {
				return StringLiteral.prototype.__ks_func_type_0.apply(this);
			}
			return Literal.prototype.type.apply(this, arguments);
		}
	});
	var ArrayExpression = KSHelper.class({
		$name: "ArrayExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._flatten = false;
			this._values = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var es5 = this._options.format.spreads === "es5";
			for(var __ks_0 = 0, __ks_1 = this._data.values.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.values[__ks_0];
				var value = $compile.expression(data, this);
				value.analyse();
				if(es5 && KSType.isInstance(value, UnaryOperatorSpread)) {
					this._flatten = true;
				}
				this._values.push(value);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var type = null;
			for(var index = 0, __ks_0 = this._values.length, value; index < __ks_0; ++index) {
				value = this._values[index];
				value.prepare();
				if(index === 0) {
					type = value.type().discardSpread();
				}
				else if(type !== null) {
					if(!(type.equals(value.type().discardSpread()) === true)) {
						type = null;
					}
				}
			}
			if(type === null) {
				this._type = this._scope.reference("Array");
			}
			else {
				this._type = Type.arrayOf(type, this._scope);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isMatchingType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._values.length === 0) {
				return (type.isAny() === true) || (type.isArray() === true);
			}
			else {
				return this._type.matchContentOf(type);
			}
		},
		isMatchingType: function() {
			if(arguments.length === 1) {
				return ArrayExpression.prototype.__ks_func_isMatchingType_0.apply(this, arguments);
			}
			return Expression.prototype.isMatchingType.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				if(value.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrayExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._flatten) {
				CallExpression.toFlattenArgumentsFragments(fragments, this._values);
			}
			else {
				fragments.code("[");
				for(var index = 0, __ks_0 = this._values.length, value; index < __ks_0; ++index) {
					value = this._values[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(value);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ArrayRange = KSHelper.class({
		$name: "ArrayRange",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._from = $compile.expression(KSType.isValue(this._data.from) ? this._data.from : this._data.then, this);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.to) ? this._data.to : this._data.til, this);
			this._to.analyse();
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = Type.arrayOf(this._scope.reference("Number"), this._scope);
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._from.translate();
			this._to.translate();
			if(this._by !== null) {
				this._by.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || (KSType.isValue(this._by) ? this._by.isUsingVariable(name) === true : false);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrayRange.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			fragments.code($runtime.helper(this), ".newArrayRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code(", ").compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.from), $comma, KSType.isValue(this._data.to), ")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	function $return(data) {
		if(data === void 0) {
			data = null;
		}
		return (function() {
			var d = new Dictionary();
			d.kind = NodeKind.ReturnStatement;
			d.value = data;
			d.start = data.start;
			return d;
		})();
	}
	var ArrayComprehensionForFrom = KSHelper.class({
		$name: "ArrayComprehensionForFrom",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
			this._when = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForFrom.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._bindingScope.define(this._data.loop.variable.name, false, this._scope.reference("Number"), true, this);
			this._variable = $compile.expression(this._data.loop.variable, this, this._bindingScope);
			this._variable.analyse();
			this._from = $compile.expression(this._data.loop.from, this, this._scope);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.loop.to) ? this._data.loop.to : this._data.loop.til, this, this._scope);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this, this._scope);
				this._by.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this, this._bodyScope);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this, this._bodyScope);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._variable.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || ((this._by !== null) && (this._by.isUsingVariable(name) === true)) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrayComprehensionForFrom.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code($comma).compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.loop.from), $comma, KSType.isValue(this._data.loop.to), $comma);
			fragments.code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForFrom.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ArrayComprehensionForIn = KSHelper.class({
		$name: "ArrayComprehensionForIn",
		$extends: Expression,
		__ks_init_1: function() {
			this._when = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForIn.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._expression = $compile.expression(this._data.loop.expression, this, this._scope);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.value)) {
				this._valueVariable = this._bindingScope.define(this._data.loop.value.name, false, AnyType.NullableUnexplicit, true, this);
				this._value = $compile.expression(this._data.loop.value, this, this._bindingScope);
				this._value.analyse();
			}
			else {
				this._valueName = this._bindingScope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.index)) {
				this._indexVariable = this._bindingScope.define(this._data.loop.index.name, false, this._bindingScope.reference("Number"), true, this);
				this._index = $compile.expression(this._data.loop.index, this, this._bindingScope);
				this._index.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this, this._bodyScope);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this, this._bodyScope);
				this._when.analyse();
			}
			if(KSType.isValue(this._valueName)) {
				this._bindingScope.releaseTempName(this._valueName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var type = this._expression.type();
			if(!((type.isAny() === true) || (type.isArray() === true))) {
				TypeException.throwInvalidForInExpression(this);
			}
			if(KSType.isValue(this._value)) {
				var parameterType = type.parameter();
				var valueType = Type.fromAST(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				var realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				this._valueVariable.setRealType(realType);
				this._value.prepare();
			}
			if(KSType.isValue(this._index)) {
				this._index.prepare();
			}
			this._body.prepare();
			if(this._body.type().isAny() === true) {
				this._type = this._scope.reference("Array");
			}
			else {
				this._type = Type.arrayOf(this._body.type(), this._scope);
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._index)) {
				this._index.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._expression.isUsingVariable(name) === true) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrayComprehensionForIn.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapArray(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
			if(KSType.isValue(this._index)) {
				fragments.code($comma).compile(this._index);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
				if(KSType.isValue(this._index)) {
					fragments.code($comma).compile(this._index);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForIn.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ArrayComprehensionForOf = KSHelper.class({
		$name: "ArrayComprehensionForOf",
		$extends: Expression,
		__ks_init_1: function() {
			this._when = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForOf.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._expression = $compile.expression(this._data.loop.expression, this, this._scope);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.key)) {
				this._bindingScope.define(this._data.loop.key.name, false, this._bindingScope.reference("String"), true, this);
				this._key = $compile.expression(this._data.loop.key, this, this._bindingScope);
				this._key.analyse();
			}
			else {
				this._keyName = this._bindingScope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.value)) {
				this._valueVariable = this._bindingScope.define(this._data.loop.value.name, false, AnyType.NullableUnexplicit, true, this);
				this._value = $compile.expression(this._data.loop.value, this, this._bindingScope);
				this._value.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this, this._bodyScope);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this, this._bodyScope);
				this._when.analyse();
			}
			if(KSType.isValue(this._keyName)) {
				this._bindingScope.releaseTempName(this._keyName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var type = this._expression.type();
			if(!((type.isAny() === true) || (type.isDictionary() === true) || (type.isObject() === true))) {
				TypeException.throwInvalidForOfExpression(this);
			}
			if(KSType.isValue(this._value)) {
				var parameterType = type.parameter();
				var valueType = Type.fromAST(this._data.type, this);
				if(!(parameterType.matchContentOf(valueType) === true)) {
					TypeException.throwInvalidAssignement(this._value, valueType, parameterType, this);
				}
				var realType = (parameterType.isMorePreciseThan(valueType) === true) ? parameterType : valueType;
				this._valueVariable.setRealType(realType);
				this._value.prepare();
			}
			if(KSType.isValue(this._key)) {
				this._key.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._expression.isUsingVariable(name) === true) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrayComprehensionForOf.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapDictionary(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
			if(KSType.isValue(this._value)) {
				fragments.code($comma).compile(this._value);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
				if(KSType.isValue(this._value)) {
					fragments.code($comma).compile(this._value);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForOf.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ArrayComprehensionForRange = KSHelper.class({
		$name: "ArrayComprehensionForRange",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
			this._when = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._bindingScope = this.newScope(this._scope, ScopeType.InlineBlock);
			this._bodyScope = this.newScope(this._bindingScope, ScopeType.InlineBlock);
			this._bindingScope.define(this._data.loop.value.name, false, this._scope.reference("Number"), true, this);
			this._value = $compile.expression(this._data.loop.value, this, this._bindingScope);
			this._value.analyse();
			this._from = $compile.expression(this._data.loop.from, this, this._scope);
			this._from.analyse();
			this._to = $compile.expression(this._data.loop.to, this, this._scope);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this, this._scope);
				this._body.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this, this._bodyScope);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this, this._bodyScope);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._from.isUsingVariable(name) === true) || (this._to.isUsingVariable(name) === true) || ((this._by !== null) && (this._by.isUsingVariable(name) === true)) || ((this._when !== null) && (this._when.isUsingVariable(name) === true)) || (this._body.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrayComprehensionForRange.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(KSType.isValue(this._by)) {
				fragments.code(", ").compile(this._by);
			}
			else {
				fragments.code(", 1");
			}
			fragments.code($comma, "true", $comma, "true", $comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var AwaitExpression = KSHelper.class({
		$name: "AwaitExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = true;
			this._reuseName = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AwaitExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			while(KSType.isValue(parent) && !(KSType.isInstance(parent, AnonymousFunctionExpression) || KSType.isInstance(parent, ArrowFunctionExpression) || KSType.isInstance(parent, FunctionDeclarator) || KSType.isInstance(parent, ClassMethodDeclaration) || KSType.isInstance(parent, ImplementClassMethodDeclaration) || KSType.isInstance(parent, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.isInstance(parent, TryStatement)) {
					this._try = parent;
				}
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
			else if(!(this.module().isBinary() === true)) {
				SyntaxException.throwInvalidAwait(this);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				AwaitExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._operation = $compile.expression(this._data.operation, this);
			this._operation.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._operation.prepare();
			this._reuseName = this._scope.acquireTempName(false);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._operation.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return true;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._awaiting;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._operation.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return AwaitExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e, " + this._reuseName + ") =>");
			var block = fragments.newBlock();
			var index = -1;
			var item;
			for(var i = 0, __ks_0 = statements.length, statement; i < __ks_0 && (index === -1); ++i) {
				statement = statements[i];
				var __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 2) {
				return AwaitExpression.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAwaitExpressionFragments) {
				return Expression.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._awaiting) {
				var item, __ks_0;
				if(KSType.isValue(__ks_0 = this._operation.toFragments(fragments, Mode.Async)) ? (item = __ks_0, true) : false) {
					return item;
				}
				else {
					this._awaiting = false;
					if(KSType.isValue(this._try)) {
						return KSHelper.vcurry(this._try.toAwaitExpressionFragments, this._try, fragments, [new Literal(this._reuseName, this)]);
					}
					else if(KSType.isValue(this._function) ? this._function.type().isAsync() === true : false) {
						return KSHelper.vcurry(this._function.toAwaitExpressionFragments, this._function, fragments, [new Literal(this._reuseName, this)]);
					}
					else {
						return KSHelper.vcurry(this.toAwaitExpressionFragments, this, fragments);
					}
				}
			}
			else {
				fragments.code(this._reuseName);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AwaitExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._operation.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ArrayBinding = KSHelper.class({
		$name: "ArrayBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignment = AssignmentType.Neither;
			this._elements = [];
			this._flatten = false;
			this._immutable = false;
			this._type = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._flatten = this._options.format.destructuring === "es5";
			for(var index = 0, __ks_0 = this._data.elements.length, data; index < __ks_0; ++index) {
				data = this._data.elements[index];
				var element = this.newElement(data);
				element.setAssignment(this._assignment);
				element.index(index);
				element.analyse();
				this._elements.push(element);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._type === null) {
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.prepare();
				}
			}
			else if(KSType.isInstance(this._type, ArrayType)) {
				for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					element.type(this._type.getElement(index));
					element.prepare();
				}
			}
			else if(this._type.isStruct() === true) {
				var type = this._type.discard();
				for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					element.type(type.getProperty(index).type());
					element.prepare();
				}
			}
			else {
				var type = this._type.parameter();
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.type(type);
					element.prepare();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagImmutable_0: function() {
			this._immutable = true;
		},
		flagImmutable: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_flagImmutable_0.apply(this);
			}
			else if(Expression.prototype.flagImmutable) {
				return Expression.prototype.flagImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isDeclarable_0: function() {
			return true;
		},
		isDeclarable: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isDeclarable_0.apply(this);
			}
			return Expression.prototype.isDeclarable.apply(this, arguments);
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isDeclararingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isRedeclared() === true) {
					return true;
				}
			}
			return false;
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(Expression.prototype.isRedeclared) {
				return Expression.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSplitAssignment_0: function() {
			return this._flatten && KSOperator.gt(this._elements.length, 1);
		},
		isSplitAssignment: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isSplitAssignment_0.apply(this);
			}
			return Expression.prototype.isSplitAssignment.apply(this, arguments);
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.listAssignments(array);
			}
			return array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newElement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return new ArrayBindingElement(data, this, this._scope);
		},
		newElement: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_newElement_0.apply(this, arguments);
			}
			else if(Expression.prototype.newElement) {
				return Expression.prototype.newElement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("[");
			for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
				if(i !== 0) {
					fragments.code(", ");
				}
				this._elements[i].toFragments(fragments);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._flatten) {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._elements.length === 1) {
				this._elements[0].toFlatFragments(fragments, value);
			}
			else {
				var reusableValue = new TempReusableExpression(value, this);
				var comma = false;
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					if(!(element.isAnonymous() === true)) {
						if(comma) {
							fragments.code(", ");
						}
						else {
							comma = true;
						}
						element.toFlatFragments(fragments, reusableValue);
					}
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			this._type = type;
			return this;
		},
		__ks_func_type_1: function(type, scope, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
		},
		type: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return ArrayBinding.prototype.__ks_func_type_1.apply(this, arguments);
			}
			return Expression.prototype.type.apply(this, arguments);
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ArrayBindingElement = KSHelper.class({
		$name: "ArrayBindingElement",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignment = AssignmentType.Neither;
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._index = -1;
			this._name = null;
			this._named = false;
			this._rest = false;
			this._thisAlias = false;
			this._type = AnyType.NullableUnexplicit;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayBindingElement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.name)) {
				this._name = this.compileVariable(this._data.name);
				this._name.setAssignment(this._assignment);
				this._name.analyse();
				this._named = true;
				if(KSType.isValue(this._data.defaultValue)) {
					this._hasDefaultValue = true;
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					this._rest = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
					this._thisAlias = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._data.type)) {
				this._type = Type.fromAST(this._data.type, this);
			}
			if(this._named) {
				this._name.prepare();
				if(this._hasDefaultValue) {
					this._defaultValue.prepare();
				}
				if(KSType.isInstance(this._name, IdentifierLiteral)) {
					var variable = this._name.variable();
					variable.setDeclaredType(this._type);
					if(this._assignment === AssignmentType.Declaration) {
						variable.setRealType(this._type);
					}
					else if(this._hasDefaultValue) {
						variable.setRealType(this._defaultValue.type());
					}
				}
				else {
					this._name.type(this._type);
				}
			}
			this.statement().assignTempVariables(this._scope);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._named) {
				this._name.translate();
				if(this._hasDefaultValue) {
					this._defaultValue.translate();
				}
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileVariable_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return $compile.expression(data, this);
		},
		compileVariable: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_compileVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.compileVariable) {
				return Expression.prototype.compileVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			return this._named ? this._name.export(recipient) : null;
		},
		export: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_index_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_index_0.apply(this, arguments);
			}
			else if(Expression.prototype.index) {
				return Expression.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._parent.isImmutable();
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._named ? this._name.isDeclararingVariable(name) : false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return !this._named;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			else if(Expression.prototype.isAnonymous) {
				return Expression.prototype.isAnonymous.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			return this._named ? this._name.isRedeclared() : false;
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(Expression.prototype.isRedeclared) {
				return Expression.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRest_0: function() {
			return this._rest;
		},
		isRest: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_isRest_0.apply(this);
			}
			else if(Expression.prototype.isRest) {
				return Expression.prototype.isRest.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			return this._named ? this._name.listAssignments(array) : array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_max_0: function() {
			return this._rest ? Infinity : 1;
		},
		max: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_max_0.apply(this);
			}
			else if(Expression.prototype.max) {
				return Expression.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._rest ? 0 : 1;
		},
		min: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_min_0.apply(this);
			}
			else if(Expression.prototype.min) {
				return Expression.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			if(this._named) {
				fragments.compile(this._name);
				if(this._defaultValue !== null) {
					fragments.code(" = ").compile(this._defaultValue);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toExistFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			if(this._named) {
				if(this._defaultValue !== null) {
					fragments.code(" = ").compile(this._defaultValue);
				}
			}
		},
		toExistFragments: function() {
			if(arguments.length === 2) {
				return ArrayBindingElement.prototype.__ks_func_toExistFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toExistFragments) {
				return Expression.prototype.toExistFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._named) {
				if(KSType.isInstance(this._name, ArrayBinding)) {
					this._name.toFlatFragments(fragments, new FlatArrayBindingElement(value, this._index, this));
				}
				else {
					fragments.compile(this._name).code($equals).wrap(value).code("[" + this._index + "]");
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ArrayBindingElement.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayBindingElement.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_type_1.apply(this, arguments);
			}
			return Expression.prototype.type.apply(this, arguments);
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(this._named) {
				this._name.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ArrayBindingElement.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FlatArrayBindingElement = KSHelper.class({
		$name: "FlatArrayBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(array, index, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [new Dictionary(), parent]);
			this._array = array;
			this._index = index;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FlatArrayBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._array).code("[").compile(this._index).code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatArrayBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FlatObjectBindingElement = KSHelper.class({
		$name: "FlatObjectBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(item, property, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(item === void 0 || item === null) {
				throw new TypeError("'item' is not nullable");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [new Dictionary(), parent]);
			this._item = item;
			this._property = property;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FlatObjectBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._item).code(".").compile(this._property);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatObjectBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var FlatReusableBindingElement = KSHelper.class({
		$name: "FlatReusableBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(value, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [new Dictionary(), parent]);
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				FlatReusableBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(").compileReusable(this._value).code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatReusableBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ObjectBinding = KSHelper.class({
		$name: "ObjectBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignment = AssignmentType.Neither;
			this._elements = [];
			this._flatten = false;
			this._immutable = false;
			this._type = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._flatten = this._options.format.destructuring === "es5";
			for(var __ks_0 = 0, __ks_1 = this._data.elements.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.elements[__ks_0];
				var element = this.newElement(data);
				element.setAssignment(this._assignment);
				element.analyse();
				if(element.hasDefaultValue() === true) {
					this._flatten = true;
				}
				this._elements.push(element);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._type === null) {
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.prepare();
				}
			}
			else if(KSType.isInstance(this._type, DictionaryType)) {
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.type(this._type.getProperty(element.name()));
					element.prepare();
				}
			}
			else {
				var type = this._type.parameter();
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.type(type);
					element.prepare();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_flagImmutable_0: function() {
			this._immutable = true;
		},
		flagImmutable: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_flagImmutable_0.apply(this);
			}
			else if(Expression.prototype.flagImmutable) {
				return Expression.prototype.flagImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isDeclarable_0: function() {
			return true;
		},
		isDeclarable: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isDeclarable_0.apply(this);
			}
			return Expression.prototype.isDeclarable.apply(this, arguments);
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isDeclararingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isRedeclared() === true) {
					return true;
				}
			}
			return false;
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(Expression.prototype.isRedeclared) {
				return Expression.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isSplitAssignment_0: function() {
			return this._flatten && KSOperator.gt(this._elements.length, 1);
		},
		isSplitAssignment: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isSplitAssignment_0.apply(this);
			}
			return Expression.prototype.isSplitAssignment.apply(this, arguments);
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.listAssignments(array);
			}
			return array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newElement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return new ObjectBindingElement(data, this, this._scope);
		},
		newElement: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_newElement_0.apply(this, arguments);
			}
			else if(Expression.prototype.newElement) {
				return Expression.prototype.newElement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("{");
			for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
				if(i !== 0) {
					fragments.code(", ");
				}
				this._elements[i].toFragments(fragments);
			}
			fragments.code("}");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._flatten) {
				this.toFlatFragments(fragments, value);
			}
			else if(this._assignment === AssignmentType.Declaration) {
				fragments.compile(this).code($equals).compile(value);
			}
			else {
				fragments.code("(").compile(this).code($equals).compile(value).code(")");
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._elements.length === 1) {
				this._elements[0].toFlatFragments(fragments, value);
			}
			else {
				var reusableValue = new TempReusableExpression(value, this);
				this._elements[0].toFlatFragments(fragments, reusableValue);
				for(var __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					fragments.code(", ");
					element.toFlatFragments(fragments, reusableValue);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			this._type = type;
			return this;
		},
		__ks_func_type_1: function(type, scope, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
		},
		type: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return ObjectBinding.prototype.__ks_func_type_1.apply(this, arguments);
			}
			return Expression.prototype.type.apply(this, arguments);
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ObjectBindingElement = KSHelper.class({
		$name: "ObjectBindingElement",
		$extends: Expression,
		__ks_init_1: function() {
			this._alias = null;
			this._assignment = AssignmentType.Neither;
			this._computed = false;
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._rest = false;
			this._thisAlias = false;
			this._type = AnyType.NullableUnexplicit;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectBindingElement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
					this._computed = true;
					break;
				}
			}
			if(KSType.isValue(this._data.alias)) {
				this._name = $compile.expression(this._data.name, this);
				this._alias = this.compileVariable(this._data.alias);
			}
			else {
				this._name = this.compileVariable(this._data.name);
				this._alias = this._name;
			}
			this._alias.setAssignment(this._assignment);
			this._alias.analyse();
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
			}
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					this._rest = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
					this._thisAlias = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._data.type)) {
				this._type = Type.fromAST(this._data.type, this);
			}
			this._alias.prepare();
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
			}
			if(KSType.isInstance(this._alias, IdentifierLiteral)) {
				var variable = this._alias.variable();
				variable.setDeclaredType(this._type);
				if(this._assignment === AssignmentType.Declaration) {
					variable.setRealType(this._type);
				}
				else if(this._hasDefaultValue) {
					variable.setRealType(this._defaultValue.type());
				}
			}
			else {
				this._alias.type(this._type);
			}
			this.statement().assignTempVariables(this._scope);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._alias.translate();
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileVariable_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return $compile.expression(data, this);
		},
		compileVariable: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_compileVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.compileVariable) {
				return Expression.prototype.compileVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			return this._alias.export(recipient);
		},
		export: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(Expression.prototype.hasDefaultValue) {
				return Expression.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._parent.isImmutable();
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._alias.isDeclararingVariable(name);
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			return this._alias.isRedeclared();
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(Expression.prototype.isRedeclared) {
				return Expression.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			return this._alias.listAssignments(array);
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name.value();
		},
		name: function() {
			if(arguments.length === 0) {
				return ObjectBindingElement.prototype.__ks_func_name_0.apply(this);
			}
			else if(Expression.prototype.name) {
				return Expression.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			if(this._computed) {
				fragments.code("[").compile(this._name).code("]: ").compile(this._alias);
			}
			else if(this._name !== this._alias) {
				fragments.compile(this._name).code(": ").compile(this._alias);
			}
			else {
				fragments.compile(this._alias);
			}
			if(this._hasDefaultValue) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toExistFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			if(this._computed) {
				fragments.code("[").compile(this._name).code("]: ", name);
			}
			else {
				fragments.compile(this._name).code(": ", name);
			}
			if(this._hasDefaultValue) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toExistFragments: function() {
			if(arguments.length === 2) {
				return ObjectBindingElement.prototype.__ks_func_toExistFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toExistFragments) {
				return Expression.prototype.toExistFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.isInstance(this._alias, ObjectBinding)) {
				this._alias.toFlatFragments(fragments, new FlatObjectBindingElement(value, this._name, this));
			}
			else if(this._hasDefaultValue) {
				fragments.compile(this._alias).code($equals, $runtime.helper(this), ".default(").wrap(value).code(".").compile(this._name).code($comma).compile(this._defaultValue).code(")");
			}
			else {
				fragments.compile(this._alias).code($equals).wrap(value).code(".").compile(this._name);
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ObjectBindingElement.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_type_0.apply(this, arguments);
			}
			return Expression.prototype.type.apply(this, arguments);
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			this._alias.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return ObjectBindingElement.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var CallExpression = KSHelper.class({
		$name: "CallExpression",
		$extends: Expression,
		$static: {
			__ks_sttc_toFlattenArgumentsFragments_0: function(fragments, __ks_arguments_1, prefill) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(prefill === void 0) {
					prefill = null;
				}
				if((__ks_arguments_1.length === 1) && (prefill === null) && (__ks_arguments_1[0].argument().type().isArray() === true)) {
					__ks_arguments_1[0].argument().toArgumentFragments(fragments);
				}
				else {
					if(prefill === null) {
						fragments.code("[].concat(");
					}
					else {
						fragments.code("[").compile(prefill).code("].concat(");
					}
					var opened = false;
					for(var index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
						argument = __ks_arguments_1[index];
						if(KSType.isInstance(argument, UnaryOperatorSpread)) {
							if(opened) {
								fragments.code("], ");
								opened = false;
							}
							else if(index !== 0) {
								fragments.code($comma);
							}
							argument.argument().toArgumentFragments(fragments);
						}
						else {
							if(index !== 0) {
								fragments.code($comma);
							}
							if(!opened) {
								fragments.code("[");
								opened = true;
							}
							argument.toArgumentFragments(fragments);
						}
					}
					if(opened) {
						fragments.code("]");
					}
					fragments.code(")");
				}
			},
			toFlattenArgumentsFragments: function() {
				if(arguments.length >= 2 && arguments.length <= 3) {
					return CallExpression.__ks_sttc_toFlattenArgumentsFragments_0.apply(this, arguments);
				}
				else if(Expression.toFlattenArgumentsFragments) {
					return Expression.toFlattenArgumentsFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._arguments = [];
			this._await = false;
			this._callees = [];
			this._flatten = false;
			this._hasDefaultCallee = false;
			this._named = false;
			this._nullable = false;
			this._nullableComputed = false;
			this._object = null;
			this._reusable = false;
			this._reuseName = null;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CallExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var es5 = (this._data.arguments.length !== 1) && (this._options.format.spreads === "es5");
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.arguments[__ks_0];
				var argument = $compile.expression(data, this);
				argument.analyse();
				if(es5 && KSType.isInstance(argument, UnaryOperatorSpread)) {
					this._flatten = true;
				}
				else if(argument.isAwait() === true) {
					this._await = true;
				}
				if(KSType.isInstance(argument, NamedArgument)) {
					this._named = true;
				}
				this._arguments.push(argument);
			}
			if((KSHelper.valueOf(this._data.callee.kind) === NodeKind.MemberExpression.value) && !(this._data.callee.modifiers.some(function(modifier) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(modifier === void 0 || modifier === null) {
					throw new TypeError("'modifier' is not nullable");
				}
				return KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value;
			}) === true)) {
				this._object = $compile.expression(this._data.callee.object, this);
				this._object.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.prepare();
				if(argument.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(argument, this);
				}
			}
			if(this._options.format.spreads === "es5") {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1 && !(this._flatten); ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(KSType.isInstance(argument, UnaryOperatorSpread)) {
						this._flatten = true;
					}
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1 && !(this._flatten); ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(KSType.isInstance(argument, UnaryOperatorSpread) && !(argument.argument().type().isArray() === true)) {
						this._flatten = true;
					}
				}
			}
			if(this._object !== null) {
				if(this._named) {
					NotImplementedException.throw(this);
				}
				this._object.prepare();
				this._property = this._data.callee.property.name;
				this.makeMemberCallee(this._object.type());
			}
			else {
				if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
					var variable = this._scope.getVariable(this._data.callee.name);
					if(KSType.isValue(variable)) {
						var type = variable.getRealType();
						if(type.isFunction() === true) {
							if(type.isAsync() === true) {
								if(KSType.isInstance(this._parent, VariableDeclaration)) {
									if(!(this._parent.isAwait() === true)) {
										TypeException.throwNotSyncFunction(this._data.callee.name, this);
									}
								}
								else if(!KSType.isInstance(this._parent, AwaitExpression)) {
									TypeException.throwNotSyncFunction(this._data.callee.name, this);
								}
							}
							else {
								if(KSType.isInstance(this._parent, VariableDeclaration)) {
									if(this._parent.isAwait() === true) {
										TypeException.throwNotAsyncFunction(this._data.callee.name, this);
									}
								}
								else if(KSType.isInstance(this._parent, AwaitExpression)) {
									TypeException.throwNotAsyncFunction(this._data.callee.name, this);
								}
							}
						}
						var substitute = KSType.isFunction(variable.replaceCall) ? variable.replaceCall(this._data, this._arguments) : null;
						if(KSType.isValue(substitute)) {
							this.addCallee(new SubstituteCallee(this._data, substitute, this));
						}
						else if(KSType.isInstance(type, FunctionType)) {
							this.makeCallee(type, variable.name());
						}
						else if(KSType.isInstance(type, OverloadedFunctionType)) {
							this.makeCallee(type, variable.name());
						}
						else if(type.isStruct() === true) {
							this.addCallee(new DefaultCallee(this._data, null, type, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, null, null, this));
						}
						if(this._named) {
							if(type.isStruct() === true) {
								this._arguments = type.discard().sortArguments(this._arguments, this);
							}
							else {
								NotImplementedException.throw(this);
							}
						}
					}
					else {
						SyntaxException.throwUndefinedFunction(this._data.callee.name, this);
					}
				}
				else {
					if(this._named) {
						NotImplementedException.throw(this);
					}
					this.addCallee(new DefaultCallee(this._data, null, null, this));
				}
			}
			if(this._hasDefaultCallee) {
				this._callees.push(this._defaultCallee);
			}
			if(this._callees.length === 1) {
				this._nullable = this._callees[0].isNullable();
				this._nullableComputed = this._callees[0].isNullableComputed();
				this._type = this._callees[0].type();
			}
			else {
				this._nullable = this._callees[0].isNullable();
				this._nullableComputed = this._callees[0].isNullableComputed();
				var types = [this._callees[0].type()];
				var type;
				for(var i = 1, __ks_0 = this._callees.length; i < __ks_0; ++i) {
					type = this._callees[i].type();
					if(!__ks_Array._im_any(types, function(item) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(item === void 0 || item === null) {
							throw new TypeError("'item' is not nullable");
						}
						return type.equals(item);
					})) {
						types.push(type);
					}
					if(this._callees[i].isNullable() === true) {
						this._nullable = true;
					}
					if(this._callees[i].isNullableComputed() === true) {
						this._nullableComputed = true;
					}
				}
				this._type = Type.union.apply(Type, [].concat([this.scope()], types));
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.translate();
			}
			if(KSHelper.valueOf(this._data.scope.kind) === ScopeKind.Argument.value) {
				this._callScope = $compile.expression(this._data.scope.value, this);
				this._callScope.analyse();
				this._callScope.prepare();
				this._callScope.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(acquire === true) {
				this._reuseName = this._scope.acquireTempName();
			}
			for(var __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.acquireReusable(acquire);
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_addCallee_0: function(callee) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(callee === void 0 || callee === null) {
				throw new TypeError("'callee' is not nullable");
			}
			else if(!KSType.isInstance(callee, Callee)) {
				throw new TypeError("'callee' is not of type 'Callee'");
			}
			if(KSType.isInstance(callee, DefaultCallee)) {
				if(this._hasDefaultCallee) {
					var t1 = this._defaultCallee.type();
					if(!(t1.isAny() === true)) {
						var t2 = callee.type();
						if(t2.isAny() === true) {
							this._defaultCallee = callee;
						}
						else if(KSType.isInstance(t1, UnionType)) {
							t1.addType(t2);
						}
						else if(KSType.isInstance(t2, UnionType)) {
							t2.addType(t1);
							this._defaultCallee = callee;
						}
					}
				}
				else {
					this._defaultCallee = callee;
					this._hasDefaultCallee = true;
				}
			}
			else {
				this._callees.push(callee);
			}
		},
		addCallee: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_addCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.addCallee) {
				return Expression.prototype.addCallee.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_arguments_0: function() {
			return this._arguments;
		},
		arguments: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_arguments_0.apply(this);
			}
			else if(Expression.prototype.arguments) {
				return Expression.prototype.arguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._object !== null) {
				this._object.inferTypes(inferables);
				if(this._nullable && (this._object.isInferable() === true)) {
					inferables[this._object.path()] = (function(that) {
						var d = new Dictionary();
						d.isVariable = KSType.isInstance(that._object, IdentifierLiteral);
						d.type = that._object.type().setNullable(false);
						return d;
					})(this);
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.inferTypes(inferables);
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isAwaiting() === true) {
					return true;
				}
			}
			return false;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isCallable_0: function() {
			return !this._reusable;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComposite_0: function() {
			return !this._reusable;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return (this._nullable || (this._callees.length > 1)) && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._type.isNever();
		},
		isExit: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isExit_0.apply(this);
			}
			return Expression.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isExpectingType_0: function() {
			return true;
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			return Expression.prototype.isExpectingType.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._object !== null) {
				if(this._object.isUsingVariable(name) === true) {
					return true;
				}
			}
			else if((KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) && (this._data.callee.name === name)) {
				return true;
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_makeCallee_0: function(type, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isInstance(type, FunctionType)) {
				if((type.isExhaustive(this) === true) && !(type.matchArguments(this._arguments) === true)) {
					ReferenceException.throwNoMatchingFunction(name, this._arguments, this);
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, type, this));
				}
			}
			else if(KSType.isInstance(type, OverloadedFunctionType)) {
				var __ks_arguments_1 = KSHelper.mapArray(this._arguments, function(argument) {
					return argument.type();
				});
				var matches = Router.matchArguments(type.assessment(), __ks_arguments_1);
				if(matches.length === 0) {
					if(type.isExhaustive(this) === true) {
						ReferenceException.throwNoMatchingFunction(name, this._arguments, this);
					}
					else {
						this.addCallee(new DefaultCallee(this._data, this._object, null, this));
					}
				}
				else if(matches.length === 1) {
					this.addCallee(new DefaultCallee(this._data, null, matches[0], this));
				}
				else {
					var union = new UnionType(this.scope());
					for(var __ks_0 = 0, __ks_1 = matches.length, __ks_function_1; __ks_0 < __ks_1; ++__ks_0) {
						__ks_function_1 = matches[__ks_0];
						union.addType(__ks_function_1.returnType());
					}
					this.addCallee(new DefaultCallee(this._data, this._object, union.type(), this));
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, null, this));
			}
		},
		makeCallee: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_makeCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeCallee) {
				return Expression.prototype.makeCallee.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_makeMemberCallee_0: function(value, name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(name === void 0) {
				name = null;
			}
			else if(name !== null && !KSType.isInstance(name, NamedType)) {
				throw new TypeError("'name' is not of type 'NamedType?'");
			}
			if(KSType.isInstance(value, AliasType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.isInstance(value, ClassVariableType)) {
				this.makeMemberCalleeFromReference(value.type());
			}
			else if(KSType.isInstance(value, ClassType)) {
				if(value.hasClassMethod(this._property) === true) {
					var __ks_arguments_1 = KSHelper.mapArray(this._arguments, function(argument) {
						return argument.type();
					});
					var assessment = value.getClassAssessment(this._property);
					var methods = Router.matchArguments(assessment, __ks_arguments_1);
					var union = new UnionType(this.scope());
					var __ks_sealed_1 = false;
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSealed() === true) {
							__ks_sealed_1 = true;
						}
						union.addType(method.returnType());
					}
					if(union.length() === 0) {
						if(value.isExhaustiveClassMethod(this._property, this) === true) {
							ReferenceException.throwNoMatchingMethod(this._property, name.name(), __ks_arguments_1, this);
						}
						else if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, name, false, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, null, this));
						}
					}
					else {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, name, false, methods, union.type(), this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, methods, union.type(), this));
						}
					}
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.throwNotFoundMethod(this._property, name.name(), this);
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isInstance(value, DictionaryType)) {
				var property = value.getProperty(this._property);
				if(KSType.isValue(property)) {
					if(KSType.isInstance(property, FunctionType)) {
						this.makeCallee(property, this._property);
					}
					else if(KSType.isInstance(property, OverloadedFunctionType)) {
						this.makeCallee(property, this._property);
					}
					else {
						this.addCallee(new DefaultCallee(this._data, this._object, property, this));
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isInstance(value, ExclusionType)) {
				this.makeMemberCallee(value.getMainType());
			}
			else if(KSType.isInstance(value, FunctionType)) {
				this.makeMemberCalleeFromReference(this._scope.reference("Function"));
			}
			else if(KSType.isInstance(value, NamedType)) {
				this.makeMemberCallee(value.type(), value);
			}
			else if(KSType.isInstance(value, NamespaceType)) {
				var property = value.getProperty(this._property);
				if(KSType.isValue(property)) {
					if(KSType.isInstance(property, FunctionType) || KSType.isInstance(property, OverloadedFunctionType)) {
						if((property.isExhaustive(this) === true) && !(property.matchArguments(this._arguments) === true)) {
							ReferenceException.throwNoMatchingFunctionInNamespace(this._property, name, this._arguments, this);
						}
					}
					if(KSType.isInstance(property, SealableType)) {
						this.makeNamespaceCallee(property.type(), property.isSealed(), name);
					}
					else {
						this.makeNamespaceCallee(property, value.isSealedProperty(this._property), name);
					}
				}
				else if(value.isExhaustive(this) === true) {
					ReferenceException.throwNotDefinedProperty(this._property, this);
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, null, this));
				}
			}
			else if(KSType.isInstance(value, ParameterType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.isInstance(value, ReferenceType)) {
				if((value.isNullable() === true) && !(this._options.rules.ignoreMisfit === true)) {
					if(!(this._data.callee.modifiers.some(function(modifier) {
						if(arguments.length < 1) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(modifier === void 0 || modifier === null) {
							throw new TypeError("'modifier' is not nullable");
						}
						return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
					}) === true)) {
						TypeException.throwNullableCaller(this._property, this);
					}
				}
				this.makeMemberCalleeFromReference(value);
			}
			else if(KSType.isInstance(value, SealableType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.isInstance(value, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = value.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					this.makeMemberCallee(type);
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, null, this));
			}
		},
		makeMemberCallee: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return CallExpression.prototype.__ks_func_makeMemberCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeMemberCallee) {
				return Expression.prototype.makeMemberCallee.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_makeMemberCalleeFromReference_0: function(value, reference) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(reference === void 0 || reference === null) {
				reference = value;
			}
			else if(!KSType.isInstance(reference, ReferenceType)) {
				throw new TypeError("'reference' is not of type 'ReferenceType'");
			}
			if(KSType.isInstance(value, AliasType)) {
				this.makeMemberCalleeFromReference(value.type());
			}
			else if(KSType.isInstance(value, ClassType)) {
				var callee, substitute, __ks_0;
				if(value.hasInstanceMethod(this._property) === true) {
					var __ks_arguments_1 = KSHelper.mapArray(this._arguments, function(argument) {
						return argument.type();
					});
					var assessment = value.getInstanceAssessment(this._property);
					var methods = Router.matchArguments(assessment, __ks_arguments_1);
					var union = new UnionType(this.scope());
					var __ks_sealed_1 = false;
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSealed() === true) {
							__ks_sealed_1 = true;
						}
						union.addType(method.returnType());
					}
					if(union.length() === 0) {
						if(value.isExhaustiveInstanceMethod(this._property, this) === true) {
							ReferenceException.throwNoMatchingMethod(this._property, reference.name(), __ks_arguments_1, this);
						}
						else if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, reference.type(), true, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, null, this));
						}
					}
					else {
						var callee, substitute, __ks_0;
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, reference.type(), true, methods, union.type(), this));
						}
						else if((KSHelper.valueOf(this._data.callee.object.kind) === NodeKind.Identifier.value) && (KSType.isValue(__ks_0 = this._scope.getVariable(this._data.callee.object.name)) ? (callee = __ks_0, true) : false) && (KSType.isFunction(callee.replaceMemberCall) && KSType.isValue(__ks_0 = callee.replaceMemberCall(this._property, this._arguments, this)) ? (substitute = __ks_0, true) : false)) {
							this.addCallee(new SubstituteCallee(this._data, substitute, union.type(), this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, methods, union.type(), this));
						}
					}
				}
				else if((KSHelper.valueOf(this._data.callee.object.kind) === NodeKind.Identifier.value) && (KSType.isValue(__ks_0 = this._scope.getVariable(this._data.callee.object.name)) ? (callee = __ks_0, true) : false) && (KSType.isFunction(callee.replaceMemberCall) && KSType.isValue(__ks_0 = callee.replaceMemberCall(this._property, this._arguments, this)) ? (substitute = __ks_0, true) : false)) {
					this.addCallee(new SubstituteCallee(this._data, substitute, Type.Any, this));
				}
				else {
					var __ks_arguments_1 = KSHelper.mapArray(this._arguments, function(argument) {
						return argument.type();
					});
					if(value.hasAbstractMethod(this._property, __ks_arguments_1) === true) {
						this.addCallee(new DefaultCallee(this._data, this._object, null, this));
					}
					else if(reference.isExhaustive(this) === true) {
						ReferenceException.throwNotFoundMethod(this._property, reference.name(), this);
					}
					else {
						this.addCallee(new DefaultCallee(this._data, this._object, null, this));
					}
				}
			}
			else if(KSType.isInstance(value, FunctionType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.isInstance(value, NamedType)) {
				this.makeMemberCalleeFromReference(value.type(), reference);
			}
			else if(KSType.isInstance(value, ParameterType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.isInstance(value, ReferenceType)) {
				this.makeMemberCalleeFromReference(value.type(), value);
			}
			else if(KSType.isInstance(value, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = value.types(), __ks_2 = __ks_1.length, type; __ks_0 < __ks_2; ++__ks_0) {
					type = __ks_1[__ks_0];
					this.makeMemberCallee(type);
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, null, this));
			}
		},
		makeMemberCalleeFromReference: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return CallExpression.prototype.__ks_func_makeMemberCalleeFromReference_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeMemberCalleeFromReference) {
				return Expression.prototype.makeMemberCalleeFromReference.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_makeNamespaceCallee_0: function(property, __ks_sealed_1, name) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			if(__ks_sealed_1 === void 0 || __ks_sealed_1 === null) {
				throw new TypeError("'sealed' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isInstance(property, FunctionType)) {
				if(__ks_sealed_1 === true) {
					this.addCallee(new SealedFunctionCallee(this._data, name, property, property.returnType(), this));
				}
				else {
					this.makeCallee(property, this._property);
				}
			}
			else if(KSType.isInstance(property, OverloadedFunctionType)) {
				this.makeCallee(property, this._property);
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, property, this));
			}
		},
		makeNamespaceCallee: function() {
			if(arguments.length === 3) {
				return CallExpression.prototype.__ks_func_makeNamespaceCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeNamespaceCallee) {
				return Expression.prototype.makeNamespaceCallee.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(KSType.isValue(this._reuseName)) {
				this._scope.releaseTempName(this._reuseName);
			}
			for(var __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(mode.valueOf() === Mode.Async.value) {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(argument.isAwaiting() === true) {
						return argument.toFragments(fragments, mode);
					}
				}
				this.toCallFragments(fragments, mode);
				if(this._arguments.length !== 0) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if((this.isNullable() === true) && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : null");
				}
				else {
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						if(argument.isAwaiting() === true) {
							return argument.toFragments(fragments, mode);
						}
					}
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(mode.valueOf() === Mode.Async.value) {
				this.toCallFragments(fragments, mode);
				if(this._arguments.length !== 0) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
					if(!(this._type.isBoolean() === true) || (this._type.isNullable() === true)) {
						fragments.code(" === true");
					}
				}
				else if((this.isNullable() === true) && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					if(!(this._type.isBoolean() === true) || (this._type.isNullable() === true)) {
						fragments.code(" === true");
					}
					fragments.code(" : false");
				}
				else {
					this.toCallFragments(fragments, mode);
					fragments.code(")");
					if(!(this._type.isBoolean() === true) || (this._type.isNullable() === true)) {
						fragments.code(" === true");
					}
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._callees.length === 1) {
				this._callees[0].toFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.module().flag("Type");
				this._callees[0].toTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toCallFragments) {
				return Expression.prototype.toCallFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var fragments = "";
			if(this._object !== null) {
				fragments = KSHelper.concatString(fragments, this._object.toQuote());
			}
			else if(KSHelper.valueOf(this._data.callee.kind) === NodeKind.Identifier.value) {
				fragments = KSHelper.concatString(fragments, this._data.callee.name);
			}
			else {
				NotImplementedException.throw(this);
			}
			fragments += "()";
			return fragments;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Expression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				this._tested = true;
				if(this._callees.length === 1) {
					this._callees[0].toNullableFragments(fragments, this);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var Callee = KSHelper.class({
		$name: "Callee",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._nullable = false;
			this._nullableProperty = false;
		},
		__ks_init: function() {
			Callee.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
					this._nullable = true;
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Callee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Callee.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable || this._nullableProperty;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Callee.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullable && this._nullableProperty;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return Callee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Callee.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_validate_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = type.throws(), __ks_2 = __ks_1.length, __ks_throw_1; __ks_0 < __ks_2; ++__ks_0) {
				__ks_throw_1 = __ks_1[__ks_0];
				Exception.validateReportedError(__ks_throw_1.discardReference(), node);
			}
		},
		validate: function() {
			if(arguments.length === 2) {
				return Callee.prototype.__ks_func_validate_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DefaultCallee = KSHelper.class({
		$name: "DefaultCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, object, type, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(object === void 0) {
				object = null;
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, [data]);
			if(object === null) {
				this._expression = $compile.expression(data.callee, node);
			}
			else {
				this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			}
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			if(!KSType.isValue(type)) {
				type = this._expression.type();
			}
			if(type.isClass() === true) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.isInstance(type, FunctionType)) {
				this.validate(type, node);
				this._type = type.returnType();
			}
			else if(type.isStruct() === true) {
				this._type = node.scope().reference(type);
			}
			else {
				this._type = AnyType.NullableUnexplicit;
			}
		},
		__ks_cons_1: function(data, object, methods, type, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, [data]);
			this._type = type;
			this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullableProperty = this._expression.isNullable();
			this._scope = data.scope.kind;
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.validate(method, node);
			}
			if(this._type.isClass() === true) {
				TypeException.throwConstructorWithoutNew(this._type.name(), node);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				DefaultCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 5) {
				DefaultCallee.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._expression.acquireReusable(this._nullable || (this._flatten && (this._scope === ScopeKind.This)));
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return DefaultCallee.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Callee.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._expression.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Callee.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._flatten) {
				if(this._scope === ScopeKind.Argument) {
					fragments.compileReusable(this._expression).code(".apply(").compile(node._callScope, mode);
				}
				else if((this._scope === ScopeKind.Null) || !KSType.isInstance(this._expression, MemberExpression)) {
					fragments.compileReusable(this._expression).code(".apply(null");
				}
				else {
					fragments.compileReusable(this._expression).code(".apply(").compile(this._expression.caller(), mode);
				}
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), node._arguments);
			}
			else {
				var __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.wrap(this._expression, mode).code(".call(").compile(node._callScope, mode);
					for(var __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = node._arguments[__ks_1];
						fragments.code($comma);
						argument.toArgumentFragments(fragments, mode);
					}
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.wrap(this._expression, mode).code(".call(null");
					for(var __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = node._arguments[__ks_1];
						fragments.code($comma);
						argument.toArgumentFragments(fragments, mode);
					}
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.wrap(this._expression, mode).code("(");
					for(var index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
						argument = node._arguments[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						argument.toArgumentFragments(fragments, mode);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return DefaultCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toCurryFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			node.module().flag("Helper");
			var __ks_arguments_1 = node._arguments;
			if(this._flatten) {
				var __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code($comma).compile(node._callScope).code($comma);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code(", null, ");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code($comma).compile(this._expression.caller()).code($comma);
				}
				CallExpression.toFlattenArgumentsFragments(fragments, __ks_arguments_1);
			}
			else {
				var __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code($comma).compile(node._callScope);
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code(", null");
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code(", ").compile(this._expression.caller());
				}
				for(var __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = __ks_arguments_1[__ks_0];
					fragments.code($comma);
					argument.toArgumentFragments(fragments, mode);
				}
			}
		},
		toCurryFragments: function() {
			if(arguments.length === 3) {
				return DefaultCallee.prototype.__ks_func_toCurryFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toCurryFragments) {
				return Callee.prototype.toCurryFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._nullable) {
				if(this._expression.isNullable() === true) {
					fragments.compileNullable(this._expression).code(" && ");
				}
				fragments.code(KSHelper.concatString($runtime.type(node), ".isFunction(")).compileReusable(this._expression).code(")");
			}
			else if(this._expression.isNullable() === true) {
				fragments.compileNullable(this._expression);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(node), ".isValue(")).compileReusable(node).code(")");
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 2) {
				return DefaultCallee.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toNullableFragments) {
				return Callee.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return DefaultCallee.prototype.__ks_func_type_1.apply(this, arguments);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SealedFunctionCallee = KSHelper.class({
		$name: "SealedFunctionCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, variable, __ks_function_1, type, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			if(__ks_function_1 === void 0 || __ks_function_1 === null) {
				throw new TypeError("'function' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, [data]);
			this._variable = variable;
			this._type = type;
			this._object = node._object;
			this._property = node._property;
			this._nullableProperty = node._object.isNullable();
			this.validate(__ks_function_1, node);
		},
		__ks_cons: function(args) {
			if(args.length === 5) {
				SealedFunctionCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_translate_0: function() {
			this._object.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._flatten === true) {
				var __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					throw new NotImplementedException(node);
				}
			}
			else {
				var __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					fragments.code("" + this._variable.getSealedName() + "." + this._property + "(");
					for(var index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
						argument = node._arguments[index];
						if(index !== 0) {
							fragments.code($comma);
						}
						argument.toArgumentFragments(fragments, mode);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SealedFunctionCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, this._object);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealedFunctionCallee.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toTestFragments) {
				return Callee.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SealedMethodCallee = KSHelper.class({
		$name: "SealedMethodCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, variable, instance) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.isInstance(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			if(instance === void 0 || instance === null) {
				throw new TypeError("'instance' is not nullable");
			}
			else if(!KSType.isBoolean(instance)) {
				throw new TypeError("'instance' is not of type 'Boolean'");
			}
			var __ks_i = 2;
			var __ks__;
			var methods = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
			var type;
			if(arguments.length > __ks_i + 2 && (type = arguments[++__ks_i]) !== void 0 && type !== null) {
				if(!KSType.isInstance(type, Type)) {
					if(arguments.length - __ks_i < 2) {
						type = AnyType.NullableUnexplicit;
						--__ks_i;
					}
					else {
						throw new TypeError("'type' is not of type 'Type'");
					}
				}
			}
			else {
				type = AnyType.NullableUnexplicit;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, [data]);
			this._variable = variable;
			this._instance = instance;
			this._type = type;
			this._node = node;
			this._object = node._object;
			this._property = node._property;
			this._nullableProperty = data.callee.modifiers.some(function(modifier) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(modifier === void 0 || modifier === null) {
					throw new TypeError("'modifier' is not nullable");
				}
				return KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value;
			});
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.validate(method, node);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 4 && args.length <= 6) {
				SealedMethodCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_translate_0: function() {
			this._object.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._flatten === true) {
				var __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					if(this._instance) {
						fragments.code("" + this._variable.getSealedPath() + "._im_" + this._property + ".apply(null, ");
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments, this._object);
					}
					else {
						fragments.code("" + this._variable.getSealedPath() + "._cm_" + this._property + ".apply(null, ");
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments);
					}
				}
			}
			else {
				var __ks_0 = node._data.scope.kind.valueOf();
				if(__ks_0 === ScopeKind.Argument.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null.value) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This.value) {
					if(this._instance) {
						fragments.code("" + this._variable.getSealedPath() + "._im_" + this._property + "(").compile(this._object);
						for(var __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
							argument = node._arguments[__ks_1];
							fragments.code($comma);
							argument.toArgumentFragments(fragments, mode);
						}
					}
					else {
						fragments.code("" + this._variable.getSealedPath() + "._cm_" + this._property + "(");
						for(var index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
							argument = node._arguments[index];
							if(index !== 0) {
								fragments.code($comma);
							}
							argument.toArgumentFragments(fragments, mode);
						}
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SealedMethodCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code(KSHelper.concatString($runtime.type(node), ".isValue(")).compile(this._object).code(")");
		},
		toNullableFragments: function() {
			if(arguments.length === 2) {
				return SealedMethodCallee.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toNullableFragments) {
				return Callee.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._node.scope().reference(this._variable).toTestFragments(fragments, this._object);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealedMethodCallee.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toTestFragments) {
				return Callee.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var SubstituteCallee = KSHelper.class({
		$name: "SubstituteCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, substitute, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(substitute === void 0 || substitute === null) {
				throw new TypeError("'substitute' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, [data]);
			this._substitute = substitute;
			this._nullableProperty = substitute.isNullable();
			this._type = this._substitute.type();
		},
		__ks_cons_1: function(data, substitute, type, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(substitute === void 0 || substitute === null) {
				throw new TypeError("'substitute' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, [data]);
			this._substitute = substitute;
			this._type = type;
			this._nullableProperty = substitute.isNullable();
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				SubstituteCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				SubstituteCallee.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._substitute.toFragments(fragments, mode);
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SubstituteCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NamedArgument = KSHelper.class({
		$name: "NamedArgument",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return NamedArgument.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NamedArgument.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return NamedArgument.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._value.isAwait();
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return NamedArgument.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamedArgument.prototype.__ks_func_name_0.apply(this);
			}
			else if(Expression.prototype.name) {
				return Expression.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this._value.toFragments(fragments, mode);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamedArgument.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ComparisonExpression = KSHelper.class({
		$name: "ComparisonExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._composite = false;
			this._computed = true;
			this._operands = [];
			this._operators = [];
			this._reuseName = null;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ComparisonExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var operand1, operand2, operator;
			operand1 = $compile.expression(this._data.values[0], this);
			operand1.analyse();
			this._operands.push(operand1);
			this._await = this._await || (operand1.isAwait() === true);
			for(var i = 1, __ks_0 = this._data.values.length; i < __ks_0; i += 2) {
				operand2 = $compile.expression(this._data.values[i + 1], this);
				operand2.analyse();
				this._operands.push(operand2);
				this._await = this._await || (operand2.isAwait() === true);
				operator = this.getOperator(this._data.values[i], operand1, operand2);
				this._operators.push(operator);
				operand1 = operand2;
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._operators.length, operator; __ks_0 < __ks_1; ++__ks_0) {
				operator = this._operators[__ks_0];
				operator.prepare();
			}
			if(this._operators.length === 1) {
				this._computed = this._operators[0].isComputed();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(KSOperator.gt(this._operators.length, 1)) {
				for(var __ks_0 = 1, __ks_1 = this._operands.length - 1, operand; __ks_0 < __ks_1 && !(this._composite); ++__ks_0) {
					operand = this._operands[__ks_0];
					this._composite = operand.isComposite();
				}
				if(this._composite) {
					this._reuseName = this._scope.acquireTempName();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return ComparisonExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_getOperator_0: function(data, operand1, operand2) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(operand1 === void 0 || operand1 === null) {
				throw new TypeError("'operand1' is not nullable");
			}
			if(operand2 === void 0 || operand2 === null) {
				throw new TypeError("'operand2' is not nullable");
			}
			var __ks_0 = data.kind.valueOf();
			if(__ks_0 === BinaryOperatorKind.Equality.value) {
				return new EqualityOperator(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.GreaterThan.value) {
				return new GreaterThanOperator(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.GreaterThanOrEqual.value) {
				return new GreaterThanOrEqualOperator(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.Inequality.value) {
				return new InequalityOperator(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.LessThan.value) {
				return new LessThanOperator(this, operand1, operand2);
			}
			else if(__ks_0 === BinaryOperatorKind.LessThanOrEqual.value) {
				return new LessThanOrEqualOperator(this, operand1, operand2);
			}
		},
		getOperator: function() {
			if(arguments.length === 3) {
				return ComparisonExpression.prototype.__ks_func_getOperator_0.apply(this, arguments);
			}
			else if(Expression.prototype.getOperator) {
				return Expression.prototype.getOperator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._operators.length === 1) {
				return this._operators[0].inferTypes(inferables);
			}
			else {
				return inferables;
			}
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return ComparisonExpression.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._operators.length === 1) {
				return this._operators[0].inferWhenFalseTypes(inferables);
			}
			else {
				return inferables;
			}
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return ComparisonExpression.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._operators.length === 1) {
				return this._operators[0].inferWhenTrueTypes(inferables);
			}
			else {
				return inferables;
			}
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return ComparisonExpression.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this._computed;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullable() === true) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			var nullable = true;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullableComputed() === true) {
					return true;
				}
				else if(!(operand.isNullable() === true)) {
					nullable = false;
				}
			}
			return nullable;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ComparisonExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(this._composite) {
				this._scope.releaseTempName(this._reuseName);
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var test = (this.isNullable() === true) && !this._tested;
			if(test) {
				fragments.wrapNullable(this).code(" ? ");
			}
			this._operators[0].toOperatorFragments(fragments, this._reuseName, false, true);
			if(KSOperator.gt(this._operators.length, 1)) {
				for(var __ks_0 = 1, __ks_1 = this._operators.length - 1, operator; __ks_0 < __ks_1; ++__ks_0) {
					operator = this._operators[__ks_0];
					fragments.code(" && ");
					operator.toOperatorFragments(fragments, this._reuseName, true, true);
				}
				fragments.code(" && ");
				this._operators[KSOperator.subtraction(this._operators.length, 1)].toOperatorFragments(fragments, this._reuseName, true, false);
			}
			if(test) {
				fragments.code(" : false");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ComparisonExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				var nf = false;
				for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable() === true) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return ComparisonExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return ComparisonExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ComparisonOperator = KSHelper.class({
		$name: "ComparisonOperator",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(node, left, right) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(left === void 0 || left === null) {
				throw new TypeError("'left' is not nullable");
			}
			if(right === void 0 || right === null) {
				throw new TypeError("'right' is not nullable");
			}
			this._node = node;
			this._left = left;
			this._right = right;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ComparisonOperator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ComparisonOperator.prototype.__ks_func_prepare_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this._right.inferTypes(this._left.inferTypes(inferables));
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return ComparisonOperator.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this.inferTypes(inferables);
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return ComparisonOperator.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this.inferTypes(inferables);
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return ComparisonOperator.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return ComparisonOperator.prototype.__ks_func_isComputed_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var EqualityOperator = KSHelper.class({
		$name: "EqualityOperator",
		$extends: ComparisonOperator,
		__ks_init_1: function() {
			this._enumLeft = false;
			this._enumRight = false;
			this._infinity = false;
			this._nanLeft = false;
			this._nanRight = false;
		},
		__ks_init: function() {
			ComparisonOperator.prototype.__ks_init.call(this);
			EqualityOperator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			ComparisonOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			if((this._left.type().isEnum() === true) && !KSType.isInstance(this._left, NumericBinaryOperatorExpression)) {
				this._enumLeft = true;
			}
			else if(KSType.isInstance(this._left, IdentifierLiteral)) {
				if(this._left.value() === "NaN") {
					this._nanLeft = true;
				}
				else if(this._left.value() === "Infinity") {
					this._infinity = true;
				}
			}
			else if(KSType.isInstance(this._left, UnaryOperatorNegative) && KSType.isInstance(this._left.argument(), IdentifierLiteral)) {
				this._infinity = this._left.argument().value() === "Infinity";
			}
			if((this._right.type().isEnum() === true) && !KSType.isInstance(this._right, NumericBinaryOperatorExpression)) {
				this._enumRight = true;
			}
			else if(KSType.isInstance(this._right, IdentifierLiteral)) {
				if(this._right.value() === "NaN") {
					this._nanRight = true;
				}
				else if(this._right.value() === "Infinity") {
					this._infinity = true;
				}
			}
			else if(KSType.isInstance(this._right, UnaryOperatorNegative) && KSType.isInstance(this._right.argument(), IdentifierLiteral)) {
				this._infinity = this._right.argument().value() === "Infinity";
			}
			if(this._enumLeft && this._enumRight) {
				this._enumLeft = this._enumRight = false;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EqualityOperator.prototype.__ks_func_prepare_0.apply(this);
			}
			return ComparisonOperator.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return !this._nanLeft && !this._nanRight;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return EqualityOperator.prototype.__ks_func_isComputed_0.apply(this);
			}
			return ComparisonOperator.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(KSType.isInstance(this._left, IdentifierLiteral) && (this._left.value() === "null")) {
				inferables = this._right.inferTypes(inferables);
			}
			else if(KSType.isInstance(this._right, IdentifierLiteral) && (this._right.value() === "null")) {
				inferables = this._left.inferTypes(inferables);
			}
			else {
				inferables = this._right.inferTypes(this._left.inferTypes(inferables));
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return EqualityOperator.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return ComparisonOperator.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(KSType.isInstance(this._left, IdentifierLiteral) && (this._left.value() === "null") && (this._right.isInferable() === true)) {
				inferables = this._right.inferTypes(inferables);
				if(this._right.type().isNull() === true) {
					if(KSType.isInstance(this._right, IdentifierLiteral)) {
						inferables[this._right.path()] = (function(that) {
							var d = new Dictionary();
							d.isVariable = true;
							d.type = that._right.getDeclaredType().setNullable(false);
							return d;
						})(this);
					}
				}
				else {
					inferables[this._right.path()] = (function(that) {
						var d = new Dictionary();
						d.isVariable = KSType.isInstance(that._right, IdentifierLiteral);
						d.type = that._right.type().setNullable(false);
						return d;
					})(this);
				}
			}
			else if(KSType.isInstance(this._right, IdentifierLiteral) && (this._right.value() === "null") && (this._left.isInferable() === true)) {
				inferables = this._left.inferTypes(inferables);
				if(this._left.type().isNull() === true) {
					if(KSType.isInstance(this._left, IdentifierLiteral)) {
						inferables[this._left.path()] = (function(that) {
							var d = new Dictionary();
							d.isVariable = true;
							d.type = that._left.getDeclaredType().setNullable(false);
							return d;
						})(this);
					}
				}
				else {
					inferables[this._left.path()] = (function(that) {
						var d = new Dictionary();
						d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
						d.type = that._left.type().setNullable(false);
						return d;
					})(this);
				}
			}
			else {
				inferables = this._right.inferTypes(this._left.inferTypes(inferables));
			}
			return inferables;
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return EqualityOperator.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return ComparisonOperator.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_toLeftFragments_0: function(fragments, leftReusable, reuseName) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(leftReusable === void 0 || leftReusable === null) {
				throw new TypeError("'leftReusable' is not nullable");
			}
			if(reuseName === void 0) {
				reuseName = null;
			}
			var suffix = null;
			var wrap = true;
			if(this._enumLeft) {
				suffix = ".value";
			}
			else if(this._enumRight && (this._left.type().isAny() === true) && !(this._left.type().isNull() === true)) {
				if(this._left.type().isNullable() === true) {
					fragments.code($runtime.helper(this._left), ".valueOf(");
					wrap = false;
					suffix = ")";
				}
				else {
					suffix = ".valueOf()";
				}
			}
			if((leftReusable === true) && (reuseName !== null)) {
				fragments.code(reuseName);
			}
			else if(wrap) {
				fragments.wrap(this._left);
			}
			else {
				fragments.compile(this._left);
			}
			if(suffix !== null) {
				fragments.code(suffix);
			}
		},
		toLeftFragments: function() {
			if(arguments.length === 3) {
				return EqualityOperator.prototype.__ks_func_toLeftFragments_0.apply(this, arguments);
			}
			else if(ComparisonOperator.prototype.toLeftFragments) {
				return ComparisonOperator.prototype.toLeftFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toOperatorFragments_0: function(fragments, reuseName, leftReusable, rightReusable) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(leftReusable === void 0 || leftReusable === null) {
				throw new TypeError("'leftReusable' is not nullable");
			}
			if(rightReusable === void 0 || rightReusable === null) {
				throw new TypeError("'rightReusable' is not nullable");
			}
			if(this._nanLeft) {
				if((rightReusable === true) && (reuseName !== null)) {
					fragments.code("Number.isNaN(").code(reuseName, $equals).compile(this._right).code(")");
				}
				else {
					fragments.code("Number.isNaN(").compile(this._right).code(")");
				}
			}
			else if(this._nanRight) {
				if((leftReusable === true) && (reuseName !== null)) {
					fragments.code("Number.isNaN(", reuseName, ")");
				}
				else {
					fragments.code("Number.isNaN(").compile(this._left).code(")");
				}
			}
			else if(this._infinity) {
				fragments.code($runtime.operator(this._node), ".eq(").compile(this._left).code(", ").compile(this._right).code(")");
			}
			else {
				this.toLeftFragments(fragments, leftReusable, reuseName);
				fragments.code(" === ");
				this.toRightFragments(fragments, rightReusable, reuseName);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 4) {
				return EqualityOperator.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(ComparisonOperator.prototype.toOperatorFragments) {
				return ComparisonOperator.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toRightFragments_0: function(fragments, rightReusable, reuseName) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(rightReusable === void 0 || rightReusable === null) {
				throw new TypeError("'rightReusable' is not nullable");
			}
			if(reuseName === void 0) {
				reuseName = null;
			}
			var suffix = null;
			var wrap = true;
			if(this._enumRight) {
				suffix = ".value";
			}
			else if(this._enumLeft && (this._right.type().isAny() === true) && !(this._right.type().isNull() === true)) {
				if(this._right.type().isNullable() === true) {
					fragments.code($runtime.helper(this._right), ".valueOf(");
					wrap = false;
					suffix = ")";
				}
				else {
					suffix = ".valueOf()";
				}
			}
			if((rightReusable === true) && (reuseName !== null)) {
				fragments.code("(", reuseName, $equals).compile(this._right).code(")");
			}
			else if(wrap) {
				fragments.wrap(this._right);
			}
			else {
				fragments.compile(this._right);
			}
			if(suffix !== null) {
				fragments.code(suffix);
			}
		},
		toRightFragments: function() {
			if(arguments.length === 3) {
				return EqualityOperator.prototype.__ks_func_toRightFragments_0.apply(this, arguments);
			}
			else if(ComparisonOperator.prototype.toRightFragments) {
				return ComparisonOperator.prototype.toRightFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var InequalityOperator = KSHelper.class({
		$name: "InequalityOperator",
		$extends: EqualityOperator,
		__ks_init: function() {
			EqualityOperator.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			EqualityOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return EqualityOperator.prototype.inferWhenTrueTypes.apply(this, [inferables]);
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return InequalityOperator.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return EqualityOperator.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return EqualityOperator.prototype.inferWhenFalseTypes.apply(this, [inferables]);
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return InequalityOperator.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return EqualityOperator.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments, reuseName, leftReusable, rightReusable) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(leftReusable === void 0 || leftReusable === null) {
				throw new TypeError("'leftReusable' is not nullable");
			}
			if(rightReusable === void 0 || rightReusable === null) {
				throw new TypeError("'rightReusable' is not nullable");
			}
			if(this._nanLeft) {
				if((rightReusable === true) && (reuseName !== null)) {
					fragments.code("!Number.isNaN(").code(reuseName, $equals).compile(this._right).code(")");
				}
				else {
					fragments.code("!Number.isNaN(").compile(this._right).code(")");
				}
			}
			else if(this._nanRight) {
				if((leftReusable === true) && (reuseName !== null)) {
					fragments.code("!Number.isNaN(", reuseName, ")");
				}
				else {
					fragments.code("!Number.isNaN(").compile(this._left).code(")");
				}
			}
			else if(this._infinity) {
				fragments.code($runtime.operator(this._node), ".neq(").compile(this._left).code(", ").compile(this._right).code(")");
			}
			else {
				this.toLeftFragments(fragments, leftReusable, reuseName);
				fragments.code(" !== ");
				this.toRightFragments(fragments, rightReusable, reuseName);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 4) {
				return InequalityOperator.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			return EqualityOperator.prototype.toOperatorFragments.apply(this, arguments);
		}
	});
	var NumericComparisonOperator = KSHelper.class({
		$name: "NumericComparisonOperator",
		$extends: ComparisonOperator,
		__ks_init_1: function() {
			this._isNative = false;
		},
		__ks_init: function() {
			ComparisonOperator.prototype.__ks_init.call(this);
			NumericComparisonOperator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			ComparisonOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			ComparisonOperator.prototype.prepare.apply(this, []);
			if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
				this._isNative = true;
			}
			else if(this._left.type().canBeNumber() === true) {
				if(!(this._right.type().canBeNumber() === true)) {
					TypeException.throwInvalidOperand(this._right, this.operator(), this._node);
				}
			}
			else {
				TypeException.throwInvalidOperand(this._left, this.operator(), this._node);
			}
			if((this._left.type().isNullable() === true) || (this._right.type().isNullable() === true)) {
				this._isNative = false;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NumericComparisonOperator.prototype.__ks_func_prepare_0.apply(this);
			}
			return ComparisonOperator.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this._isNative;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return NumericComparisonOperator.prototype.__ks_func_isComputed_0.apply(this);
			}
			return ComparisonOperator.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toNativeFragments_0: function(fragments, reuseName, leftReusable, rightReusable) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(leftReusable === void 0 || leftReusable === null) {
				throw new TypeError("'leftReusable' is not nullable");
			}
			if(rightReusable === void 0 || rightReusable === null) {
				throw new TypeError("'rightReusable' is not nullable");
			}
			if((leftReusable === true) && (reuseName !== null)) {
				fragments.code(reuseName);
			}
			else {
				fragments.wrap(this._left);
			}
			fragments.code($space, this.symbol(), $space);
			if((rightReusable === true) && (reuseName !== null)) {
				fragments.code("(", reuseName, $equals).compile(this._right).code(")");
			}
			else {
				fragments.wrap(this._right);
			}
		},
		toNativeFragments: function() {
			if(arguments.length === 4) {
				return NumericComparisonOperator.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			else if(ComparisonOperator.prototype.toNativeFragments) {
				return ComparisonOperator.prototype.toNativeFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toOperatorFragments_0: function(fragments, reuseName, leftReusable, rightReusable) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(reuseName === void 0) {
				reuseName = null;
			}
			if(leftReusable === void 0 || leftReusable === null) {
				throw new TypeError("'leftReusable' is not nullable");
			}
			if(rightReusable === void 0 || rightReusable === null) {
				throw new TypeError("'rightReusable' is not nullable");
			}
			if(this._isNative) {
				this.toNativeFragments(fragments, reuseName, leftReusable, rightReusable);
			}
			else {
				fragments.code($runtime.operator(this._node), "." + this.runtime() + "(");
				if((leftReusable === true) && (reuseName !== null)) {
					fragments.code(reuseName);
				}
				else {
					fragments.wrap(this._left);
				}
				fragments.code($comma);
				if((rightReusable === true) && (reuseName !== null)) {
					fragments.code(reuseName, $equals).compile(this._right);
				}
				else {
					fragments.wrap(this._right);
				}
				fragments.code(")");
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 4) {
				return NumericComparisonOperator.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(ComparisonOperator.prototype.toOperatorFragments) {
				return ComparisonOperator.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var GreaterThanOperator = KSHelper.class({
		$name: "GreaterThanOperator",
		$extends: NumericComparisonOperator,
		__ks_init: function() {
			NumericComparisonOperator.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericComparisonOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.GreaterThan;
		},
		operator: function() {
			if(arguments.length === 0) {
				return GreaterThanOperator.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.operator) {
				return NumericComparisonOperator.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "gt";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return GreaterThanOperator.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.runtime) {
				return NumericComparisonOperator.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return ">";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return GreaterThanOperator.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.symbol) {
				return NumericComparisonOperator.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var GreaterThanOrEqualOperator = KSHelper.class({
		$name: "GreaterThanOrEqualOperator",
		$extends: NumericComparisonOperator,
		__ks_init: function() {
			NumericComparisonOperator.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericComparisonOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.GreaterThanOrEqual;
		},
		operator: function() {
			if(arguments.length === 0) {
				return GreaterThanOrEqualOperator.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.operator) {
				return NumericComparisonOperator.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "gte";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return GreaterThanOrEqualOperator.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.runtime) {
				return NumericComparisonOperator.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return ">=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return GreaterThanOrEqualOperator.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.symbol) {
				return NumericComparisonOperator.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var LessThanOperator = KSHelper.class({
		$name: "LessThanOperator",
		$extends: NumericComparisonOperator,
		__ks_init: function() {
			NumericComparisonOperator.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericComparisonOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.LessThan;
		},
		operator: function() {
			if(arguments.length === 0) {
				return LessThanOperator.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.operator) {
				return NumericComparisonOperator.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "lt";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return LessThanOperator.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.runtime) {
				return NumericComparisonOperator.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "<";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return LessThanOperator.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.symbol) {
				return NumericComparisonOperator.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var LessThanOrEqualOperator = KSHelper.class({
		$name: "LessThanOrEqualOperator",
		$extends: NumericComparisonOperator,
		__ks_init: function() {
			NumericComparisonOperator.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericComparisonOperator.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.LessThanOrEqual;
		},
		operator: function() {
			if(arguments.length === 0) {
				return LessThanOrEqualOperator.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.operator) {
				return NumericComparisonOperator.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "lte";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return LessThanOrEqualOperator.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.runtime) {
				return NumericComparisonOperator.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "<=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return LessThanOrEqualOperator.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericComparisonOperator.prototype.symbol) {
				return NumericComparisonOperator.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ConditionalExpression = KSHelper.class({
		$name: "ConditionalExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenTrue.prepare();
			this._whenFalse.prepare();
			var t = this._whenTrue.type();
			var f = this._whenFalse.type();
			if(t.equals(f) === true) {
				this._type = t;
			}
			else if(f.isNull() === true) {
				this._type = t.setNullable(true);
			}
			else if(t.isNull() === true) {
				this._type = f.setNullable(true);
			}
			else {
				this._type = Type.union(this._scope, t, f);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._whenTrue.isUsingVariable(name) === true) || (this._whenFalse.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ConditionalExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ConditionalExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var CreateExpression = KSHelper.class({
		$name: "CreateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._flatten = false;
			this._sealed = false;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CreateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._factory = $compile.expression(this._data.class, this);
			this._factory.analyse();
			var es5 = this._options.format.spreads === "es5";
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				this._arguments.push(argument = $compile.expression(argument, this));
				argument.analyse();
				if(es5 && KSType.isInstance(argument, UnaryOperatorSpread)) {
					this._flatten = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._factory.prepare();
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.prepare();
			}
			var type, __ks_0;
			if(KSType.isValue(__ks_0 = this._factory.type()) ? (type = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(this._factory.toQuote(), this);
			}
			else if((type.isNamed() === true) && KSType.isInstance(type.type(), ClassType)) {
				if(type.type().isAbstract() === true) {
					TypeException.throwCannotBeInstantiated(type.name(), this);
				}
				else if(type.type().isExhaustiveConstructor(this) === true) {
					if(!(type.type().matchArguments(this._arguments) === true)) {
						ReferenceException.throwNoMatchingConstructor(type.name(), this._arguments, this);
					}
				}
				if(type.type().hasSealedConstructors() === true) {
					this._sealed = true;
				}
				this._type = this._scope.reference(type);
			}
			else if(!((type.isAny() === true) || (type.isClass() === true))) {
				TypeException.throwNotClass(type.toQuote(), this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._factory.translate();
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._factory.isUsingVariable(name) === true) {
				return true;
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return CreateExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._sealed) {
				fragments.code("" + this._type.type().getSealedName() + ".new(");
				for(var i = 0, __ks_0 = this._arguments.length, argument; i < __ks_0; ++i) {
					argument = this._arguments[i];
					if(i !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code(")");
			}
			else if(this._flatten) {
				this.module().flag("Helper");
				fragments.code("" + $runtime.helper(this) + ".create(").compile(this._factory);
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), this._arguments);
				fragments.code(")");
			}
			else {
				fragments.code("new ").compile(this._factory).code("(");
				for(var i = 0, __ks_0 = this._arguments.length, argument; i < __ks_0; ++i) {
					argument = this._arguments[i];
					if(i !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CreateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var CurryExpression = KSHelper.class({
		$name: "CurryExpression",
		$extends: CallExpression,
		__ks_init: function() {
			CallExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_makeCallee_0: function(type, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this.addCallee(new DefaultCallee(this._data, this._object, null, this));
		},
		makeCallee: function() {
			if(arguments.length === 2) {
				return CurryExpression.prototype.__ks_func_makeCallee_0.apply(this, arguments);
			}
			return CallExpression.prototype.makeCallee.apply(this, arguments);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._callees.length === 1) {
				this._callees[0].toCurryFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.module().flag("Type");
				this._callees[0].toTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toCurryFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toCurryFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CurryExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			return CallExpression.prototype.toCallFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Function");
		},
		type: function() {
			if(arguments.length === 0) {
				return CurryExpression.prototype.__ks_func_type_0.apply(this);
			}
			return CallExpression.prototype.type.apply(this, arguments);
		}
	});
	var DictionaryExpression = KSHelper.class({
		$name: "DictionaryExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._empty = true;
			this._properties = [];
			this._reusable = false;
			this._reuseName = null;
			this._spread = false;
			this._varname = "d";
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			DictionaryExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope, ScopeType.Hollow]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				DictionaryExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if((this._options.format.functions === "es5") && (this._scope.hasVariable("this") === true)) {
				this._scope.rename("this", "that");
			}
			var names = new Dictionary();
			var ref;
			for(var __ks_0 = 0, __ks_1 = this._data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._data.properties[__ks_0];
				if(KSHelper.valueOf(property.kind) === NodeKind.UnaryExpression.value) {
					property = new DictionarySpreadMember(property, this);
					property.analyse();
					this._spread = true;
					this.module().flag("Helper");
				}
				else if((KSHelper.valueOf(property.name.kind) === NodeKind.Identifier.value) || (KSHelper.valueOf(property.name.kind) === NodeKind.Literal.value)) {
					property = new DictionaryLiteralMember(property, this);
					property.analyse();
					if(names[property.reference()] === true) {
						SyntaxException.throwDuplicateKey(property);
					}
					names[property.reference()] = true;
				}
				else if(KSHelper.valueOf(property.name.kind) === NodeKind.ThisExpression.value) {
					property = new DictionaryThisMember(property, this);
					property.analyse();
					if(names[property.reference()] === true) {
						SyntaxException.throwDuplicateKey(property);
					}
					names[property.reference()] = true;
				}
				else {
					property = new DictionaryComputedMember(property, this);
					property.analyse();
				}
				this._properties.push(property);
			}
			this._empty = this._properties.length === 0;
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.prepare();
			}
			this._type = this._scope.reference("Dictionary");
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(acquire === true) {
				this._reuseName = this._scope.acquireTempName();
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return DictionaryExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isMatchingType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._properties.length === 0) {
				return (type.isAny() === true) || (type.isDictionary() === true);
			}
			else {
				return this._type.matchContentOf(type);
			}
		},
		isMatchingType: function() {
			if(arguments.length === 1) {
				return DictionaryExpression.prototype.__ks_func_isMatchingType_0.apply(this, arguments);
			}
			return Expression.prototype.isMatchingType.apply(this, arguments);
		},
		__ks_func_isSpread_0: function() {
			return this._spread;
		},
		isSpread: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_isSpread_0.apply(this);
			}
			else if(Expression.prototype.isSpread) {
				return Expression.prototype.isSpread.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				if(property.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DictionaryExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return this._parent.reference();
		},
		reference: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_reference_0.apply(this);
			}
			return Expression.prototype.reference.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(this._reuseName !== null) {
				this._scope.releaseTempName(this._reuseName);
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else if(this._empty) {
				fragments.code("new ", $runtime.dictionary(this), "()");
			}
			else if(this._spread) {
				fragments.code($runtime.helper(this), ".concatDictionary(");
				var opened = false;
				for(var index = 0, __ks_0 = this._properties.length, property; index < __ks_0; ++index) {
					property = this._properties[index];
					if(KSType.isInstance(property, DictionarySpreadMember)) {
						if(opened) {
							fragments.code("}, ");
							opened = false;
						}
						else if(index !== 0) {
							fragments.code($comma);
						}
						fragments.compile(property);
					}
					else {
						if(index !== 0) {
							fragments.code($comma);
						}
						if(!opened) {
							fragments.code("{");
							opened = true;
						}
						fragments.compile(property);
					}
				}
				if(opened) {
					fragments.code("}");
				}
				fragments.code(")");
			}
			else {
				if(this.isUsingVariable("d") === true) {
					if(!(this.isUsingVariable("o") === true)) {
						this._varname = "o";
					}
					else if(!(this.isUsingVariable("_") === true)) {
						this._varname = "_";
					}
					else {
						this._varname = "__ks__";
					}
				}
				var usingThis = false;
				if(this._options.format.functions === "es5") {
					if(this.isUsingVariable("this") === true) {
						usingThis = true;
						fragments.code("(function(that)");
					}
					else {
						fragments.code("(function()");
					}
				}
				else {
					fragments.code("(() =>");
				}
				var block = fragments.newBlock();
				block.line($const(this), this._varname, " = new ", $runtime.dictionary(this), "()");
				for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = this._properties[__ks_0];
					block.newLine().compile(property).done();
				}
				block.line("return " + this._varname).done();
				if(usingThis) {
					fragments.code(")(" + this._scope.parent().getVariable("this").getSecureName() + ")");
				}
				else {
					fragments.code(")()");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return DictionaryExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return DictionaryExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		},
		__ks_func_varname_0: function() {
			return this._varname;
		},
		varname: function() {
			if(arguments.length === 0) {
				return DictionaryExpression.prototype.__ks_func_varname_0.apply(this);
			}
			else if(Expression.prototype.varname) {
				return Expression.prototype.varname.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DictionaryLiteralMember = KSHelper.class({
		$name: "DictionaryLiteralMember",
		$extends: Expression,
		__ks_init_1: function() {
			this._computed = true;
			this._function = false;
			this._shorthand = true;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			DictionaryLiteralMember.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._options = Attribute.configure(this._data, this._options, AttributeTarget.Property);
			if(KSHelper.valueOf(this._data.name.kind) === NodeKind.Identifier.value) {
				this._name = new Literal(this._data.name, this, this._scope, this._data.name.name);
				this.reference(KSHelper.concatString(".", this._data.name.name));
				this._computed = false;
			}
			else {
				this._name = new StringLiteral(this._data.name, this);
				this.reference(KSHelper.concatString("[", $quote(this._data.name.value), "]"));
			}
			if(KSHelper.valueOf(this._data.kind) === NodeKind.ObjectMember.value) {
				this._value = $compile.expression(this._data.value, this);
				this._function = KSHelper.valueOf(this._data.value.kind) === NodeKind.FunctionExpression.value;
				this._shorthand = (KSHelper.valueOf(this._data.name.kind) === NodeKind.Identifier.value) && (KSHelper.valueOf(this._data.value.kind) === NodeKind.Identifier.value) && (this._data.name.name === this._data.value.name);
			}
			else {
				this._value = $compile.expression(this._data.name, this);
			}
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DictionaryLiteralMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DictionaryLiteralMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DictionaryLiteralMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			return this._value.acquireReusable(acquire);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return DictionaryLiteralMember.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DictionaryLiteralMember.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			return this._value.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return DictionaryLiteralMember.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._parent.isSpread() === true) {
				fragments.compile(this._name);
				if(!this._shorthand || (this._value.isRenamed() === true)) {
					if(!this._function) {
						fragments.code(": ");
					}
					fragments.compile(this._value);
				}
			}
			else if(this._computed) {
				fragments.code(this._parent.varname(), "[").compile(this._name).code("]", $equals).compile(this._value);
			}
			else {
				fragments.code(this._parent.varname(), ".").compile(this._name).code($equals).compile(this._value);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return DictionaryLiteralMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return DictionaryLiteralMember.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DictionaryComputedMember = KSHelper.class({
		$name: "DictionaryComputedMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._options = Attribute.configure(this._data, this._options, AttributeTarget.Property);
			if(KSHelper.valueOf(this._data.name.kind) === NodeKind.ComputedPropertyName.value) {
				this._name = $compile.expression(this._data.name.expression, this);
			}
			else {
				this._name = new TemplateExpression(this._data.name, this);
				this._name.computing(true);
			}
			this._name.analyse();
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DictionaryComputedMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._name.prepare();
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DictionaryComputedMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._name.translate();
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DictionaryComputedMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._name.acquireReusable(acquire);
			this._value.acquireReusable(acquire);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return DictionaryComputedMember.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._name.isUsingVariable(name) === true) || (this._value.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DictionaryComputedMember.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._name.releaseReusable();
			this._value.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return DictionaryComputedMember.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toComputedFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name).code("[").compile(this._name).code("]").code($equals).compile(this._value).code($comma);
		},
		toComputedFragments: function() {
			if(arguments.length === 2) {
				return DictionaryComputedMember.prototype.__ks_func_toComputedFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toComputedFragments) {
				return Expression.prototype.toComputedFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._parent.varname(), "[").compile(this._name).code("]", $equals).compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return DictionaryComputedMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return DictionaryComputedMember.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DictionaryThisMember = KSHelper.class({
		$name: "DictionaryThisMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = new Literal(this._data.name.name, this, this._scope, this._data.name.name.name);
			this._value = $compile.expression(this._data.name, this);
			this._value.analyse();
			this.reference("." + this._name.value());
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DictionaryThisMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DictionaryThisMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DictionaryThisMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DictionaryThisMember.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toComputedFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name).code(this._reference).code($equals).compile(this._value).code($comma);
		},
		toComputedFragments: function() {
			if(arguments.length === 2) {
				return DictionaryThisMember.prototype.__ks_func_toComputedFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toComputedFragments) {
				return Expression.prototype.toComputedFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name).code(": ").compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return DictionaryThisMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return DictionaryThisMember.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var DictionarySpreadMember = KSHelper.class({
		$name: "DictionarySpreadMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._options = Attribute.configure(this._data, this._options, AttributeTarget.Property);
			this._value = $compile.expression(this._data.argument, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DictionarySpreadMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DictionarySpreadMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DictionarySpreadMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return DictionarySpreadMember.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return DictionarySpreadMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return DictionarySpreadMember.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var EnumExpression = KSHelper.class({
		$name: "EnumExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._enum = $compile.expression(this._data.enum, this);
			this._enum.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._enum.prepare();
			var named = this._enum.type();
			if(!(named.type().isEnum() === true)) {
				TypeException.throwNotEnum(this._data.enum.name, this);
			}
			else if(!(named.type().hasElement(this._data.member.name) === true)) {
				ReferenceException.throwNotDefinedEnumElement(this._data.member.name, named.name(), this);
			}
			this._type = named.reference(this._scope);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._enum.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return EnumExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._enum).code(".", this._data.member.name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "" + this._enum.toQuote() + "::" + this._data.member.name;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Expression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var AnonymousFunctionExpression = KSHelper.class({
		$name: "AnonymousFunctionExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
			this._isObjectMember = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AnonymousFunctionExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope, ScopeType.Function]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				AnonymousFunctionExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define("this", true, Type.Any, this);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			this._isObjectMember = KSType.isInstance(this._parent.parent(), DictionaryExpression);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new FunctionType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._block = $compile.block($ast.body(this._data), this);
			this._block.analyse();
			this._awaiting = this._block.isAwait();
			this._block.prepare();
			this._block.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return AnonymousFunctionExpression.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Expression.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Expression.prototype.isInstanceMethod) {
				return Expression.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return AnonymousFunctionExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Expression.prototype.parameters) {
				return Expression.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var surround = (function() {
				var d = new Dictionary();
				d.beforeParameters = "function(";
				d.afterParameters = ")";
				d.footer = "";
				return d;
			})();
			fragments.code(surround.beforeParameters);
			var block = Parameter.toFragments(this, fragments, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			block.compile(this._block);
			if(!this._awaiting && !this._exit && (this._type.isAsync() === true)) {
				block.line("__ks_cb()");
			}
			block.done();
			if(KSOperator.gt(surround.footer.length, 0)) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AnonymousFunctionExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AnonymousFunctionExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ArrowFunctionExpression = KSHelper.class({
		$name: "ArrowFunctionExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrowFunctionExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope, ScopeType.Block]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrowFunctionExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._block = $compile.block($ast.body(this._data), this);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new FunctionType(KSHelper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._block.analyse();
			this._block.prepare();
			this._block.translate();
			this._awaiting = this._block.isAwait();
			this._exit = this._block.isExit();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ArrowFunctionExpression.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Expression.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Expression.prototype.isInstanceMethod) {
				return Expression.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				if(parameter.isUsingVariable(name) === true) {
					return true;
				}
			}
			return this._block.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ArrowFunctionExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Expression.prototype.parameters) {
				return Expression.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var surround;
			if(this.isUsingVariable("this") === true) {
				if(this._options.format.functions === "es5") {
					surround = (function() {
						var d = new Dictionary();
						d.arrow = false;
						d.beforeParameters = "(function(";
						d.afterParameters = ")";
						d.footer = ").bind(this)";
						return d;
					})();
				}
				else {
					surround = (function() {
						var d = new Dictionary();
						d.arrow = true;
						d.beforeParameters = "(";
						d.afterParameters = ") =>";
						d.footer = "";
						return d;
					})();
				}
			}
			else {
				surround = (function() {
					var d = new Dictionary();
					d.arrow = false;
					d.beforeParameters = "function(";
					d.afterParameters = ")";
					d.footer = "";
					return d;
				})();
			}
			fragments.code(surround.beforeParameters);
			var block = Parameter.toFragments(this, fragments, (surround.arrow === true) ? ParameterMode.ArrowFunction : ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			block.compile(this._block);
			if(!this._awaiting && !this._exit && (this._type.isAsync() === true)) {
				block.line("__ks_cb()");
			}
			block.done();
			if(KSOperator.gt(surround.footer.length, 0)) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrowFunctionExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrowFunctionExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var IfExpression = KSHelper.class({
		$name: "IfExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				this._whenFalse = $compile.expression(this._data.whenFalse, this);
				this._whenFalse.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenTrue.prepare();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.prepare();
				var t = this._whenTrue.type();
				var f = this._whenFalse.type();
				if(t.equals(f) === true) {
					this._type = t;
				}
				else if(f.isNull() === true) {
					this._type = t.setNullable(true);
				}
				else if(t.isNull() === true) {
					this._type = f.setNullable(true);
				}
				else {
					this._type = Type.union(this._scope, t, f);
				}
			}
			else {
				this._type = this._whenTrue.type();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._whenTrue.isUsingVariable(name) === true) || (KSType.isValue(this._whenFalse) ? this._whenFalse.isUsingVariable(name) === true : false);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return IfExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._whenFalse)) {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
			}
			else {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : null");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(");
			ctrl.compileBoolean(this._condition);
			ctrl.code(")").step().line(this._whenTrue).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var IfVariableDeclarationExpression = KSHelper.class({
		$name: "IfVariableDeclarationExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._declarators = [];
			this._destructuring = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			IfVariableDeclarationExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._immutable = !(this._data.rebindable === true);
			this._autotype = this._immutable || (this._data.autotype === true);
			this._await = this._data.await;
			var declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.variables.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.variables[__ks_0];
				var __ks_2 = data.name.kind.valueOf();
				if(__ks_2 === NodeKind.ArrayBinding.value) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else if(__ks_2 === NodeKind.Identifier.value) {
					declarator = new VariableIdentifierDeclarator(data, this);
				}
				else if(__ks_2 === NodeKind.ObjectBinding.value) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else {
					console.info(data);
					throw new NotImplementedException(this);
				}
				declarator.analyse();
				this._declarators.push(declarator);
			}
			this._init = $compile.expression(this._data.init, this);
			this._init.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfVariableDeclarationExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._init.prepare();
			if(this._autotype) {
				this._declarators[0].type(this._init.type());
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfVariableDeclarationExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._init.translate();
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfVariableDeclarationExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return IfVariableDeclarationExpression.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				throw new NotImplementedException(this);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue(")).compile(this._declarators[0]).code($equals).compile(this._init).code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfVariableDeclarationExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var MemberExpression = KSHelper.class({
		$name: "MemberExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignment = AssignmentType.Neither;
			this._computed = false;
			this._inferable = false;
			this._nullable = false;
			this._prepareObject = true;
			this._sealed = false;
			this._stringProperty = false;
			this._tested = false;
			this._type = AnyType.NullableUnexplicit;
			this._usingGetter = false;
			this._usingSetter = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			MemberExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
		},
		__ks_cons_1: function(data, parent, scope, object) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._object = object;
			this._prepareObject = false;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				MemberExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				MemberExpression.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Computed.value) {
					this._computed = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Nullable.value) {
					this._nullable = true;
				}
			}
			if(this._prepareObject) {
				this._object = $compile.expression(this._data.object, this);
				this._object.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._prepareObject) {
				this._object.prepare();
				var type = this._object.type();
				if((type.isNull() === true) && !this._nullable && !(this._options.rules.ignoreMisfit === true)) {
					ReferenceException.throwNullExpression(this._object, this);
				}
				if(this._computed) {
					this._property = $compile.expression(this._data.property, this);
					this._property.analyse();
					this._property.prepare();
					if(type.isStruct() === true) {
						if(type.isArray() === true) {
							if(KSType.isInstance(this._property, NumberLiteral)) {
								var property = type.discard().getProperty(this._property.value());
								if(KSType.isValue(property)) {
									this._type = property.type();
								}
								else if(type.isExhaustive(this) === true) {
									ReferenceException.throwNotDefinedProperty(this._property.value(), this);
								}
							}
						}
					}
					else if((type.isArray() === true) || (type.isDictionary() === true)) {
						this._type = type.parameter();
					}
					if(this._object.isInferable() === true) {
						if(KSType.isInstance(this._property, NumberLiteral)) {
							this._inferable = true;
							this._path = "" + this._object.path() + "[" + this._property.value() + "]";
						}
						else if(KSType.isInstance(this._property, StringLiteral)) {
							this._inferable = true;
							this._path = "" + this._object.path() + "['" + this._property.value() + "']";
						}
						if(this._inferable) {
							var __ks_type_1 = this._scope.getChunkType(this._path);
							if(KSType.isValue(__ks_type_1)) {
								this._type = __ks_type_1;
							}
						}
					}
				}
				else {
					var isStruct = type.isStruct();
					var isArrayStruct = (isStruct === true) && (type.isArray() === true);
					this._property = this._data.property.name;
					var __ks_0;
					if(KSOperator.lte(48, __ks_0 = this._property.charCodeAt(0)) && KSOperator.lte(__ks_0, 57)) {
						if(!isArrayStruct) {
							SyntaxException.throwInvalidIdentifier(this._property, this);
						}
					}
					if(type.isDictionary() === true) {
						this._type = type.parameter();
					}
					if(isArrayStruct) {
						this._computed = true;
						this._stringProperty = true;
						var property = type.getProperty(this._property);
						if(KSType.isValue(property)) {
							this._property = "" + property.index();
							this._type = property.type();
						}
						else if(type.isExhaustive(this) === true) {
							ReferenceException.throwNotDefinedProperty(this._property, this);
						}
						if(this._object.isInferable() === true) {
							this._inferable = true;
							this._path = "" + this._object.path() + "[" + this._property + "]";
						}
					}
					else if(isStruct === true) {
						var property = type.getProperty(this._property);
						if(KSType.isValue(property)) {
							this._type = property.type();
						}
						else if(type.isExhaustive(this) === true) {
							ReferenceException.throwNotDefinedProperty(this._property, this);
						}
						if(this._object.isInferable() === true) {
							this._inferable = true;
							this._path = "" + this._object.path() + "." + this._property;
						}
					}
					else {
						var property = type.getProperty(this._property);
						if(KSType.isValue(property)) {
							var __ks_type_1 = type.discardReference();
							if((__ks_type_1.isClass() === true) && KSType.isInstance(property, ClassVariableType) && (property.isSealed() === true)) {
								this._sealed = true;
								this._usingGetter = property.isInitiatable();
								this._usingSetter = property.isInitiatable();
							}
							this._type = property.discardVariable();
						}
						else {
							if(type.isEnum() === true) {
								SyntaxException.throwInvalidEnumAccess(this);
							}
							else if(type.isExhaustive(this) === true) {
								ReferenceException.throwNotDefinedProperty(this._property, this);
							}
						}
						if(this._object.isInferable() === true) {
							this._inferable = true;
							this._path = "" + this._object.path() + "." + this._property;
						}
					}
				}
			}
			else {
				var type = this._object.type();
				if((type.isNull() === true) && !this._nullable && !(this._options.rules.ignoreMisfit === true)) {
					ReferenceException.throwNullExpression(this._object, this);
				}
				if(this._computed) {
					this._property = $compile.expression(this._data.property, this);
					this._property.analyse();
					this._property.prepare();
				}
				else {
					this._property = this._data.property.name;
					var __ks_0;
					if(KSOperator.lte(48, __ks_0 = this._property.charCodeAt(0)) && KSOperator.lte(__ks_0, 57)) {
						if(!((type.isStruct() === true) && (type.isArray() === true))) {
							SyntaxException.throwInvalidIdentifier(this._property, this);
						}
					}
				}
			}
			if(this._nullable && !(this._object.type().isNullable() === true) && !(this._options.rules.ignoreMisfit === true)) {
				TypeException.throwNotNullableExistential(this._object, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._object.translate();
			if(this._computed && !this._stringProperty) {
				this._property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(this._object.isCallable() === true) {
				this._object.acquireReusable(this._nullable || (acquire === true));
			}
			if(this._computed && !this._stringProperty && (this._property.isCallable() === true)) {
				this._property.acquireReusable(this._nullable || (acquire === true));
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_caller_0: function() {
			return this._object;
		},
		caller: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_caller_0.apply(this);
			}
			else if(Expression.prototype.caller) {
				return Expression.prototype.caller.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			this._object.inferTypes(inferables);
			if(this._computed && !this._stringProperty) {
				this._property.inferTypes(inferables);
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isCallable_0: function() {
			return (this._object.isCallable() === true) || (this._computed && !this._stringProperty && (this._property.isCallable() === true));
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return (this.isNullable() === true) && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isInferable_0: function() {
			return this._inferable;
		},
		isInferable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isInferable_0.apply(this);
			}
			return Expression.prototype.isInferable.apply(this, arguments);
		},
		__ks_func_isLooseComposite_0: function() {
			return (this.isCallable() === true) || (this.isNullable() === true);
		},
		isLooseComposite: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isLooseComposite_0.apply(this);
			}
			return Expression.prototype.isLooseComposite.apply(this, arguments);
		},
		__ks_func_isMacro_0: function() {
			return false;
		},
		isMacro: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isMacro_0.apply(this);
			}
			else if(Expression.prototype.isMacro) {
				return Expression.prototype.isMacro.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable || (this._object.isNullable() === true) || (this._computed && !this._stringProperty && (this._property.isNullable() === true));
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return (((this._object.isNullable() === true) ? 1 : 0) + (this._nullable ? 1 : 0) + ((this._computed && !this._stringProperty && (this._property.isNullable() === true)) ? 1 : 0)) > 1;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingSetter_0: function() {
			return this._usingSetter;
		},
		isUsingSetter: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isUsingSetter_0.apply(this);
			}
			return Expression.prototype.isUsingSetter.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._object.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			return array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_path_0: function() {
			return this._path;
		},
		path: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_path_0.apply(this);
			}
			else if(Expression.prototype.path) {
				return Expression.prototype.path.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(this._object.isCallable() === true) {
				this._object.releaseReusable();
			}
			if(this._computed && !this._stringProperty && (this._property.isCallable() === true)) {
				this._property.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if((this.isNullable() === true) && !this._tested) {
				fragments.wrapNullable(this).code(" ? ").compile(this._object);
				if(this._computed) {
					fragments.code("[").compile(this._property).code("] : null");
				}
				else {
					fragments.code($dot).compile(this._property).code(" : null");
				}
			}
			else {
				var type = this._object.type();
				if(this._usingGetter) {
					if(this._sealed) {
						var name = (this._property[0] === "_") ? this._property.substr(1) : this._property;
						fragments.code("" + type.type().getSealedName() + ".__ks_get_" + name + "(").compile(this._object).code(")");
					}
					else {
						NotImplementedException.throw(this);
					}
				}
				else {
					if((this._object.isComputed() === true) || (KSHelper.valueOf(this._object._data.kind) === NodeKind.NumericExpression.value)) {
						fragments.code("(").compile(this._object).code(")");
					}
					else if((type.isNamespace() === true) && (type.isSealed() === true) && (type.type().isSealedProperty(this._property) === true)) {
						fragments.code(type.getSealedName());
					}
					else {
						fragments.compile(this._object);
					}
					if(this._computed) {
						fragments.code("[").compile(this._property).code("]");
					}
					else {
						fragments.code($dot).compile(this._property);
					}
					if(this._prepareObject && (this._type.isMethod() === true) && !KSType.isInstance(this._parent, UnaryOperatorExpression)) {
						fragments.code(".bind(").compile(this._object).code(")");
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if((this.isNullable() === true) && !this._tested) {
				if(this._computed) {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code($dot).compile(this._property);
				}
				if(!(this._type.isBoolean() === true) || (this._type.isNullable() === true)) {
					fragments.code(" === true");
				}
				fragments.code(" : false");
			}
			else {
				if(this._computed) {
					fragments.wrap(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.wrap(this._object).code($dot).compile(this._property);
				}
				if(!(this._type.isBoolean() === true) || (this._type.isNullable() === true)) {
					fragments.code(" === true");
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				this._tested = true;
				var conditional = false;
				if(this._object.isNullable() === true) {
					fragments.compileNullable(this._object);
					conditional = true;
				}
				if(this._nullable) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.code(KSHelper.concatString($runtime.type(this), ".isValue(")).compileReusable(this._object).code(")");
					conditional = true;
				}
				if(this._computed && !this._stringProperty && (this._property.isNullable() === true)) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.compileNullable(this._property);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			var fragments = this._object.toQuote();
			if(this._nullable) {
				fragments = KSHelper.concatString(fragments, "?");
			}
			if(this._computed) {
				if(this._stringProperty) {
					fragments = KSHelper.concatString(fragments, "[" + this._property + "]");
				}
				else {
					fragments = KSHelper.concatString(fragments, "[" + this._property.toQuote() + "]");
				}
			}
			else {
				fragments = KSHelper.concatString(fragments, "." + this._property);
			}
			return fragments;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Expression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var objectCallable = this._object.isCallable();
			if(objectCallable === true) {
				fragments.code("(").compileReusable(this._object).code(", ").compile(this._object);
			}
			else {
				fragments.wrap(this._object);
			}
			if(this._computed) {
				if(!this._stringProperty && (this._property.isCallable() === true)) {
					fragments.code("[").compileReusable(this._property).code("]");
				}
				else {
					fragments.code("[").compile(this._property).code("]");
				}
			}
			else {
				fragments.code($dot).compile(this._property);
			}
			if(objectCallable === true) {
				fragments.code(")");
			}
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_toSetterFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._sealed) {
				var name = (this._property[0] === "_") ? this._property.substr(1) : this._property;
				fragments.code("" + this._object.type().type().getSealedName() + ".__ks_set_" + name + "(").compile(this._object).code($comma).compile(value).code(")");
			}
			else {
				NotImplementedException.throw(this);
			}
		},
		toSetterFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toSetterFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toSetterFragments) {
				return Expression.prototype.toSetterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var OmittedExpression = KSHelper.class({
		$name: "OmittedExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRedeclared_0: function() {
			return false;
		},
		isRedeclared: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_isRedeclared_0.apply(this);
			}
			else if(Expression.prototype.isRedeclared) {
				return Expression.prototype.isRedeclared.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			return array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return OmittedExpression.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function() {
		},
		setAssignment: function() {
			return OmittedExpression.prototype.__ks_func_setAssignment_0.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.spread === true) {
				fragments.code("...");
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return OmittedExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var RegularExpression = KSHelper.class({
		$name: "RegularExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return RegularExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._data.value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return RegularExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("RegExp");
		},
		type: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var SequenceExpression = KSHelper.class({
		$name: "SequenceExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._expressions = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			SequenceExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._data.expressions[__ks_0];
				this._expressions.push(expression = $compile.expression(expression, this));
				expression.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.prepare();
			}
			this._last = this._expressions.length - 1;
			this._type = this._expressions[this._last].type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				if(expression.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return SequenceExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(");
			for(var index = 0, __ks_0 = this._expressions.length, expression; index < __ks_0; ++index) {
				expression = this._expressions[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(expression);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return SequenceExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(");
			for(var index = 0, __ks_0 = Math.min(this._expressions.length, this._last), expression; index < __ks_0; ++index) {
				expression = this._expressions[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(expression);
			}
			fragments.code($comma).compileBoolean(this._expressions[this._last]);
			fragments.code(")");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SequenceExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var TemplateExpression = KSHelper.class({
		$name: "TemplateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._computing = false;
			this._elements = [];
			this._types = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			TemplateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.elements.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.elements[__ks_0];
				var element = $compile.expression(data, this);
				element.analyse();
				this._elements.push(element);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.prepare();
				this._types.push((element.type().isString() === true) && !(element.type().isNullable() === true));
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_computing_0: function(computing) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(computing === void 0 || computing === null) {
				throw new TypeError("'computing' is not nullable");
			}
			else if(!KSType.isBoolean(computing)) {
				throw new TypeError("'computing' is not of type 'Boolean'");
			}
			this._computing = computing;
		},
		computing: function() {
			if(arguments.length === 1) {
				return TemplateExpression.prototype.__ks_func_computing_0.apply(this, arguments);
			}
			else if(Expression.prototype.computing) {
				return Expression.prototype.computing.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				if(element.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return TemplateExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return (this._elements.length > 1) || !(this._types[0] === true);
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._elements.length === 0) {
				fragments.code("\"\"");
			}
			else if(this._computing) {
				for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					if(index === 0) {
						fragments.wrap(element);
					}
					else {
						fragments.code(" + ").wrap(element);
					}
				}
			}
			else if(this._elements.length === 1) {
				if(this._types[0] === true) {
					this._elements[0].toStringFragments(fragments);
				}
				else {
					fragments.code("\"\" + ").wrap(this._elements[0]);
				}
			}
			else {
				for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					if(index === 0) {
						if(this._types[index] === true) {
							fragments.wrap(element);
						}
						else {
							fragments.code("\"\" + ").wrap(element);
						}
					}
					else {
						fragments.code(" + ").wrap(element);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TemplateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("String");
		},
		type: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var ThisExpression = KSHelper.class({
		$name: "ThisExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignment = AssignmentType.Neither;
			this._calling = false;
			this._composite = false;
			this._namesake = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ThisExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var parent = this._parent;
			var __ks_0;
			do {
				if(KSType.isInstance(parent, CallExpression) && (parent.data().callee === this._data)) {
					this._calling = true;
				}
				else if(KSType.isInstance(parent, ClassMethodDeclaration) || KSType.isInstance(parent, ClassVariableDeclaration)) {
					if(!(parent.isInstance() === true)) {
						SyntaxException.throwUnexpectedAlias(this._name, this);
					}
					this._class = parent.parent().type();
					if(KSType.isInstance(parent, ClassMethodDeclaration) && (parent.parameters().length === 0)) {
						if(parent.name() === this._name) {
							this._namesake = true;
						}
					}
					break;
				}
				else if(KSType.isInstance(parent, ClassConstructorDeclaration) || KSType.isInstance(parent, ClassDestructorDeclaration)) {
					this._class = parent.parent().type();
					break;
				}
				else if(KSType.isInstance(parent, ImplementClassMethodDeclaration)) {
					if(!(parent.isInstance() === true)) {
						SyntaxException.throwUnexpectedAlias(this._name, this);
					}
					this._class = parent.class();
					break;
				}
				else if(KSType.isInstance(parent, ImplementClassConstructorDeclaration)) {
					this._class = parent.class();
					break;
				}
			}
			while(KSType.isValue(__ks_0 = parent.parent()) ? (parent = __ks_0, true) : false)
			if(!KSType.isValue(this._class)) {
				SyntaxException.throwUnexpectedAlias(this._name, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var name = this._scope.getVariable("this").getSecureName();
			if(this._calling) {
				var __ks_0, __ks_1;
				if(KSType.isValue(__ks_0 = this._class.type().getInstanceMethod(this._name, this._parent.arguments())) ? (this._type = __ks_0, true) : false) {
					this._fragment = "" + name + "." + this._name;
				}
				else if(KSType.isValue(__ks_0 = this._class.type().getInstanceVariable(this._name)) ? (this._type = __ks_0, true) : false) {
					this._fragment = "" + name + "." + this._name;
				}
				else if(KSType.isValue(__ks_0 = this._class.type().getInstanceVariable("_" + this._name)) ? (this._type = __ks_0, true) : false) {
					if((this._type.isInitiatable() === true) && (this._assignment === AssignmentType.Neither)) {
						this._fragment = "" + this._class.getSealedName() + ".__ks_get_" + this._name + "(" + name + ")";
					}
					else {
						this._fragment = "" + name + "._" + this._name;
					}
				}
				else {
					ReferenceException.throwNotDefinedField(this._name, this);
				}
			}
			else {
				var variable, __ks_0;
				if(KSType.isValue(__ks_0 = this._class.type().getInstanceVariable(this._name)) ? (variable = __ks_0, true) : false) {
					this._fragment = "" + name + "." + this._name;
					this._type = KSType.isValue(__ks_0 = this._scope.getChunkType(this._fragment)) ? __ks_0 : variable.type();
				}
				else if(KSType.isValue(__ks_0 = this._class.type().getInstanceVariable("_" + this._name)) ? (variable = __ks_0, true) : false) {
					if((variable.isInitiatable() === true) && (this._assignment === AssignmentType.Neither)) {
						this._fragment = "" + this._class.getSealedName() + ".__ks_get_" + this._name + "(" + name + ")";
					}
					else {
						this._fragment = "" + name + "._" + this._name;
					}
					this._type = KSType.isValue(__ks_0 = this._scope.getChunkType(this._fragment)) ? __ks_0 : variable.type();
				}
				else if(KSType.isValue(__ks_0 = this._class.type().getPropertyGetter(this._name)) ? (this._type = __ks_0, true) : false) {
					if(this._namesake) {
						ReferenceException.throwLoopingAlias(this._name, this);
					}
					this._fragment = "" + name + "." + this._name + "()";
					this._composite = true;
				}
				else {
					ReferenceException.throwNotDefinedField(this._name, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getDeclaredType_0: function() {
			if(!this._calling) {
				var variable, __ks_0;
				if(KSType.isValue(__ks_0 = this._class.type().getInstanceVariable(this._name)) ? (variable = __ks_0, true) : false) {
					return variable.type();
				}
				else if(KSType.isValue(__ks_0 = this._class.type().getInstanceVariable("_" + this._name)) ? (variable = __ks_0, true) : false) {
					return variable.type();
				}
			}
			return this._type;
		},
		getDeclaredType: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_getDeclaredType_0.apply(this);
			}
			return Expression.prototype.getDeclaredType.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return !this._calling && !this._composite;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isComposite_0: function() {
			return this._composite;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_isExpectingType_0: function() {
			return true;
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			return Expression.prototype.isExpectingType.apply(this, arguments);
		},
		__ks_func_isInferable_0: function() {
			return !this._calling && !this._composite;
		},
		isInferable: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_isInferable_0.apply(this);
			}
			return Expression.prototype.isInferable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return name === "this";
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ThisExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			return array;
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return ThisExpression.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_path_0: function() {
			return this._fragment;
		},
		path: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_path_0.apply(this);
			}
			else if(Expression.prototype.path) {
				return Expression.prototype.path.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
			else if(!KSType.isEnumMember(assignment, AssignmentType)) {
				throw new TypeError("'assignment' is not of type 'AssignmentType'");
			}
			this._assignment = assignment;
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return ThisExpression.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._fragment);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ThisExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "@" + this._name;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return Expression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var TryExpression = KSHelper.class({
		$name: "TryExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._reusable = false;
			this._reuseName = null;
			this._unwrap = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			TryExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Disabled.value) {
					this._unwrap = true;
				}
			}
			this._argument = $compile.expression(this._data.argument, this);
			this._argument.analyse();
			if(KSType.isValue(this._data.defaultValue)) {
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TryExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._argument.prepare();
			if(this._unwrap && (this._argument.type().isInoperative() === true)) {
				TypeException.throwUnexpectedInoperative(this._argument, this);
			}
			if(this._defaultValue !== null) {
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TryExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._argument.translate();
			if(this._defaultValue !== null) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TryExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(acquire === true) {
				this._reuseName = this._scope.acquireTempName();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return TryExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TryExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return true;
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return TryExpression.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Expression.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._argument.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return TryExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(this._reuseName !== null) {
				this._scope.releaseTempName(this._reuseName);
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return TryExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else if(this._unwrap) {
				fragments.compile(this._argument);
			}
			else {
				fragments.code($runtime.helper(this), ".try(");
				if(this._options.format.functions === "es5") {
					fragments.code("function(){return ").compile(this._argument).code(";}");
				}
				else {
					fragments.code("() => ").compile(this._argument);
				}
				fragments.code(", ");
				if(this._defaultValue === null) {
					fragments.code("null");
				}
				else {
					fragments.compile(this._defaultValue);
				}
				fragments.code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TryExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._unwrap) {
				fragments.compileBoolean(this._argument);
			}
			else {
				fragments.code($runtime.helper(this), ".tryTest(");
				if(this._options.format.functions === "es5") {
					fragments.code("function(){return ").compile(this._argument).code(";}");
				}
				else {
					fragments.code("() => ").compile(this._argument);
				}
				fragments.code(")");
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return TryExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return TryExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._argument.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return TryExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var UnlessExpression = KSHelper.class({
		$name: "UnlessExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenFalse.prepare();
			this._type = this._whenFalse.type().setNullable(true);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._condition.isUsingVariable(name) === true) || (this._whenFalse.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return UnlessExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._condition).code(" ? null : ").compile(this._whenFalse);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().line(this._whenFalse).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var TempReusableExpression = KSHelper.class({
		$name: "TempReusableExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._count = 0;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			TempReusableExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(value, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [new Dictionary(), parent]);
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				TempReusableExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TempReusableExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TempReusableExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TempReusableExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return (this._count === 0) && (this._value.isComposite() === true);
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TempReusableExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if((this._count === 0) && (this._value.isComposite() === true)) {
				fragments.compileReusable(this._value);
			}
			else {
				fragments.compile(this._value);
			}
			++this._count;
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TempReusableExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var TempMemberExpression = KSHelper.class({
		$name: "TempMemberExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._computed = false;
			this._reusable = false;
			this._reuseName = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			TempMemberExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(object, property, computed, parent, scope) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			if(computed === void 0 || computed === null) {
				throw new TypeError("'computed' is not nullable");
			}
			else if(!KSType.isBoolean(computed)) {
				throw new TypeError("'computed' is not of type 'Boolean'");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			Expression.prototype.__ks_cons.call(this, [new Dictionary(), parent, scope]);
			this._object = object;
			this._property = property;
			this._computed = computed;
		},
		__ks_cons: function(args) {
			if(args.length === 5) {
				TempMemberExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TempMemberExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TempMemberExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TempMemberExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(acquire === true) {
				this._reuseName = this._scope.acquireTempName();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return TempMemberExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isComposite_0: function() {
			return true;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return TempMemberExpression.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(KSType.isValue(this._reuseName)) {
				this._scope.releaseTempName(this._reuseName);
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return TempMemberExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._reusable) {
				fragments.code(this._reuseName);
			}
			else if(this._computed) {
				fragments.compile(this._object).code("[").compile(this._property).code("]");
			}
			else {
				fragments.compile(this._object).code(".").compile(this._property);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TempMemberExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return TempMemberExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		}
	});
	var ParameterMode = KSHelper.enum(Number, {
		ArrowFunction: 0,
		Default: 1,
		HybridConstructor: 2,
		OverloadedFunction: 3
	});
	var ParameterWrongDoing = KSHelper.enum(Number, {
		BadType: 0,
		NotNullable: 1
	});
	var Parameter = KSHelper.class({
		$name: "Parameter",
		$extends: AbstractNode,
		$static: {
			__ks_sttc_compileExpression_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				var __ks_0 = data.kind.valueOf();
				if(__ks_0 === NodeKind.ArrayBinding.value) {
					return new ArrayBindingParameter(data, node);
				}
				else if(__ks_0 === NodeKind.Identifier.value) {
					return new IdentifierParameter(data, node);
				}
				else if(__ks_0 === NodeKind.ObjectBinding.value) {
					return new ObjectBindingParameter(data, node);
				}
			},
			compileExpression: function() {
				if(arguments.length === 2) {
					return Parameter.__ks_sttc_compileExpression_0.apply(this, arguments);
				}
				else if(AbstractNode.compileExpression) {
					return AbstractNode.compileExpression.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_getUntilDifferentTypeIndex_0: function(parameters, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var activeType = parameters[index].type().type().setNullable(false);
				for(var i = KSOperator.addOrConcat(index, 1), __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
					parameter = parameters[i];
					var type = parameter.type();
					if(type.min() === 0) {
						if(!(activeType.equals(type.type().setNullable(false)) === true)) {
							return 0;
						}
						if(KSOperator.gt(type.max(), 1)) {
							return i + 1;
						}
					}
					else {
						return 0;
					}
				}
				return parameters.length;
			},
			getUntilDifferentTypeIndex: function() {
				if(arguments.length === 2) {
					return Parameter.__ks_sttc_getUntilDifferentTypeIndex_0.apply(this, arguments);
				}
				else if(AbstractNode.getUntilDifferentTypeIndex) {
					return AbstractNode.getUntilDifferentTypeIndex.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toFragments_0: function(node, fragments, mode, fn, wrongdoer) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					wrongdoer = Parameter.toWrongDoingFragments;
				}
				if(node._options.parse.parameters === "es5") {
					return Parameter.toES5Fragments(node, fragments, fn);
				}
				else if(node._options.parse.parameters === "es6") {
					return Parameter.toES6Fragments(node, fragments, fn);
				}
				else {
					return Parameter.toKSFragments(node, fragments, mode, fn, wrongdoer);
				}
			},
			toFragments: function() {
				if(arguments.length >= 4 && arguments.length <= 5) {
					return Parameter.__ks_sttc_toFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toFragments) {
					return AbstractNode.toFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toES5Fragments_0: function(node, fragments, fn) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				for(var i = 0, __ks_0 = node.parameters(), __ks_1 = __ks_0.length, parameter; i < __ks_1; ++i) {
					parameter = __ks_0[i];
					if(parameter.isRest() === true) {
						SyntaxException.throwNoRestParameter(node);
					}
					else if(parameter.hasDefaultValue() === true) {
						SyntaxException.throwNoDefaultParameter(node);
					}
					else if(parameter.type().isNullable() === true) {
						SyntaxException.throwNoNullParameter(node);
					}
					else if(parameter.isAnonymous() === true) {
						SyntaxException.throwNotNamedParameter(node);
					}
					if(i !== 0) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
				}
				return fn(fragments);
			},
			toES5Fragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toES5Fragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toES5Fragments) {
					return AbstractNode.toES5Fragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toES6Fragments_0: function(node, fragments, fn) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				var rest = false;
				for(var i = 0, __ks_0 = node.parameters(), __ks_1 = __ks_0.length, parameter; i < __ks_1; ++i) {
					parameter = __ks_0[i];
					if(parameter.isAnonymous() === true) {
						SyntaxException.throwNotNamedParameter(node);
					}
					if(i !== 0) {
						fragments.code($comma);
					}
					if(parameter.isRest() === true) {
						parameter.toParameterFragments(fragments);
						rest = true;
					}
					else if(rest) {
						SyntaxException.throwAfterRestParameter();
					}
					else {
						parameter.toParameterFragments(fragments);
					}
					if(parameter.hasDefaultValue() === true) {
						fragments.code(" = ").compile(parameter._defaultValue);
					}
				}
				return fn(fragments);
			},
			toES6Fragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toES6Fragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toES6Fragments) {
					return AbstractNode.toES6Fragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toKSFragments_0: function(node, fragments, mode, fn, wrongdoer) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.isEnumMember(mode, ParameterMode)) {
					throw new TypeError("'mode' is not of type 'ParameterMode'");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					throw new TypeError("'wrongdoer' is not nullable");
				}
				var parameters = node.parameters();
				var signature = node.type();
				var name = ((mode === ParameterMode.Default) || (mode === ParameterMode.OverloadedFunction)) ? "arguments" : "__ks_arguments";
				var restIndex = -1;
				var minBefore = 0;
				var maxBefore = 0;
				var minRest = 0;
				var minAfter = 0;
				var maxAfter = 0;
				for(var i = 0, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
					parameter = parameters[i];
					var type = parameter.type();
					if(restIndex !== -1) {
						minAfter = KSOperator.addOrConcat(minAfter, type.min());
						maxAfter = KSOperator.addOrConcat(maxAfter, type.max());
					}
					else if(KSOperator.eq(type.max(), Infinity)) {
						restIndex = i;
						minRest = type.min();
					}
					else {
						minBefore = KSOperator.addOrConcat(minBefore, type.min());
						maxBefore = KSOperator.addOrConcat(maxBefore, type.max());
					}
				}
				if(signature.isAsync() === true) {
					if(restIndex !== -1) {
						++minAfter;
						++maxAfter;
					}
					else {
						++minBefore;
						++maxBefore;
					}
				}
				var context = (function() {
					var d = new Dictionary();
					d.name = name;
					d.async = signature.isAsync();
					d.required = minBefore;
					d.optional = signature.min();
					d.temp = false;
					d.tempL = false;
					d.length = parameters.length;
					d.min = minBefore;
					d.max = maxBefore + minRest + minAfter;
					d.increment = true;
					return d;
				})();
				var lastHeaderParameterIndex = 0;
				var asyncHeaderParameter = false;
				if(KSOperator.gt(signature.max(), 0)) {
					if(mode === ParameterMode.ArrowFunction) {
						fragments.code("..." + name);
					}
					else if(mode === ParameterMode.HybridConstructor) {
						fragments.code(name);
					}
				}
				if(mode === ParameterMode.Default) {
					lastHeaderParameterIndex = Parameter.toHeaderParameterFragments(fragments, node, parameters, minAfter, context);
					if(context.async === true) {
						asyncHeaderParameter = Parameter.toAsyncHeaderParameterFragments(fragments, parameters, lastHeaderParameterIndex);
					}
				}
				fragments = fn(fragments);
				if((mode === ParameterMode.Default) || (mode === ParameterMode.ArrowFunction)) {
					Parameter.toLengthValidationFragments(fragments, node, name, signature, parameters, asyncHeaderParameter, restIndex, minBefore, minRest, minAfter);
				}
				for(var __ks_0 = 0, __ks_1 = Math.min(parameters.length, lastHeaderParameterIndex), parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = parameters[__ks_0];
					parameter.toValidationFragments(fragments, wrongdoer);
				}
				if(lastHeaderParameterIndex === parameters.length) {
					return fragments;
				}
				if(restIndex === -1) {
					fragments.line($runtime.scope(node), "__ks_i = " + (lastHeaderParameterIndex - 1));
					Parameter.toBeforeRestParameterFragments(fragments, name, signature, parameters, lastHeaderParameterIndex, restIndex, context, wrongdoer);
					return fragments;
				}
				else if(lastHeaderParameterIndex < restIndex) {
					fragments.line($runtime.scope(node), "__ks_i = " + (lastHeaderParameterIndex - 1));
					Parameter.toBeforeRestParameterFragments(fragments, name, signature, parameters, lastHeaderParameterIndex, restIndex, context, wrongdoer);
					Parameter.toRestParameterFragments(fragments, node, name, signature, parameters, true, restIndex, minBefore, minAfter, maxAfter, context, wrongdoer);
					if((restIndex + 1) === parameters.length) {
						return fragments;
					}
				}
				else if(lastHeaderParameterIndex === restIndex) {
					Parameter.toRestParameterFragments(fragments, node, name, signature, parameters, false, restIndex, restIndex, minAfter, maxAfter, context, wrongdoer);
					if((restIndex + 1) === parameters.length) {
						return fragments;
					}
				}
				else if(minAfter !== 0) {
					fragments.line($runtime.scope(node), "__ks_i = " + (lastHeaderParameterIndex - 1));
				}
				Parameter.toAfterRestParameterFragments(fragments, name, parameters, restIndex, context, wrongdoer);
				return fragments;
			},
			toKSFragments: function() {
				if(arguments.length === 5) {
					return Parameter.__ks_sttc_toKSFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toKSFragments) {
					return AbstractNode.toKSFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toHeaderParameterFragments_0: function(fragments, node, parameters, minAfter, context) {
				if(arguments.length < 5) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(minAfter === void 0 || minAfter === null) {
					throw new TypeError("'minAfter' is not nullable");
				}
				if(context === void 0 || context === null) {
					throw new TypeError("'context' is not nullable");
				}
				var til = -1;
				for(var i = 0, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
					parameter = parameters[i];
					var type = parameter.type();
					if(KSOperator.eq(type.max(), Infinity)) {
						if((minAfter === 0) && (type.isAny() === true) && (node._options.format.parameters === "es6")) {
							if(i > 0) {
								fragments.code($comma);
							}
							parameter.toParameterFragments(fragments);
							return i + 1;
						}
						else {
							return i;
						}
					}
					else if(KSOperator.gt(type.max(), 1)) {
						return i;
					}
					else if((parameter.isRequired() === true) || ((i + 1) === parameters.length) || KSOperator.lt(i, ((til === -1) ? til = Parameter.getUntilDifferentTypeIndex(parameters, i) : til))) {
						if(i > 0) {
							fragments.code($comma);
						}
						parameter.toParameterFragments(fragments);
						context.optional = KSOperator.addOrConcat(context.optional, KSOperator.subtraction(type.max(), type.min()));
						context.required = KSOperator.subtraction(context.required, type.min());
					}
					else {
						return i;
					}
				}
				return parameters.length;
			},
			toHeaderParameterFragments: function() {
				if(arguments.length === 5) {
					return Parameter.__ks_sttc_toHeaderParameterFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toHeaderParameterFragments) {
					return AbstractNode.toHeaderParameterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toAsyncHeaderParameterFragments_0: function(fragments, parameters, lastHeader) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(lastHeader === void 0 || lastHeader === null) {
					throw new TypeError("'lastHeader' is not nullable");
				}
				if(lastHeader === parameters.length) {
					if(KSOperator.gt(lastHeader, 0)) {
						fragments.code($comma);
					}
					fragments.code("__ks_cb");
					return true;
				}
				else {
					return false;
				}
			},
			toAsyncHeaderParameterFragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toAsyncHeaderParameterFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toAsyncHeaderParameterFragments) {
					return AbstractNode.toAsyncHeaderParameterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toLengthValidationFragments_0: function(fragments, node, name, signature, parameters, asyncHeader, restIndex, minBefore, minRest, minAfter) {
				if(arguments.length < 10) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 10)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(signature === void 0 || signature === null) {
					throw new TypeError("'signature' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(asyncHeader === void 0 || asyncHeader === null) {
					throw new TypeError("'asyncHeader' is not nullable");
				}
				if(restIndex === void 0 || restIndex === null) {
					throw new TypeError("'restIndex' is not nullable");
				}
				if(minBefore === void 0 || minBefore === null) {
					throw new TypeError("'minBefore' is not nullable");
				}
				if(minRest === void 0 || minRest === null) {
					throw new TypeError("'minRest' is not nullable");
				}
				if(minAfter === void 0 || minAfter === null) {
					throw new TypeError("'minAfter' is not nullable");
				}
				if(KSOperator.addOrConcat(minBefore, minRest, minAfter) !== 0) {
					if(signature.isAsync() === true) {
						node.module().flag("Type");
						if(asyncHeader === true) {
							if(!(node._options.rules.noParamAssert === true)) {
								if(signature.min() === 0) {
									fragments.newControl().code("if(arguments.length < 1)").step().line("throw new SyntaxError(\"Wrong number of arguments (\" + arguments.length + \" for 0 + 1)\")").step().code("else if(!" + $runtime.type(node) + ".isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")").done();
								}
								else {
									var ctrl = fragments.newControl().code("if(arguments.length < " + KSOperator.addOrConcat(signature.min(), 1) + ")").step().line("" + $runtime.scope(node) + "__ks_error = new SyntaxError(\"Wrong number of arguments (\" + arguments.length + \" for " + signature.min() + " + 1)\")");
									ctrl.newControl().code("if(arguments.length > 0 && " + $runtime.type(node) + ".isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
									ctrl.step().code("else if(!" + $runtime.type(node) + ".isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")").done();
								}
							}
						}
						else {
							fragments.line("" + $runtime.scope(node) + "__ks_cb = arguments.length > 0 ? arguments[arguments.length - 1] : null");
							if(!(node._options.rules.noParamAssert === true)) {
								var ctrl = fragments.newControl().code("if(arguments.length < " + KSOperator.addOrConcat(signature.min(), 1) + ")").step().line("" + $runtime.scope(node) + "__ks_error = new SyntaxError(\"Wrong number of arguments (\" + arguments.length + \" for " + signature.min() + " + 1)\")");
								ctrl.newControl().code("if(" + $runtime.type(node) + ".isFunction(__ks_cb))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
								ctrl.step().code("else if(!" + $runtime.type(node) + ".isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")");
								ctrl.done();
							}
						}
					}
					else if(!(node._options.rules.noParamAssert === true)) {
						fragments.newControl().code("if(" + name + ".length < " + signature.min() + ")").step().line("throw new SyntaxError(\"Wrong number of arguments (\" + " + name + ".length + \" for " + signature.min() + ")\")").done();
					}
				}
			},
			toLengthValidationFragments: function() {
				if(arguments.length === 10) {
					return Parameter.__ks_sttc_toLengthValidationFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toLengthValidationFragments) {
					return AbstractNode.toLengthValidationFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toAfterRestParameterFragments_0: function(fragments, name, parameters, restIndex, beforeContext, wrongdoer) {
				if(arguments.length < 6) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(restIndex === void 0 || restIndex === null) {
					throw new TypeError("'restIndex' is not nullable");
				}
				if(beforeContext === void 0 || beforeContext === null) {
					throw new TypeError("'beforeContext' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					throw new TypeError("'wrongdoer' is not nullable");
				}
				var parameter = parameters[restIndex];
				var context = (function() {
					var d = new Dictionary();
					d.name = name;
					d.any = parameter.type().isAny();
					d.increment = false;
					d.temp = beforeContext.temp;
					d.tempL = beforeContext.tempL;
					d.length = parameters.length;
					return d;
				})();
				for(var i = KSOperator.addOrConcat(restIndex, 1), __ks_0 = parameters.length, __ks_parameter_1; i < __ks_0; ++i) {
					__ks_parameter_1 = parameters[i];
					__ks_parameter_1.toAfterRestFragments(fragments, context, i, wrongdoer);
				}
			},
			toAfterRestParameterFragments: function() {
				if(arguments.length === 6) {
					return Parameter.__ks_sttc_toAfterRestParameterFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toAfterRestParameterFragments) {
					return AbstractNode.toAfterRestParameterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toRestParameterFragments_0: function(fragments, node, name, signature, parameters, declared, restIndex, minBefore, minAfter, maxAfter, context, wrongdoer) {
				if(arguments.length < 12) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 12)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(signature === void 0 || signature === null) {
					throw new TypeError("'signature' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(declared === void 0 || declared === null) {
					throw new TypeError("'declared' is not nullable");
				}
				if(restIndex === void 0 || restIndex === null) {
					throw new TypeError("'restIndex' is not nullable");
				}
				if(minBefore === void 0 || minBefore === null) {
					throw new TypeError("'minBefore' is not nullable");
				}
				if(minAfter === void 0 || minAfter === null) {
					throw new TypeError("'minAfter' is not nullable");
				}
				if(maxAfter === void 0 || maxAfter === null) {
					throw new TypeError("'maxAfter' is not nullable");
				}
				if(context === void 0 || context === null) {
					throw new TypeError("'context' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					throw new TypeError("'wrongdoer' is not nullable");
				}
				var parameter = parameters[restIndex];
				if(parameter.type().isAny() === true) {
					if(KSOperator.gt(minAfter, 0)) {
						if(!(declared === true)) {
							fragments.line($runtime.scope(node), "__ks_i = " + KSOperator.subtraction(restIndex, 1));
						}
						if(parameter.isAnonymous() === true) {
							fragments.line("__ks_i = arguments.length - " + minAfter);
						}
						else {
							if((parameter.hasDefaultValue() === true) && (parameter.type().min() === 0)) {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = arguments.length > " + ((context.increment === true) ? "++__ks_i" : "__ks_i") + " + " + minAfter + " ? Array.prototype.slice.call(arguments, __ks_i, __ks_i = arguments.length - " + minAfter + ") : ").compile(parameter._defaultValue).done();
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = Array.prototype.slice.call(arguments, " + ((context.increment === true) ? "++__ks_i" : "__ks_i") + ", __ks_i = arguments.length - " + minAfter + ")").done();
							}
						}
						context.increment = true;
					}
					else {
						if(parameter.isAnonymous() === true) {
							return;
						}
						if(declared === true) {
							if((parameter.hasDefaultValue() === true) && (parameter.type().min() === 0)) {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = " + name + ".length > " + ((context.increment === true) ? "++__ks_i" : "__ks_i") + " ? Array.prototype.slice.call(" + name + ", __ks_i, " + name + ".length) : ").compile(parameter._defaultValue).done();
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = Array.prototype.slice.call(" + name + ", " + ((context.increment === true) ? "++__ks_i" : "__ks_i") + ", " + name + ".length)").done();
							}
						}
						else {
							if((parameter.hasDefaultValue() === true) && (parameter.type().min() === 0)) {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = " + name + ".length > 0 ? Array.prototype.slice.call(" + name + ", " + minBefore + ", " + name + ".length) : ").compile(parameter._defaultValue).done();
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = Array.prototype.slice.call(" + name + ", " + minBefore + ", " + name + ".length)").done();
							}
						}
					}
				}
				else {
					node.module().flag("Type");
					if(!(declared === true)) {
						fragments.line($runtime.scope(node), "__ks_i = " + KSOperator.subtraction(restIndex, 1));
					}
					if(!(parameter.isAnonymous() === true)) {
						fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = []").done();
					}
					if(KSOperator.gt(minAfter, 0)) {
						var line = fragments.newLine();
						if(!(context.temp === true)) {
							line.code($runtime.scope(node));
							context.temp = true;
						}
						line.code("__ks__ = arguments.length - " + minAfter).done();
					}
					if(!(context.increment === true)) {
						fragments.line("--__ks_i");
						context.increment = true;
					}
					var ctrl = fragments.newControl();
					if(KSOperator.gt(minAfter, 0)) {
						ctrl.code("while(__ks__ > ++__ks_i)");
					}
					else {
						ctrl.code("while(arguments.length > ++__ks_i)");
					}
					ctrl.step();
					var ctrl2 = ctrl.newControl().code("if(");
					parameter.type().toTestFragments(ctrl2, new Literal(false, node, node.scope(), "arguments[__ks_i]"));
					ctrl2.code(")").step();
					if(!(parameter.isAnonymous() === true)) {
						ctrl2.newLine().compile(parameter).code(".push(arguments[__ks_i])").done();
					}
					ctrl2.step().code("else").step();
					if((minAfter !== 0) || (maxAfter !== 0)) {
						ctrl2.line("--__ks_i").line("break");
					}
					else {
						parameter.toErrorFragments(ctrl2, wrongdoer, signature.isAsync());
					}
					ctrl2.done();
					ctrl.done();
					if(parameter.hasDefaultValue() === true) {
						var __ks_ctrl_1 = fragments.newControl().code("if(").compile(parameter).code(".length === 0)").step();
						__ks_ctrl_1.newLine().compile(parameter).code($equals).compile(parameter._defaultValue).done();
						__ks_ctrl_1.done();
					}
					var min = parameter.type().min();
					if(KSOperator.gt(min, 0)) {
						var __ks_ctrl_1 = fragments.newControl().code("if(").compile(parameter).code(".length < " + min + ")").step();
						if(context.async === true) {
							__ks_ctrl_1.newLine().code("return __ks_cb(new SyntaxError(\"The rest parameter must have at least " + min + " argument" + (KSOperator.gt(min, 1) ? "s" : "") + " (\" + ").compile(parameter).code(".length + \")\"))").done();
						}
						else {
							__ks_ctrl_1.newLine().code("throw new SyntaxError(\"The rest parameter must have at least " + min + " argument" + (KSOperator.gt(min, 1) ? "s" : "") + " (\" + ").compile(parameter).code(".length + \")\")").done();
						}
						__ks_ctrl_1.done();
					}
				}
			},
			toRestParameterFragments: function() {
				if(arguments.length === 12) {
					return Parameter.__ks_sttc_toRestParameterFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toRestParameterFragments) {
					return AbstractNode.toRestParameterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toBeforeRestParameterFragments_0: function(fragments, name, signature, parameters, nextIndex, restIndex, context, wrongdoer) {
				if(arguments.length < 8) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(signature === void 0 || signature === null) {
					throw new TypeError("'signature' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(nextIndex === void 0 || nextIndex === null) {
					throw new TypeError("'nextIndex' is not nullable");
				}
				if(restIndex === void 0 || restIndex === null) {
					throw new TypeError("'restIndex' is not nullable");
				}
				if(context === void 0 || context === null) {
					throw new TypeError("'context' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					throw new TypeError("'wrongdoer' is not nullable");
				}
				if(restIndex === -1) {
					for(var i = nextIndex, __ks_0 = parameters.length, parameter; i < __ks_0; ++i) {
						parameter = parameters[i];
						parameter.toBeforeRestFragments(fragments, context, i, false, wrongdoer);
					}
				}
				else {
					for(var i = nextIndex, __ks_0 = Math.min(parameters.length, restIndex), parameter; i < __ks_0; ++i) {
						parameter = parameters[i];
						parameter.toBeforeRestFragments(fragments, context, i, true, wrongdoer);
					}
				}
			},
			toBeforeRestParameterFragments: function() {
				if(arguments.length === 8) {
					return Parameter.__ks_sttc_toBeforeRestParameterFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toBeforeRestParameterFragments) {
					return AbstractNode.toBeforeRestParameterFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_toWrongDoingFragments_0: function(fragments, wrongdoing, data) {
				if(arguments.length < 3) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(wrongdoing === void 0 || wrongdoing === null) {
					throw new TypeError("'wrongdoing' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks_0 = wrongdoing.valueOf();
				if(__ks_0 === ParameterWrongDoing.BadType.value) {
					if(KSType.isValue(data.name)) {
						if(data.async === true) {
							fragments.line("return __ks_cb(new TypeError(\"'" + data.name + "' is not of type " + data.type.toQuote(false) + "\"))");
						}
						else {
							fragments.line("throw new TypeError(\"'" + data.name + "' is not of type " + data.type.toQuote(false) + "\")");
						}
					}
					else {
						if(data.async === true) {
							fragments.line("return __ks_cb(new TypeError(\"Anonymous argument is not of type " + data.type.toQuote(false) + "\"))");
						}
						else {
							fragments.line("throw new TypeError(\"Anonymous argument is not of type " + data.type.toQuote(false) + "\")");
						}
					}
				}
				else if(__ks_0 === ParameterWrongDoing.NotNullable.value) {
					if(data.destructuring === true) {
						if(data.async === true) {
							fragments.line("return __ks_cb(new TypeError(\"Destructuring value is not nullable\"))");
						}
						else {
							fragments.line("throw new TypeError(\"Destructuring value is not nullable\")");
						}
					}
					else {
						if(data.async === true) {
							fragments.line("return __ks_cb(new TypeError(\"'" + data.name + "' is not nullable\"))");
						}
						else {
							fragments.line("throw new TypeError(\"'" + data.name + "' is not nullable\")");
						}
					}
				}
			},
			toWrongDoingFragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toWrongDoingFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toWrongDoingFragments) {
					return AbstractNode.toWrongDoingFragments.apply(null, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._arity = null;
			this._defaultValue = null;
			this._explicitlyRequired = false;
			this._hasDefaultValue = false;
			this._header = false;
			this._maybeHeadedDefaultValue = false;
			this._rest = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Parameter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._anonymous = !KSType.isValue(this._data.name);
			if(this._anonymous) {
				this._name = new AnonymousParameter(this._data, this);
			}
			else {
				this._name = Parameter.compileExpression(this._data.name, this);
				this._name.setAssignment(AssignmentType.Parameter);
				this._name.analyse();
				for(var __ks_0 = 0, __ks_1 = this._name.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
					name = __ks_1[__ks_0];
					if(this._scope.hasDefinedVariable(name) === true) {
						SyntaxException.throwAlreadyDeclared(name, this);
					}
					this._scope.define(name, false, null, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._name.prepare();
			var type = null;
			if(this._data.modifiers.length !== 0) {
				type = this._name.applyModifiers(this._data.modifiers, this);
			}
			if(KSType.isValue(this._data.type) && (type === null)) {
				type = Type.fromAST(this._data.type, this);
			}
			if(type === null) {
				type = this._anonymous ? AnyType.NullableUnexplicit : Type.Any;
			}
			else if(type.isNull() === true) {
				type = NullType.Explicit;
			}
			var min = 1;
			var max = 1;
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
					this._rest = true;
					if(KSType.isValue(modifier.arity)) {
						this._arity = modifier.arity;
						min = modifier.arity.min;
						max = modifier.arity.max;
					}
					else {
						min = 0;
						max = Infinity;
					}
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.Required.value) {
					this._explicitlyRequired = true;
				}
			}
			if(KSType.isValue(this._data.defaultValue)) {
				if(!(type.isNullable() === true) && (KSHelper.valueOf(this._data.defaultValue.kind) === NodeKind.Identifier.value) && (this._data.defaultValue.name === "null")) {
					type = type.setNullable(true);
				}
				if(!(this._explicitlyRequired && (type.isNullable() === true))) {
					this._maybeHeadedDefaultValue = (this._options.format.parameters === "es6") && ((type.isNullable() === true) || !KSType.isInstance(this._name, IdentifierLiteral));
					this._defaultValue = $compile.expression(this._data.defaultValue, this._parent);
					this._defaultValue.analyse();
					this._hasDefaultValue = true;
					if(!this._explicitlyRequired) {
						min = 0;
					}
				}
			}
			var name = (!this._anonymous && KSType.isInstance(this._name, IdentifierLiteral)) ? this._name.name() : null;
			var __ks_default_1 = this._hasDefaultValue ? 1 : 0;
			this._type = new ParameterType(this._scope, name, type, min, max, __ks_default_1);
			this._name.setDeclaredType(this._rest ? Type.arrayOf(type, this._scope) : type, true);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._name.translate();
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addAliasParameter_0: function(data, name, setter) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			var alias = new AliasStatement(data, name, setter, this);
			return this._scope.reference(alias.type());
		},
		addAliasParameter: function() {
			if(arguments.length === 3) {
				return Parameter.prototype.__ks_func_addAliasParameter_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.addAliasParameter) {
				return AbstractNode.prototype.addAliasParameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_arity_0: function() {
			return this._arity;
		},
		arity: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_arity_0.apply(this);
			}
			else if(AbstractNode.prototype.arity) {
				return AbstractNode.prototype.arity.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(AbstractNode.prototype.hasDefaultValue) {
				return AbstractNode.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return this._anonymous;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			else if(AbstractNode.prototype.isAnonymous) {
				return AbstractNode.prototype.isAnonymous.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRequired_0: function() {
			return (this._defaultValue === null) || this._explicitlyRequired;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isRequired_0.apply(this);
			}
			else if(AbstractNode.prototype.isRequired) {
				return AbstractNode.prototype.isRequired.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isRest_0: function() {
			return this._rest;
		},
		isRest: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isRest_0.apply(this);
			}
			else if(AbstractNode.prototype.isRest) {
				return AbstractNode.prototype.isRest.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._hasDefaultValue && (this._defaultValue.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isUsingVariable) {
				return AbstractNode.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_returnType_0: function() {
			return this._type.returnType();
		},
		returnType: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_returnType_0.apply(this);
			}
			else if(AbstractNode.prototype.returnType) {
				return AbstractNode.prototype.returnType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Parameter.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAfterRestFragments_0: function(fragments, context, index, wrongdoer) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			this._name.toAfterRestFragments(fragments, context, index, wrongdoer, this._rest, this._arity, this.isRequired(), this._defaultValue, this._header && this._maybeHeadedDefaultValue, this._parent.type().isAsync());
		},
		toAfterRestFragments: function() {
			if(arguments.length === 4) {
				return Parameter.prototype.__ks_func_toAfterRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAfterRestFragments) {
				return AbstractNode.prototype.toAfterRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBeforeRestFragments_0: function(fragments, context, index, rest, wrongdoer) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			this._name.toBeforeRestFragments(fragments, context, index, wrongdoer, rest, this._arity, this.isRequired(), this._defaultValue, this._header && this._maybeHeadedDefaultValue, this._parent.type().isAsync());
		},
		toBeforeRestFragments: function() {
			if(arguments.length === 5) {
				return Parameter.prototype.__ks_func_toBeforeRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBeforeRestFragments) {
				return AbstractNode.prototype.toBeforeRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toErrorFragments_0: function(fragments, wrongdoer, async) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			this._name.toErrorFragments(fragments, wrongdoer, async);
		},
		toErrorFragments: function() {
			if(arguments.length === 3) {
				return Parameter.prototype.__ks_func_toErrorFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toErrorFragments) {
				return AbstractNode.prototype.toErrorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			this._name.toParameterFragments(fragments);
			if(this._maybeHeadedDefaultValue) {
				fragments.code($equals).compile(this._defaultValue);
			}
			this._header = true;
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toParameterFragments) {
				return AbstractNode.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(AbstractNode.prototype.toQuote) {
				return AbstractNode.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments, wrongdoer) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(this._rest) {
				if(this._hasDefaultValue) {
					var ctrl = fragments.newControl().code("if(").compile(this).code(".length === 0)").step();
					ctrl.newLine().compile(this).code($equals).compile(this._defaultValue).done();
					ctrl.done();
				}
			}
			else {
				this._name.toValidationFragments(fragments, wrongdoer, this._rest, this._defaultValue, this._header && this._maybeHeadedDefaultValue, this._parent.type().isAsync());
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 2) {
				return Parameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toValidationFragments) {
				return AbstractNode.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, ParameterType)) {
				throw new TypeError("'type' is not of type 'ParameterType'");
			}
			this._type = type;
			var t = this._type.type();
			this._name.setDeclaredType(this._rest ? Type.arrayOf(t, this._scope) : t, true);
		},
		type: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_type_1.apply(this, arguments);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AliasStatement = KSHelper.class({
		$name: "AliasStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._sealed = false;
			this._setter = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			AliasStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, identifier, setter, parameter) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(identifier === void 0 || identifier === null) {
				throw new TypeError("'identifier' is not nullable");
			}
			else if(!KSType.isInstance(identifier, IdentifierParameter)) {
				throw new TypeError("'identifier' is not of type 'IdentifierParameter'");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			else if(!KSType.isBoolean(setter)) {
				throw new TypeError("'setter' is not of type 'Boolean'");
			}
			if(parameter === void 0 || parameter === null) {
				throw new TypeError("'parameter' is not nullable");
			}
			else if(!KSType.isInstance(parameter, Parameter)) {
				throw new TypeError("'parameter' is not of type 'Parameter'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parameter.parent()]);
			this._identifier = identifier;
			this._setter = setter;
			this._parameter = parameter;
			this._name = this._identifier.name();
			parameter.parent().addAliasStatement(this);
			this._namedClass = parameter.parent().parent().type();
			var __ks_class_1 = this._namedClass.type();
			if(setter) {
				var __ks_0;
				if(KSType.isValue(__ks_0 = __ks_class_1.getPropertySetter(this._name)) ? (this._type = __ks_0, false) : true) {
					ReferenceException.throwNotDefinedMember(this._name, this._parameter);
				}
			}
			else {
				var __ks_0;
				if(KSType.isValue(__ks_0 = __ks_class_1.getInstanceVariable(this._name)) ? (this._type = __ks_0, true) : false) {
					this._variableName = this._name;
				}
				else if(KSType.isValue(__ks_0 = __ks_class_1.getInstanceVariable("_" + this._name)) ? (this._type = __ks_0, true) : false) {
					if((this._type.isSealed() === true) && (this._type.isInitiatable() === true)) {
						this._sealed = true;
						this._setter = true;
					}
					else {
						this._variableName = "_" + this._name;
					}
				}
				else if(KSType.isValue(__ks_0 = __ks_class_1.getPropertySetter(this._name)) ? (this._type = __ks_0, true) : false) {
					this._setter = true;
				}
				else {
					ReferenceException.throwNotDefinedMember(this._name, this._parameter);
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				AliasStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._setter) {
				if(this._sealed) {
					fragments.newLine().code("" + this._namedClass.getSealedName() + ".__ks_set_" + this._name + "(this, ").compile(this._identifier).code(")").done();
				}
				else {
					fragments.newLine().code("this." + this._name + "(").compile(this._identifier).code(")").done();
				}
			}
			else {
				fragments.newLine().code("this." + this._variableName + " = ").compile(this._identifier).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AliasStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var IdentifierParameter = KSHelper.class({
		$name: "IdentifierParameter",
		$extends: IdentifierLiteral,
		__ks_init: function() {
			IdentifierLiteral.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			IdentifierLiteral.prototype.__ks_cons.call(this, args);
		},
		__ks_func_applyModifiers_0: function(modifiers, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var thisAlias = false;
			var setterAlias = false;
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(KSHelper.valueOf(modifier.kind) === ModifierKind.SetterAlias.value) {
					setterAlias = true;
				}
				else if(KSHelper.valueOf(modifier.kind) === ModifierKind.ThisAlias.value) {
					thisAlias = true;
				}
			}
			if(thisAlias) {
				return node.addAliasParameter(this._data, this, setterAlias);
			}
			else {
				return null;
			}
		},
		applyModifiers: function() {
			if(arguments.length === 2) {
				return IdentifierParameter.prototype.__ks_func_applyModifiers_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.applyModifiers) {
				return IdentifierLiteral.prototype.applyModifiers.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setDeclaredType_0: function(type, definitive) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(definitive === void 0 || definitive === null) {
				throw new TypeError("'definitive' is not nullable");
			}
			var variable = this._scope.getVariable(this._value);
			variable.setDeclaredType(type).setRealType(type).setDefinitive(definitive);
			this._declaredType = this._realType = type;
		},
		setDeclaredType: function() {
			if(arguments.length === 2) {
				return IdentifierParameter.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.setDeclaredType) {
				return IdentifierLiteral.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAfterRestFragments_0: function(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arguments.length < 10) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 10)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(arity === void 0) {
				arity = null;
			}
			if(required === void 0 || required === null) {
				throw new TypeError("'required' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			if(arity !== null) {
				var type = this._declaredType.parameter();
				if(type.isAny() === true) {
					fragments.newLine().code($runtime.scope(this)).compile(this).code(" = Array.prototype.slice.call(" + context.name + ", " + ((context.increment === true) ? "++__ks_i" : "__ks_i") + ", " + ((KSOperator.addOrConcat(index, 1) === context.length) ? "" : "__ks_i = ") + "__ks_i + " + KSOperator.addOrConcat(arity.min, (context.increment === true) ? 1 : 0) + ")").done();
					context.increment = true;
				}
				else {
					if(!(context.temp === true)) {
						fragments.line("" + $runtime.scope(this) + "__ks__");
						context.temp = true;
					}
					fragments.newLine().code($runtime.scope(this)).compile(this).code(" = []").done();
					if(!(context.increment === true)) {
						fragments.line("--__ks_i");
					}
					var line = fragments.newLine();
					if(!(context.tempL === true)) {
						line.code($runtime.scope(this));
						context.tempL = true;
					}
					line.code("__ks_l = __ks_i + " + KSOperator.addOrConcat(arity.min, 1)).done();
					var ctrl = fragments.newControl().code("while(++__ks_i < __ks_l)").step();
					ctrl.line("__ks__ = " + context.name + "[__ks_i]");
					var ctrl2 = ctrl.newControl();
					if(type.isNullable() === true) {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null)").step().newLine().compile(this).code(".push(null)").done().done();
						ctrl2.step().code("else if(!");
					}
					else {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null || !");
					}
					type.toTestFragments(ctrl2, new Literal(false, this, this.scope(), "__ks__"));
					ctrl2.code(")").step();
					if(KSOperator.addOrConcat(index, 1) === context.length) {
						wrongdoer(ctrl2, ParameterWrongDoing.BadType, (function(that) {
							var d = new Dictionary();
							d.async = context.async;
							d.name = that._value;
							d.type = type;
							return d;
						})(this));
					}
					else {
						var ctrl3 = ctrl2.newControl().code("if(").compile(this).code(".length >= " + arity.min + ")").step();
						ctrl3.line("break").step().code("else").step();
						wrongdoer(ctrl3, ParameterWrongDoing.BadType, (function(that) {
							var d = new Dictionary();
							d.async = context.async;
							d.name = that._value;
							d.type = type;
							return d;
						})(this));
						ctrl3.done();
					}
					ctrl2.step().code("else").step().newLine().compile(this).code(".push(__ks__)").done();
					ctrl2.done();
					ctrl.done();
					context.increment = false;
				}
			}
			else if(defaultValue !== null) {
				if(context.any === true) {
					fragments.newLine().code($runtime.scope(this)).compile(this).code($equals).compile(defaultValue).done();
				}
				else {
					if(this._declaredType.isAny() === true) {
						if(!(context.temp === true)) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this).code(" = " + context.name + ".length > ++__ks_i && (__ks__ = " + context.name + "[" + ((context.increment === true) ? "++" : "") + "__ks_i]) !== void 0");
						if(!(this._declaredType.isNullable() === true)) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(defaultValue).done();
					}
					else {
						if(!(context.temp === true)) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this).code(" = " + context.name + ".length > ++__ks_i && (__ks__ = " + context.name + "[__ks_i" + ((context.increment === true) ? " + 1" : "") + "]) !== void 0 && ");
						if(this._declaredType.isNullable() === true) {
							line.code("(__ks__ === null || ");
							this._declaredType.toTestFragments(line, new Literal(false, this, this._scope, "__ks__"));
							line.code(")");
						}
						else {
							this._declaredType.toTestFragments(line, new Literal(false, this, this._scope, "__ks__"));
						}
						line.code((context.increment === true) ? " ? (++__ks_i, __ks__) : " : " ? __ks__ : ").compile(defaultValue).done();
					}
					context.increment = true;
				}
			}
			else {
				fragments.newLine().code($runtime.scope(this)).compile(this).code(" = " + context.name + "[", (context.increment === true) ? "++" : "", "__ks_i]").done();
				this.toValidationFragments(fragments, wrongdoer, rest, defaultValue, header, async);
				context.increment = true;
			}
		},
		toAfterRestFragments: function() {
			if(arguments.length === 10) {
				return IdentifierParameter.prototype.__ks_func_toAfterRestFragments_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.toAfterRestFragments) {
				return IdentifierLiteral.prototype.toAfterRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBeforeRestFragments_0: function(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arguments.length < 10) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 10)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(arity === void 0) {
				arity = null;
			}
			if(required === void 0 || required === null) {
				throw new TypeError("'required' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			if(arity !== null) {
				context.required = KSOperator.subtraction(context.required, arity.min);
				var type = this._declaredType.parameter();
				if(type.isAny() === true) {
					if(KSOperator.gt(context.required, 0)) {
						fragments.newLine().code($runtime.scope(this)).compile(this).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, Math.min(" + context.name + ".length - " + context.required + ", __ks_i + " + KSOperator.addOrConcat(arity.max, 1) + "))").done();
					}
					else {
						fragments.newLine().code($runtime.scope(this)).compile(this).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, Math.min(" + context.name + ".length, __ks_i + " + KSOperator.addOrConcat(arity.max, 1) + "))").done();
					}
					if(KSOperator.lt(KSOperator.addOrConcat(index, 1), context.length)) {
						fragments.newLine().code("__ks_i += ").compile(this).code(".length").done();
					}
				}
				else {
					if(!(context.temp === true)) {
						fragments.line("" + $runtime.scope(this) + "__ks__");
						context.temp = true;
					}
					fragments.newLine().code($runtime.scope(this)).compile(this).code(" = []").done();
					if(!(context.increment === true)) {
						fragments.line("--__ks_i");
					}
					var line = fragments.newLine();
					if(!(context.tempL === true)) {
						line.code($runtime.scope(this));
						context.tempL = true;
					}
					if(KSOperator.gt(context.required, 0)) {
						line.code("__ks_l = Math.min(" + context.name + ".length - " + context.required + ", __ks_i + " + KSOperator.addOrConcat(arity.max, 1) + ")");
					}
					else {
						line.code("__ks_l = Math.min(" + context.name + ".length, __ks_i + " + KSOperator.addOrConcat(arity.max, 1) + ")");
					}
					line.done();
					var ctrl = fragments.newControl().code("while(++__ks_i < __ks_l)").step();
					ctrl.line("__ks__ = " + context.name + "[__ks_i]");
					var ctrl2 = ctrl.newControl();
					if(type.isNullable() === true) {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null)").step().newLine().compile(this).code(".push(null)").done().done();
						ctrl2.step().code("else if(!");
					}
					else {
						ctrl2.code("if(__ks__ === void 0 || __ks__ === null || !");
					}
					type.toTestFragments(ctrl2, new Literal(false, this, this.scope(), "__ks__"));
					ctrl2.code(")").step();
					if(KSOperator.addOrConcat(index, 1) === context.length) {
						wrongdoer(ctrl2, ParameterWrongDoing.BadType, (function(that) {
							var d = new Dictionary();
							d.async = context.async;
							d.name = that._value;
							d.type = type;
							return d;
						})(this));
					}
					else {
						var ctrl3 = ctrl2.newControl().code("if(").compile(this).code(".length >= " + arity.min + ")").step();
						ctrl3.line("break").step().code("else").step();
						wrongdoer(ctrl3, ParameterWrongDoing.BadType, (function(that) {
							var d = new Dictionary();
							d.async = context.async;
							d.name = that._value;
							d.type = type;
							return d;
						})(this));
						ctrl3.done();
					}
					ctrl2.step().code("else").step().newLine().compile(this).code(".push(__ks__)").done();
					ctrl2.done();
					ctrl.done();
					context.increment = false;
				}
				context.optional = KSOperator.addOrConcat(context.optional, KSOperator.subtraction(arity.max, arity.min));
			}
			else {
				if(!(required === true) && (defaultValue !== null)) {
					if(this._declaredType.isAny() === true) {
						if(!(context.temp === true)) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this).code(" = " + context.name + ".length > " + context.optional + " && (__ks__ = " + context.name + "[++__ks_i]) !== void 0");
						if(!(this._declaredType.isNullable() === true)) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(defaultValue).done();
					}
					else {
						fragments.newLine().code($runtime.scope(this)).compile(this).done();
						var fixed = KSOperator.subtraction(context.max, context.min) === 1;
						var ctrl = fragments.newControl();
						if(fixed) {
							ctrl.code("if(" + context.name + ".length > " + context.optional + " && (").compile(this).code(" = " + context.name + "[++__ks_i]) !== void 0");
						}
						else if(KSOperator.gt(context.required, 0)) {
							ctrl.code("if(" + context.name + ".length > __ks_i + " + KSOperator.addOrConcat(context.required, 1) + " && (").compile(this).code(" = " + context.name + "[++__ks_i]) !== void 0");
						}
						else {
							ctrl.code("if(" + context.name + ".length > ++__ks_i && (").compile(this).code(" = " + context.name + "[__ks_i]) !== void 0");
						}
						if(!(this._declaredType.isNullable() === true)) {
							ctrl.code(" && ").compile(this).code(" !== null");
						}
						ctrl.code(")").step();
						var ctrl2 = ctrl.newControl().code("if(");
						if(this._declaredType.isNullable() === true) {
							ctrl2.compile(this).code(" !== null && !");
						}
						else {
							ctrl2.code("!");
						}
						this._declaredType.toTestFragments(ctrl2, this);
						ctrl2.code(")").step();
						if(fixed || (KSOperator.addOrConcat(index, 1) === context.length)) {
							wrongdoer(ctrl2, ParameterWrongDoing.BadType, (function(that) {
								var d = new Dictionary();
								d.async = context.async;
								d.name = that._value;
								d.type = that._declaredType;
								return d;
							})(this));
						}
						else if(rest === true) {
							ctrl2.newLine().compile(this).code($equals).compile(defaultValue).done();
							ctrl2.line("--__ks_i");
						}
						else {
							var ctrl3 = ctrl2.newControl().code("if(arguments.length - __ks_i < " + KSOperator.addOrConcat(KSOperator.subtraction(context.max, context.optional), context.required) + ")").step();
							ctrl3.newLine().compile(this).code($equals).compile(defaultValue).done();
							ctrl3.line("--__ks_i").step().code("else").step();
							wrongdoer(ctrl3, ParameterWrongDoing.BadType, (function(that) {
								var d = new Dictionary();
								d.async = context.async;
								d.name = that._value;
								d.type = that._declaredType;
								return d;
							})(this));
							ctrl3.done();
						}
						ctrl2.done();
						ctrl.step().code("else").step();
						ctrl.newLine().compile(this).code($equals).compile(defaultValue).done();
						ctrl.done();
					}
					++context.optional;
				}
				else {
					fragments.newLine().code($runtime.scope(this)).compile(this).code(" = " + context.name + "[++__ks_i]").done();
					this.toValidationFragments(fragments, wrongdoer, rest, defaultValue, header, async);
					--context.required;
				}
			}
		},
		toBeforeRestFragments: function() {
			if(arguments.length === 10) {
				return IdentifierParameter.prototype.__ks_func_toBeforeRestFragments_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.toBeforeRestFragments) {
				return IdentifierLiteral.prototype.toBeforeRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toErrorFragments_0: function(fragments, wrongdoer, async) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			wrongdoer(fragments, ParameterWrongDoing.BadType, (function(that) {
				var d = new Dictionary();
				d.async = async;
				d.name = that._value;
				d.type = that._declaredType.parameter();
				return d;
			})(this));
		},
		toErrorFragments: function() {
			if(arguments.length === 3) {
				return IdentifierParameter.prototype.__ks_func_toErrorFragments_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.toErrorFragments) {
				return IdentifierLiteral.prototype.toErrorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compile(this);
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return IdentifierParameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.toParameterFragments) {
				return IdentifierLiteral.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments, wrongdoer, rest, defaultValue, header, async) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			var ctrl = null;
			if(defaultValue !== null) {
				if(!(header === true)) {
					ctrl = fragments.newControl().code("if(").compile(this).code(" === void 0");
					if(!(this._declaredType.isNullable() === true)) {
						ctrl.code(" || ").compile(this).code(" === null");
					}
					ctrl.code(")").step();
					ctrl.newLine().compile(this).code($equals).compile(defaultValue).done();
				}
			}
			else {
				if(this._declaredType.isNullable() === true) {
					ctrl = fragments.newControl().code("if(").compile(this).code(" === void 0").code(")").step();
					ctrl.newLine().compile(this).code(" = null").done();
				}
				else if(!(this._options.rules.noParamAssert === true)) {
					ctrl = fragments.newControl().code("if(").compile(this).code(" === void 0").code(" || ").compile(this).code(" === null").code(")").step();
					wrongdoer(ctrl, ParameterWrongDoing.NotNullable, (function(that) {
						var d = new Dictionary();
						d.async = async;
						d.name = that.name();
						return d;
					})(this));
				}
			}
			if(!(this._declaredType.isAny() === true) && !(this._options.rules.noParamAssert === true) && !(this._options.rules.noParamTypeAssert === true)) {
				if(KSType.isValue(ctrl)) {
					ctrl.step().code("else ");
				}
				else {
					ctrl = fragments.newControl();
				}
				ctrl.code("if(");
				if(this._declaredType.isNull() === true) {
					ctrl.compile(this).code(" !== null");
				}
				else {
					if(this._declaredType.isNullable() === true) {
						ctrl.compile(this).code(" !== null && ");
					}
					ctrl.code("!");
					this._declaredType.toTestFragments(ctrl, this);
				}
				ctrl.code(")").step();
				wrongdoer(ctrl, ParameterWrongDoing.BadType, (function(that) {
					var d = new Dictionary();
					d.async = async;
					d.name = that.name();
					d.type = that._declaredType;
					return d;
				})(this));
			}
			if(ctrl !== null) {
				ctrl.done();
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 6) {
				return IdentifierParameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(IdentifierLiteral.prototype.toValidationFragments) {
				return IdentifierLiteral.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ArrayBindingParameter = KSHelper.class({
		$name: "ArrayBindingParameter",
		$extends: ArrayBinding,
		__ks_init: function() {
			ArrayBinding.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ArrayBinding.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			ArrayBinding.prototype.analyse.apply(this, []);
			if(this._flatten) {
				this._tempName = new Literal(this._scope.acquireTempName(false), this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayBindingParameter.prototype.__ks_func_analyse_0.apply(this);
			}
			return ArrayBinding.prototype.analyse.apply(this, arguments);
		},
		__ks_func_addAliasParameter_0: function(data, name, setter) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			return this._parent.addAliasParameter(data, name, setter);
		},
		addAliasParameter: function() {
			if(arguments.length === 3) {
				return ArrayBindingParameter.prototype.__ks_func_addAliasParameter_0.apply(this, arguments);
			}
			else if(ArrayBinding.prototype.addAliasParameter) {
				return ArrayBinding.prototype.addAliasParameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newElement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return new ArrayBindingParameterElement(data, this, this._scope);
		},
		newElement: function() {
			if(arguments.length === 1) {
				return ArrayBindingParameter.prototype.__ks_func_newElement_0.apply(this, arguments);
			}
			return ArrayBinding.prototype.newElement.apply(this, arguments);
		},
		__ks_func_setDeclaredType_0: function(type, definitive) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(definitive === void 0 || definitive === null) {
				definitive = false;
			}
			else if(!KSType.isBoolean(definitive)) {
				throw new TypeError("'definitive' is not of type 'Boolean'");
			}
			if(type.isAny() === true) {
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.setDeclaredType(type, definitive);
				}
			}
			else if(type.isArray() === true) {
				if(type.isReference() === true) {
					var elementType = type.parameter();
					for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
						element = this._elements[__ks_0];
						element.setDeclaredType(elementType, definitive);
					}
				}
				else {
					for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
						element = this._elements[index];
						element.setDeclaredType(type.getElement(index), definitive);
					}
				}
			}
			else {
				TypeException.throwInvalidBinding("Array", this);
			}
		},
		setDeclaredType: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ArrayBindingParameter.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(ArrayBinding.prototype.setDeclaredType) {
				return ArrayBinding.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._flatten) {
				fragments.compile(this._tempName);
			}
			else {
				fragments.compile(this);
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return ArrayBindingParameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(ArrayBinding.prototype.toParameterFragments) {
				return ArrayBinding.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments, wrongdoer, rest, defaultValue, header, async) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			if(this._flatten) {
				var ctrl = fragments.newControl().code("if(").compile(this._tempName).code(" === void 0").code(" || ").compile(this._tempName).code(" === null").code(")").step();
				if(defaultValue !== null) {
					ctrl.newLine().compile(this._tempName).code($equals).compile(defaultValue).done();
				}
				else {
					wrongdoer(ctrl, ParameterWrongDoing.NotNullable, (function(that) {
						var d = new Dictionary();
						d.destructuring = true;
						d.async = async;
						d.name = that._tempName.value();
						return d;
					})(this));
				}
				ctrl.done();
				var line = fragments.newLine().code($runtime.scope(this));
				this._elements[0].toFlatFragments(line, this._tempName);
				for(var __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					line.code(", ");
					element.toFlatFragments(line, this._tempName);
				}
				line.done();
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 6) {
				return ArrayBindingParameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(ArrayBinding.prototype.toValidationFragments) {
				return ArrayBinding.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ArrayBindingParameterElement = KSHelper.class({
		$name: "ArrayBindingParameterElement",
		$extends: ArrayBindingElement,
		__ks_init: function() {
			ArrayBindingElement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ArrayBindingElement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			ArrayBindingElement.prototype.prepare.apply(this, []);
			if(this._named && (this._data.modifiers !== 0)) {
				this._name.applyModifiers(this._data.modifiers, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayBindingParameterElement.prototype.__ks_func_prepare_0.apply(this);
			}
			return ArrayBindingElement.prototype.prepare.apply(this, arguments);
		},
		__ks_func_addAliasParameter_0: function(data, name, setter) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			return this._parent.addAliasParameter(data, name, setter);
		},
		addAliasParameter: function() {
			if(arguments.length === 3) {
				return ArrayBindingParameterElement.prototype.__ks_func_addAliasParameter_0.apply(this, arguments);
			}
			else if(ArrayBindingElement.prototype.addAliasParameter) {
				return ArrayBindingElement.prototype.addAliasParameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileVariable_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return Parameter.compileExpression(data, this);
		},
		compileVariable: function() {
			if(arguments.length === 1) {
				return ArrayBindingParameterElement.prototype.__ks_func_compileVariable_0.apply(this, arguments);
			}
			return ArrayBindingElement.prototype.compileVariable.apply(this, arguments);
		},
		__ks_func_setDeclaredType_0: function(type, definitive) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(definitive === void 0 || definitive === null) {
				throw new TypeError("'definitive' is not nullable");
			}
			this._name.setDeclaredType(type, definitive);
		},
		setDeclaredType: function() {
			if(arguments.length === 2) {
				return ArrayBindingParameterElement.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(ArrayBindingElement.prototype.setDeclaredType) {
				return ArrayBindingElement.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ObjectBindingParameter = KSHelper.class({
		$name: "ObjectBindingParameter",
		$extends: ObjectBinding,
		__ks_init: function() {
			ObjectBinding.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ObjectBinding.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			ObjectBinding.prototype.analyse.apply(this, []);
			if(this._flatten) {
				this._tempName = new Literal(this._scope.acquireTempName(false), this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectBindingParameter.prototype.__ks_func_analyse_0.apply(this);
			}
			return ObjectBinding.prototype.analyse.apply(this, arguments);
		},
		__ks_func_addAliasParameter_0: function(data, name, setter) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			return this._parent.addAliasParameter(data, name, setter);
		},
		addAliasParameter: function() {
			if(arguments.length === 3) {
				return ObjectBindingParameter.prototype.__ks_func_addAliasParameter_0.apply(this, arguments);
			}
			else if(ObjectBinding.prototype.addAliasParameter) {
				return ObjectBinding.prototype.addAliasParameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_newElement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return new ObjectBindingParameterElement(data, this, this._scope);
		},
		newElement: function() {
			if(arguments.length === 1) {
				return ObjectBindingParameter.prototype.__ks_func_newElement_0.apply(this, arguments);
			}
			return ObjectBinding.prototype.newElement.apply(this, arguments);
		},
		__ks_func_setDeclaredType_0: function(type, definitive) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(definitive === void 0 || definitive === null) {
				definitive = false;
			}
			else if(!KSType.isBoolean(definitive)) {
				throw new TypeError("'definitive' is not of type 'Boolean'");
			}
			if(type.isAny() === true) {
				for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					element.setDeclaredType(type, definitive);
				}
			}
			else if(type.isDictionary() === true) {
				if(type.isReference() === true) {
					var elementType = type.parameter();
					for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
						element = this._elements[__ks_0];
						element.setDeclaredType(elementType, definitive);
					}
				}
				else {
					for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
						element = this._elements[__ks_0];
						element.setDeclaredType(type.getProperty(element.name()), definitive);
					}
				}
			}
			else {
				TypeException.throwInvalidBinding("Object", this);
			}
		},
		setDeclaredType: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ObjectBindingParameter.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(ObjectBinding.prototype.setDeclaredType) {
				return ObjectBinding.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._flatten) {
				fragments.compile(this._tempName);
			}
			else {
				fragments.compile(this);
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return ObjectBindingParameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(ObjectBinding.prototype.toParameterFragments) {
				return ObjectBinding.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments, wrongdoer, rest, defaultValue, header, async) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			if(this._flatten) {
				var ctrl = fragments.newControl().code("if(").compile(this._tempName).code(" === void 0").code(" || ").compile(this._tempName).code(" === null").code(")").step();
				if(defaultValue !== null) {
					ctrl.newLine().compile(this._tempName).code($equals).compile(defaultValue).done();
				}
				else {
					wrongdoer(ctrl, ParameterWrongDoing.NotNullable, (function(that) {
						var d = new Dictionary();
						d.destructuring = true;
						d.async = async;
						d.name = that._tempName.value();
						return d;
					})(this));
				}
				ctrl.done();
				var line = fragments.newLine().code($runtime.scope(this));
				this._elements[0].toFlatFragments(line, this._tempName);
				for(var __ks_0 = 1, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
					element = this._elements[__ks_0];
					line.code(", ");
					element.toFlatFragments(line, this._tempName);
				}
				line.done();
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 6) {
				return ObjectBindingParameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(ObjectBinding.prototype.toValidationFragments) {
				return ObjectBinding.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var ObjectBindingParameterElement = KSHelper.class({
		$name: "ObjectBindingParameterElement",
		$extends: ObjectBindingElement,
		__ks_init: function() {
			ObjectBindingElement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ObjectBindingElement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			ObjectBindingElement.prototype.prepare.apply(this, []);
			if(this._data.modifiers !== 0) {
				this._alias.applyModifiers(this._data.modifiers, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectBindingParameterElement.prototype.__ks_func_prepare_0.apply(this);
			}
			return ObjectBindingElement.prototype.prepare.apply(this, arguments);
		},
		__ks_func_addAliasParameter_0: function(data, name, setter) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			return this._parent.addAliasParameter(data, name, setter);
		},
		addAliasParameter: function() {
			if(arguments.length === 3) {
				return ObjectBindingParameterElement.prototype.__ks_func_addAliasParameter_0.apply(this, arguments);
			}
			else if(ObjectBindingElement.prototype.addAliasParameter) {
				return ObjectBindingElement.prototype.addAliasParameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_compileVariable_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return Parameter.compileExpression(data, this);
		},
		compileVariable: function() {
			if(arguments.length === 1) {
				return ObjectBindingParameterElement.prototype.__ks_func_compileVariable_0.apply(this, arguments);
			}
			return ObjectBindingElement.prototype.compileVariable.apply(this, arguments);
		},
		__ks_func_setDeclaredType_0: function(type, definitive) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(definitive === void 0 || definitive === null) {
				throw new TypeError("'definitive' is not nullable");
			}
			this._alias.setDeclaredType(type, definitive);
		},
		setDeclaredType: function() {
			if(arguments.length === 2) {
				return ObjectBindingParameterElement.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(ObjectBindingElement.prototype.setDeclaredType) {
				return ObjectBindingElement.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AnonymousParameter = KSHelper.class({
		$name: "AnonymousParameter",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AnonymousParameter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._name = this._scope.acquireTempName(false);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AnonymousParameter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return AnonymousParameter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_applyModifiers_0: function(modifiers, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return null;
		},
		applyModifiers: function() {
			if(arguments.length === 2) {
				return AnonymousParameter.prototype.__ks_func_applyModifiers_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.applyModifiers) {
				return AbstractNode.prototype.applyModifiers.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setDeclaredType_0: function(type, definitive) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(definitive === void 0 || definitive === null) {
				throw new TypeError("'definitive' is not nullable");
			}
			this._type = type;
		},
		setDeclaredType: function() {
			if(arguments.length === 2) {
				return AnonymousParameter.prototype.__ks_func_setDeclaredType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.setDeclaredType) {
				return AbstractNode.prototype.setDeclaredType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AnonymousParameter.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBeforeRestFragments_0: function(fragments, context, index, wrongdoer, rest, arity, required, defaultValue, header, async) {
			if(arguments.length < 10) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 10)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(arity === void 0) {
				arity = null;
			}
			if(required === void 0 || required === null) {
				throw new TypeError("'required' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			if(arity !== null) {
				throw new NotImplementedException(this);
			}
			else {
				if(this._type.isAny() === true) {
					fragments.line("++__ks_i");
				}
				else {
					fragments.newLine().code($runtime.scope(this)).compile(this).code(" = " + context.name + "[++__ks_i]").done();
					this.toValidationFragments(fragments, wrongdoer, rest, defaultValue, header, async);
				}
				--context.required;
			}
		},
		toBeforeRestFragments: function() {
			if(arguments.length === 10) {
				return AnonymousParameter.prototype.__ks_func_toBeforeRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBeforeRestFragments) {
				return AbstractNode.prototype.toBeforeRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compile(this);
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return AnonymousParameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toParameterFragments) {
				return AbstractNode.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments, wrongdoer, rest, defaultValue, header, async) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(rest === void 0 || rest === null) {
				throw new TypeError("'rest' is not nullable");
			}
			if(defaultValue === void 0) {
				defaultValue = null;
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			if(!(this._type.isAny() === true) && !(this._options.rules.noParamAssert === true) && !(this._options.rules.noParamTypeAssert === true)) {
				var ctrl = fragments.newControl().code("if(");
				if(this._type.isNullable() === true) {
					ctrl.compile(this).code(" !== null && ");
				}
				ctrl.code("!");
				this._type.toTestFragments(ctrl, this);
				ctrl.code(")").step();
				wrongdoer(ctrl, ParameterWrongDoing.BadType, (function(that) {
					var d = new Dictionary();
					d.async = async;
					d.type = that._type;
					return d;
				})(this));
				ctrl.done();
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 6) {
				return AnonymousParameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toValidationFragments) {
				return AbstractNode.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var StructDeclaration = KSHelper.class({
		$name: "StructDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._array = false;
			this._fields = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			StructDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var named = false;
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				var __ks_2 = modifier.kind.valueOf();
				if(__ks_2 === ModifierKind.Array.value) {
					this._array = true;
				}
				else if(__ks_2 === ModifierKind.Named.value) {
					named = true;
				}
			}
			if(this._array) {
				this._struct = named ? new NamedArrayStructType(this._scope) : new ArrayStructType(this._scope);
			}
			else {
				this._struct = new ObjectStructType(this._scope);
			}
			this._type = new NamedType(this._name, this._struct);
			this._variable = this._scope.define(this._name, true, this._type, this);
			this._function = new StructFunction(this);
			for(var index = 0, __ks_0 = this._data.fields.length, data; index < __ks_0; ++index) {
				data = this._data.fields[index];
				var field = new StructFieldDeclaration(index, data, this);
				field.analyse();
				this._fields.push(field);
			}
			this._function.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return StructDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				field.prepare();
				this._struct.addField(field.type());
			}
			this._function.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return StructDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
				field = this._fields[__ks_0];
				field.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return StructDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toArrayFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine().code("return [");
			for(var i = 0, __ks_0 = this._fields.length, field; i < __ks_0; ++i) {
				field = this._fields[i];
				if(i !== 0) {
					line.code($comma);
				}
				line.compile(field.parameter().name());
			}
			line.code("]").done();
		},
		toArrayFragments: function() {
			if(arguments.length === 2) {
				return StructDeclaration.prototype.__ks_func_toArrayFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toArrayFragments) {
				return Statement.prototype.toArrayFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toObjectFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._fields.length === 0) {
				fragments.line("return new " + $runtime.dictionary(this));
			}
			else {
				var varname = "_";
				fragments.line($const(this), varname, " = new ", $runtime.dictionary(this), "()");
				for(var __ks_0 = 0, __ks_1 = this._fields.length, field; __ks_0 < __ks_1; ++__ks_0) {
					field = this._fields[__ks_0];
					fragments.newLine().code(varname, ".").compile(field.parameter().name()).code($equals).compile(field.parameter().name()).done();
				}
				fragments.line("return " + varname);
			}
		},
		toObjectFragments: function() {
			if(arguments.length === 2) {
				return StructDeclaration.prototype.__ks_func_toObjectFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toObjectFragments) {
				return Statement.prototype.toObjectFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine().code("var " + this._name + " = " + $runtime.helper(this) + ".struct(");
			var ctrl = line.newControl(null, false, false).code("function(");
			Parameter.toFragments(this._function, ctrl, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(")").step();
			});
			if(this._array) {
				this.toArrayFragments(ctrl, mode);
			}
			else {
				this.toObjectFragments(ctrl, mode);
			}
			ctrl.done();
			line.code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return StructDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var StructFunction = KSHelper.class({
		$name: "StructFunction",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(parent) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [parent._data, parent]);
			this._type = new FunctionType(this._scope);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				StructFunction.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = KSHelper.mapArray(this._parent._fields, function(field) {
				return field.parameter();
			});
		},
		analyse: function() {
			if(arguments.length === 0) {
				return StructFunction.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				this._type.addParameter(parameter.type());
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return StructFunction.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return StructFunction.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return StructFunction.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(AbstractNode.prototype.parameters) {
				return AbstractNode.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return StructFunction.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var StructFieldDeclaration = KSHelper.class({
		$name: "StructFieldDeclaration",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._hasName = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			StructFieldDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(index, data, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent]);
			this._index = index;
			if(KSType.isValue(data.name)) {
				this._name = data.name.name;
				this._hasName = true;
			}
			this._parameter = new StructFieldParameter(this, parent._function);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				StructFieldDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._parameter.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._parameter.prepare();
			this._type = new StructFieldType(this._scope, KSType.isValue(this._data.name) ? this._data.name.name : null, this._index, Type.fromAST(this._data.type, this), this._parameter.isRequired());
		},
		prepare: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._parameter.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasName_0: function() {
			return this._hasName;
		},
		hasName: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_hasName_0.apply(this);
			}
			else if(AbstractNode.prototype.hasName) {
				return AbstractNode.prototype.hasName.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		index: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_index_0.apply(this);
			}
			else if(AbstractNode.prototype.index) {
				return AbstractNode.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return this._parameter;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(AbstractNode.prototype.parameter) {
				return AbstractNode.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return StructFieldDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var StructFieldParameter = KSHelper.class({
		$name: "StructFieldParameter",
		$extends: Parameter,
		__ks_init: function() {
			Parameter.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(field, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(field === void 0 || field === null) {
				throw new TypeError("'field' is not nullable");
			}
			else if(!KSType.isInstance(field, StructFieldDeclaration)) {
				throw new TypeError("'field' is not of type 'StructFieldDeclaration'");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Parameter.prototype.__ks_cons.call(this, [field._data, parent]);
			this._field = field;
			this._data.modifiers = [];
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				StructFieldParameter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(this._field.hasName() === true) {
				this._name = new IdentifierParameter(this._data.name, this, this._scope);
			}
			else {
				this._name = new IdentifierParameter((function(that) {
					var d = new Dictionary();
					d.name = that._scope.acquireTempName(false);
					return d;
				})(this), this, this._scope);
			}
			this._name.setAssignment(AssignmentType.Parameter);
			this._name.analyse();
			for(var __ks_0 = 0, __ks_1 = this._name.listAssignments([]), __ks_2 = __ks_1.length, name; __ks_0 < __ks_2; ++__ks_0) {
				name = __ks_1[__ks_0];
				this._scope.define(name, false, null, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return StructFieldParameter.prototype.__ks_func_analyse_0.apply(this);
			}
			return Parameter.prototype.analyse.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return StructFieldParameter.prototype.__ks_func_name_0.apply(this);
			}
			else if(Parameter.prototype.name) {
				return Parameter.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentType = KSHelper.enum(Number, {
		Declaration: 0,
		Expression: 1,
		Neither: 2,
		Parameter: 3
	});
	var OperandType = KSHelper.enum(Number, {
		Any: 0,
		Number: 1,
		String: 2
	});
	var Operator = KSHelper.enum(String, {
		Addition: "additive",
		And: "and",
		BitwiseAnd: "bitwise-and",
		BitwiseLeftShift: "bitwise-left-shift",
		BitwiseNot: "bitwise-not",
		BitwiseOr: "bitwise-or",
		BitwiseRightShift: "bitwise-right-shift",
		BitwiseXor: "bitwise-xor",
		DecrementPostfix: "postfix-decrement",
		DecrementPrefix: "prefix-decrement",
		Division: "divisive",
		GreaterThan: "greater-than",
		GreaterThanOrEqual: "greater-than-or-equal",
		Imply: "imply",
		IncrementPostfix: "postfix-increment",
		IncrementPrefix: "prefix-increment",
		LessThan: "less-than",
		LessThanOrEqual: "less-than-or-equal",
		Modulo: "modulo",
		Multiplication: "multiplicative",
		Negation: "negation",
		Negative: "negative",
		Or: "or",
		Quotient: "quotient",
		Subtraction: "subtractive",
		Xor: "xor"
	});
	var $operatorTypes = (function() {
		var d = new Dictionary();
		d[Operator.Addition] = ["Number"];
		d[Operator.And] = ["Boolean"];
		d[Operator.BitwiseAnd] = ["Number"];
		d[Operator.BitwiseLeftShift] = ["Number"];
		d[Operator.BitwiseNot] = ["Number"];
		d[Operator.BitwiseOr] = ["Number"];
		d[Operator.BitwiseRightShift] = ["Number"];
		d[Operator.BitwiseXor] = ["Number"];
		d[Operator.DecrementPostfix] = ["Number"];
		d[Operator.DecrementPrefix] = ["Number"];
		d[Operator.Division] = ["Number"];
		d[Operator.GreaterThan] = ["Number"];
		d[Operator.GreaterThanOrEqual] = ["Number"];
		d[Operator.Imply] = ["Boolean"];
		d[Operator.IncrementPostfix] = ["Number"];
		d[Operator.IncrementPrefix] = ["Number"];
		d[Operator.LessThan] = ["Number"];
		d[Operator.LessThanOrEqual] = ["Number"];
		d[Operator.Modulo] = ["Number"];
		d[Operator.Multiplication] = ["Number"];
		d[Operator.Negation] = ["Boolean"];
		d[Operator.Negative] = ["Number"];
		d[Operator.Or] = ["Boolean"];
		d[Operator.Quotient] = ["Number"];
		d[Operator.Subtraction] = ["Number"];
		d[Operator.Xor] = ["Boolean"];
		return d;
	})();
	var AssignmentOperatorExpression = KSHelper.class({
		$name: "AssignmentOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._left = null;
			this._right = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AssignmentOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			if(this.isDeclararing() === true) {
				this._left.setAssignment(AssignmentType.Expression);
			}
			this._left.analyse();
			this._bindingScope = this.newScope(this._scope, ScopeType.Hollow);
			this._right = $compile.expression(this._data.right, this, this._bindingScope);
			this._right.setAssignment(AssignmentType.Expression);
			this._right.analyse();
			this._await = this._right.isAwait();
			if(this.isDeclararing() === true) {
				this.defineVariables(this._left);
			}
			else {
				if(KSType.isInstance(this._left, IdentifierLiteral)) {
					var variable = this._scope.getVariable(this._left.name());
					if(KSType.isValue(variable)) {
						if(variable.isImmutable() === true) {
							ReferenceException.throwImmutable(this._left.name(), this);
						}
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			if(!(this._left.isAssignable() === true)) {
				ReferenceException.throwInvalidAssignment(this);
			}
			this._right.prepare();
			if(this._right.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._right, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_defineVariables_0: function(left) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(left === void 0 || left === null) {
				throw new TypeError("'left' is not nullable");
			}
			var leftMost = true;
			var expression = this;
			while(!KSType.isInstance(expression.parent(), Statement)) {
				expression = expression.parent();
				leftMost = false;
			}
			expression.parent().defineVariables(left, this._scope, expression, leftMost);
		},
		defineVariables: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_defineVariables_0.apply(this, arguments);
			}
			else if(Expression.prototype.defineVariables) {
				return Expression.prototype.defineVariables.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._right.isAwaiting();
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isDeclararing_0: function() {
			return false;
		},
		isDeclararing: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isDeclararing_0.apply(this);
			}
			else if(Expression.prototype.isDeclararing) {
				return Expression.prototype.isDeclararing.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return (this.isDeclararing() === true) && (this._left.isDeclararingVariable(name) === true);
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExpectingType_0: function() {
			return this._left.isExpectingType();
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			return Expression.prototype.isExpectingType.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._left.isUsingVariable(name) === true) || (this._right.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_listAssignments_0: function(array) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			return this._left.listAssignments(this._right.listAssignments(array));
		},
		listAssignments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_listAssignments_0.apply(this, arguments);
			}
			else if(Expression.prototype.listAssignments) {
				return Expression.prototype.listAssignments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_setAssignment_0: function(assignment) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(assignment === void 0 || assignment === null) {
				throw new TypeError("'assignment' is not nullable");
			}
		},
		setAssignment: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_setAssignment_0.apply(this, arguments);
			}
			return Expression.prototype.setAssignment.apply(this, arguments);
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compileNullable(this._right);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_variable_0: function() {
			return this._left.variable();
		},
		variable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_variable_0.apply(this);
			}
			else if(Expression.prototype.variable) {
				return Expression.prototype.variable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NumericAssignmentOperatorExpression = KSHelper.class({
		$name: "NumericAssignmentOperatorExpression",
		$extends: AssignmentOperatorExpression,
		__ks_init_1: function() {
			this._isEnum = false;
			this._isNative = false;
		},
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
			NumericAssignmentOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			AssignmentOperatorExpression.prototype.prepare.apply(this, []);
			if((this.isAcceptingEnum() === true) && (this._left.type().isEnum() === true) && (this._right.type().isEnum() === true) && (this._left.type().name() === this._right.type().name())) {
				this._isEnum = true;
				this._type = this._left.type();
			}
			else {
				if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
					this._isNative = true;
				}
				else if(this._left.type().canBeNumber() === true) {
					if(!(this._right.type().canBeNumber() === true)) {
						TypeException.throwInvalidOperand(this._right, this.operator(), this);
					}
				}
				else {
					TypeException.throwInvalidOperand(this._left, this.operator(), this);
				}
				if((this._left.type().isNullable() === true) || (this._right.type().isNullable() === true)) {
					this._type = this._scope.reference("Number").setNullable(true);
					this._isNative = false;
				}
				else {
					this._type = this._scope.reference("Number");
				}
				if(KSType.isInstance(this._left, IdentifierLiteral)) {
					this._left.type(this._type, this._scope, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_getBinarySymbol_0: function() {
			return "";
		},
		getBinarySymbol: function() {
			if(arguments.length === 0) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_getBinarySymbol_0.apply(this);
			}
			else if(AssignmentOperatorExpression.prototype.getBinarySymbol) {
				return AssignmentOperatorExpression.prototype.getBinarySymbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAcceptingEnum_0: function() {
			return false;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			else if(AssignmentOperatorExpression.prototype.isAcceptingEnum) {
				return AssignmentOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._isEnum) {
				fragments.compile(this._left).code($equals, this._type.name(), "(").compile(this._left).code($space, this.getBinarySymbol(), $space).compile(this._right).code(")");
			}
			else if(this._isNative) {
				this.toNativeFragments(fragments);
			}
			else {
				fragments.compile(this._left).code(" = ").code($runtime.operator(this), "." + this.runtime() + "(").compile(this._left).code($comma);
				this._right.toOperandFragments(fragments, this.operator(), OperandType.Number);
				fragments.code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNativeFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compile(this._left).code($space).code(this.symbol(), this._data.operator).code($space).compile(this._right);
		},
		toNativeFragments: function() {
			if(arguments.length === 1) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toNativeFragments) {
				return AssignmentOperatorExpression.prototype.toNativeFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "" + this._left.toQuote() + " " + this.symbol() + " " + this._right.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NumericAssignmentOperatorExpression.prototype.__ks_func_type_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var AssignmentOperatorAddition = KSHelper.class({
		$name: "AssignmentOperatorAddition",
		$extends: AssignmentOperatorExpression,
		__ks_init_1: function() {
			this._isNative = false;
			this._isNumber = false;
			this._isString = false;
		},
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
			AssignmentOperatorAddition.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			AssignmentOperatorExpression.prototype.prepare.apply(this, []);
			if((this._left.type().isString() === true) || (this._right.type().isString() === true)) {
				this._isString = true;
				this._isNative = true;
			}
			else if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
				this._isNumber = true;
				this._isNative = true;
			}
			else if(((this._left.type().canBeString(false) === true) && !(this._left.type().canBeNumber(false) === true)) || ((this._right.type().canBeString(false) === true) && !(this._right.type().canBeNumber(false) === true))) {
				this._isString = true;
			}
			else if((this._left.type().isAny() === true) || (this._right.type().isAny() === true)) {
			}
			else if(this._left.type().canBeNumber() === true) {
				if(!(this._left.type().canBeString(false) === true)) {
					if(this._right.type().canBeNumber() === true) {
						if(!(this._right.type().canBeString(false) === true)) {
							this._isNumber = true;
						}
					}
					else {
						TypeException.throwInvalidOperand(this._right, Operator.Addition, this);
					}
				}
			}
			else {
				TypeException.throwInvalidOperand(this._left, Operator.Addition, this);
			}
			var nullable = (this._left.type().isNullable() === true) || (this._right.type().isNullable() === true);
			if(nullable) {
				this._isNative = false;
			}
			if(this._isNumber) {
				this._type = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
			}
			else if(this._isString) {
				this._type = this._scope.reference("String");
			}
			else {
				var numberType = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
				this._type = new UnionType(this._scope, [numberType, this._scope.reference("String")], false);
			}
			if(KSType.isInstance(this._left, IdentifierLiteral)) {
				this._left.type(this._type, this._scope, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorAddition.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._isNative) {
				fragments.compile(this._left).code(" += ").compile(this._right);
			}
			else {
				fragments.compile(this._left).code(" = ");
				var type;
				if(this._isNumber) {
					fragments.code($runtime.operator(this), ".addition(");
					type = OperandType.Number;
				}
				else if(this._isString) {
					fragments.code($runtime.helper(this), ".concatString(");
					type = OperandType.String;
				}
				else {
					fragments.code($runtime.operator(this), ".addOrConcat(");
					type = OperandType.Any;
				}
				fragments.compile(this._left).code($comma);
				this._right.toOperandFragments(fragments, Operator.Addition, type);
				fragments.code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorAddition.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var AssignmentOperatorBitwiseAnd = KSHelper.class({
		$name: "AssignmentOperatorBitwiseAnd",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_getBinarySymbol_0: function() {
			return "&";
		},
		getBinarySymbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_getBinarySymbol_0.apply(this);
			}
			return NumericAssignmentOperatorExpression.prototype.getBinarySymbol.apply(this, arguments);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericAssignmentOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseAnd;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseAnd";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "&=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseLeftShift = KSHelper.class({
		$name: "AssignmentOperatorBitwiseLeftShift",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseLeftShift;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseLeftShift.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseLeftShift";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseLeftShift.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "<<=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseLeftShift.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseOr = KSHelper.class({
		$name: "AssignmentOperatorBitwiseOr",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_getBinarySymbol_0: function() {
			return "|";
		},
		getBinarySymbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_getBinarySymbol_0.apply(this);
			}
			return NumericAssignmentOperatorExpression.prototype.getBinarySymbol.apply(this, arguments);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericAssignmentOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseOr;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseOr";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "|=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseRightShift = KSHelper.class({
		$name: "AssignmentOperatorBitwiseRightShift",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseRightShift;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseRightShift.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseRightShift";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseRightShift.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return ">>=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseRightShift.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseXor = KSHelper.class({
		$name: "AssignmentOperatorBitwiseXor",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseXor;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseXor.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseXor";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseXor.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "^=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorBitwiseXor.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorDivision = KSHelper.class({
		$name: "AssignmentOperatorDivision",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Division;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorDivision.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "division";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorDivision.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "/=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorDivision.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorEquality = KSHelper.class({
		$name: "AssignmentOperatorEquality",
		$extends: AssignmentOperatorExpression,
		__ks_init_1: function() {
			this._ignorable = false;
		},
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
			AssignmentOperatorEquality.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			AssignmentOperatorExpression.prototype.prepare.apply(this, []);
			if(KSType.isInstance(this._left, IdentifierLiteral) && (KSType.isInstance(this._right, IdentifierLiteral) || KSType.isInstance(this._right, BinaryOperatorTypeCasting))) {
				this._ignorable = this._left.name() === this._right.name();
			}
			this._type = this._left.getDeclaredType();
			if(this.isInDestructor() === true) {
				this._type = NullType.Explicit;
			}
			else {
				if(!(this._right.type().matchContentOf(this._type) === true)) {
					TypeException.throwInvalidAssignement(this._left.path(), this._type, this._right.type(), this);
				}
				if((this._left.isInferable() === true) && (this._right.type().isMorePreciseThan(this._type) === true)) {
					this._type = this._right.type();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._right.acquireReusable(this._left.isSplitAssignment());
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return (this._right.isAwaiting() === true) && (this._right.hasExceptions() === true);
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._type;
					return d;
				})(this);
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return this._left.isAssignable();
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isDeclarable_0: function() {
			return this._left.isDeclarable();
		},
		isDeclarable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_isDeclarable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isDeclarable.apply(this, arguments);
		},
		__ks_func_isDeclararing_0: function() {
			return true;
		},
		isDeclararing: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_isDeclararing_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isDeclararing.apply(this, arguments);
		},
		__ks_func_isIgnorable_0: function() {
			return this._ignorable;
		},
		isIgnorable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_isIgnorable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isIgnorable.apply(this, arguments);
		},
		__ks_func_isInDestructor_0: function() {
			if(!KSType.isInstance(this._parent, ExpressionStatement)) {
				return false;
			}
			var parent = this._parent;
			while(KSType.isValue(parent)) {
				parent = parent.parent();
				if(KSType.isInstance(parent, ClassDestructorDeclaration)) {
					return true;
				}
			}
			return false;
		},
		isInDestructor: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_isInDestructor_0.apply(this);
			}
			else if(AssignmentOperatorExpression.prototype.isInDestructor) {
				return AssignmentOperatorExpression.prototype.isInDestructor.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isAwaiting() === true) {
				return this._right.toFragments(fragments, mode);
			}
			else if(this._left.isUsingSetter() === true) {
				this._left.toSetterFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toAssignmentFragments) {
				return AssignmentOperatorExpression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code($equals).wrap(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return "" + this._left.toQuote() + " = " + this._right.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_toQuote_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_type_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var AssignmentOperatorExistential = KSHelper.class({
		$name: "AssignmentOperatorExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			AssignmentOperatorExpression.prototype.prepare.apply(this, []);
			this._right.acquireReusable(true);
			this._right.releaseReusable();
			if(KSType.isInstance(this._left, IdentifierLiteral)) {
				this._left.type(this._right.type().setNullable(false), this._scope, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._right.type().setNullable(false);
					return d;
				})(this);
			}
			return inferables;
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExistential.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_isDeclararing_0: function() {
			return true;
		},
		isDeclararing: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_isDeclararing_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isDeclararing.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ");
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).wrap(this._right);
			}
			fragments.code(" : null");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (");
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).wrap(this._right);
			}
			fragments.code(", true) : false");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return "" + this._left.toQuote() + " ?= " + this._right.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_toQuote_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_type_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var AssignmentOperatorModulo = KSHelper.class({
		$name: "AssignmentOperatorModulo",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Modulo;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorModulo.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "modulo";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorModulo.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "%=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorModulo.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorMultiplication = KSHelper.class({
		$name: "AssignmentOperatorMultiplication",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Multiplication;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorMultiplication.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "multiplication";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorMultiplication.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "*=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorMultiplication.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorNonExistential = KSHelper.class({
		$name: "AssignmentOperatorNonExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			AssignmentOperatorExpression.prototype.prepare.apply(this, []);
			this._right.acquireReusable(true);
			this._right.releaseReusable();
			if(KSType.isInstance(this._left, IdentifierLiteral)) {
				this._left.type(this._right.type().setNullable(false), this._scope, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._right.type().setNullable(false);
					return d;
				})(this);
			}
			return inferables;
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_isDeclararing_0: function() {
			return true;
		},
		isDeclararing: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_isDeclararing_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isDeclararing.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : null");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable() === true) {
				fragments.wrapNullable(this._right).code(" && ").code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", false) : true");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_type_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var AssignmentOperatorNullCoalescing = KSHelper.class({
		$name: "AssignmentOperatorNullCoalescing",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._left.isNullable() === true) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(KSHelper.concatString(" && ", $runtime.type(this), ".isValue(")).compile(this._left).code("))");
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue(")).compile(this._left).code(")");
			}
			fragments.code(" ? null : ").compile(this._left).code($equals).compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(!");
			if(this._left.isNullable() === true) {
				ctrl.code("(");
				this._left.toNullableFragments(ctrl);
				ctrl.code(KSHelper.concatString(" && ", $runtime.type(this), ".isValue(")).compile(this._left).code("))");
			}
			else {
				ctrl.code(KSHelper.concatString($runtime.type(this), ".isValue(")).compile(this._left).code(")");
			}
			ctrl.code(")").step().newLine().compile(this._left).code($equals).compile(this._right).done();
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toStatementFragments) {
				return AssignmentOperatorExpression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var AssignmentOperatorQuotient = KSHelper.class({
		$name: "AssignmentOperatorQuotient",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Quotient;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorQuotient.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "quotient";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorQuotient.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "/.=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorQuotient.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNativeFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compile(this._left).code($equals).code("Number.parseInt(").compile(this._left).code(" / ").compile(this._right).code(")");
		},
		toNativeFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorQuotient.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			return NumericAssignmentOperatorExpression.prototype.toNativeFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorSubtraction = KSHelper.class({
		$name: "AssignmentOperatorSubtraction",
		$extends: NumericAssignmentOperatorExpression,
		__ks_init: function() {
			NumericAssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericAssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Subtraction;
		},
		operator: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorSubtraction.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.operator) {
				return NumericAssignmentOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "subtraction";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorSubtraction.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.runtime) {
				return NumericAssignmentOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "-=";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorSubtraction.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericAssignmentOperatorExpression.prototype.symbol) {
				return NumericAssignmentOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorExpression = KSHelper.class({
		$name: "PolyadicOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._operands = [];
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			PolyadicOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.operands.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.operands[__ks_0];
				var operand = $compile.expression(data, this);
				operand.analyse();
				this._operands.push(operand);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.acquireReusable(false);
				operand.releaseReusable();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullable() === true) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var test = (this.isNullable() === true) && !this._tested;
			if(test) {
				fragments.compileNullable(this).code(" ? ");
			}
			this.toOperatorFragments(fragments);
			if(test) {
				fragments.code(" : false");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				var nf = false;
				for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable() === true) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	var NumericPolyadicOperatorExpression = KSHelper.class({
		$name: "NumericPolyadicOperatorExpression",
		$extends: PolyadicOperatorExpression,
		__ks_init_1: function() {
			this._isEnum = false;
			this._isNative = false;
		},
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
			NumericPolyadicOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			PolyadicOperatorExpression.prototype.prepare.apply(this, []);
			if((this.isAcceptingEnum() === true) && (this._operands[0].type().isEnum() === true)) {
				var name = this._operands[0].type().name();
				this._isEnum = true;
				for(var __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(!(operand.type().isEnum() === true) || (operand.type().name() !== name)) {
						this._isEnum = false;
						break;
					}
				}
				if(this._isEnum) {
					this._type = this._operands[0].type();
				}
			}
			if(!this._isEnum) {
				var nullable = false;
				this._isNative = true;
				for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.type().isNullable() === true) {
						nullable = true;
						this._isNative = false;
					}
					if(operand.type().isNumber() === true) {
					}
					else if(operand.type().canBeNumber() === true) {
						this._isNative = false;
					}
					else {
						TypeException.throwInvalidOperand(operand, this.operator(), this);
					}
				}
				this._type = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_translate_0: function() {
			PolyadicOperatorExpression.prototype.translate.apply(this, []);
			if(this._isEnum) {
				var type = this._parent.type();
				if(KSType.isInstance(this._parent, AssignmentOperatorEquality) || KSType.isInstance(this._parent, VariableDeclaration)) {
					if(type.isEnum() === true) {
						if(this._type.name() !== type.name()) {
							this._isEnum = false;
							this._isNative = true;
						}
					}
					else if(type.isNumber() === true) {
						this._isEnum = false;
						this._isNative = true;
					}
				}
				else if((type.isBoolean() === true) || ((type.isEnum() === true) && (this._type.name() === type.name()))) {
					this._isEnum = false;
					this._isNative = true;
				}
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.translate.apply(this, arguments);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return false;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.isAcceptingEnum) {
				return PolyadicOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return this._isNative;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toNativeFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments.code($space).code(this.symbol(), this._data.operator).code($space);
				}
				fragments.wrap(operand);
			}
		},
		toNativeFragments: function() {
			if(arguments.length === 1) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toNativeFragments) {
				return PolyadicOperatorExpression.prototype.toNativeFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toOperandFragments_0: function(fragments, operator, type) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(operator === void 0 || operator === null) {
				throw new TypeError("'operator' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if((operator === this.operator()) && (type.valueOf() === OperandType.Number.value)) {
				for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toOperandFragments: function() {
			if(arguments.length === 3) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_toOperandFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toOperandFragments.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isEnum) {
				fragments.code(this._type.name(), "(");
				this.toNativeFragments(fragments);
				fragments.code(")");
			}
			else if(this._isNative) {
				this.toNativeFragments(fragments);
			}
			else {
				fragments.code($runtime.operator(this), "." + this.runtime() + "(");
				for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
				fragments.code(")");
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var fragments = "";
			for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments += " " + this.symbol() + " ";
				}
				fragments = KSHelper.concatString(fragments, operand.toQuote());
			}
			return fragments;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NumericPolyadicOperatorExpression.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var PolyadicOperatorAddition = KSHelper.class({
		$name: "PolyadicOperatorAddition",
		$extends: PolyadicOperatorExpression,
		__ks_init_1: function() {
			this._isNative = false;
			this._isNumber = false;
			this._isString = false;
		},
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
			PolyadicOperatorAddition.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			PolyadicOperatorExpression.prototype.prepare.apply(this, []);
			var nullable = false;
			this._isNative = true;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.type().isNullable() === true) {
					nullable = true;
					this._isNative = false;
				}
				if(operand.type().isString() === true) {
					this._isString = true;
				}
				else if((operand.type().canBeString(false) === true) && !(operand.type().canBeNumber(false) === true)) {
					this._isString = true;
					this._isNative = false;
				}
			}
			if(!this._isString) {
				this._isNumber = true;
				var notNumber = null;
				for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1 && (this._isNative || this._isNumber); ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.type().isNumber() === true) {
					}
					else if(operand.type().isAny() === true) {
						this._isNumber = false;
						this._isNative = false;
					}
					else if(operand.type().canBeNumber(false) === true) {
						this._isNative = false;
						if(operand.type().canBeString(false) === true) {
							this._isNumber = false;
						}
					}
					else if(notNumber === null) {
						notNumber = operand;
					}
				}
				if(this._isNumber && (notNumber !== null)) {
					TypeException.throwInvalidOperand(notNumber, Operator.Addition, this);
				}
			}
			if(this._isNumber) {
				this._type = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
			}
			else if(this._isString) {
				this._type = this._scope.reference("String");
			}
			else {
				var numberType = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
				this._type = new UnionType(this._scope, [numberType, this._scope.reference("String")], false);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAddition.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this._isNative;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAddition.prototype.__ks_func_isComputed_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toOperandFragments_0: function(fragments, operator, type) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(operator === void 0 || operator === null) {
				throw new TypeError("'operator' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if((operator.valueOf() === Operator.Addition.value) && ((this._isNumber && (type.valueOf() === OperandType.Number.value)) || (this._isString && (type.valueOf() === OperandType.String.value)))) {
				for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toOperandFragments: function() {
			if(arguments.length === 3) {
				return PolyadicOperatorAddition.prototype.__ks_func_toOperandFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toOperandFragments.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isNative) {
				for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($space).code("+", this._data.operator).code($space);
					}
					fragments.wrap(operand);
				}
			}
			else {
				if(this._isNumber) {
					fragments.code($runtime.operator(this), ".addition(");
				}
				else if(this._isString) {
					fragments.code($runtime.helper(this), ".concatString(");
				}
				else {
					fragments.code($runtime.operator(this), ".addOrConcat(");
				}
				for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
					operand = this._operands[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(operand);
				}
				fragments.code(")");
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var fragments = "";
			for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				if(index !== 0) {
					fragments += " + ";
				}
				fragments = KSHelper.concatString(fragments, operand.toQuote());
			}
			return fragments;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAddition.prototype.__ks_func_toQuote_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var PolyadicOperatorAnd = KSHelper.class({
		$name: "PolyadicOperatorAnd",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(!(operand.type().canBeBoolean() === true)) {
					TypeException.throwInvalidOperand(operand, Operator.And, this);
				}
				var __ks_2 = operand.inferWhenTrueTypes(new Dictionary());
				for(var name in __ks_2) {
					var data = __ks_2[name];
					this._scope.updateInferable(name, data, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAnd.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			var __ks_0 = this._operands[0].inferTypes(new Dictionary());
			for(var name in __ks_0) {
				var data = __ks_0[name];
				if(KSType.isValue(inferables[name])) {
					if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
						inferables[name] = data;
					}
					else {
						inferables[name] = (function(that) {
							var d = new Dictionary();
							d.isVariable = data.isVariable;
							d.type = Type.union(that._scope, inferables[name].type, data.type);
							return d;
						})(this);
					}
				}
				else {
					inferables[name] = data;
				}
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorAnd.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				var __ks_2 = operand.inferWhenTrueTypes(new Dictionary());
				for(var name in __ks_2) {
					var data = __ks_2[name];
					if(KSType.isValue(inferables[name])) {
						if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
							inferables[name] = data;
						}
						else {
							inferables[name] = (function(that) {
								var d = new Dictionary();
								d.isVariable = data.isVariable;
								d.type = Type.union(that._scope, inferables[name].type, data.type);
								return d;
							})(this);
						}
					}
					else {
						inferables[name] = data;
					}
				}
			}
			return inferables;
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorAnd.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("&&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAnd.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var PolyadicOperatorBitwiseAnd = KSHelper.class({
		$name: "PolyadicOperatorBitwiseAnd",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericPolyadicOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseAnd;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseAnd";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "&";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseLeftShift = KSHelper.class({
		$name: "PolyadicOperatorBitwiseLeftShift",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseLeftShift;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseLeftShift";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "<<";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseOr = KSHelper.class({
		$name: "PolyadicOperatorBitwiseOr",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericPolyadicOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseOr;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseOr";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "|";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseRightShift = KSHelper.class({
		$name: "PolyadicOperatorBitwiseRightShift",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseRightShift;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseRightShift";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return ">>";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseXor = KSHelper.class({
		$name: "PolyadicOperatorBitwiseXor",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseXor;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseXor";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "^";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorDivision = KSHelper.class({
		$name: "PolyadicOperatorDivision",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Division;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorDivision.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "division";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorDivision.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "/";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorDivision.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorImply = KSHelper.class({
		$name: "PolyadicOperatorImply",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var l = KSOperator.subtraction(this._operands.length, 2);
			fragments.code("!(".repeat(l));
			fragments.code("!").wrapBoolean(this._operands[0]);
			for(var __ks_0 = 1, __ks_1 = this._operands.length - 1, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				fragments.code(" || ").wrapBoolean(operand).code(")");
			}
			fragments.code(" || ").wrapBoolean(this._operands[KSOperator.subtraction(this._operands.length, 1)]);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorImply.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorImply.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var PolyadicOperatorModulo = KSHelper.class({
		$name: "PolyadicOperatorModulo",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Modulo;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorModulo.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "modulo";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorModulo.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "%";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorModulo.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorMultiplication = KSHelper.class({
		$name: "PolyadicOperatorMultiplication",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Multiplication;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "multiplication";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "*";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorNullCoalescing = KSHelper.class({
		$name: "PolyadicOperatorNullCoalescing",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._operands = [];
			for(var __ks_0 = 0, __ks_1 = this._data.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._data.operands[__ks_0];
				this._operands.push(operand = $compile.expression(operand, this));
				operand.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_analyse_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.analyse.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			var types = [];
			var last = KSOperator.subtraction(this._operands.length, 1);
			var operandType, type, ne;
			for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(KSOperator.lt(index, last)) {
					operand.acquireReusable(true);
					operand.releaseReusable();
					operandType = operand.type().setNullable(false);
				}
				else {
					operandType = operand.type();
				}
				ne = true;
				for(var __ks_1 = 0, __ks_2 = types.length; __ks_1 < __ks_2 && ne; ++__ks_1) {
					type = types[__ks_1];
					if(type.equals(operandType) === true) {
						ne = false;
					}
				}
				if(ne) {
					types.push(operandType);
				}
			}
			if(types.length === 1) {
				this._type = types[0];
			}
			else {
				this._type = new UnionType(this._scope, types);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Type");
			var l = KSOperator.subtraction(this._operands.length, 1);
			var operand;
			for(var i = 0; i < l; ++i) {
				operand = this._operands[i];
				if(operand.isNullable() === true) {
					fragments.code("(");
					operand.toNullableFragments(fragments);
					fragments.code(KSHelper.concatString(" && ", $runtime.type(this), ".isValue(")).compileReusable(operand).code("))");
				}
				else {
					fragments.code(KSHelper.concatString($runtime.type(this), ".isValue(")).compileReusable(operand).code(")");
				}
				fragments.code(" ? ").compile(operand).code(" : ");
			}
			fragments.compile(this._operands[l]);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var PolyadicOperatorOr = KSHelper.class({
		$name: "PolyadicOperatorOr",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			var lastIndex = KSOperator.subtraction(this._operands.length, 1);
			for(var index = 0, __ks_0 = this._operands.length, operand; index < __ks_0; ++index) {
				operand = this._operands[index];
				operand.prepare();
				if(operand.type().isInoperative() === true) {
					TypeException.throwUnexpectedInoperative(operand, this);
				}
				if(!(operand.type().canBeBoolean() === true)) {
					TypeException.throwInvalidOperand(operand, Operator.And, this);
				}
				if(KSOperator.lt(index, lastIndex)) {
					var __ks_1 = operand.inferWhenFalseTypes(new Dictionary());
					for(var name in __ks_1) {
						var data = __ks_1[name];
						this._scope.updateInferable(name, data, this);
					}
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorOr.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			var __ks_0 = this._operands[0].inferTypes(new Dictionary());
			for(var name in __ks_0) {
				var data = __ks_0[name];
				if(KSType.isValue(inferables[name])) {
					if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
						inferables[name] = data;
					}
					else {
						inferables[name] = (function(that) {
							var d = new Dictionary();
							d.isVariable = data.isVariable;
							d.type = Type.union(that._scope, inferables[name].type, data.type);
							return d;
						})(this);
					}
				}
				else {
					inferables[name] = data;
				}
			}
			for(var __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				var __ks_2 = operand.inferTypes(new Dictionary());
				for(var name in __ks_2) {
					var data = __ks_2[name];
					if(KSType.isValue(inferables[name])) {
						if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
							inferables[name] = data;
						}
						else {
							inferables[name] = (function(that) {
								var d = new Dictionary();
								d.isVariable = data.isVariable;
								d.type = Type.union(that._scope, inferables[name].type, data.type);
								return d;
							})(this);
						}
					}
				}
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorOr.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			var operandTypes = [null];
			for(var __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operandTypes.push(operand.inferWhenTrueTypes(new Dictionary()));
			}
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				var __ks_2 = operand.inferWhenFalseTypes(new Dictionary());
				for(var name in __ks_2) {
					var data = __ks_2[name];
					var type = data.type;
					for(var index = 1, __ks_3 = this._operands.length; index < __ks_3; ++index) {
						var types = operandTypes[index];
						if(KSType.isValue(types[name])) {
							type = type.reduce(types[name].type);
						}
						else {
							break;
						}
					}
					inferables[name] = (function() {
						var d = new Dictionary();
						d.isVariable = data.isVariable;
						d.type = type;
						return d;
					})();
				}
			}
			return inferables;
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorOr.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			var __ks_0 = this._operands[0].inferWhenTrueTypes(new Dictionary());
			for(var name in __ks_0) {
				var data = __ks_0[name];
				if(KSType.isValue(inferables[name])) {
					if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
						inferables[name] = data;
					}
					else {
						inferables[name] = (function(that) {
							var d = new Dictionary();
							d.isVariable = data.isVariable;
							d.type = Type.union(that._scope, inferables[name].type, data.type);
							return d;
						})(this);
					}
				}
				else {
					inferables[name] = data;
				}
			}
			for(var __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				var __ks_2 = operand.inferWhenTrueTypes(new Dictionary());
				for(var name in __ks_2) {
					var data = __ks_2[name];
					if(KSType.isValue(inferables[name])) {
						if((data.type.equals(inferables[name].type) === true) || (data.type.isMorePreciseThan(inferables[name].type) === true)) {
							inferables[name] = data;
						}
						else {
							inferables[name] = (function(that) {
								var d = new Dictionary();
								d.isVariable = data.isVariable;
								d.type = Type.union(that._scope, inferables[name].type, data.type);
								return d;
							})(this);
						}
					}
				}
			}
			return inferables;
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorOr.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("||", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorOr.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var PolyadicOperatorQuotient = KSHelper.class({
		$name: "PolyadicOperatorQuotient",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Quotient;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorQuotient.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "quotient";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorQuotient.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "/.";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorQuotient.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNativeFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var l = KSOperator.subtraction(this._operands.length, 1);
			fragments.code("Number.parseInt(".repeat(l));
			fragments.wrap(this._operands[0]);
			for(var __ks_0 = 1, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				fragments.code(" / ").wrap(operand).code(")");
			}
		},
		toNativeFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorQuotient.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			return NumericPolyadicOperatorExpression.prototype.toNativeFragments.apply(this, arguments);
		}
	});
	var PolyadicOperatorSubtraction = KSHelper.class({
		$name: "PolyadicOperatorSubtraction",
		$extends: NumericPolyadicOperatorExpression,
		__ks_init: function() {
			NumericPolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericPolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Subtraction;
		},
		operator: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.operator) {
				return NumericPolyadicOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "subtraction";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.runtime) {
				return NumericPolyadicOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "-";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericPolyadicOperatorExpression.prototype.symbol) {
				return NumericPolyadicOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var PolyadicOperatorXor = KSHelper.class({
		$name: "PolyadicOperatorXor",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var l = KSOperator.subtraction(this._operands.length, 2);
			fragments.code("(".repeat(l));
			fragments.wrapBoolean(this._operands[0]);
			for(var __ks_0 = 1, __ks_1 = this._operands.length - 1, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				fragments.code(" !== ").wrapBoolean(operand).code(")");
			}
			fragments.code(" !== ").wrapBoolean(this._operands[KSOperator.subtraction(this._operands.length, 1)]);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorXor.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorXor.prototype.__ks_func_type_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorExpression = KSHelper.class({
		$name: "BinaryOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BinaryOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._right = $compile.expression(this._data.right, this);
			this._right.analyse();
			this._await = (this._left.isAwait() === true) || (this._right.isAwait() === true);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			if(this._left.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._left, this);
			}
			this._right.prepare();
			if(this._right.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._right, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._left.acquireReusable(false);
			this._right.acquireReusable(false);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return (this._left.isAwaiting() === true) || (this._right.isAwaiting() === true);
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return (this._left.isNullable() === true) || (this._right.isNullable() === true);
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return ((this._left.isNullable() === true) && (this._right.isNullable() === true)) || (this._left.isNullableComputed() === true) || (this._right.isNullableComputed() === true);
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return (this._left.isUsingVariable(name) === true) || (this._right.isUsingVariable(name) === true);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				if(this._left.isAwaiting() === true) {
					return this._left.toFragments(fragments, mode);
				}
				else if(this._right.isAwaiting() === true) {
					return this._right.toFragments(fragments, mode);
				}
				else {
					this.toOperatorFragments(fragments);
				}
			}
			else if((this.isNullable() === true) && !this._tested) {
				fragments.wrapNullable(this).code(" ? ");
				this.toOperatorFragments(fragments);
				fragments.code(" : false");
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				if(this._left.isNullable() === true) {
					fragments.compileNullable(this._left);
					if(this._right.isNullable() === true) {
						fragments.code(" && ").compileNullable(this._right);
					}
				}
				else {
					fragments.compileNullable(this._right);
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	var NumericBinaryOperatorExpression = KSHelper.class({
		$name: "NumericBinaryOperatorExpression",
		$extends: BinaryOperatorExpression,
		__ks_init_1: function() {
			this._isEnum = false;
			this._isNative = false;
		},
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
			NumericBinaryOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			if((this.isAcceptingEnum() === true) && (this._left.type().isEnum() === true) && (this._right.type().isEnum() === true) && (this._left.type().name() === this._right.type().name())) {
				this._isEnum = true;
				this._type = this._left.type();
			}
			else {
				if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
					this._isNative = true;
				}
				else if(this._left.type().canBeNumber() === true) {
					if(!(this._right.type().canBeNumber() === true)) {
						TypeException.throwInvalidOperand(this._right, this.operator(), this);
					}
				}
				else {
					TypeException.throwInvalidOperand(this._left, this.operator(), this);
				}
				if((this._left.type().isNullable() === true) || (this._right.type().isNullable() === true)) {
					this._type = this._scope.reference("Number").setNullable(true);
					this._isNative = false;
				}
				else {
					this._type = this._scope.reference("Number");
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_translate_0: function() {
			BinaryOperatorExpression.prototype.translate.apply(this, []);
			if(this._isEnum) {
				var type = this._parent.type();
				if(KSType.isInstance(this._parent, AssignmentOperatorEquality) || KSType.isInstance(this._parent, VariableDeclaration)) {
					if(type.isEnum() === true) {
						if(this._type.name() !== type.name()) {
							this._isEnum = false;
							this._isNative = true;
						}
					}
					else if(type.isNumber() === true) {
						this._isEnum = false;
						this._isNative = true;
					}
				}
				else if((type.isBoolean() === true) || ((type.isEnum() === true) && (this._type.name() === type.name()))) {
					this._isEnum = false;
					this._isNative = true;
				}
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.translate.apply(this, arguments);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return false;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.isAcceptingEnum) {
				return BinaryOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return this._isNative;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toNativeFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(this.symbol(), this._data.operator).code($space).wrap(this._right);
		},
		toNativeFragments: function() {
			if(arguments.length === 1) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toNativeFragments) {
				return BinaryOperatorExpression.prototype.toNativeFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toOperandFragments_0: function(fragments, operator, type) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(operator === void 0 || operator === null) {
				throw new TypeError("'operator' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if((operator === this.operator()) && (type.valueOf() === OperandType.Number.value)) {
				fragments.compile(this._left).code($comma).compile(this._right);
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toOperandFragments: function() {
			if(arguments.length === 3) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_toOperandFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toOperandFragments.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isEnum) {
				fragments.code(this._type.name(), "(");
				this.toNativeFragments(fragments);
				fragments.code(")");
			}
			else if(this._isNative) {
				this.toNativeFragments(fragments);
			}
			else {
				fragments.code($runtime.operator(this), "." + this.runtime() + "(").compile(this._left).code($comma).compile(this._right).code(")");
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "" + this._left.toQuote() + " " + this.symbol() + " " + this._right.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NumericBinaryOperatorExpression.prototype.__ks_func_type_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorAddition = KSHelper.class({
		$name: "BinaryOperatorAddition",
		$extends: BinaryOperatorExpression,
		__ks_init_1: function() {
			this._isNative = false;
			this._isNumber = false;
			this._isString = false;
		},
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
			BinaryOperatorAddition.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			if((this._left.type().isString() === true) || (this._right.type().isString() === true)) {
				this._isString = true;
				this._isNative = true;
			}
			else if((this._left.type().isNumber() === true) && (this._right.type().isNumber() === true)) {
				this._isNumber = true;
				this._isNative = true;
			}
			else if(((this._left.type().canBeString(false) === true) && !(this._left.type().canBeNumber(false) === true)) || ((this._right.type().canBeString(false) === true) && !(this._right.type().canBeNumber(false) === true))) {
				this._isString = true;
			}
			else if((this._left.type().isAny() === true) || (this._right.type().isAny() === true)) {
			}
			else if(this._left.type().canBeNumber() === true) {
				if(!(this._left.type().canBeString(false) === true)) {
					if(this._right.type().canBeNumber() === true) {
						if(!(this._right.type().canBeString(false) === true)) {
							this._isNumber = true;
						}
					}
					else {
						TypeException.throwInvalidOperand(this._right, Operator.Addition, this);
					}
				}
			}
			else {
				TypeException.throwInvalidOperand(this._left, Operator.Addition, this);
			}
			var nullable = (this._left.type().isNullable() === true) || (this._right.type().isNullable() === true);
			if(nullable) {
				this._isNative = false;
			}
			if(this._isNumber) {
				this._type = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
			}
			else if(this._isString) {
				this._type = this._scope.reference("String");
			}
			else {
				var numberType = nullable ? this._scope.reference("Number").setNullable(true) : this._scope.reference("Number");
				this._type = new UnionType(this._scope, [numberType, this._scope.reference("String")], false);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAddition.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this._isNative;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAddition.prototype.__ks_func_isComputed_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toOperandFragments_0: function(fragments, operator, type) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(operator === void 0 || operator === null) {
				throw new TypeError("'operator' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if((operator.valueOf() === Operator.Addition.value) && ((this._isNumber && (type.valueOf() === OperandType.Number.value)) || (this._isString && (type.valueOf() === OperandType.String.value)))) {
				fragments.compile(this._left).code($comma).compile(this._right);
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toOperandFragments: function() {
			if(arguments.length === 3) {
				return BinaryOperatorAddition.prototype.__ks_func_toOperandFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toOperandFragments.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isNative) {
				fragments.wrap(this._left).code($space).code("+", this._data.operator).code($space).wrap(this._right);
			}
			else {
				if(this._isNumber) {
					fragments.code($runtime.operator(this), ".addition(");
				}
				else if(this._isString) {
					fragments.code($runtime.helper(this), ".concatString(");
				}
				else {
					fragments.code($runtime.operator(this), ".addOrConcat(");
				}
				fragments.compile(this._left).code($comma).compile(this._right).code(")");
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "" + this._left.toQuote() + " + " + this._right.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAddition.prototype.__ks_func_toQuote_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorAnd = KSHelper.class({
		$name: "BinaryOperatorAnd",
		$extends: PolyadicOperatorAnd,
		__ks_init: function() {
			PolyadicOperatorAnd.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorAnd.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = [this._data.left, this._data.right], __ks_2 = __ks_1.length, data; __ks_0 < __ks_2; ++__ks_0) {
				data = __ks_1[__ks_0];
				var operand = $compile.expression(data, this);
				operand.analyse();
				this._operands.push(operand);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAnd.prototype.__ks_func_analyse_0.apply(this);
			}
			return PolyadicOperatorAnd.prototype.analyse.apply(this, arguments);
		}
	});
	var BinaryOperatorBitwiseAnd = KSHelper.class({
		$name: "BinaryOperatorBitwiseAnd",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericBinaryOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseAnd;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseAnd";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "&";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseLeftShift = KSHelper.class({
		$name: "BinaryOperatorBitwiseLeftShift",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseLeftShift;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseLeftShift";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "<<";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseOr = KSHelper.class({
		$name: "BinaryOperatorBitwiseOr",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericBinaryOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseOr;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseOr";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "|";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseRightShift = KSHelper.class({
		$name: "BinaryOperatorBitwiseRightShift",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseRightShift;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseRightShift";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return ">>";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseXor = KSHelper.class({
		$name: "BinaryOperatorBitwiseXor",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseXor;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseXor";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "^";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorDivision = KSHelper.class({
		$name: "BinaryOperatorDivision",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Division;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorDivision.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "division";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorDivision.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "/";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorDivision.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorImply = KSHelper.class({
		$name: "BinaryOperatorImply",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			if(!(this._left.type().canBeBoolean() === true)) {
				TypeException.throwInvalidOperand(this._left, Operator.Imply, this);
			}
			if(!(this._right.type().canBeBoolean() === true)) {
				TypeException.throwInvalidOperand(this._right, Operator.Imply, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorImply.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			var right = this._right.inferTypes(new Dictionary());
			var rtype;
			var __ks_0 = this._left.inferTypes(new Dictionary());
			for(var name in __ks_0) {
				var data = __ks_0[name];
				if((KSType.isValue(right[name]) && KSType.isValue(right[name].type) ? (rtype = right[name].type, true) : false) && !(data.type.isAny() === true) && !(rtype.isAny() === true)) {
					inferables[name] = data;
					if(!(data.type.equals(rtype) === true)) {
						inferables[name].type = Type.union(this._scope, data.type, rtype);
					}
				}
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return BinaryOperatorImply.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("!").wrapBoolean(this._left).code(" || ").wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorImply.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorImply.prototype.__ks_func_type_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorModulo = KSHelper.class({
		$name: "BinaryOperatorModulo",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Modulo;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorModulo.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "modulo";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorModulo.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "%";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorModulo.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorMultiplication = KSHelper.class({
		$name: "BinaryOperatorMultiplication",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Multiplication;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorMultiplication.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "multiplication";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorMultiplication.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "*";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorMultiplication.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorNullCoalescing = KSHelper.class({
		$name: "BinaryOperatorNullCoalescing",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			this._left.acquireReusable(true);
			this._left.releaseReusable();
			var leftType = this._left.type().setNullable(false);
			if(leftType.equals(this._right.type()) === true) {
				this._type = leftType;
			}
			else {
				this._type = Type.union(this._scope, leftType, this._right.type());
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._left.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._left.isNullable() === true) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(KSHelper.concatString(" && ", $runtime.type(this), ".isValue(")).compileReusable(this._left).code("))");
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue(")).compileReusable(this._left).code(")");
			}
			fragments.code(" ? ").compile(this._left).code(" : ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_type_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorOr = KSHelper.class({
		$name: "BinaryOperatorOr",
		$extends: PolyadicOperatorOr,
		__ks_init: function() {
			PolyadicOperatorOr.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorOr.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = [this._data.left, this._data.right], __ks_2 = __ks_1.length, data; __ks_0 < __ks_2; ++__ks_0) {
				data = __ks_1[__ks_0];
				var operand = $compile.expression(data, this);
				operand.analyse();
				this._operands.push(operand);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorOr.prototype.__ks_func_analyse_0.apply(this);
			}
			return PolyadicOperatorOr.prototype.analyse.apply(this, arguments);
		}
	});
	var BinaryOperatorQuotient = KSHelper.class({
		$name: "BinaryOperatorQuotient",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Quotient;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorQuotient.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "quotient";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorQuotient.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "/.";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorQuotient.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toNativeFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code("Number.parseInt(").compile(this._left).code(" / ").compile(this._right).code(")");
		},
		toNativeFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorQuotient.prototype.__ks_func_toNativeFragments_0.apply(this, arguments);
			}
			return NumericBinaryOperatorExpression.prototype.toNativeFragments.apply(this, arguments);
		}
	});
	var BinaryOperatorSubtraction = KSHelper.class({
		$name: "BinaryOperatorSubtraction",
		$extends: NumericBinaryOperatorExpression,
		__ks_init: function() {
			NumericBinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericBinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Subtraction;
		},
		operator: function() {
			if(arguments.length === 0) {
				return BinaryOperatorSubtraction.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.operator) {
				return NumericBinaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "subtraction";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return BinaryOperatorSubtraction.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.runtime) {
				return NumericBinaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "-";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return BinaryOperatorSubtraction.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericBinaryOperatorExpression.prototype.symbol) {
				return NumericBinaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var BinaryOperatorTypeCasting = KSHelper.class({
		$name: "BinaryOperatorTypeCasting",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._type = Type.fromAST(this._data.right, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			var type = this._left.type();
			if(type.isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._left, this);
			}
			if(!(KSType.isInstance(type, ReferenceType) || KSType.isInstance(type, UnionType) || (type.isAny() === true))) {
				TypeException.throwInvalidCasting(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._left.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return KSType.isInstance(this._left, IdentifierLiteral) ? this._left.name() : null;
		},
		name: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_name_0.apply(this);
			}
			else if(Expression.prototype.name) {
				return Expression.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorTypeEquality = KSHelper.class({
		$name: "BinaryOperatorTypeEquality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			if(this._left.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._left, this);
			}
			if((KSHelper.valueOf(this._data.right.kind) === NodeKind.TypeReference.value) && (KSType.isValue(this._data.right.typeName) ? KSHelper.valueOf(this._data.right.typeName.kind) === NodeKind.Identifier.value : false)) {
				var variable = this._scope.getVariable(this._data.right.typeName.name);
				if(KSType.isValue(variable)) {
					var type = variable.getRealType();
					if(this._left.type().isNull() === true) {
						TypeException.throwNullTypeChecking(type, this);
					}
					if(type.isVirtual() === true) {
						if(!(this._left.type().isAny() === true) && !(this._left.type().canBeVirtual(type.name()) === true)) {
							TypeException.throwInvalidTypeChecking(this._left.type(), type, this);
						}
					}
					else if((type.isClass() === true) || (type.isEnum() === true) || (type.isStruct() === true) || (type.isUnion() === true) || (type.isExclusion() === true)) {
						if(!(this._left.type().isAny() === true) && !(type.matchContentOf(this._left.type()) === true)) {
							TypeException.throwInvalidTypeChecking(this._left.type(), type, this);
						}
					}
					else {
						TypeException.throwNotClass(variable.name(), this);
					}
					this._trueType = type.reference();
					if(this._left.isInferable() === true) {
						this._falseType = this._left.type().reduce(type);
					}
				}
				else {
					ReferenceException.throwNotDefined(this._data.right.typeName.name, this);
				}
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._trueType;
					return d;
				})(this);
			}
			return inferables;
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._falseType;
					return d;
				})(this);
			}
			return inferables;
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._left.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this._trueType.toTestFragments(fragments, this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorTypeInequality = KSHelper.class({
		$name: "BinaryOperatorTypeInequality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			if(this._left.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._left, this);
			}
			if((KSHelper.valueOf(this._data.right.kind) === NodeKind.TypeReference.value) && (KSType.isValue(this._data.right.typeName) ? KSHelper.valueOf(this._data.right.typeName.kind) === NodeKind.Identifier.value : false)) {
				var variable, __ks_0;
				if(KSType.isValue(__ks_0 = this._scope.getVariable(this._data.right.typeName.name)) ? (variable = __ks_0, true) : false) {
					var type = variable.getRealType();
					if(this._left.type().isNull() === true) {
						TypeException.throwNullTypeChecking(type, this);
					}
					if(type.isVirtual() === true) {
						if(!(this._left.type().isAny() === true) && !(this._left.type().canBeVirtual(type.name()) === true)) {
							TypeException.throwUnnecessaryTypeChecking(this._left.type(), this);
						}
					}
					else if((type.isEnum() === true) || (type.isStruct() === true) || (type.isUnion() === true) || (type.isExclusion() === true)) {
						if(!(this._left.type().isAny() === true) && !(type.matchContentOf(this._left.type()) === true)) {
							TypeException.throwUnnecessaryTypeChecking(this._left.type(), this);
						}
					}
					else if(type.isClass() === true) {
						if(!(this._left.type().isAny() === true) && (!(type.matchContentOf(this._left.type()) === true) || (type.matchClassName(this._left.type()) === true))) {
							TypeException.throwUnnecessaryTypeChecking(this._left.type(), this);
						}
					}
					else {
						TypeException.throwNotClass(variable.name(), this);
					}
					this._falseType = type.reference();
					if(this._left.isInferable() === true) {
						this._trueType = this._left.type().reduce(type);
					}
				}
				else {
					ReferenceException.throwNotDefined(this._data.right.typeName.name, this);
				}
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._left.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._trueType;
					return d;
				})(this);
			}
			return inferables;
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			if(this._left.isInferable() === true) {
				inferables[this._left.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._left, IdentifierLiteral);
					d.type = that._falseType;
					return d;
				})(this);
			}
			return inferables;
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return Expression.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("!");
			this._falseType.toTestFragments(fragments, this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_type_0.apply(this);
			}
			return Expression.prototype.type.apply(this, arguments);
		}
	});
	var BinaryOperatorXor = KSHelper.class({
		$name: "BinaryOperatorXor",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			if(!(this._left.type().canBeBoolean() === true)) {
				TypeException.throwInvalidOperand(this._left, Operator.Xor, this);
			}
			if(!(this._right.type().canBeBoolean() === true)) {
				TypeException.throwInvalidOperand(this._right, Operator.Xor, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorXor.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._left).code($space).code("!==", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorXor.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorXor.prototype.__ks_func_type_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var UnaryOperatorExpression = KSHelper.class({
		$name: "UnaryOperatorExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._argument = $compile.expression(this._data.argument, this);
			this._argument.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._argument.prepare();
			if(this._argument.type().isInoperative() === true) {
				TypeException.throwUnexpectedInoperative(this._argument, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._argument.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_argument_0: function() {
			return this._argument;
		},
		argument: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_argument_0.apply(this);
			}
			else if(Expression.prototype.argument) {
				return Expression.prototype.argument.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._argument.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return UnaryOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var NumericUnaryOperatorExpression = KSHelper.class({
		$name: "NumericUnaryOperatorExpression",
		$extends: UnaryOperatorExpression,
		__ks_init_1: function() {
			this._isEnum = false;
			this._isNative = false;
		},
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
			NumericUnaryOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			UnaryOperatorExpression.prototype.prepare.apply(this, []);
			if((this.isAcceptingEnum() === true) && (this._argument.type().isEnum() === true)) {
				this._isEnum = true;
				this._type = this._argument.type();
			}
			else {
				if(this._argument.type().isNumber() === true) {
					if(this._argument.type().isNullable() === true) {
						TypeException.throwNotNullableOperand(this._argument, this.operator(), this);
					}
					this._isNative = true;
				}
				else if(!(this._argument.type().canBeNumber() === true)) {
					TypeException.throwInvalidOperand(this._argument, this.operator(), this);
				}
				this._type = this._scope.reference("Number");
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NumericUnaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return false;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return NumericUnaryOperatorExpression.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.isAcceptingEnum) {
				return UnaryOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._isEnum) {
				fragments.code(this.symbol(), this._data.operator).wrap(this._argument);
			}
			else if(this._isNative) {
				fragments.code(this.symbol(), this._data.operator).wrap(this._argument);
			}
			else {
				fragments.code($runtime.operator(this), "." + this.runtime() + "(").compile(this._argument).code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NumericUnaryOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "" + this.symbol() + this._argument.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NumericUnaryOperatorExpression.prototype.__ks_func_toQuote_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.toQuote.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NumericUnaryOperatorExpression.prototype.__ks_func_type_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var UnaryOperatorBitwiseNot = KSHelper.class({
		$name: "UnaryOperatorBitwiseNot",
		$extends: NumericUnaryOperatorExpression,
		__ks_init: function() {
			NumericUnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericUnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAcceptingEnum_0: function() {
			return true;
		},
		isAcceptingEnum: function() {
			if(arguments.length === 0) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_isAcceptingEnum_0.apply(this);
			}
			return NumericUnaryOperatorExpression.prototype.isAcceptingEnum.apply(this, arguments);
		},
		__ks_func_operator_0: function() {
			return Operator.BitwiseNot;
		},
		operator: function() {
			if(arguments.length === 0) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.operator) {
				return NumericUnaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "bitwiseNot";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.runtime) {
				return NumericUnaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "~";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.symbol) {
				return NumericUnaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var UnaryOperatorDecrementPostfix = KSHelper.class({
		$name: "UnaryOperatorDecrementPostfix",
		$extends: NumericUnaryOperatorExpression,
		__ks_init: function() {
			NumericUnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericUnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.DecrementPostfix;
		},
		operator: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.operator) {
				return NumericUnaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "decrementPostfix";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.runtime) {
				return NumericUnaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "--";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.symbol) {
				return NumericUnaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._argument).code(this.symbol(), this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return NumericUnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return "" + this._argument.toQuote() + this.symbol();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_toQuote_0.apply(this);
			}
			return NumericUnaryOperatorExpression.prototype.toQuote.apply(this, arguments);
		}
	});
	var UnaryOperatorDecrementPrefix = KSHelper.class({
		$name: "UnaryOperatorDecrementPrefix",
		$extends: NumericUnaryOperatorExpression,
		__ks_init: function() {
			NumericUnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericUnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.DecrementPrefix;
		},
		operator: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.operator) {
				return NumericUnaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "decrementPrefix";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.runtime) {
				return NumericUnaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "--";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.symbol) {
				return NumericUnaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this.symbol(), this._data.operator).compile(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return NumericUnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	var UnaryOperatorExistential = KSHelper.class({
		$name: "UnaryOperatorExistential",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_inferTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			this._argument.inferTypes(inferables);
			if(this._argument.isInferable() === true) {
				inferables[this._argument.path()] = (function(that) {
					var d = new Dictionary();
					d.isVariable = KSType.isInstance(that._argument, IdentifierLiteral);
					d.type = that._type;
					return d;
				})(this);
			}
			return inferables;
		},
		inferTypes: function() {
			if(arguments.length === 1) {
				return UnaryOperatorExistential.prototype.__ks_func_inferTypes_0.apply(this, arguments);
			}
			return UnaryOperatorExpression.prototype.inferTypes.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this._argument.isNullable();
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_isComputed_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			this._argument.prepare();
			if(!(this._argument.type().isNullable() === true) && !(this._options.rules.ignoreMisfit === true)) {
				TypeException.throwNotNullableExistential(this._argument, this);
			}
			this._type = this._argument.type().setNullable(false);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._argument.isNullable() === true) {
				fragments.wrapNullable(this._argument).code(" && ").code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
			else {
				fragments.code(KSHelper.concatString($runtime.type(this), ".isValue("), this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_type_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var UnaryOperatorForcedTypeCasting = KSHelper.class({
		$name: "UnaryOperatorForcedTypeCasting",
		$extends: UnaryOperatorExpression,
		__ks_init_1: function() {
			this._type = AnyType.Unexplicit;
		},
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
			UnaryOperatorForcedTypeCasting.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			UnaryOperatorExpression.prototype.prepare.apply(this, []);
			if(!(this._parent.isExpectingType() === true)) {
				SyntaxException.throwInvalidForcedTypeCasting(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorForcedTypeCasting.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorForcedTypeCasting.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorForcedTypeCasting.prototype.__ks_func_type_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var UnaryOperatorIncrementPostfix = KSHelper.class({
		$name: "UnaryOperatorIncrementPostfix",
		$extends: NumericUnaryOperatorExpression,
		__ks_init: function() {
			NumericUnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericUnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.IncrementPostfix;
		},
		operator: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.operator) {
				return NumericUnaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "incrementPostfix";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.runtime) {
				return NumericUnaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "++";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.symbol) {
				return NumericUnaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._argument).code(this.symbol(), this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return NumericUnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return "" + this._argument.toQuote() + this.symbol();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_toQuote_0.apply(this);
			}
			return NumericUnaryOperatorExpression.prototype.toQuote.apply(this, arguments);
		}
	});
	var UnaryOperatorIncrementPrefix = KSHelper.class({
		$name: "UnaryOperatorIncrementPrefix",
		$extends: NumericUnaryOperatorExpression,
		__ks_init: function() {
			NumericUnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericUnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.IncrementPrefix;
		},
		operator: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.operator) {
				return NumericUnaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "incrementPrefix";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.runtime) {
				return NumericUnaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "++";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.symbol) {
				return NumericUnaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this.symbol(), this._data.operator).compile(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return NumericUnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	var UnaryOperatorNegation = KSHelper.class({
		$name: "UnaryOperatorNegation",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			UnaryOperatorExpression.prototype.prepare.apply(this, []);
			if(this._argument.type().isBoolean() === true) {
				if(this._argument.type().isNullable() === true) {
					TypeException.throwNotNullableOperand(this._argument, Operator.Negation, this);
				}
			}
			else if(!(this._argument.type().canBeBoolean() === true)) {
				TypeException.throwInvalidOperand(this._argument, Operator.Negation, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegation.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_inferWhenFalseTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this._argument.inferWhenTrueTypes(inferables);
		},
		inferWhenFalseTypes: function() {
			if(arguments.length === 1) {
				return UnaryOperatorNegation.prototype.__ks_func_inferWhenFalseTypes_0.apply(this, arguments);
			}
			return UnaryOperatorExpression.prototype.inferWhenFalseTypes.apply(this, arguments);
		},
		__ks_func_inferWhenTrueTypes_0: function(inferables) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(inferables === void 0 || inferables === null) {
				throw new TypeError("'inferables' is not nullable");
			}
			return this._argument.inferWhenFalseTypes(inferables);
		},
		inferWhenTrueTypes: function() {
			if(arguments.length === 1) {
				return UnaryOperatorNegation.prototype.__ks_func_inferWhenTrueTypes_0.apply(this, arguments);
			}
			return UnaryOperatorExpression.prototype.inferWhenTrueTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("!", this._data.operator).wrapBoolean(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegation.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegation.prototype.__ks_func_type_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var UnaryOperatorNegative = KSHelper.class({
		$name: "UnaryOperatorNegative",
		$extends: NumericUnaryOperatorExpression,
		__ks_init: function() {
			NumericUnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			NumericUnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_operator_0: function() {
			return Operator.Negative;
		},
		operator: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegative.prototype.__ks_func_operator_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.operator) {
				return NumericUnaryOperatorExpression.prototype.operator.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_runtime_0: function() {
			return "negative";
		},
		runtime: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegative.prototype.__ks_func_runtime_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.runtime) {
				return NumericUnaryOperatorExpression.prototype.runtime.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_symbol_0: function() {
			return "-";
		},
		symbol: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegative.prototype.__ks_func_symbol_0.apply(this);
			}
			else if(NumericUnaryOperatorExpression.prototype.symbol) {
				return NumericUnaryOperatorExpression.prototype.symbol.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var UnaryOperatorNullableTypeCasting = KSHelper.class({
		$name: "UnaryOperatorNullableTypeCasting",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			UnaryOperatorExpression.prototype.prepare.apply(this, []);
			this._type = this._argument.type().setNullable(false);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNullableTypeCasting.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNullableTypeCasting.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNullableTypeCasting.prototype.__ks_func_type_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var UnaryOperatorSpread = KSHelper.class({
		$name: "UnaryOperatorSpread",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			UnaryOperatorExpression.prototype.prepare.apply(this, []);
			var type = this._argument.type();
			if(type.isArray() === true) {
				this._type = type.flagSpread();
			}
			else if(type.isAny() === true) {
				this._type = this._scope.reference("Array").flagSpread();
			}
			else {
				TypeException.throwInvalidSpread(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorSpread.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isExpectingType_0: function() {
			return true;
		},
		isExpectingType: function() {
			if(arguments.length === 0) {
				return UnaryOperatorSpread.prototype.__ks_func_isExpectingType_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.isExpectingType.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._options.format.spreads === "es5") {
				throw new NotSupportedException(this);
			}
			fragments.code("...", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorSpread.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorSpread.prototype.__ks_func_type_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.type.apply(this, arguments);
		}
	});
	var Block = KSHelper.class({
		$name: "Block",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._awaiting = false;
			this._empty = false;
			this._exit = false;
			this._statements = [];
			this._type = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Block.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(scope === void 0) {
				scope = parent.scope();
			}
			else if(scope !== null && !KSType.isInstance(scope, Scope)) {
				throw new TypeError("'scope' is not of type 'Scope?'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement);
			if(!KSType.isValue(this._data.statements)) {
				this._data.statements = [];
			}
			this._empty = this._data.statements.length === 0;
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				Block.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._scope.line(statement.start.line);
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait() === true) {
					this._awaiting = true;
				}
			}
		},
		__ks_func_analyse_1: function(from, to) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(from === void 0 || from === null) {
				throw new TypeError("'from' is not nullable");
			}
			else if(!KSType.isNumber(from)) {
				throw new TypeError("'from' is not of type 'Number'");
			}
			if(to === void 0 || to === null) {
				to = KSOperator.addOrConcat(this._data.statements.length, 1);
			}
			else if(!KSType.isNumber(to)) {
				throw new TypeError("'to' is not of type 'Number'");
			}
			for(var __ks_0 = from, __ks_1 = Math.min(this._data.statements.length, to + 1), statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._scope.line(statement.start.line);
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait() === true) {
					this._awaiting = true;
				}
			}
		},
		__ks_func_analyse_2: function(statements) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			else if(!KSType.isArray(statements, AbstractNode)) {
				throw new TypeError("'statements' is not of type 'Array<AbstractNode>'");
			}
			for(var __ks_0 = 0, __ks_1 = statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = statements[__ks_0];
				this._statements.push(statement);
				statement.analyse();
				if(statement.isAwait() === true) {
					this._awaiting = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(arguments.length === 1) {
				if(KSType.isNumber(arguments[0])) {
					return Block.prototype.__ks_func_analyse_1.apply(this, arguments);
				}
				else {
					return Block.prototype.__ks_func_analyse_2.apply(this, arguments);
				}
			}
			else if(arguments.length === 2) {
				return Block.prototype.__ks_func_analyse_1.apply(this, arguments);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var notAny = (this._type !== null) && !(this._type.isAny() === true);
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					if(notAny) {
						statement.checkReturnType(this._type);
					}
					this._exit = statement.isExit();
				}
			}
			if(!this._exit && (this._type !== null) && !(this._type.isVoid() === true)) {
				if(this._type.isNever() === true) {
					TypeException.throwExpectedThrownError(this);
				}
				else if((this._type.isAny() === true) && !(this._type.isExplicit() === true)) {
				}
				else {
					if(this._statements.length === 0) {
						TypeException.throwExpectedReturnedValue(this);
					}
					else {
						this._statements[this._statements.length - 1].checkReturnType(this._type);
					}
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			this._data.statements.push(statement);
		},
		addStatement: function() {
			if(arguments.length === 1) {
				return Block.prototype.__ks_func_addStatement_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.addStatement) {
				return AbstractNode.prototype.addStatement.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_checkReturnType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.checkReturnType(type);
			}
		},
		checkReturnType: function() {
			if(arguments.length === 1) {
				return Block.prototype.__ks_func_checkReturnType_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.checkReturnType) {
				return AbstractNode.prototype.checkReturnType.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._awaiting;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isEmpty_0: function() {
			return this._empty;
		},
		isEmpty: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_isEmpty_0.apply(this);
			}
			else if(AbstractNode.prototype.isEmpty) {
				return AbstractNode.prototype.isEmpty.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(AbstractNode.prototype.isExit) {
				return AbstractNode.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isJumpable_0: function() {
			return this._parent.isJumpable();
		},
		isJumpable: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_isJumpable_0.apply(this);
			}
			else if(AbstractNode.prototype.isJumpable) {
				return AbstractNode.prototype.isJumpable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isLoop_0: function() {
			return this._parent.isLoop();
		},
		isLoop: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_isLoop_0.apply(this);
			}
			else if(AbstractNode.prototype.isLoop) {
				return AbstractNode.prototype.isLoop.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isUsingVariable(name) === true) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return Block.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isUsingVariable) {
				return AbstractNode.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_statements_0: function() {
			return this._data.statements;
		},
		statements: function() {
			if(arguments.length === 0) {
				return Block.prototype.__ks_func_statements_0.apply(this);
			}
			else if(AbstractNode.prototype.statements) {
				return AbstractNode.prototype.statements.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._awaiting) {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = this._statements.length, statement; i < __ks_0 && (index === -1); ++i) {
					statement = this._statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					statement.toFragments(fragments, mode);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Block.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toRangeFragments_0: function(fragments, from, to) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(from === void 0 || from === null) {
				throw new TypeError("'from' is not nullable");
			}
			else if(!KSType.isNumber(from)) {
				throw new TypeError("'from' is not of type 'Number'");
			}
			if(to === void 0 || to === null) {
				to = this._statements.length + 1;
			}
			else if(!KSType.isNumber(to)) {
				throw new TypeError("'to' is not of type 'Number'");
			}
			for(var __ks_0 = from, __ks_1 = Math.min(this._statements.length, to + 1), statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, Mode.None);
			}
		},
		toRangeFragments: function() {
			if(arguments.length >= 2 && arguments.length <= 3) {
				return Block.prototype.__ks_func_toRangeFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toRangeFragments) {
				return AbstractNode.prototype.toRangeFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.isInstance(type, Type)) {
				throw new TypeError("'type' is not of type 'Type?'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 1) {
				return Block.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var MacroVariableKind = KSHelper.enum(Number, {
		AST: 0,
		AutoEvaluated: 1
	});
	var $target = KSOperator.gte(parseInt(/^v(\d+)\./.exec(process.version)[1]), 6) ? "ecma-v6" : "ecma-v5";
	function $evaluate(source) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(source === void 0 || source === null) {
			throw new TypeError("'source' is not nullable");
		}
		var compiler = new Compiler("__ks__", (function() {
			var d = new Dictionary();
			d.register = false;
			d.target = $target;
			return d;
		})());
		compiler.compile("#![bin]\nextern console, JSON, __ks_marker\nreturn " + source);
		return eval("(function(__ks_marker) {" + compiler.toSource() + "})")(MacroMarker);
	}
	var MacroMarker = KSHelper.class({
		$name: "MacroMarker",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this.index = index;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				MacroMarker.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		}
	});
	function $reificate(macro, node, data, ast, reification, separator) {
		if(arguments.length < 4) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
		}
		if(macro === void 0 || macro === null) {
			throw new TypeError("'macro' is not nullable");
		}
		if(node === void 0 || node === null) {
			throw new TypeError("'node' is not nullable");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(ast === void 0 || ast === null) {
			throw new TypeError("'ast' is not nullable");
		}
		if(reification === void 0) {
			reification = null;
		}
		if(separator === void 0) {
			separator = null;
		}
		if(ast === true) {
			return Generator.generate(data, (function() {
				var d = new Dictionary();
				d.transformers = (function() {
					var d = new Dictionary();
					d.expression = KSHelper.vcurry($transformExpression, null, macro, node);
					return d;
				})();
				return d;
			})());
		}
		else {
			var __ks_0 = reification.valueOf();
			if(__ks_0 === ReificationKind.Argument.value) {
				if(KSType.isArray(data)) {
					return data.join(", ");
				}
				else {
					return data;
				}
			}
			else if(__ks_0 === ReificationKind.Expression.value) {
				var context = (function() {
					var d = new Dictionary();
					d.data = "";
					return d;
				})();
				$serialize(macro, data, context);
				return context.data;
			}
			else if(__ks_0 === ReificationKind.Join.value) {
				if(KSType.isArray(data)) {
					return data.join(separator);
				}
				else {
					return data;
				}
			}
			else if(__ks_0 === ReificationKind.Statement.value) {
				if(KSType.isArray(data)) {
					return KSHelper.concatString(data.join("\n"), "\n");
				}
				else {
					return data;
				}
			}
			else if(__ks_0 === ReificationKind.Write.value) {
				return data;
			}
		}
	}
	function $serialize(macro, data, context) {
		if(arguments.length < 3) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(macro === void 0 || macro === null) {
			throw new TypeError("'macro' is not nullable");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(context === void 0 || context === null) {
			throw new TypeError("'context' is not nullable");
		}
		if((data === null) || KSType.isBoolean(data)) {
			context.data = KSOperator.addOrConcat(context.data, JSON.stringify(data));
		}
		else if(KSType.isArray(data)) {
			if(data.length === 0) {
				context.data = KSHelper.concatString(context.data, "[]");
			}
			else {
				context.data = KSHelper.concatString(context.data, "[");
				$serialize(macro, data[0], context);
				for(var i = 1, __ks_0 = data.length; i < __ks_0; ++i) {
					context.data = KSHelper.concatString(context.data, ", ");
					$serialize(macro, data[i], context);
				}
				context.data = KSHelper.concatString(context.data, "]");
			}
		}
		else if(KSType.isInstance(data, MacroMarker)) {
			context.data = KSOperator.addOrConcat(context.data, Generator.generate(macro.getMark(data.index)));
		}
		else if(KSType.isNumber(data)) {
			context.data = KSOperator.addOrConcat(context.data, Number.isNaN(data) ? "NaN" : data);
		}
		else if(KSType.isRegExp(data)) {
			context.data = KSOperator.addOrConcat(context.data, data);
		}
		else if(KSType.isString(data)) {
			context.data = KSOperator.addOrConcat(context.data, $quote(data));
		}
		else {
			var empty = true;
			var computed, name;
			context.data = KSHelper.concatString(context.data, "{");
			for(var key in data) {
				var value = data[key];
				if(empty) {
					empty = false;
					context.data = KSHelper.concatString(context.data, "\n");
				}
				computed = /^\_ks\_property\_name\_mark\_(\d+)$/.exec(key);
				if(KSType.isInstance(value, MacroMarker)) {
					if(KSType.isValue(computed)) {
						name = "" + Generator.generate(macro.getMark(computed[1]), (function() {
							var d = new Dictionary();
							d.mode = Generator.KSWriterMode.Property;
							return d;
						})());
					}
					else {
						name = key;
					}
					if(KSHelper.valueOf(macro.getMark(value.index + 1)) === NodeKind.ObjectMember.value) {
						context.data = KSHelper.concatString(context.data, name + ": " + Generator.generate(macro.getMark(value.index), (function() {
							var d = new Dictionary();
							d.mode = Generator.KSWriterMode.Property;
							return d;
						})()));
					}
					else {
						context.data = KSHelper.concatString(context.data, name + Generator.generate(macro.getMark(value.index), (function() {
							var d = new Dictionary();
							d.mode = Generator.KSWriterMode.Property;
							return d;
						})()));
					}
				}
				else if(KSType.isValue(computed)) {
					context.data = KSHelper.concatString(context.data, "" + Generator.generate(macro.getMark(computed[1]), (function() {
						var d = new Dictionary();
						d.mode = Generator.KSWriterMode.Property;
						return d;
					})()) + ": ");
					$serialize(macro, value, context);
				}
				else {
					context.data = KSHelper.concatString(context.data, "" + $quote(key) + ": ");
					$serialize(macro, value, context);
				}
				context.data = KSHelper.concatString(context.data, "\n");
			}
			context.data = KSHelper.concatString(context.data, "}");
		}
	}
	function $transformExpression(macro, node, data, writer) {
		if(arguments.length < 4) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
		}
		if(macro === void 0 || macro === null) {
			throw new TypeError("'macro' is not nullable");
		}
		if(node === void 0 || node === null) {
			throw new TypeError("'node' is not nullable");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(writer === void 0 || writer === null) {
			throw new TypeError("'writer' is not nullable");
		}
		var __ks_0 = data.kind.valueOf();
		if(__ks_0 === NodeKind.EnumExpression.value) {
			return macro.addMark(data);
		}
		else if(__ks_0 === NodeKind.FunctionExpression.value) {
			return macro.addMark(data);
		}
		else if(__ks_0 === NodeKind.LambdaExpression.value) {
			return macro.addMark(data);
		}
		else if(__ks_0 === NodeKind.ObjectMember.value) {
			var name = (KSHelper.valueOf(data.name.kind) === NodeKind.ComputedPropertyName.value) || (KSHelper.valueOf(data.name.kind) === NodeKind.TemplateExpression.value);
			var value = (KSHelper.valueOf(data.value.kind) === NodeKind.EnumExpression.value) || ((KSHelper.valueOf(data.value.kind) === NodeKind.Identifier.value) && !(node.scope().isPredefinedVariable(data.value.name) === true)) || (KSHelper.valueOf(data.value.kind) === NodeKind.LambdaExpression.value) || (KSHelper.valueOf(data.value.kind) === NodeKind.MemberExpression.value);
			if(name || value) {
				return (function() {
					var d = new Dictionary();
					d.kind = NodeKind.ObjectMember;
					d.name = name ? macro.addPropertyNameMark(data.name) : data.name;
					d.value = value ? macro.addMark(data.value, NodeKind.ObjectMember) : data.value;
					d.start = data.start;
					d.end = data.end;
					return d;
				})();
			}
		}
		return data;
	}
	var MacroDeclaration = KSHelper.class({
		$name: "MacroDeclaration",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._executeCount = 0;
			this._marks = [];
			this._parameters = new Dictionary();
			this._referenceIndex = -1;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			MacroDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, __ks_0, name) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0) {
				parent = null;
			}
			else if(parent !== null && !KSType.isInstance(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode?'");
			}
			if(__ks_0 !== null && !KSType.isInstance(__ks_0, Scope)) {
				throw new TypeError("Anonymous argument is not of type 'Scope?'");
			}
			if(name === void 0 || name === null) {
				name = data.name.name;
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, new MacroScope()]);
			this._name = name;
			this._type = MacroType.fromAST(data, this);
			this._line = (KSType.isValue(data.start) && KSType.isValue(data.start.line)) ? data.start.line : -1;
			var builder = new Generator.KSWriter((function(that) {
				var d = new Dictionary();
				d.filters = (function(that) {
					var d = new Dictionary();
					d.expression = KSHelper.vcurry(that.filter, that, false);
					d.statement = KSHelper.vcurry(that.filter, that, true);
					return d;
				})(that);
				return d;
			})(this));
			var line = builder.newLine().code("func(__ks_evaluate, __ks_reificate");
			var auto;
			for(var __ks_1 = 0, __ks_2 = this._data.parameters.length, __ks_data_1; __ks_1 < __ks_2; ++__ks_1) {
				__ks_data_1 = this._data.parameters[__ks_1];
				line.code(", ", __ks_data_1.name.name);
				if(KSType.isValue(__ks_data_1.defaultValue)) {
					line.code(" = ").expression(__ks_data_1.defaultValue);
				}
				auto = false;
				for(var __ks_3 = 0, __ks_4 = __ks_data_1.modifiers.length, modifier; __ks_3 < __ks_4 && !(auto); ++__ks_3) {
					modifier = __ks_data_1.modifiers[__ks_3];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.AutoEvaluate.value) {
						auto = true;
					}
				}
				this._parameters[__ks_data_1.name.name] = auto ? MacroVariableKind.AutoEvaluated : MacroVariableKind.AST;
			}
			var block = line.code(")").newBlock();
			for(var __ks_name_1 in this._parameters) {
				var kind = this._parameters[__ks_name_1];
				if(KSHelper.valueOf(kind) === MacroVariableKind.AutoEvaluated.value) {
					block.line(__ks_name_1 + " = __ks_evaluate(__ks_reificate(" + __ks_name_1 + ", true, " + ReificationKind.Expression.value + "))");
				}
			}
			block.line("let __ks_src = \"\"");
			for(var __ks_1 = 0, __ks_2 = $ast.block(this._data.body).statements, __ks_3 = __ks_2.length, statement; __ks_1 < __ks_3; ++__ks_1) {
				statement = __ks_2[__ks_1];
				block.statement(statement);
			}
			block.line("return __ks_src").done();
			line.done();
			var source = "";
			for(var __ks_1 = 0, __ks_2 = builder.toArray(), __ks_3 = __ks_2.length, fragment; __ks_1 < __ks_3; ++__ks_1) {
				fragment = __ks_2[__ks_1];
				source = KSHelper.concatString(source, fragment.code);
			}
			this._fn = $evaluate(source);
			this._parent.registerMacro(this._name, this);
		},
		__ks_cons: function(args) {
			if(args.length >= 3 && args.length <= 4) {
				MacroDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addMark_0: function(data, kind) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(kind === void 0) {
				kind = null;
			}
			var index = this._marks.length;
			this._marks.push(data, kind);
			return (function() {
				var d = new Dictionary();
				d.kind = NodeKind.CreateExpression;
				d.class = (function() {
					var d = new Dictionary();
					d.kind = NodeKind.Identifier;
					d.name = "__ks_marker";
					return d;
				})();
				d.arguments = [(function() {
					var d = new Dictionary();
					d.kind = NodeKind.NumericExpression;
					d.value = index;
					return d;
				})()];
				return d;
			})();
		},
		addMark: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroDeclaration.prototype.__ks_func_addMark_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.addMark) {
				return AbstractNode.prototype.addMark.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_addPropertyNameMark_0: function(data, kind) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(kind === void 0) {
				kind = null;
			}
			var index = this._marks.length;
			this._marks.push(data, kind);
			return (function() {
				var d = new Dictionary();
				d.kind = NodeKind.Identifier;
				d.name = "_ks_property_name_mark_" + index;
				return d;
			})();
		},
		addPropertyNameMark: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroDeclaration.prototype.__ks_func_addPropertyNameMark_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.addPropertyNameMark) {
				return AbstractNode.prototype.addPropertyNameMark.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_execute_0: function(__ks_arguments_1, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var module = this.module();
			++this._executeCount;
			var args = [$evaluate, KSHelper.vcurry($reificate, null, this, parent)].concat(__ks_arguments_1);
			var data = this._fn.apply(null, [].concat(args));
			try {
				data = Parser.parse(data);
			}
			catch(error) {
				error.filename = "" + this._parent.file() + "$" + this._name + "$" + this._executeCount;
				error.message = KSHelper.concatString(error.message, " (file \"" + error.filename + "\")");
				throw error;
			}
			return data;
		},
		execute: function() {
			if(arguments.length === 2) {
				return MacroDeclaration.prototype.__ks_func_execute_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.execute) {
				return AbstractNode.prototype.execute.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_export_0: function(recipient, name) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			if(name === void 0 || name === null) {
				name = this._name;
			}
			recipient.exportMacro(name, this);
		},
		export: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_filter_0: function(statement, data, fragments) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSHelper.valueOf(data.kind) === NodeKind.MacroExpression.value) {
				if(statement === true) {
					fragments = fragments.newLine().code("__ks_src += ");
				}
				for(var index = 0, __ks_0 = data.elements.length, element; index < __ks_0; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						fragments.code(" + ");
					}
					var __ks_1 = element.kind.valueOf();
					if(__ks_1 === MacroElementKind.Expression.value) {
						if((KSHelper.valueOf(element.expression.kind) === NodeKind.Identifier.value) && (KSHelper.valueOf(this._parameters[element.expression.name]) === MacroVariableKind.AST.value)) {
							fragments.code("__ks_reificate(").expression(element.expression).code(", true)");
						}
						else if(KSHelper.valueOf(element.reification.kind) === ReificationKind.Join.value) {
							fragments.code("__ks_reificate(").expression(element.expression).code(", false, " + element.reification.kind + ", ").expression(element.separator).code(")");
						}
						else {
							fragments.code("__ks_reificate(").expression(element.expression).code(", false, " + element.reification.kind + ")");
						}
					}
					else if(__ks_1 === MacroElementKind.Literal.value) {
						if(element.value[0] === "\\") {
							fragments.code($quote(element.value.substr(1).replace(/\\/g, "\\\\")));
						}
						else {
							fragments.code($quote(element.value.replace(/\\/g, "\\\\")));
						}
					}
					else if(__ks_1 === MacroElementKind.NewLine.value) {
						fragments.code("\"\\n\"");
					}
				}
				if(statement === true) {
					fragments.done();
				}
				return true;
			}
			else {
				return false;
			}
		},
		filter: function() {
			if(arguments.length === 3) {
				return MacroDeclaration.prototype.__ks_func_filter_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.filter) {
				return AbstractNode.prototype.filter.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_getMark_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			return this._marks[index];
		},
		getMark: function() {
			if(arguments.length === 1) {
				return MacroDeclaration.prototype.__ks_func_getMark_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.getMark) {
				return AbstractNode.prototype.getMark.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return false;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_isExportable_0.apply(this);
			}
			else if(AbstractNode.prototype.isExportable) {
				return AbstractNode.prototype.isExportable.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstanceMethod) {
				return AbstractNode.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			return this._line;
		},
		line: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_line_0.apply(this);
			}
			else if(AbstractNode.prototype.line) {
				return AbstractNode.prototype.line.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			return this._type.matchArguments(__ks_arguments_1);
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return MacroDeclaration.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.matchArguments) {
				return AbstractNode.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this;
		},
		statement: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MacroDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			return Buffer.from(JSON.stringify((function(that) {
				var d = new Dictionary();
				d.parameters = that._data.parameters;
				d.body = that._data.body;
				return d;
			})(this))).toString("base64");
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_toMetadata_0.apply(this);
			}
			else if(AbstractNode.prototype.toMetadata) {
				return AbstractNode.prototype.toMetadata.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	var MacroType = KSHelper.class({
		$name: "MacroType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				return new MacroType(KSHelper.mapArray(data.parameters, function(parameter) {
					return MacroParameterType.fromAST(parameter, scope, false, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return MacroType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_import_0: function(data, references, scope, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new MacroType(scope);
				type._min = data.min;
				type._max = data.max;
				type._parameters = KSHelper.mapArray(data.parameters, function(parameter) {
					return MacroParameterType.import(parameter, references, scope, node);
				});
				type.updateArguments();
				return type;
			},
			import: function() {
				if(arguments.length === 4) {
					return MacroType.__ks_sttc_import_0.apply(this, arguments);
				}
				return FunctionType.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_export_0: function() {
			return (function(that) {
				var d = new Dictionary();
				d.min = that._min;
				d.max = that._max;
				d.parameters = KSHelper.mapArray(that._parameters, function(parameter) {
					return parameter.export();
				});
				return d;
			})(this);
		},
		export: function() {
			if(arguments.length === 0) {
				return MacroType.prototype.__ks_func_export_0.apply(this);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.isInstance(that, MacroType)) {
				throw new TypeError("'that' is not of type 'MacroType'");
			}
			if(KSOperator.lt(that.min(), this._min) || KSOperator.gt(that.max(), this._max)) {
				return false;
			}
			var params = that.parameters();
			if(this._parameters.length === params.length) {
				for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
					parameter = this._parameters[i];
					if(!(params[i].matchContentOf(parameter) === true)) {
						return false;
					}
				}
			}
			else if(this._hasRest) {
				throw new NotImplementedException();
			}
			else {
				throw new NotImplementedException();
			}
			return true;
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return MacroType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return FunctionType.prototype.matchContentOf.apply(this, arguments);
		}
	});
	var MacroParameterType = KSHelper.class({
		$name: "MacroParameterType",
		$extends: ParameterType,
		$static: {
			__ks_sttc_fromAST_0: function(data, scope, defined, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.isInstance(scope, Scope)) {
					throw new TypeError("'scope' is not of type 'Scope'");
				}
				if(defined === void 0 || defined === null) {
					throw new TypeError("'defined' is not nullable");
				}
				else if(!KSType.isBoolean(defined)) {
					throw new TypeError("'defined' is not of type 'Boolean'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.isInstance(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = Type.fromAST(data.type, scope, false, node);
				var __ks_default_1 = 0;
				var min = 1;
				var max = 1;
				if(KSType.isValue(data.defaultValue)) {
					__ks_default_1 = 1;
					min = 0;
				}
				var nf = true;
				for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1 && nf; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					if(KSHelper.valueOf(modifier.kind) === ModifierKind.Rest.value) {
						if(modifier.arity === true) {
							min = modifier.arity.min;
							max = modifier.arity.max;
						}
						else {
							min = 0;
							max = Infinity;
						}
						nf = true;
					}
				}
				var name = null;
				if(KSType.isValue(data.name) ? KSHelper.valueOf(data.name.kind) === NodeKind.Identifier.value : false) {
					name = data.name.name;
				}
				return new MacroParameterType(scope, name, type, min, max, __ks_default_1);
			},
			fromAST: function() {
				if(arguments.length === 4) {
					return MacroParameterType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return ParameterType.fromAST.apply(null, arguments);
			}
		},
		__ks_init: function() {
			ParameterType.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ParameterType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_clone_0: function() {
			return new MacroParameterType(this._scope, this._name, this._type, this._min, this._max, this._default);
		},
		clone: function() {
			if(arguments.length === 0) {
				return MacroParameterType.prototype.__ks_func_clone_0.apply(this);
			}
			return ParameterType.prototype.clone.apply(this, arguments);
		},
		__ks_func_matchArgument_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._type.isAny() === true) {
				return true;
			}
			var __ks_0 = this._type.name();
			if(__ks_0 === "Array") {
				return KSHelper.valueOf(value.kind) === NodeKind.ArrayExpression.value;
			}
			else if(__ks_0 === "Dictionary") {
				return KSHelper.valueOf(value.kind) === NodeKind.ObjectExpression.value;
			}
			else if(__ks_0 === "Expression") {
				return (KSHelper.valueOf(value.kind) === NodeKind.UnaryExpression.value) || (KSHelper.valueOf(value.kind) === NodeKind.BinaryExpression.value) || (KSHelper.valueOf(value.kind) === NodeKind.PolyadicExpression.value) || KSType.isValue($expressions[value.kind]);
			}
			else if(__ks_0 === "Identifier") {
				return KSHelper.valueOf(value.kind) === NodeKind.Identifier.value;
			}
			else if(__ks_0 === "Number") {
				return KSHelper.valueOf(value.kind) === NodeKind.NumericExpression.value;
			}
			else if(__ks_0 === "String") {
				return KSHelper.valueOf(value.kind) === NodeKind.Literal.value;
			}
			return false;
		},
		matchArgument: function() {
			if(arguments.length === 1) {
				return MacroParameterType.prototype.__ks_func_matchArgument_0.apply(this, arguments);
			}
			return ParameterType.prototype.matchArgument.apply(this, arguments);
		}
	});
	function $callMacroExpression(data, parent, scope) {
		if(arguments.length < 3) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(parent === void 0 || parent === null) {
			throw new TypeError("'parent' is not nullable");
		}
		if(scope === void 0 || scope === null) {
			throw new TypeError("'scope' is not nullable");
		}
		var macro = scope.getMacro(data, parent);
		var result = macro.execute(data.arguments, parent);
		if(result.body.length === 1) {
			return $compile.expression(result.body[0], parent);
		}
		else {
			throw new NotImplementedException(parent);
		}
	}
	var CallMacroStatement = KSHelper.class({
		$name: "CallMacroStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._offsetEnd = 0;
			this._offsetStart = 0;
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			CallMacroStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var macro = this._scope.getMacro(this._data, this);
			var data = macro.execute(this._data.arguments, this);
			var offset = this._scope.getLineOffset();
			this._offsetStart = this._scope.line();
			this._scope.setLineOffset(this._offsetStart);
			for(var __ks_0 = 0, __ks_1 = data.body.length, __ks_data_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_data_1 = data.body[__ks_0];
				this._scope.line(__ks_data_1.start.line);
				var statement = $compile.statement(__ks_data_1, this);
				if(KSType.isValue(statement)) {
					this._statements.push(statement);
					statement.analyse();
				}
			}
			this._scope.line(data.end.line);
			this._offsetEnd = (offset + this._scope.line()) - this._offsetStart;
			this._scope.setLineOffset(this._offsetEnd);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._scope.setLineOffset(this._offsetStart);
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.prepare();
			}
			this._scope.setLineOffset(this._offsetEnd);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._scope.setLineOffset(this._offsetStart);
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				this._scope.line(statement.line());
				statement.translate();
			}
			this._scope.setLineOffset(this._offsetEnd);
		},
		translate: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isAwait() === true) {
					return true;
				}
			}
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				if(statement.isExit() === true) {
					return true;
				}
			}
			return false;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallMacroStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var Router = KSHelper.namespace(function() {
		function assess(methods, flattenable, overflow) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(flattenable === void 0 || flattenable === null) {
				throw new TypeError("'flattenable' is not nullable");
			}
			if(overflow === void 0 || overflow === null) {
				overflow = false;
			}
			if(methods.length === 0) {
				return (function() {
					var d = new Dictionary();
					d.async = false;
					d.methods = [];
					return d;
				})();
			}
			else if(methods.length === 1) {
				var method = methods[0];
				method.index(0);
				var argFilters = [];
				if(KSOperator.eq(method.absoluteMax(), Infinity)) {
					var rest = method.restIndex();
					var min = method.absoluteMin();
					if(KSOperator.lt(rest, min)) {
						buildArgFilter(method, argFilters, min, Infinity);
					}
					else {
						for(var n = min; n < rest; ++n) {
							buildArgFilter(method, argFilters, n, n);
						}
						buildArgFilter(method, argFilters, min, Infinity);
					}
				}
				else {
					for(var n = method.absoluteMin(), __ks_0 = method.absoluteMax(); n <= __ks_0; ++n) {
						buildArgFilter(method, argFilters, n, n);
					}
				}
				return (function() {
					var d = new Dictionary();
					d.async = method.isAsync();
					d.methods = [(function() {
						var d = new Dictionary();
						d.method = method;
						d.index = 0;
						d.min = method.absoluteMin();
						d.max = method.absoluteMax();
						d.filters = [];
						d.argFilters = argFilters;
						return d;
					})()];
					return d;
				})();
			}
			var groups = new Dictionary();
			var infinities = [];
			var min = Infinity;
			var max = 0;
			for(var index = 0, __ks_0 = methods.length, method; index < __ks_0; ++index) {
				method = methods[index];
				method.index(index);
				if(KSOperator.eq(method.absoluteMax(), Infinity)) {
					infinities.push(method);
				}
				else {
					for(var n = method.absoluteMin(), __ks_1 = method.absoluteMax(); n <= __ks_1; ++n) {
						if(KSType.isValue(groups[n])) {
							groups[n].methods.push(method);
						}
						else {
							groups[n] = (function() {
								var d = new Dictionary();
								d.n = n;
								d.methods = [method];
								return d;
							})();
						}
					}
					min = Math.min(min, method.absoluteMin());
					max = Math.max(max, method.absoluteMax());
				}
			}
			var async = methods[0].isAsync();
			if(KSOperator.eq(min, Infinity)) {
				var assessment = (function() {
					var d = new Dictionary();
					d.async = async;
					d.methods = assessUnbounded(methods, infinities, async);
					return d;
				})();
				assessment.flattenable = (flattenable === true) && (isFlattenable(assessment.methods) === true);
				return assessment;
			}
			else {
				var assessment = (function() {
					var d = new Dictionary();
					d.async = async;
					d.methods = assessBounded(methods, groups, min, max, overflow);
					return d;
				})();
				if(infinities.length === 1) {
					var method = infinities[0];
					assessment.methods.push((function() {
						var d = new Dictionary();
						d.method = method;
						d.index = method.index();
						d.min = 0;
						d.max = Infinity;
						d.filters = [];
						return d;
					})());
				}
				else if(infinities.length > 1) {
					throw new NotImplementedException();
				}
				assessment.flattenable = (flattenable === true) && (isFlattenable(assessment.methods) === true);
				return assessment;
			}
		}
		function assessBounded(methods, groups, min, max, overflow) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(groups === void 0 || groups === null) {
				throw new TypeError("'groups' is not nullable");
			}
			if(min === void 0 || min === null) {
				throw new TypeError("'min' is not nullable");
			}
			if(max === void 0 || max === null) {
				throw new TypeError("'max' is not nullable");
			}
			if(overflow === void 0 || overflow === null) {
				throw new TypeError("'overflow' is not nullable");
			}
			for(var i = min; i <= max; ++i) {
				var group = groups[i];
				if(KSType.isValue(group)) {
					var gg;
					for(var j = i + 1; j <= max && ((KSType.isValue(groups[j]) ? (gg = groups[j], true) : false) && (gg.methods.length === 1 && 1 === group.methods.length) && __ks_Array._cm_same(gg.methods, group.methods)); ++j) {
						if(KSType.isArray(group.n)) {
							group.n.push(j);
						}
						else {
							group.n = [i, j];
						}
						delete groups[j];
					}
				}
			}
			var assessment = [];
			for(var k in groups) {
				var group = groups[k];
				var __ks_min_1, __ks_max_1;
				if(KSType.isArray(group.n)) {
					__ks_min_1 = group.n[0];
					__ks_max_1 = group.n[KSOperator.subtraction(group.n.length, 1)];
				}
				else {
					__ks_min_1 = __ks_max_1 = group.n;
				}
				if(group.methods.length === 1) {
					assessment.push((function() {
						var d = new Dictionary();
						d.method = group.methods[0];
						d.index = group.methods[0].index();
						d.min = __ks_min_1;
						d.max = __ks_max_1;
						d.filters = [];
						return d;
					})());
				}
				else {
					group.methods.sort(function(a, b) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(a === void 0 || a === null) {
							throw new TypeError("'a' is not nullable");
						}
						if(b === void 0 || b === null) {
							throw new TypeError("'b' is not nullable");
						}
						return KSOperator.subtraction(a.max(), b.max());
					});
					var parameters = new Dictionary();
					if(KSType.isArray(group.n)) {
						for(var __ks_0 = 0, __ks_1 = group.n.length, n; __ks_0 < __ks_1; ++__ks_0) {
							n = group.n[__ks_0];
							for(var __ks_2 = 0, __ks_3 = group.methods.length, method; __ks_2 < __ks_3; ++__ks_2) {
								method = group.methods[__ks_2];
								mapMethod(method, n, parameters);
							}
						}
					}
					else {
						for(var __ks_0 = 0, __ks_1 = group.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = group.methods[__ks_0];
							mapMethod(method, group.n, parameters);
						}
					}
					var length = methods.length;
					for(var name in parameters) {
						var parameter = parameters[name];
						for(var __ks_name_1 in parameter.types) {
							var type = parameter.types[__ks_name_1];
							if(type.methods.length === length) {
								parameter.weight = KSOperator.subtraction(parameter.weight, type.weight);
								delete parameter.types[__ks_name_1];
							}
						}
						if(parameter.weight === 0) {
							delete parameters[name];
						}
					}
					var sortedParameters = KSHelper.mapDictionary(parameters, function(__ks_0, value) {
						return value;
					}).sort(function(a, b) {
						if(arguments.length < 2) {
							throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(a === void 0 || a === null) {
							throw new TypeError("'a' is not nullable");
						}
						if(b === void 0 || b === null) {
							throw new TypeError("'b' is not nullable");
						}
						return KSOperator.subtraction(b.weight, a.weight);
					});
					var sortedIndexes = KSHelper.mapArray(sortedParameters, function(value) {
						return KSOperator.subtraction(value.index, 1);
					});
					var indexes = [];
					for(var __ks_0 = 0, __ks_1 = sortedParameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
						parameter = sortedParameters[__ks_0];
						for(var hash in parameter.types) {
							var type = parameter.types[hash];
							__ks_Array._im_remove.apply(null, [type.methods].concat(indexes));
							if(type.methods.length === 0) {
								delete parameter.types[hash];
								parameter.weight = KSOperator.subtraction(parameter.weight, type.weight);
							}
						}
						for(var hash in parameter.types) {
							var type = parameter.types[hash];
							if(type.methods.length === 1) {
								__ks_Array._im_pushUniq(indexes, type.methods[0]);
							}
						}
					}
					checkMethods(methods, parameters, __ks_min_1, __ks_max_1, overflow, 0, sortedIndexes, assessment, []);
				}
			}
			return assessment;
		}
		function assessUnbounded(methods, infinities, async) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(infinities === void 0 || infinities === null) {
				throw new TypeError("'infinities' is not nullable");
			}
			if(async === void 0 || async === null) {
				throw new TypeError("'async' is not nullable");
			}
			var groups = new Dictionary();
			var min = Infinity;
			var max = 0;
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				var methodMin = 0;
				var methodMax = 0;
				for(var __ks_2 = 0, __ks_3 = method.parameters(), __ks_4 = __ks_3.length, parameter; __ks_2 < __ks_4; ++__ks_2) {
					parameter = __ks_3[__ks_2];
					if((parameter.min() !== 0) && (KSOperator.neq(parameter.max(), Infinity))) {
						methodMin = KSOperator.addOrConcat(methodMin, parameter.min());
						methodMax = KSOperator.addOrConcat(methodMax, parameter.max());
					}
				}
				for(var n = methodMin; n <= methodMax; ++n) {
					if(KSType.isValue(groups[n])) {
						groups[n].methods.push(method);
					}
					else {
						groups[n] = (function() {
							var d = new Dictionary();
							d.n = n;
							d.methods = [method];
							return d;
						})();
					}
				}
				min = Math.min(min, methodMin);
				max = Math.max(max, methodMax);
			}
			for(var i = min; i <= max; ++i) {
				var group = groups[i];
				if(KSType.isValue(group)) {
					var gg;
					for(var j = i + 1; j <= max && ((KSType.isValue(groups[j]) ? (gg = groups[j], true) : false) && __ks_Array._cm_same(gg.methods, group.methods)); ++j) {
						if(KSType.isArray(group.n)) {
							group.n.push(j);
						}
						else {
							group.n = [i, j];
						}
						delete groups[j];
					}
				}
			}
			var assessment = [];
			for(var k in groups) {
				var group = groups[k];
				var parameters = new Dictionary();
				for(var __ks_0 = 0, __ks_1 = group.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = group.methods[__ks_0];
					mapMethod(method, group.n, parameters);
				}
				var indexes = [];
				for(var __ks_0 = 0, __ks_1 = KSHelper.mapDictionary(parameters, function(__ks_0, value) {
					return value;
				}).sort(function(a, b) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(a === void 0 || a === null) {
						throw new TypeError("'a' is not nullable");
					}
					if(b === void 0 || b === null) {
						throw new TypeError("'b' is not nullable");
					}
					return KSOperator.subtraction(b.weight, a.weight);
				}), __ks_2 = __ks_1.length, parameter; __ks_0 < __ks_2; ++__ks_0) {
					parameter = __ks_1[__ks_0];
					for(var hash in parameter.types) {
						var type = parameter.types[hash];
						__ks_Array._im_remove.apply(null, [type.methods].concat(indexes));
						if(type.methods.length === 0) {
							delete parameter.types[hash];
						}
					}
					for(var __ks_3 in parameter.types) {
						var type = parameter.types[__ks_3];
						if(type.methods.length === 1) {
							__ks_Array._im_pushUniq(indexes, type.methods[0]);
						}
					}
				}
				checkInfinityMethods(methods, parameters, group.n, 0, assessment, []);
			}
			return assessment;
		}
		function buildArgFilter() {
			if(arguments.length === 4) {
				var __ks_i = -1;
				var method = arguments[++__ks_i];
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				var lines = arguments[++__ks_i];
				if(lines === void 0 || lines === null) {
					throw new TypeError("'lines' is not nullable");
				}
				var min = arguments[++__ks_i];
				if(min === void 0 || min === null) {
					throw new TypeError("'min' is not nullable");
				}
				var max = arguments[++__ks_i];
				if(max === void 0 || max === null) {
					throw new TypeError("'max' is not nullable");
				}
				var line = (function() {
					var d = new Dictionary();
					d.min = min;
					d.max = max;
					d.filters = [];
					return d;
				})();
				buildArgFilter(method.parameters(), 0, lines, line, 0, method.min(), min);
			}
			else if(arguments.length === 7) {
				var __ks_i = -1;
				var parameters = arguments[++__ks_i];
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				var pIndex = arguments[++__ks_i];
				if(pIndex === void 0 || pIndex === null) {
					throw new TypeError("'pIndex' is not nullable");
				}
				var lines = arguments[++__ks_i];
				if(lines === void 0 || lines === null) {
					throw new TypeError("'lines' is not nullable");
				}
				var line = arguments[++__ks_i];
				if(line === void 0 || line === null) {
					throw new TypeError("'line' is not nullable");
				}
				var index = arguments[++__ks_i];
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var count = arguments[++__ks_i];
				if(count === void 0 || count === null) {
					throw new TypeError("'count' is not nullable");
				}
				var limit = arguments[++__ks_i];
				if(limit === void 0 || limit === null) {
					throw new TypeError("'limit' is not nullable");
				}
				if(pIndex === parameters.length) {
					if(count === limit) {
						lines.push(line);
					}
					return;
				}
				var parameter = parameters[pIndex];
				var type = parameter.type();
				if(parameter.hasDefaultValue() === true) {
					type = type.setNullable(true);
				}
				for(var i = 1, __ks_0 = parameter.min(); i <= __ks_0; ++i) {
					line.filters.push((function() {
						var d = new Dictionary();
						d.index = index;
						d.type = type;
						return d;
					})());
					++index;
				}
				if(KSOperator.eq(parameter.max(), Infinity)) {
					line.rest = (function() {
						var d = new Dictionary();
						d.index = index;
						d.type = type;
						return d;
					})();
					index = KSOperator.subtraction(count, limit);
					buildArgFilter(parameters, KSOperator.addOrConcat(pIndex, 1), lines, line, index, count, limit);
				}
				else if(KSOperator.lt(count, limit) && KSOperator.gt(parameter.max(), parameter.min())) {
					buildArgFilter(parameters, KSOperator.addOrConcat(pIndex, 1), lines, (function() {
						var d = new Dictionary();
						d.min = line.min;
						d.max = line.max;
						d.filters = [].concat(line.filters);
						return d;
					})(), index, count, limit);
					for(var i = KSOperator.addOrConcat(parameter.min(), 1), __ks_0 = parameter.max(); i <= __ks_0 && KSOperator.lt(count, limit); ++i) {
						line.filters.push((function() {
							var d = new Dictionary();
							d.index = index;
							d.type = type;
							return d;
						})());
						++index;
						++count;
						buildArgFilter(parameters, KSOperator.addOrConcat(pIndex, 1), lines, (function() {
							var d = new Dictionary();
							d.min = line.min;
							d.max = line.max;
							d.filters = [].concat(line.filters);
							return d;
						})(), index, count, limit);
					}
				}
				else {
					buildArgFilter(parameters, KSOperator.addOrConcat(pIndex, 1), lines, line, index, count, limit);
				}
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		};
		function checkMethods(methods, parameters, min, max, overflow, sortedIndex, sortedIndexes, assessment, filters) {
			if(arguments.length < 9) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 9)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(min === void 0 || min === null) {
				throw new TypeError("'min' is not nullable");
			}
			if(max === void 0 || max === null) {
				throw new TypeError("'max' is not nullable");
			}
			if(overflow === void 0 || overflow === null) {
				throw new TypeError("'overflow' is not nullable");
			}
			if(sortedIndex === void 0 || sortedIndex === null) {
				throw new TypeError("'sortedIndex' is not nullable");
			}
			if(sortedIndexes === void 0 || sortedIndexes === null) {
				throw new TypeError("'sortedIndexes' is not nullable");
			}
			if(assessment === void 0 || assessment === null) {
				throw new TypeError("'assessment' is not nullable");
			}
			if(filters === void 0 || filters === null) {
				throw new TypeError("'filters' is not nullable");
			}
			var index = sortedIndexes[sortedIndex];
			if(!KSType.isValue(parameters[KSOperator.addOrConcat(index, 1)])) {
				NotSupportedException.throw();
			}
			var tree = [];
			var usages = [];
			for(var __ks_0 in parameters[KSOperator.addOrConcat(index, 1)].types) {
				var type = parameters[KSOperator.addOrConcat(index, 1)].types[__ks_0];
				var item = (function() {
					var d = new Dictionary();
					d.type = type.type;
					d.methods = KSHelper.mapArray(type.methods, function(i) {
						return methods[i];
					});
					d.usage = type.methods.length;
					return d;
				})();
				tree.push(item);
				for(var __ks_1 = 0, __ks_2 = type.methods.length, i; __ks_1 < __ks_2; ++__ks_1) {
					i = type.methods[__ks_1];
					var method = methods[i];
					var nf = true;
					var usage;
					for(var __ks_3 = 0, __ks_4 = usages.length; __ks_3 < __ks_4 && nf; ++__ks_3) {
						usage = usages[__ks_3];
						if(usage.method === method) {
							nf = false;
						}
					}
					if(nf) {
						usages.push((function() {
							var d = new Dictionary();
							d.method = method;
							d.types = [item];
							return d;
						})());
					}
					else {
						usage.types.push(item);
					}
				}
			}
			if(tree.length === 0) {
				checkMethods(methods, parameters, min, max, overflow, KSOperator.addOrConcat(sortedIndex, 1), sortedIndexes, assessment, filters);
			}
			else if(tree.length === 1) {
				var item = tree[0];
				if(item.methods.length === 1) {
					assessment.push((function() {
						var d = new Dictionary();
						d.method = item.methods[0];
						d.index = item.methods[0].index();
						d.min = min;
						d.max = max;
						d.filters = filters;
						return d;
					})());
				}
				else if((item.methods.length === 2) && (KSOperator.addOrConcat(sortedIndex, 1) === max)) {
					var maxed = null;
					for(var __ks_0 = 0, __ks_1 = item.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = item.methods[__ks_0];
						if(method.max() === max) {
							if(maxed === null) {
								maxed = method;
							}
							else {
								NotSupportedException.throw();
							}
						}
					}
					if(maxed !== null) {
						assessment.push((function() {
							var d = new Dictionary();
							d.method = maxed;
							d.index = maxed.index();
							d.min = min;
							d.max = max;
							d.filters = filters;
							return d;
						})());
					}
					else {
						NotSupportedException.throw();
					}
				}
				else {
					checkMethods(methods, parameters, min, max, overflow, KSOperator.addOrConcat(sortedIndex, 1), sortedIndexes, assessment, filters);
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = usages.length, usage; __ks_0 < __ks_1; ++__ks_0) {
					usage = usages[__ks_0];
					var count = usage.types.length;
					for(var __ks_2 = 0, __ks_3 = usage.types.length, type; __ks_2 < __ks_3 && KSOperator.gte(count, 0); ++__ks_2) {
						type = usage.types[__ks_2];
						count = KSOperator.subtraction(count, type.usage);
					}
					if(count === 0) {
						var item = (function() {
							var d = new Dictionary();
							d.type = [];
							d.path = [];
							d.methods = [usage.method];
							d.usage = 0;
							d.weight = 0;
							return d;
						})();
						for(var __ks_2 = 0, __ks_3 = usage.types.length, type; __ks_2 < __ks_3; ++__ks_2) {
							type = usage.types[__ks_2];
							item.type.push(type.type);
							item.usage = KSOperator.addOrConcat(item.usage, type.usage);
							__ks_Array._im_remove(tree, type);
						}
						tree.push(item);
					}
				}
				tree.sort(function(a, b) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(a === void 0 || a === null) {
						throw new TypeError("'a' is not nullable");
					}
					if(b === void 0 || b === null) {
						throw new TypeError("'b' is not nullable");
					}
					return compareTypes(a.type, b.type);
				});
				for(var i = 0, __ks_0 = tree.length, item; i < __ks_0; ++i) {
					item = tree[i];
					if((i + 1) === tree.length) {
						if(item.methods.length === 1) {
							if(overflow === true) {
								filters.push((function() {
									var d = new Dictionary();
									d.index = index;
									d.type = item.type[0];
									return d;
								})());
								assessment.push((function() {
									var d = new Dictionary();
									d.method = item.methods[0];
									d.index = item.methods[0].index();
									d.min = min;
									d.max = max;
									d.filters = filters;
									return d;
								})());
							}
							else {
								assessment.push((function() {
									var d = new Dictionary();
									d.method = item.methods[0];
									d.index = item.methods[0].index();
									d.min = min;
									d.max = max;
									d.filters = filters;
									d.argFilters = [(function() {
										var d = new Dictionary();
										d.min = min;
										d.max = max;
										d.filters = [(function() {
											var d = new Dictionary();
											d.index = index;
											d.type = item.type[0];
											return d;
										})()];
										return d;
									})()];
									return d;
								})());
							}
						}
						else {
							checkMethods(methods, parameters, min, max, overflow, KSOperator.addOrConcat(sortedIndex, 1), sortedIndexes, assessment, filters);
						}
					}
					else {
						var __ks_filters_1 = filters.slice();
						__ks_filters_1.push((function() {
							var d = new Dictionary();
							d.index = index;
							d.type = item.type[0];
							return d;
						})());
						if(item.methods.length === 1) {
							assessment.push((function() {
								var d = new Dictionary();
								d.method = item.methods[0];
								d.index = item.methods[0].index();
								d.min = min;
								d.max = max;
								d.filters = __ks_filters_1;
								return d;
							})());
						}
						else {
							checkMethods(methods, parameters, min, max, overflow, KSOperator.addOrConcat(sortedIndex, 1), sortedIndexes, assessment, __ks_filters_1);
						}
					}
				}
			}
		}
		function checkInfinityMethods(methods, parameters, min, index, assessment, filters) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(min === void 0 || min === null) {
				throw new TypeError("'min' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(assessment === void 0 || assessment === null) {
				throw new TypeError("'assessment' is not nullable");
			}
			if(filters === void 0 || filters === null) {
				throw new TypeError("'filters' is not nullable");
			}
			if(!KSType.isValue(parameters[KSOperator.addOrConcat(index, 1)])) {
				NotSupportedException.throw();
			}
			else if(KSType.isNumber(parameters[KSOperator.addOrConcat(index, 1)])) {
				index = parameters[KSOperator.addOrConcat(index, 1)] - 1;
			}
			var tree = [];
			var usages = [];
			var type, nf, item, usage, i;
			for(var __ks_0 in parameters[KSOperator.addOrConcat(index, 1)].types) {
				var __ks_type_1 = parameters[KSOperator.addOrConcat(index, 1)].types[__ks_0];
				tree.push(item = (function() {
					var d = new Dictionary();
					d.type = __ks_type_1.type;
					d.methods = KSHelper.mapArray(__ks_type_1.methods, function(__ks_i_1) {
						return methods[__ks_i_1];
					});
					d.usage = __ks_type_1.methods.length;
					return d;
				})());
				if(__ks_type_1.type.isAny() === true) {
					item.weight = 0;
				}
				else {
					item.weight = 1000;
				}
				for(var __ks_1 = 0, __ks_2 = __ks_type_1.methods.length; __ks_1 < __ks_2; ++__ks_1) {
					i = __ks_type_1.methods[__ks_1];
					var method = methods[i];
					nf = true;
					for(var __ks_3 = 0, __ks_4 = usages.length; __ks_3 < __ks_4 && nf; ++__ks_3) {
						usage = usages[__ks_3];
						if(usage.method === method) {
							nf = false;
						}
					}
					if(nf) {
						usages.push(usage = (function() {
							var d = new Dictionary();
							d.method = method;
							d.types = [item];
							return d;
						})());
					}
					else {
						usage.types.push(item);
					}
				}
			}
			if(tree.length === 0) {
				checkInfinityMethods(methods, parameters, min, KSOperator.addOrConcat(index, 1), assessment, filters);
			}
			else if(tree.length === 1) {
				item = tree[0];
				if(item.methods.length === 1) {
					assessment.push((function() {
						var d = new Dictionary();
						d.method = item.methods[0];
						d.index = item.methods[0].index();
						d.min = min;
						d.max = Infinity;
						d.filters = filters;
						return d;
					})());
				}
				else {
					checkInfinityMethods(methods, parameters, min, KSOperator.addOrConcat(index, 1), assessment, filters);
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = usages.length, __ks_usage_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_usage_1 = usages[__ks_0];
					var count = __ks_usage_1.types.length;
					for(var __ks_2 = 0, __ks_3 = __ks_usage_1.types.length, __ks_type_1; __ks_2 < __ks_3 && KSOperator.gte(count, 0); ++__ks_2) {
						__ks_type_1 = __ks_usage_1.types[__ks_2];
						count = KSOperator.subtraction(count, __ks_type_1.usage);
					}
					if(count === 0) {
						var __ks_item_1 = (function() {
							var d = new Dictionary();
							d.type = [];
							d.path = [];
							d.methods = [__ks_usage_1.method];
							d.usage = 0;
							d.weight = 0;
							return d;
						})();
						for(var __ks_2 = 0, __ks_3 = __ks_usage_1.types.length; __ks_2 < __ks_3; ++__ks_2) {
							type = __ks_usage_1.types[__ks_2];
							__ks_item_1.type.push(type.type);
							__ks_item_1.usage = KSOperator.addOrConcat(__ks_item_1.usage, type.usage);
							__ks_item_1.weight = KSOperator.addOrConcat(__ks_item_1.weight, type.weight);
							__ks_Array._im_remove(tree, type);
						}
						tree.push(__ks_item_1);
					}
				}
				tree.sort(function(a, b) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(a === void 0 || a === null) {
						throw new TypeError("'a' is not nullable");
					}
					if(b === void 0 || b === null) {
						throw new TypeError("'b' is not nullable");
					}
					if((a.weight === 0) && (b.weight !== 0)) {
						return 1;
					}
					else if(b.weight === 0) {
						return -1;
					}
					else if(a.type.length === b.type.length) {
						if(a.usage === b.usage) {
							return KSOperator.subtraction(b.weight, a.weight);
						}
						else {
							return KSOperator.subtraction(b.usage, a.usage);
						}
					}
					else {
						return KSOperator.subtraction(a.type.length, b.type.length);
					}
				});
				for(var __ks_i_1 = 0, __ks_0 = tree.length, __ks_item_1; __ks_i_1 < __ks_0; ++__ks_i_1) {
					__ks_item_1 = tree[__ks_i_1];
					if(__ks_item_1.type[0].isAny() === true) {
						if(__ks_item_1.methods.length === 1) {
							assessment.push((function() {
								var d = new Dictionary();
								d.method = __ks_item_1.methods[0];
								d.index = __ks_item_1.methods[0].index();
								d.min = min;
								d.max = Infinity;
								d.filters = filters;
								return d;
							})());
						}
						else {
							checkInfinityMethods(methods, parameters, min, KSOperator.addOrConcat(index, 1), assessment, filters);
						}
					}
					else {
						var __ks_filters_1 = filters.slice();
						__ks_filters_1.push((function() {
							var d = new Dictionary();
							d.index = index;
							d.type = __ks_item_1.type[0];
							return d;
						})());
						if(__ks_item_1.methods.length === 1) {
							assessment.push((function() {
								var d = new Dictionary();
								d.method = __ks_item_1.methods[0];
								d.index = __ks_item_1.methods[0].index();
								d.min = min;
								d.max = Infinity;
								d.filters = __ks_filters_1;
								return d;
							})());
						}
						else {
							checkInfinityMethods(methods, parameters, min, KSOperator.addOrConcat(index, 1), assessment, __ks_filters_1);
						}
					}
				}
			}
		}
		function compareTypes(aTypes, bTypes) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(aTypes === void 0 || aTypes === null) {
				throw new TypeError("'aTypes' is not nullable");
			}
			if(bTypes === void 0 || bTypes === null) {
				throw new TypeError("'bTypes' is not nullable");
			}
			if(!KSType.isArray(aTypes)) {
				aTypes = [aTypes];
			}
			if(!KSType.isArray(bTypes)) {
				bTypes = [bTypes];
			}
			if((aTypes.length === 1) && (bTypes.length === 1)) {
				return aTypes[0].compareTo(bTypes[0]);
			}
			else {
				var aGreater = 0;
				for(var __ks_0 = 0, __ks_1 = aTypes.length, aType; __ks_0 < __ks_1; ++__ks_0) {
					aType = aTypes[__ks_0];
					var bGreater = 0;
					for(var __ks_2 = 0, __ks_3 = bTypes.length, bType; __ks_2 < __ks_3; ++__ks_2) {
						bType = bTypes[__ks_2];
						if(aType.isMorePreciseThan(bType) === true) {
							return -1;
						}
						else if(bType.isMorePreciseThan(aType) === true) {
							return 1;
						}
						else if(KSOperator.gt(bType.compareTo(aType), 0)) {
							++bGreater;
						}
					}
					if(bGreater === bTypes.length) {
						++aGreater;
					}
				}
				return aTypes.length - bTypes.length;
			}
		}
		function isFlattenable(methods) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(KSOperator.lte(methods.length, 1)) {
				return true;
			}
			var done = new Dictionary();
			var min = 0;
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(done[method.index] !== true) {
					done[method.index] = true;
					for(var __ks_2 = 0, __ks_3 = methods.length, m; __ks_2 < __ks_3; ++__ks_2) {
						m = methods[__ks_2];
						if(m.index === method.index) {
							if(m.filters.length === 0) {
								min = m.min;
							}
							else if(KSOperator.lte(m.min, min)) {
								return false;
							}
						}
					}
				}
			}
			return true;
		}
		function mapMethod(method, target, map) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(map === void 0 || map === null) {
				throw new TypeError("'map' is not nullable");
			}
			var index = 1;
			var count = method.min();
			var item;
			var fi = false;
			for(var p = 0, __ks_0 = method.parameters(), __ks_1 = __ks_0.length, parameter; p < __ks_1; ++p) {
				parameter = __ks_0[p];
				for(var i = 1, __ks_2 = parameter.min(); i <= __ks_2; ++i) {
					if(KSType.isValue(map[index]) ? (item = map[index], false) : true) {
						item = map[index] = (function() {
							var d = new Dictionary();
							d.index = index;
							d.types = new Dictionary();
							d.weight = 0;
							return d;
						})();
					}
					mapParameter(parameter.type(), method.index(), item, target);
					++index;
				}
				if(KSOperator.eq(parameter.max(), Infinity)) {
					if(!fi) {
						fi = true;
						var oldIndex = index;
						index = KSOperator.subtraction(index, KSOperator.addOrConcat(method.min(), 1));
						map[oldIndex] = index;
					}
				}
				else {
					for(var i = KSOperator.addOrConcat(parameter.min(), 1), __ks_2 = parameter.max(); i <= __ks_2 && KSOperator.lt(count, target); ++i) {
						if(KSType.isValue(map[index]) ? (item = map[index], false) : true) {
							item = map[index] = (function() {
								var d = new Dictionary();
								d.index = index;
								d.types = new Dictionary();
								d.weight = 0;
								return d;
							})();
						}
						mapParameter(parameter.type(), method.index(), item, target);
						++index;
						++count;
					}
				}
			}
		}
		function mapParameter(type, method, map, target) {
			if(arguments.length < 4) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			if(map === void 0 || map === null) {
				throw new TypeError("'map' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(KSType.isInstance(type, UnionType)) {
				for(var __ks_0 = 0, __ks_1 = type.types(), __ks_2 = __ks_1.length, value; __ks_0 < __ks_2; ++__ks_0) {
					value = __ks_1[__ks_0];
					mapParameter(value, method, map, target);
				}
			}
			else {
				if(KSType.isDictionary(map.types[type.hashCode()])) {
					map.types[type.hashCode()].methods.push(method);
				}
				else {
					var weight = 0;
					if(type.isAny() === true) {
						weight = 1;
					}
					else {
						weight = 100;
						if(map.index === target) {
							weight += 10000;
						}
					}
					map.types[type.hashCode()] = (function() {
						var d = new Dictionary();
						d.type = type;
						d.methods = [method];
						d.weight = weight;
						return d;
					})();
					map.weight = KSOperator.addOrConcat(map.weight, weight);
				}
			}
		}
		function matchArguments(assessment, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(assessment === void 0 || assessment === null) {
				throw new TypeError("'assessment' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			var matches = [];
			var spreadIndex = -1;
			for(var index = 0, __ks_0 = __ks_arguments_1.length, argument; index < __ks_0; ++index) {
				argument = __ks_arguments_1[index];
				if(argument.isSpread() === true) {
					spreadIndex = index;
					break;
				}
			}
			var length = __ks_arguments_1.length;
			if(spreadIndex !== -1) {
				for(var __ks_0 = 0, __ks_1 = assessment.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = assessment.methods[__ks_0];
					if(KSOperator.lte(length, method.max)) {
						matches.push(method.method);
					}
				}
				return matches;
			}
			for(var __ks_0 = 0, __ks_1 = assessment.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = assessment.methods[__ks_0];
				if(KSOperator.lte(method.min, length) && KSOperator.lte(length, method.max)) {
					if((method.filters.length === 0) && !KSType.isValue(method.argFilters)) {
						matches.push(method.method);
					}
					else {
						var matched = true;
						var perfect = true;
						for(var __ks_2 = 0, __ks_3 = method.filters.length, filter; __ks_2 < __ks_3 && matched; ++__ks_2) {
							filter = method.filters[__ks_2];
							if(__ks_arguments_1[filter.index].isAny() === true) {
								perfect = false;
							}
							else if(!(__ks_arguments_1[filter.index].matchContentOf(filter.type) === true)) {
								matched = false;
							}
						}
						if(KSType.isValue(method.argFilters)) {
							var notFound = true;
							for(var __ks_2 = 0, __ks_3 = method.argFilters.length, line; __ks_2 < __ks_3 && notFound; ++__ks_2) {
								line = method.argFilters[__ks_2];
								if(KSOperator.lte(line.min, length) && KSOperator.lte(length, line.max)) {
									var isMatched = true;
									var isPerfect = perfect;
									for(var __ks_4 = 0, __ks_5 = line.filters.length, filter; __ks_4 < __ks_5 && isMatched; ++__ks_4) {
										filter = line.filters[__ks_4];
										if(__ks_arguments_1[filter.index].isAny() === true) {
											isPerfect = false;
										}
										else if(!(__ks_arguments_1[filter.index].matchContentOf(filter.type) === true)) {
											isMatched = false;
										}
									}
									if(isMatched) {
										notFound = false;
										perfect = isPerfect;
									}
								}
							}
							if(notFound) {
								matched = false;
							}
						}
						if(matched) {
							if(perfect) {
								return [method.method];
							}
							else {
								matches.push(method.method);
							}
						}
					}
				}
			}
			return matches;
		}
		function sortTreeMin(methods, max) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(max === void 0 || max === null) {
				throw new TypeError("'max' is not nullable");
			}
			if(KSOperator.eq(max, Infinity)) {
				var tree = (function() {
					var d = new Dictionary();
					d.keys = [];
					return d;
				})();
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(KSType.isValue(tree[method.min])) {
						tree[method.min].push(method);
					}
					else {
						tree[method.min] = [method];
						tree.keys.push(method.min);
					}
				}
				if((tree.keys.length === 1) && (tree.keys[0] === 0)) {
					return tree["0"];
				}
				else {
					return tree;
				}
			}
			else {
				var tree = (function() {
					var d = new Dictionary();
					d.equal = [];
					d.midway = (function() {
						var d = new Dictionary();
						d.keys = [];
						return d;
					})();
					return d;
				})();
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					if(method.min === max) {
						tree.equal.push(method);
					}
					else {
						if(KSType.isValue(tree.midway[method.min])) {
							tree.midway[method.min].push(method);
						}
						else {
							tree.midway[method.min] = [method];
							tree.midway.keys.push(method.min);
						}
					}
				}
				if((tree.equal.length === 1) && (tree.midway.keys.length === 0)) {
					return tree.equal;
				}
				else {
					return tree;
				}
			}
		}
		function toFragments(assessment, fragments, argName, returns, header, footer, call, wrongdoer, node) {
			if(arguments.length < 9) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 9)");
			}
			if(assessment === void 0 || assessment === null) {
				throw new TypeError("'assessment' is not nullable");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(argName === void 0 || argName === null) {
				throw new TypeError("'argName' is not nullable");
			}
			if(returns === void 0 || returns === null) {
				throw new TypeError("'returns' is not nullable");
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(footer === void 0 || footer === null) {
				throw new TypeError("'footer' is not nullable");
			}
			if(call === void 0 || call === null) {
				throw new TypeError("'call' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var block = header(node, fragments);
			if(assessment.methods.length === 0) {
				wrongdoer(block, null, argName, assessment.async, returns);
			}
			else if(assessment.methods.length === 1) {
				var method = assessment.methods[0].method;
				var min = method.absoluteMin();
				var max = method.absoluteMax();
				if((min === 0) && KSOperator.gte(max, Infinity)) {
					call(block, method, 0);
				}
				else if(min === max) {
					var ctrl = block.newControl();
					ctrl.code("if(" + argName + ".length === " + min + ")").step();
					call(ctrl, method, 0);
					wrongdoer(block, ctrl, argName, assessment.async, returns);
				}
				else if(KSOperator.lt(max, Infinity)) {
					var ctrl = block.newControl();
					ctrl.code("if(" + argName + ".length >= " + min + " && " + argName + ".length <= " + max + ")").step();
					call(ctrl, method, 0);
					wrongdoer(block, ctrl, argName, assessment.async, returns);
				}
				else {
					call(block, method, 0);
				}
			}
			else if(assessment.flattenable === true) {
				var ctrl = block.newControl();
				var ne = false;
				for(var __ks_0 = 0, __ks_1 = assessment.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = assessment.methods[__ks_0];
					if(method.done !== true) {
						ne = toFlatFragments(assessment, method, ctrl, argName, call, node);
					}
				}
				if(ne) {
					wrongdoer(block, ctrl, argName, assessment.async, returns);
				}
				else {
					ctrl.done();
				}
			}
			else {
				var tree = new Dictionary();
				for(var __ks_0 = 0, __ks_1 = assessment.methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = assessment.methods[__ks_0];
					if(KSType.isValue(tree[method.max])) {
						tree[method.max].push(method);
					}
					else {
						tree[method.max] = [method];
					}
				}
				for(var max in tree) {
					var methods = tree[max];
					tree[max] = sortTreeMin(methods, methods[0].max);
				}
				var ctrl = block.newControl();
				var ne = false;
				for(var __ks_0 in tree) {
					var item = tree[__ks_0];
					if(KSType.isArray(item)) {
						ne = toEqLengthFragments(item, ctrl, argName, call, node);
					}
					else {
						ne = toMixLengthFragments(item, ctrl, argName, call, node);
					}
				}
				if(ne) {
					wrongdoer(block, ctrl, argName, assessment.async, returns);
				}
				else {
					ctrl.done();
				}
			}
			footer(block);
			return fragments;
		}
		function toEqLengthFragments(methods, ctrl, argName, call, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(ctrl === void 0 || ctrl === null) {
				throw new TypeError("'ctrl' is not nullable");
			}
			if(argName === void 0 || argName === null) {
				throw new TypeError("'argName' is not nullable");
			}
			if(call === void 0 || call === null) {
				throw new TypeError("'call' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var method = methods[0];
			if((KSOperator.eq(method.max, Infinity)) && (method.min === 0)) {
				if(!(ctrl.isFirstStep() === true)) {
					ctrl.step().code("else").step();
				}
			}
			else {
				if(!(ctrl.isFirstStep() === true)) {
					ctrl.step().code("else ");
				}
				ctrl.code("if(");
				if(method.min === method.max) {
					ctrl.code("" + argName + ".length === " + method.min);
				}
				else if(KSOperator.eq(method.max, Infinity)) {
					ctrl.code("" + argName + ".length >= " + method.min);
				}
				else if(KSOperator.addOrConcat(method.min, 1) === method.max) {
					ctrl.code("" + argName + ".length === " + method.min + " || " + argName + ".length === " + method.max);
				}
				else {
					ctrl.code("" + argName + ".length >= " + method.min + " && " + argName + ".length <= " + method.max);
				}
				ctrl.code(")").step();
			}
			if(methods.length === 1) {
				call(ctrl, method.method, method.index);
				return !((KSOperator.eq(method.max, Infinity)) && (method.min === 0));
			}
			else {
				var ctrl2 = ctrl.newControl();
				var ne = false;
				for(var __ks_0 = 0, __ks_1 = methods.length, __ks_method_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_method_1 = methods[__ks_0];
					ne = toTreeTestFragments(__ks_method_1, ctrl2, argName, call, node);
				}
				ctrl2.done();
				return ne;
			}
		}
		function toFlatFragments(assessment, method, ctrl, argName, call, node) {
			if(arguments.length < 6) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 6)");
			}
			if(assessment === void 0 || assessment === null) {
				throw new TypeError("'assessment' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			if(ctrl === void 0 || ctrl === null) {
				throw new TypeError("'ctrl' is not nullable");
			}
			if(argName === void 0 || argName === null) {
				throw new TypeError("'argName' is not nullable");
			}
			if(call === void 0 || call === null) {
				throw new TypeError("'call' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var matchs = KSHelper.mapArray(assessment.methods, function(m) {
				return m;
			}, function(m) {
				return (m.done !== true) && (m.index === method.index);
			});
			if((matchs.length === 1) && (matchs[0].min === 0) && (KSOperator.eq(matchs[0].max, Infinity)) && (matchs[0].filters.length === 0)) {
				if(!(ctrl.isFirstStep() === true)) {
					ctrl.step().code("else").step();
				}
				call(ctrl, method.method, method.index);
				return false;
			}
			else {
				if(!(ctrl.isFirstStep() === true)) {
					ctrl.step().code("else ");
				}
				ctrl.code("if(");
				if(matchs.length === 1) {
					toFlatTestFragments(matchs[0], ctrl, false, argName, node);
				}
				else {
					var nf = false;
					for(var __ks_0 = 0, __ks_1 = matchs.length, match; __ks_0 < __ks_1; ++__ks_0) {
						match = matchs[__ks_0];
						if(nf) {
							ctrl.code(" || ");
						}
						else {
							nf = true;
						}
						toFlatTestFragments(match, ctrl, true, argName, node);
					}
				}
				ctrl.code(")").step();
				call(ctrl, method.method, method.index);
				return true;
			}
		}
		function toFlatTestFragments(match, ctrl, wrap, argName, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(match === void 0 || match === null) {
				throw new TypeError("'match' is not nullable");
			}
			if(ctrl === void 0 || ctrl === null) {
				throw new TypeError("'ctrl' is not nullable");
			}
			if(wrap === void 0 || wrap === null) {
				throw new TypeError("'wrap' is not nullable");
			}
			if(argName === void 0 || argName === null) {
				throw new TypeError("'argName' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			wrap = (wrap === true) && (match.filters.length !== 0);
			if(wrap) {
				ctrl.code("(");
			}
			if(match.min === match.max) {
				ctrl.code("" + argName + ".length === " + match.min);
			}
			else if(KSOperator.eq(match.max, Infinity)) {
				ctrl.code("" + argName + ".length >= " + match.min);
			}
			else if(KSOperator.addOrConcat(match.min, 1) === match.max) {
				ctrl.code("" + argName + ".length === " + match.min + " || " + argName + ".length === " + match.max);
			}
			else {
				ctrl.code("" + argName + ".length >= " + match.min + " && " + argName + ".length <= " + match.max);
			}
			if(match.filters.length === 1) {
				ctrl.code(" && ");
				var index = match.filters[0].index;
				if(KSOperator.gte(index, 0)) {
					match.filters[0].type.toTestFragments(ctrl, new Literal(false, node, node.scope(), "" + argName + "[" + index + "]"));
				}
				else {
					match.filters[0].type.toTestFragments(ctrl, new Literal(false, node, node.scope(), "" + argName + "[" + argName + ".length - " + (KSOperator.negative(index) - 1) + "]"));
				}
			}
			else if(KSOperator.gt(match.filters.length, 1)) {
				throw new NotImplementedException(node);
			}
			match.done = true;
			if(wrap) {
				ctrl.code(")");
			}
		}
		function toMixLengthFragments(tree, ctrl, argName, call, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(tree === void 0 || tree === null) {
				throw new TypeError("'tree' is not nullable");
			}
			if(ctrl === void 0 || ctrl === null) {
				throw new TypeError("'ctrl' is not nullable");
			}
			if(argName === void 0 || argName === null) {
				throw new TypeError("'argName' is not nullable");
			}
			if(call === void 0 || call === null) {
				throw new TypeError("'call' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var ne = false;
			if(tree.equal.length !== 0) {
				ne = toEqLengthFragments(tree.equal, ctrl, argName, call, node);
			}
			if(tree.midway.keys.length === 1) {
				ne = toEqLengthFragments(tree.midway[tree.midway.keys[0]], ctrl, argName, call, node);
			}
			else if(KSOperator.gt(tree.midway.keys.length, 1)) {
				throw new NotImplementedException(node);
			}
			return ne;
		}
		function toTreeTestFragments(method, ctrl, argName, call, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			if(ctrl === void 0 || ctrl === null) {
				throw new TypeError("'ctrl' is not nullable");
			}
			if(argName === void 0 || argName === null) {
				throw new TypeError("'argName' is not nullable");
			}
			if(call === void 0 || call === null) {
				throw new TypeError("'call' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(method.filters.length === 0) {
				if(!(ctrl.isFirstStep() === true)) {
					ctrl.step().code("else").step();
				}
			}
			else {
				if(!(ctrl.isFirstStep() === true)) {
					ctrl.step().code("else ");
				}
				ctrl.code("if(");
				if(method.filters.length === 1) {
					var index = method.filters[0].index;
					if(KSOperator.gte(index, 0)) {
						method.filters[0].type.toTestFragments(ctrl, new Literal(false, node, node.scope(), "" + argName + "[" + index + "]"));
					}
					else {
						method.filters[0].type.toTestFragments(ctrl, new Literal(false, node, node.scope(), "" + argName + "[" + argName + ".length - " + (KSOperator.negative(index) - 1) + "]"));
					}
				}
				else if(KSOperator.gt(method.filters.length, 1)) {
					throw new NotImplementedException(node);
				}
				ctrl.code(")").step();
			}
			call(ctrl, method.method, method.index);
			return true;
		}
		return {
			assess: assess,
			matchArguments: matchArguments,
			toFragments: toFragments
		};
	});
	var $compile = (function() {
		var d = new Dictionary();
		d.block = function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			return new Block($ast.block(data), parent, scope);
		};
		d.expression = function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			var expression;
			var clazz = $expressions[data.kind];
			if(KSType.isValue(clazz)) {
				expression = KSType.isClass(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.BinaryExpression.value) {
				var __ks_clazz_1;
				if(KSHelper.valueOf(data.operator.kind) === BinaryOperatorKind.Assignment.value) {
					var clazz;
					if(__ks_clazz_1 = $assignmentOperators[data.operator.assignment]) {
						expression = new __ks_clazz_1(data, parent, scope);
					}
					else {
						throw new NotSupportedException("Unexpected assignment operator " + data.operator.assignment, parent);
					}
				}
				else if(KSType.isValue((__ks_clazz_1 = $binaryOperators[data.operator.kind]))) {
					expression = new __ks_clazz_1(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected binary operator " + data.operator.kind, parent);
				}
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.PolyadicExpression.value) {
				var __ks_clazz_1 = $polyadicOperators[data.operator.kind];
				if(KSType.isValue(__ks_clazz_1)) {
					expression = new __ks_clazz_1(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected polyadic operator " + data.operator.kind, parent);
				}
			}
			else if(KSHelper.valueOf(data.kind) === NodeKind.UnaryExpression.value) {
				var __ks_clazz_1 = $unaryOperators[data.operator.kind];
				if(KSType.isValue(__ks_clazz_1)) {
					expression = new __ks_clazz_1(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected unary operator " + data.operator.kind, parent);
				}
			}
			else {
				throw new NotSupportedException("Unexpected expression/statement " + data.kind, parent);
			}
			return expression;
		};
		d.statement = function(data, parent, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				scope = parent.scope();
			}
			if(Attribute.conditional(data, parent) === true) {
				var clazz = KSType.isValue($statements[data.kind]) ? $statements[data.kind] : $statements.default;
				return new clazz(data, parent, scope);
			}
			else {
				return null;
			}
		};
		return d;
	})();
	var $assignmentOperators = (function() {
		var d = new Dictionary();
		d[AssignmentOperatorKind.Addition] = AssignmentOperatorAddition;
		d[AssignmentOperatorKind.BitwiseAnd] = AssignmentOperatorBitwiseAnd;
		d[AssignmentOperatorKind.BitwiseLeftShift] = AssignmentOperatorBitwiseLeftShift;
		d[AssignmentOperatorKind.BitwiseOr] = AssignmentOperatorBitwiseOr;
		d[AssignmentOperatorKind.BitwiseRightShift] = AssignmentOperatorBitwiseRightShift;
		d[AssignmentOperatorKind.BitwiseXor] = AssignmentOperatorBitwiseXor;
		d[AssignmentOperatorKind.Division] = AssignmentOperatorDivision;
		d[AssignmentOperatorKind.Equality] = AssignmentOperatorEquality;
		d[AssignmentOperatorKind.Existential] = AssignmentOperatorExistential;
		d[AssignmentOperatorKind.Modulo] = AssignmentOperatorModulo;
		d[AssignmentOperatorKind.Multiplication] = AssignmentOperatorMultiplication;
		d[AssignmentOperatorKind.NonExistential] = AssignmentOperatorNonExistential;
		d[AssignmentOperatorKind.NullCoalescing] = AssignmentOperatorNullCoalescing;
		d[AssignmentOperatorKind.Quotient] = AssignmentOperatorQuotient;
		d[AssignmentOperatorKind.Subtraction] = AssignmentOperatorSubtraction;
		return d;
	})();
	var $binaryOperators = (function() {
		var d = new Dictionary();
		d[BinaryOperatorKind.Addition] = BinaryOperatorAddition;
		d[BinaryOperatorKind.And] = BinaryOperatorAnd;
		d[BinaryOperatorKind.BitwiseAnd] = BinaryOperatorBitwiseAnd;
		d[BinaryOperatorKind.BitwiseLeftShift] = BinaryOperatorBitwiseLeftShift;
		d[BinaryOperatorKind.BitwiseOr] = BinaryOperatorBitwiseOr;
		d[BinaryOperatorKind.BitwiseRightShift] = BinaryOperatorBitwiseRightShift;
		d[BinaryOperatorKind.BitwiseXor] = BinaryOperatorBitwiseXor;
		d[BinaryOperatorKind.Division] = BinaryOperatorDivision;
		d[BinaryOperatorKind.Imply] = BinaryOperatorImply;
		d[BinaryOperatorKind.Modulo] = BinaryOperatorModulo;
		d[BinaryOperatorKind.Multiplication] = BinaryOperatorMultiplication;
		d[BinaryOperatorKind.NullCoalescing] = BinaryOperatorNullCoalescing;
		d[BinaryOperatorKind.Or] = BinaryOperatorOr;
		d[BinaryOperatorKind.Quotient] = BinaryOperatorQuotient;
		d[BinaryOperatorKind.Subtraction] = BinaryOperatorSubtraction;
		d[BinaryOperatorKind.TypeCasting] = BinaryOperatorTypeCasting;
		d[BinaryOperatorKind.TypeEquality] = BinaryOperatorTypeEquality;
		d[BinaryOperatorKind.TypeInequality] = BinaryOperatorTypeInequality;
		d[BinaryOperatorKind.Xor] = BinaryOperatorXor;
		return d;
	})();
	var $expressions = (function() {
		var d = new Dictionary();
		d[NodeKind.ArrayBinding] = ArrayBinding;
		d[NodeKind.ArrayComprehension] = function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForFromStatement.value) {
				return new ArrayComprehensionForFrom(data, parent, scope);
			}
			else if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForInStatement.value) {
				return new ArrayComprehensionForIn(data, parent, scope);
			}
			else if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForOfStatement.value) {
				return new ArrayComprehensionForOf(data, parent, scope);
			}
			else if(KSHelper.valueOf(data.loop.kind) === NodeKind.ForRangeStatement.value) {
				return new ArrayComprehensionForRange(data, parent, scope);
			}
			else {
				throw new NotSupportedException("Unexpected kind " + data.loop.kind, parent);
			}
		};
		d[NodeKind.ArrayExpression] = ArrayExpression;
		d[NodeKind.ArrayRange] = ArrayRange;
		d[NodeKind.AwaitExpression] = AwaitExpression;
		d[NodeKind.CallExpression] = CallExpression;
		d[NodeKind.CallMacroExpression] = $callMacroExpression;
		d[NodeKind.ComparisonExpression] = ComparisonExpression;
		d[NodeKind.ConditionalExpression] = ConditionalExpression;
		d[NodeKind.CreateExpression] = CreateExpression;
		d[NodeKind.CurryExpression] = CurryExpression;
		d[NodeKind.EnumExpression] = EnumExpression;
		d[NodeKind.FunctionExpression] = AnonymousFunctionExpression;
		d[NodeKind.Identifier] = IdentifierLiteral;
		d[NodeKind.IfExpression] = IfExpression;
		d[NodeKind.LambdaExpression] = ArrowFunctionExpression;
		d[NodeKind.Literal] = StringLiteral;
		d[NodeKind.MemberExpression] = MemberExpression;
		d[NodeKind.NamedArgument] = NamedArgument;
		d[NodeKind.NumericExpression] = NumberLiteral;
		d[NodeKind.ObjectBinding] = ObjectBinding;
		d[NodeKind.ObjectExpression] = DictionaryExpression;
		d[NodeKind.OmittedExpression] = OmittedExpression;
		d[NodeKind.RegularExpression] = RegularExpression;
		d[NodeKind.SequenceExpression] = SequenceExpression;
		d[NodeKind.TemplateExpression] = TemplateExpression;
		d[NodeKind.ThisExpression] = ThisExpression;
		d[NodeKind.TryExpression] = TryExpression;
		d[NodeKind.UnlessExpression] = UnlessExpression;
		return d;
	})();
	var $statements = (function() {
		var d = new Dictionary();
		d[NodeKind.BreakStatement] = BreakStatement;
		d[NodeKind.CallMacroExpression] = CallMacroStatement;
		d[NodeKind.ClassDeclaration] = ClassDeclaration;
		d[NodeKind.ContinueStatement] = ContinueStatement;
		d[NodeKind.DestroyStatement] = DestroyStatement;
		d[NodeKind.DiscloseDeclaration] = DiscloseDeclaration;
		d[NodeKind.DoUntilStatement] = DoUntilStatement;
		d[NodeKind.DoWhileStatement] = DoWhileStatement;
		d[NodeKind.EnumDeclaration] = EnumDeclaration;
		d[NodeKind.ExportDeclaration] = ExportDeclaration;
		d[NodeKind.ExternDeclaration] = ExternDeclaration;
		d[NodeKind.ExternOrRequireDeclaration] = ExternOrRequireDeclaration;
		d[NodeKind.FallthroughStatement] = FallthroughStatement;
		d[NodeKind.ForFromStatement] = ForFromStatement;
		d[NodeKind.ForInStatement] = ForInStatement;
		d[NodeKind.ForOfStatement] = ForOfStatement;
		d[NodeKind.ForRangeStatement] = ForRangeStatement;
		d[NodeKind.FunctionDeclaration] = FunctionDeclaration;
		d[NodeKind.IfStatement] = IfStatement;
		d[NodeKind.ImplementDeclaration] = ImplementDeclaration;
		d[NodeKind.ImportDeclaration] = ImportDeclaration;
		d[NodeKind.IncludeDeclaration] = IncludeDeclaration;
		d[NodeKind.IncludeAgainDeclaration] = IncludeAgainDeclaration;
		d[NodeKind.MacroDeclaration] = MacroDeclaration;
		d[NodeKind.NamespaceDeclaration] = NamespaceDeclaration;
		d[NodeKind.RequireDeclaration] = RequireDeclaration;
		d[NodeKind.RequireOrExternDeclaration] = RequireOrExternDeclaration;
		d[NodeKind.RequireOrImportDeclaration] = RequireOrImportDeclaration;
		d[NodeKind.ReturnStatement] = ReturnStatement;
		d[NodeKind.StructDeclaration] = StructDeclaration;
		d[NodeKind.SwitchStatement] = SwitchStatement;
		d[NodeKind.ThrowStatement] = ThrowStatement;
		d[NodeKind.TryStatement] = TryStatement;
		d[NodeKind.TypeAliasDeclaration] = TypeAliasDeclaration;
		d[NodeKind.UnlessStatement] = UnlessStatement;
		d[NodeKind.UntilStatement] = UntilStatement;
		d[NodeKind.VariableDeclaration] = VariableDeclaration;
		d[NodeKind.WhileStatement] = WhileStatement;
		d["default"] = ExpressionStatement;
		return d;
	})();
	var $polyadicOperators = (function() {
		var d = new Dictionary();
		d[BinaryOperatorKind.Addition] = PolyadicOperatorAddition;
		d[BinaryOperatorKind.And] = PolyadicOperatorAnd;
		d[BinaryOperatorKind.BitwiseAnd] = PolyadicOperatorBitwiseAnd;
		d[BinaryOperatorKind.BitwiseLeftShift] = PolyadicOperatorBitwiseLeftShift;
		d[BinaryOperatorKind.BitwiseOr] = PolyadicOperatorBitwiseOr;
		d[BinaryOperatorKind.BitwiseRightShift] = PolyadicOperatorBitwiseRightShift;
		d[BinaryOperatorKind.BitwiseXor] = PolyadicOperatorBitwiseXor;
		d[BinaryOperatorKind.Division] = PolyadicOperatorDivision;
		d[BinaryOperatorKind.Modulo] = PolyadicOperatorModulo;
		d[BinaryOperatorKind.Imply] = PolyadicOperatorImply;
		d[BinaryOperatorKind.Multiplication] = PolyadicOperatorMultiplication;
		d[BinaryOperatorKind.NullCoalescing] = PolyadicOperatorNullCoalescing;
		d[BinaryOperatorKind.Or] = PolyadicOperatorOr;
		d[BinaryOperatorKind.Quotient] = PolyadicOperatorQuotient;
		d[BinaryOperatorKind.Subtraction] = PolyadicOperatorSubtraction;
		d[BinaryOperatorKind.Xor] = PolyadicOperatorXor;
		return d;
	})();
	var $unaryOperators = (function() {
		var d = new Dictionary();
		d[UnaryOperatorKind.BitwiseNot] = UnaryOperatorBitwiseNot;
		d[UnaryOperatorKind.DecrementPostfix] = UnaryOperatorDecrementPostfix;
		d[UnaryOperatorKind.DecrementPrefix] = UnaryOperatorDecrementPrefix;
		d[UnaryOperatorKind.Existential] = UnaryOperatorExistential;
		d[UnaryOperatorKind.ForcedTypeCasting] = UnaryOperatorForcedTypeCasting;
		d[UnaryOperatorKind.IncrementPostfix] = UnaryOperatorIncrementPostfix;
		d[UnaryOperatorKind.IncrementPrefix] = UnaryOperatorIncrementPrefix;
		d[UnaryOperatorKind.Negation] = UnaryOperatorNegation;
		d[UnaryOperatorKind.Negative] = UnaryOperatorNegative;
		d[UnaryOperatorKind.NullableTypeCasting] = UnaryOperatorNullableTypeCasting;
		d[UnaryOperatorKind.Spread] = UnaryOperatorSpread;
		return d;
	})();
	function $expandOptions(options) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(options === void 0 || options === null) {
			throw new TypeError("'options' is not nullable");
		}
		var engine = $targets[options.target.name];
		if(!KSType.isValue(engine)) {
			throw new Error("Undefined target '" + options.target.name + "'");
		}
		if(KSType.isFunction(engine)) {
			var opts = engine(options.target.version.split(".").map(function(v) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(v === void 0 || v === null) {
					throw new TypeError("'v' is not nullable");
				}
				return parseInt(v);
			}), $targets);
			if(KSType.isValue(opts)) {
				return __ks_Dictionary._cm_defaults(options, opts);
			}
			else {
				throw new Error("Undefined target's version '" + options.target.version + "'");
			}
		}
		else {
			if(!KSType.isValue(engine[options.target.version])) {
				throw new Error("Undefined target's version '" + options.target.version + "'");
			}
			return __ks_Dictionary._cm_defaults(options, engine[options.target.version]);
		}
	}
	var $targets = (function() {
		var d = new Dictionary();
		d.ecma = (function() {
			var d = new Dictionary();
			d["5"] = (function() {
				var d = new Dictionary();
				d.format = (function() {
					var d = new Dictionary();
					d.classes = "es5";
					d.destructuring = "es5";
					d.functions = "es5";
					d.parameters = "es5";
					d.spreads = "es5";
					d.variables = "es5";
					return d;
				})();
				return d;
			})();
			d["6"] = (function() {
				var d = new Dictionary();
				d.format = (function() {
					var d = new Dictionary();
					d.classes = "es6";
					d.destructuring = "es6";
					d.functions = "es6";
					d.parameters = "es6";
					d.spreads = "es6";
					d.variables = "es6";
					return d;
				})();
				return d;
			})();
			return d;
		})();
		d.v8 = function(version, targets) {
			if(arguments.length < 2) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(version === void 0 || version === null) {
				throw new TypeError("'version' is not nullable");
			}
			if(targets === void 0 || targets === null) {
				throw new TypeError("'targets' is not nullable");
			}
			if(KSOperator.lt(version[0], 5)) {
				return targets.ecma["5"];
			}
			else {
				return targets.ecma["6"];
			}
		};
		return d;
	})();
	var Compiler = KSHelper.class({
		$name: "Compiler",
		$static: {
			__ks_sttc_registerTarget_0: function(target, fn) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				else if(!KSType.isString(target)) {
					throw new TypeError("'target' is not of type 'String'");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				else if(!KSType.isFunction(fn)) {
					throw new TypeError("'fn' is not of type 'Function'");
				}
				$targets[target] = fn;
			},
			__ks_sttc_registerTarget_1: function(target, options) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				else if(!KSType.isString(target)) {
					throw new TypeError("'target' is not of type 'String'");
				}
				if(options === void 0 || options === null) {
					throw new TypeError("'options' is not nullable");
				}
				else if(!KSType.isDictionary(options)) {
					throw new TypeError("'options' is not of type 'Dictionary'");
				}
				var __ks_0;
				if(KSType.isValue(__ks_0 = $targetRegex.exec(target)) ? (target = __ks_0, false) : true) {
					throw new Error("Invalid target syntax: " + target);
				}
				if(!KSType.isValue($targets[target[1]])) {
					$targets[target[1]] = new Dictionary();
				}
				$targets[target[1]][target[2]] = options;
			},
			registerTarget: function() {
				if(arguments.length === 2) {
					if(KSType.isFunction(arguments[1])) {
						return Compiler.__ks_sttc_registerTarget_0.apply(this, arguments);
					}
					else {
						return Compiler.__ks_sttc_registerTarget_1.apply(this, arguments);
					}
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_registerTargets_0: function(targets) {
				if(arguments.length < 1) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				for(var name in targets) {
					var data = targets[name];
					if(KSType.isString(data)) {
						Compiler.registerTargetAlias(name, data);
					}
					else {
						Compiler.registerTarget(name, data);
					}
				}
			},
			registerTargets: function() {
				if(arguments.length === 1) {
					return Compiler.__ks_sttc_registerTargets_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			},
			__ks_sttc_registerTargetAlias_0: function(target, alias) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				else if(!KSType.isString(target)) {
					throw new TypeError("'target' is not of type 'String'");
				}
				if(alias === void 0 || alias === null) {
					throw new TypeError("'alias' is not nullable");
				}
				else if(!KSType.isString(alias)) {
					throw new TypeError("'alias' is not of type 'String'");
				}
				var __ks_0;
				if(KSType.isValue(__ks_0 = $targetRegex.exec(alias)) ? (alias = __ks_0, false) : true) {
					if(!KSType.isValue($targets[alias]) || !KSType.isFunction($targets[alias])) {
						throw new Error("Invalid target syntax: " + alias);
					}
					$targets[target] = $targets[alias];
				}
				else {
					if(KSType.isValue(__ks_0 = $targetRegex.exec(target)) ? (target = __ks_0, false) : true) {
						throw new Error("Invalid target syntax: " + target);
					}
					if(!KSType.isValue($targets[alias[1]])) {
						throw new Error("Undefined target '" + alias[1] + "'");
					}
					else if(!KSType.isValue($targets[alias[1]][alias[2]])) {
						throw new Error("Undefined target's version '" + alias[2] + "'");
					}
					if(!KSType.isValue($targets[target[1]])) {
						$targets[target[1]] = new Dictionary();
					}
					$targets[target[1]][target[2]] = $targets[alias[1]][alias[2]];
				}
			},
			registerTargetAlias: function() {
				if(arguments.length === 2) {
					return Compiler.__ks_sttc_registerTargetAlias_0.apply(this, arguments);
				}
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			else if(!KSType.isString(file)) {
				throw new TypeError("'file' is not of type 'String'");
			}
			var __ks_i = 0;
			var __ks__;
			var options = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var hashes;
			if(arguments.length > ++__ks_i && (hashes = arguments[__ks_i]) !== void 0 && hashes !== null) {
				if(!KSType.isDictionary(hashes)) {
					if(arguments.length - __ks_i < 2) {
						hashes = new Dictionary();
						--__ks_i;
					}
					else {
						throw new TypeError("'hashes' is not of type 'Dictionary'");
					}
				}
			}
			else {
				hashes = new Dictionary();
			}
			var hierarchy;
			if(arguments.length > ++__ks_i && (hierarchy = arguments[__ks_i]) !== void 0 && hierarchy !== null) {
				if(!KSType.isArray(hierarchy)) {
					throw new TypeError("'hierarchy' is not of type 'Array'");
				}
			}
			else {
				hierarchy = [this._file];
			}
			this._file = file;
			this._hashes = hashes;
			this._hierarchy = hierarchy;
			this._options = __ks_Dictionary._cm_merge((function() {
				var d = new Dictionary();
				d.target = "ecma-v6";
				d.register = true;
				d.header = true;
				d.error = (function() {
					var d = new Dictionary();
					d.level = "fatal";
					d.ignore = [];
					d.raise = [];
					return d;
				})();
				d.parse = (function() {
					var d = new Dictionary();
					d.parameters = "kaoscript";
					return d;
				})();
				d.format = new Dictionary();
				d.rules = (function() {
					var d = new Dictionary();
					d.noParamAssert = false;
					d.noParamTypeAssert = false;
					d.noUndefined = false;
					d.ignoreMisfit = false;
					return d;
				})();
				d.runtime = (function() {
					var d = new Dictionary();
					d.dictionary = (function() {
						var d = new Dictionary();
						d.alias = "Dictionary";
						d.member = "Dictionary";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.helper = (function() {
						var d = new Dictionary();
						d.alias = "Helper";
						d.member = "Helper";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.initFlag = (function() {
						var d = new Dictionary();
						d.alias = "initFlag";
						d.member = "initFlag";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.operator = (function() {
						var d = new Dictionary();
						d.alias = "Operator";
						d.member = "Operator";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					d.type = (function() {
						var d = new Dictionary();
						d.alias = "Type";
						d.member = "Type";
						d.package = "@kaoscript/runtime";
						return d;
					})();
					return d;
				})();
				return d;
			})(), options);
			if(KSType.isString(this._options.target)) {
				var target, __ks_0;
				if(KSType.isValue(__ks_0 = $targetRegex.exec(this._options.target)) ? (target = __ks_0, false) : true) {
					throw new Error("Invalid target syntax: " + this._options.target);
				}
				this._options.target = (function() {
					var d = new Dictionary();
					d.name = target[1];
					d.version = target[2];
					return d;
				})();
			}
			else if(!(KSType.isDictionary(this._options.target) || KSType.isObject(this._options.target)) || !($targetRegex.test("" + this._options.target.name + "-v" + this._options.target.version) === true)) {
				throw new Error("Undefined target");
			}
			this._options = $expandOptions(this._options);
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 4) {
				Compiler.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("Wrong number of arguments");
			}
		},
		__ks_func_compile_0: function(data) {
			if(data === void 0) {
				data = null;
			}
			this._module = new Module(KSType.isValue(data) ? data : fs.readFile(this._file), this, this._file);
			this._module.compile();
			this._fragments = this._module.toFragments();
			return this;
		},
		compile: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Compiler.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_createServant_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return new Compiler(file, __ks_Dictionary._cm_defaults(this._options, (function() {
				var d = new Dictionary();
				d.register = false;
				return d;
			})()), this._hashes, [].concat(this._hierarchy, [file]));
		},
		createServant: function() {
			if(arguments.length === 1) {
				return Compiler.prototype.__ks_func_createServant_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_isInHierarchy_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return __ks_Array._im_contains(this._hierarchy, file);
		},
		isInHierarchy: function() {
			if(arguments.length === 1) {
				return Compiler.prototype.__ks_func_isInHierarchy_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_readFile_0: function() {
			return fs.readFile(this._file);
		},
		readFile: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_readFile_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_sha256_0: function(file, data) {
			if(arguments.length < 1) {
				throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(data === void 0) {
				data = null;
			}
			return KSType.isValue(this._hashes[file]) ? this._hashes[file] : this._hashes[file] = fs.sha256(KSType.isValue(data) ? data : fs.readFile(file));
		},
		sha256: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Compiler.prototype.__ks_func_sha256_0.apply(this, arguments);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._module.toHashes();
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			return this._module.toMetadata();
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toSource_0: function() {
			var source = "";
			for(var __ks_0 = 0, __ks_1 = this._fragments.length, fragment; __ks_0 < __ks_1; ++__ks_0) {
				fragment = this._fragments[__ks_0];
				source = KSHelper.concatString(source, fragment.code);
			}
			if(source.length !== 0) {
				return source.substr(0, KSOperator.subtraction(source.length, 1));
			}
			else {
				return source;
			}
		},
		toSource: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSource_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_toSourceMap_0: function() {
			return this._module.toSourceMap();
		},
		toSourceMap: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSourceMap_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_writeFiles_0: function() {
			fs.mkdir(path.dirname(this._file));
			fs.writeFile(getBinaryPath(this._file, this._options.target), this.toSource());
			if(!this._module._binary) {
				var metadata = this.toMetadata();
				fs.writeFile(getMetadataPath(this._file, this._options.target), JSON.stringify(metadata, function(key, value) {
					if(arguments.length < 2) {
						throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(key === void 0 || key === null) {
						throw new TypeError("'key' is not nullable");
					}
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return ((key === "max") && (KSOperator.eq(value, Infinity))) ? "Infinity" : value;
				}));
			}
			fs.writeFile(getHashPath(this._file, this._options.target), JSON.stringify(this._module.toHashes()));
		},
		writeFiles: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeFiles_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_writeMetadata_0: function() {
			if(!KSType.isString(this._options.output)) {
				throw new Error("Undefined option: output");
			}
			var metadata = this.toMetadata();
			var filename = KSHelper.concatString(path.join(this._options.output, path.basename(this._file)).slice(0, -3), ".json");
			fs.writeFile(filename, JSON.stringify(metadata, function(key, value) {
				if(arguments.length < 2) {
					throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(key === void 0 || key === null) {
					throw new TypeError("'key' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				return ((key === "max") && (KSOperator.eq(value, Infinity))) ? "Infinity" : value;
			}));
			return this;
		},
		writeMetadata: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeMetadata_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		},
		__ks_func_writeOutput_0: function() {
			if(!KSType.isString(this._options.output)) {
				throw new Error("Undefined option: output");
			}
			fs.mkdir(this._options.output);
			var filename = KSHelper.concatString(path.join(this._options.output, path.basename(this._file)).slice(0, -3), ".js");
			fs.writeFile(filename, this.toSource());
			return this;
		},
		writeOutput: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeOutput_0.apply(this);
			}
			throw new SyntaxError("Wrong number of arguments");
		}
	});
	function compileFile(file, options) {
		if(arguments.length < 1) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(options === void 0) {
			options = null;
		}
		var compiler = new Compiler(file, options);
		return compiler.compile().toSource();
	}
	function getBinaryPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target.name, target.version, $extensions.binary);
	}
	function getHashPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target.name, target.version, $extensions.hash);
	}
	function getMetadataPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target.name, target.version, $extensions.metadata);
	}
	function isUpToDate(file, target, source) {
		if(arguments.length < 3) {
			throw new SyntaxError("Wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		if(source === void 0 || source === null) {
			throw new TypeError("'source' is not nullable");
		}
		var hashes;
		try {
			hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
		}
		catch(__ks_0) {
			return false;
		}
		var root = path.dirname(file);
		for(var name in hashes) {
			var hash = hashes[name];
			if(name === ".") {
				if(fs.sha256(source) !== hash) {
					return null;
				}
			}
			else {
				if(fs.sha256(fs.readFile(path.join(root, name))) !== hash) {
					return null;
				}
			}
		}
		return true;
	}
	return {
		Exception: Exception,
		IOException: IOException,
		NotImplementedException: NotImplementedException,
		NotSupportedException: NotSupportedException,
		ReferenceException: ReferenceException,
		SyntaxException: SyntaxException,
		TypeException: TypeException,
		Module: Module,
		Compiler: Compiler,
		compileFile: compileFile,
		getBinaryPath: getBinaryPath,
		getHashPath: getHashPath,
		getMetadataPath: getMetadataPath,
		isUpToDate: isUpToDate,
		extensions: $extensions,
		AssignmentOperatorKind: AssignmentOperatorKind,
		BinaryOperatorKind: BinaryOperatorKind,
		MacroElementKind: MacroElementKind,
		ModifierKind: ModifierKind,
		NodeKind: NodeKind,
		ReificationKind: ReificationKind,
		ScopeKind: ScopeKind,
		UnaryOperatorKind: UnaryOperatorKind,
		FragmentBuilder: FragmentBuilder
	};
};